module api{
///////////////////////////////////////////////////////////////////////////////
// Constructors:ChannelLocation 
// ChannelLocation <--
// + TLchannelLocationEmpty
// + TLchannelLocation
//
// Constructors:Type:ChannelLocation 
struct ChannelLocation {
	0 optional int constructor; 
	1 require  ChannelLocation_Data data ;
};
// Constructors:Type:Data:ChannelLocation 
struct ChannelLocation_Data {
	0	optional GeoPoint geo_point; 
	1	optional string address; 
};
// Constructors:Predicate:channelLocationEmpty 
struct TLchannelLocationEmpty {
	0	require ChannelLocation_Data data ;
};
// Constructors:Predicate:channelLocation 
struct TLchannelLocation {
	0	require ChannelLocation_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PostAddress 
// PostAddress <--
// + TLpostAddress
//
// Constructors:Type:PostAddress 
struct PostAddress {
	0 optional int constructor; 
	1 require  PostAddress_Data data ;
};
// Constructors:Type:Data:PostAddress 
struct PostAddress_Data {
	0	optional string street_line1; 
	1	optional string street_line2; 
	2	optional string city; 
	3	optional string state; 
	4	optional string country_iso2; 
	5	optional string post_code; 
};
// Constructors:Predicate:postAddress 
struct TLpostAddress {
	0	require PostAddress_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_AffectedHistory 
// messages_AffectedHistory <--
// + TLmessages_affectedHistory
//
// Constructors:Type:messages_AffectedHistory 
struct messages_AffectedHistory {
	0 optional int constructor; 
	1 require  messages_AffectedHistory_Data data ;
};
// Constructors:Type:Data:messages_AffectedHistory 
struct messages_AffectedHistory_Data {
	0	optional int pts; 
	1	optional int pts_count; 
	2	optional int offset; 
};
// Constructors:Predicate:messages_affectedHistory 
struct TLmessages_affectedHistory {
	0	require messages_AffectedHistory_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputThemeSettings 
// InputThemeSettings <--
// + TLinputThemeSettings
//
// Constructors:Type:InputThemeSettings 
struct InputThemeSettings {
	0 optional int constructor; 
	1 require  InputThemeSettings_Data data ;
};
// Constructors:Type:Data:InputThemeSettings 
struct InputThemeSettings_Data {
	0	optional BaseTheme base_theme; 
	1	optional int accent_color; 
	2	optional int message_top_color; 
	3	optional int message_bottom_color; 
	4	optional InputWallPaper wallpaper; 
	5	optional WallPaperSettings wallpaper_settings; 
};
// Constructors:Predicate:inputThemeSettings 
struct TLinputThemeSettings {
	0	require InputThemeSettings_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ChannelAdminLogEvent 
// ChannelAdminLogEvent <--
// + TLchannelAdminLogEvent
//
// Constructors:Type:ChannelAdminLogEvent 
struct ChannelAdminLogEvent {
	0 optional int constructor; 
	1 require  ChannelAdminLogEvent_Data data ;
};
// Constructors:Type:Data:ChannelAdminLogEvent 
struct ChannelAdminLogEvent_Data {
	0	optional long id; 
	1	optional int date; 
	2	optional int user_id; 
	3	optional ChannelAdminLogEventAction action; 
};
// Constructors:Predicate:channelAdminLogEvent 
struct TLchannelAdminLogEvent {
	0	require ChannelAdminLogEvent_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:account_Password 
// account_Password <--
// + TLaccount_password
//
// Constructors:Type:account_Password 
struct account_Password {
	0 optional int constructor; 
	1 require  account_Password_Data data ;
};
// Constructors:Type:Data:account_Password 
struct account_Password_Data {
	0	optional bool has_recovery; 
	1	optional bool has_secure_values; 
	2	optional bool has_password; 
	3	optional PasswordKdfAlgo current_algo; 
	4	optional vector<unsigned byte> srp_B; 
	5	optional long srp_id; 
	6	optional string hint; 
	7	optional string email_unconfirmed_pattern; 
	8	optional PasswordKdfAlgo new_algo; 
	9	optional SecurePasswordKdfAlgo new_secure_algo; 
	10	optional vector<unsigned byte> secure_random; 
};
// Constructors:Predicate:account_password 
struct TLaccount_password {
	0	require account_Password_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ImportedContact 
// ImportedContact <--
// + TLimportedContact
//
// Constructors:Type:ImportedContact 
struct ImportedContact {
	0 optional int constructor; 
	1 require  ImportedContact_Data data ;
};
// Constructors:Type:Data:ImportedContact 
struct ImportedContact_Data {
	0	optional int user_id; 
	1	optional long client_id; 
};
// Constructors:Predicate:importedContact 
struct TLimportedContact {
	0	require ImportedContact_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:UserStatus 
// UserStatus <--
// + TLuserStatusEmpty
// + TLuserStatusOnline
// + TLuserStatusOffline
// + TLuserStatusRecently
// + TLuserStatusLastWeek
// + TLuserStatusLastMonth
//
// Constructors:Type:UserStatus 
struct UserStatus {
	0 optional int constructor; 
	1 require  UserStatus_Data data ;
};
// Constructors:Type:Data:UserStatus 
struct UserStatus_Data {
	0	optional int expires; 
	1	optional int was_online; 
};
// Constructors:Predicate:userStatusEmpty 
struct TLuserStatusEmpty {
	0	require UserStatus_Data data ;
};
// Constructors:Predicate:userStatusOnline 
struct TLuserStatusOnline {
	0	require UserStatus_Data data ;
};
// Constructors:Predicate:userStatusOffline 
struct TLuserStatusOffline {
	0	require UserStatus_Data data ;
};
// Constructors:Predicate:userStatusRecently 
struct TLuserStatusRecently {
	0	require UserStatus_Data data ;
};
// Constructors:Predicate:userStatusLastWeek 
struct TLuserStatusLastWeek {
	0	require UserStatus_Data data ;
};
// Constructors:Predicate:userStatusLastMonth 
struct TLuserStatusLastMonth {
	0	require UserStatus_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputPaymentCredentials 
// InputPaymentCredentials <--
// + TLinputPaymentCredentialsSaved
// + TLinputPaymentCredentials
// + TLinputPaymentCredentialsApplePay
// + TLinputPaymentCredentialsAndroidPay
//
// Constructors:Type:InputPaymentCredentials 
struct InputPaymentCredentials {
	0 optional int constructor; 
	1 require  InputPaymentCredentials_Data data ;
};
// Constructors:Type:Data:InputPaymentCredentials 
struct InputPaymentCredentials_Data {
	0	optional string id; 
	1	optional vector<unsigned byte> tmp_password; 
	2	optional bool save; 
	3	optional DataJSON data; 
	4	optional DataJSON payment_data; 
	5	optional DataJSON payment_token; 
	6	optional string google_transaction_id; 
};
// Constructors:Predicate:inputPaymentCredentialsSaved 
struct TLinputPaymentCredentialsSaved {
	0	require InputPaymentCredentials_Data data ;
};
// Constructors:Predicate:inputPaymentCredentials 
struct TLinputPaymentCredentials {
	0	require InputPaymentCredentials_Data data ;
};
// Constructors:Predicate:inputPaymentCredentialsApplePay 
struct TLinputPaymentCredentialsApplePay {
	0	require InputPaymentCredentials_Data data ;
};
// Constructors:Predicate:inputPaymentCredentialsAndroidPay 
struct TLinputPaymentCredentialsAndroidPay {
	0	require InputPaymentCredentials_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PeerBlocked 
// PeerBlocked <--
// + TLpeerBlocked
//
// Constructors:Type:PeerBlocked 
struct PeerBlocked {
	0 optional int constructor; 
	1 require  PeerBlocked_Data data ;
};
// Constructors:Type:Data:PeerBlocked 
struct PeerBlocked_Data {
	0	optional Peer peer_id; 
	1	optional int date; 
};
// Constructors:Predicate:peerBlocked 
struct TLpeerBlocked {
	0	require PeerBlocked_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:StatsGroupTopPoster 
// StatsGroupTopPoster <--
// + TLstatsGroupTopPoster
//
// Constructors:Type:StatsGroupTopPoster 
struct StatsGroupTopPoster {
	0 optional int constructor; 
	1 require  StatsGroupTopPoster_Data data ;
};
// Constructors:Type:Data:StatsGroupTopPoster 
struct StatsGroupTopPoster_Data {
	0	optional int user_id; 
	1	optional int messages; 
	2	optional int avg_chars; 
};
// Constructors:Predicate:statsGroupTopPoster 
struct TLstatsGroupTopPoster {
	0	require StatsGroupTopPoster_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:updates_Difference 
// updates_Difference <--
// + TLupdates_differenceEmpty
// + TLupdates_difference
// + TLupdates_differenceSlice
// + TLupdates_differenceTooLong
//
// Constructors:Type:updates_Difference 
struct updates_Difference {
	0 optional int constructor; 
	1 require  updates_Difference_Data data ;
};
// Constructors:Type:Data:updates_Difference 
struct updates_Difference_Data {
	0	optional int date; 
	1	optional int seq; 
	2	optional vector<Message> new_messages; 
	3	optional vector<EncryptedMessage> new_encrypted_messages; 
	4	optional vector<Update> other_updates; 
	5	optional vector<Chat> chats; 
	6	optional vector<User> users; 
	7	optional updates_State state; 
	8	optional updates_State intermediate_state; 
	9	optional int pts; 
};
// Constructors:Predicate:updates_differenceEmpty 
struct TLupdates_differenceEmpty {
	0	require updates_Difference_Data data ;
};
// Constructors:Predicate:updates_difference 
struct TLupdates_difference {
	0	require updates_Difference_Data data ;
};
// Constructors:Predicate:updates_differenceSlice 
struct TLupdates_differenceSlice {
	0	require updates_Difference_Data data ;
};
// Constructors:Predicate:updates_differenceTooLong 
struct TLupdates_differenceTooLong {
	0	require updates_Difference_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageEntity 
// MessageEntity <--
// + TLmessageEntityUnknown
// + TLmessageEntityMention
// + TLmessageEntityHashtag
// + TLmessageEntityBotCommand
// + TLmessageEntityUrl
// + TLmessageEntityEmail
// + TLmessageEntityBold
// + TLmessageEntityItalic
// + TLmessageEntityCode
// + TLmessageEntityPre
// + TLmessageEntityTextUrl
// + TLmessageEntityMentionName
// + TLinputMessageEntityMentionName
// + TLmessageEntityPhone
// + TLmessageEntityCashtag
// + TLmessageEntityUnderline
// + TLmessageEntityStrike
// + TLmessageEntityBlockquote
// + TLmessageEntityBankCard
//
// Constructors:Type:MessageEntity 
struct MessageEntity {
	0 optional int constructor; 
	1 require  MessageEntity_Data data ;
};
// Constructors:Type:Data:MessageEntity 
struct MessageEntity_Data {
	0	optional int offset; 
	1	optional int length; 
	2	optional string language; 
	3	optional string url; 
	4	optional int user_id; 
	5	optional InputUser user_id_6; 
};
// Constructors:Predicate:messageEntityUnknown 
struct TLmessageEntityUnknown {
	0	require MessageEntity_Data data ;
};
// Constructors:Predicate:messageEntityMention 
struct TLmessageEntityMention {
	0	require MessageEntity_Data data ;
};
// Constructors:Predicate:messageEntityHashtag 
struct TLmessageEntityHashtag {
	0	require MessageEntity_Data data ;
};
// Constructors:Predicate:messageEntityBotCommand 
struct TLmessageEntityBotCommand {
	0	require MessageEntity_Data data ;
};
// Constructors:Predicate:messageEntityUrl 
struct TLmessageEntityUrl {
	0	require MessageEntity_Data data ;
};
// Constructors:Predicate:messageEntityEmail 
struct TLmessageEntityEmail {
	0	require MessageEntity_Data data ;
};
// Constructors:Predicate:messageEntityBold 
struct TLmessageEntityBold {
	0	require MessageEntity_Data data ;
};
// Constructors:Predicate:messageEntityItalic 
struct TLmessageEntityItalic {
	0	require MessageEntity_Data data ;
};
// Constructors:Predicate:messageEntityCode 
struct TLmessageEntityCode {
	0	require MessageEntity_Data data ;
};
// Constructors:Predicate:messageEntityPre 
struct TLmessageEntityPre {
	0	require MessageEntity_Data data ;
};
// Constructors:Predicate:messageEntityTextUrl 
struct TLmessageEntityTextUrl {
	0	require MessageEntity_Data data ;
};
// Constructors:Predicate:messageEntityMentionName 
struct TLmessageEntityMentionName {
	0	require MessageEntity_Data data ;
};
// Constructors:Predicate:inputMessageEntityMentionName 
struct TLinputMessageEntityMentionName {
	0	require MessageEntity_Data data ;
};
// Constructors:Predicate:messageEntityPhone 
struct TLmessageEntityPhone {
	0	require MessageEntity_Data data ;
};
// Constructors:Predicate:messageEntityCashtag 
struct TLmessageEntityCashtag {
	0	require MessageEntity_Data data ;
};
// Constructors:Predicate:messageEntityUnderline 
struct TLmessageEntityUnderline {
	0	require MessageEntity_Data data ;
};
// Constructors:Predicate:messageEntityStrike 
struct TLmessageEntityStrike {
	0	require MessageEntity_Data data ;
};
// Constructors:Predicate:messageEntityBlockquote 
struct TLmessageEntityBlockquote {
	0	require MessageEntity_Data data ;
};
// Constructors:Predicate:messageEntityBankCard 
struct TLmessageEntityBankCard {
	0	require MessageEntity_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PollResults 
// PollResults <--
// + TLpollResults
//
// Constructors:Type:PollResults 
struct PollResults {
	0 optional int constructor; 
	1 require  PollResults_Data data ;
};
// Constructors:Type:Data:PollResults 
struct PollResults_Data {
	0	optional bool min; 
	1	optional vector<PollAnswerVoters> results; 
	2	optional int total_voters; 
	3	optional vector<int> recent_voters; 
	4	optional string solution; 
	5	optional vector<MessageEntity> solution_entities; 
};
// Constructors:Predicate:pollResults 
struct TLpollResults {
	0	require PollResults_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:NotifyPeer 
// NotifyPeer <--
// + TLnotifyPeer
// + TLnotifyUsers
// + TLnotifyChats
// + TLnotifyBroadcasts
//
// Constructors:Type:NotifyPeer 
struct NotifyPeer {
	0 optional int constructor; 
	1 require  NotifyPeer_Data data ;
};
// Constructors:Type:Data:NotifyPeer 
struct NotifyPeer_Data {
	0	optional Peer peer; 
};
// Constructors:Predicate:notifyPeer 
struct TLnotifyPeer {
	0	require NotifyPeer_Data data ;
};
// Constructors:Predicate:notifyUsers 
struct TLnotifyUsers {
	0	require NotifyPeer_Data data ;
};
// Constructors:Predicate:notifyChats 
struct TLnotifyChats {
	0	require NotifyPeer_Data data ;
};
// Constructors:Predicate:notifyBroadcasts 
struct TLnotifyBroadcasts {
	0	require NotifyPeer_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputStickerSet 
// InputStickerSet <--
// + TLinputStickerSetEmpty
// + TLinputStickerSetID
// + TLinputStickerSetShortName
// + TLinputStickerSetAnimatedEmoji
// + TLinputStickerSetDice
//
// Constructors:Type:InputStickerSet 
struct InputStickerSet {
	0 optional int constructor; 
	1 require  InputStickerSet_Data data ;
};
// Constructors:Type:Data:InputStickerSet 
struct InputStickerSet_Data {
	0	optional long id; 
	1	optional long access_hash; 
	2	optional string short_name; 
	3	optional string emoticon; 
};
// Constructors:Predicate:inputStickerSetEmpty 
struct TLinputStickerSetEmpty {
	0	require InputStickerSet_Data data ;
};
// Constructors:Predicate:inputStickerSetID 
struct TLinputStickerSetID {
	0	require InputStickerSet_Data data ;
};
// Constructors:Predicate:inputStickerSetShortName 
struct TLinputStickerSetShortName {
	0	require InputStickerSet_Data data ;
};
// Constructors:Predicate:inputStickerSetAnimatedEmoji 
struct TLinputStickerSetAnimatedEmoji {
	0	require InputStickerSet_Data data ;
};
// Constructors:Predicate:inputStickerSetDice 
struct TLinputStickerSetDice {
	0	require InputStickerSet_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:account_AuthorizationForm 
// account_AuthorizationForm <--
// + TLaccount_authorizationForm
//
// Constructors:Type:account_AuthorizationForm 
struct account_AuthorizationForm {
	0 optional int constructor; 
	1 require  account_AuthorizationForm_Data data ;
};
// Constructors:Type:Data:account_AuthorizationForm 
struct account_AuthorizationForm_Data {
	0	optional vector<SecureRequiredType> required_types; 
	1	optional vector<SecureValue> values; 
	2	optional vector<SecureValueError> errors; 
	3	optional vector<User> users; 
	4	optional string privacy_policy_url; 
};
// Constructors:Predicate:account_authorizationForm 
struct TLaccount_authorizationForm {
	0	require account_AuthorizationForm_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Photo 
// Photo <--
// + TLphotoEmpty
// + TLphoto
//
// Constructors:Type:Photo 
struct Photo {
	0 optional int constructor; 
	1 require  Photo_Data data ;
};
// Constructors:Type:Data:Photo 
struct Photo_Data {
	0	optional long id; 
	1	optional bool has_stickers; 
	2	optional long access_hash; 
	3	optional vector<unsigned byte> file_reference; 
	4	optional int date; 
	5	optional vector<PhotoSize> sizes; 
	6	optional vector<VideoSize> video_sizes; 
	7	optional int dc_id; 
};
// Constructors:Predicate:photoEmpty 
struct TLphotoEmpty {
	0	require Photo_Data data ;
};
// Constructors:Predicate:photo 
struct TLphoto {
	0	require Photo_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:help_PassportConfig 
// help_PassportConfig <--
// + TLhelp_passportConfigNotModified
// + TLhelp_passportConfig
//
// Constructors:Type:help_PassportConfig 
struct help_PassportConfig {
	0 optional int constructor; 
	1 require  help_PassportConfig_Data data ;
};
// Constructors:Type:Data:help_PassportConfig 
struct help_PassportConfig_Data {
	0	optional int hash; 
	1	optional DataJSON countries_langs; 
};
// Constructors:Predicate:help_passportConfigNotModified 
struct TLhelp_passportConfigNotModified {
	0	require help_PassportConfig_Data data ;
};
// Constructors:Predicate:help_passportConfig 
struct TLhelp_passportConfig {
	0	require help_PassportConfig_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:upload_WebFile 
// upload_WebFile <--
// + TLupload_webFile
//
// Constructors:Type:upload_WebFile 
struct upload_WebFile {
	0 optional int constructor; 
	1 require  upload_WebFile_Data data ;
};
// Constructors:Type:Data:upload_WebFile 
struct upload_WebFile_Data {
	0	optional int size; 
	1	optional string mime_type; 
	2	optional storage_FileType file_type; 
	3	optional int mtime; 
	4	optional vector<unsigned byte> bytes; 
};
// Constructors:Predicate:upload_webFile 
struct TLupload_webFile {
	0	require upload_WebFile_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:contacts_Found 
// contacts_Found <--
// + TLcontacts_found
//
// Constructors:Type:contacts_Found 
struct contacts_Found {
	0 optional int constructor; 
	1 require  contacts_Found_Data data ;
};
// Constructors:Type:Data:contacts_Found 
struct contacts_Found_Data {
	0	optional vector<Peer> my_results; 
	1	optional vector<Peer> results; 
	2	optional vector<Chat> chats; 
	3	optional vector<User> users; 
};
// Constructors:Predicate:contacts_found 
struct TLcontacts_found {
	0	require contacts_Found_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:SecureValue 
// SecureValue <--
// + TLsecureValue
//
// Constructors:Type:SecureValue 
struct SecureValue {
	0 optional int constructor; 
	1 require  SecureValue_Data data ;
};
// Constructors:Type:Data:SecureValue 
struct SecureValue_Data {
	0	optional SecureValueType type; 
	1	optional SecureData data; 
	2	optional SecureFile front_side; 
	3	optional SecureFile reverse_side; 
	4	optional SecureFile selfie; 
	5	optional vector<SecureFile> translation; 
	6	optional vector<SecureFile> files; 
	7	optional SecurePlainData plain_data; 
	8	optional vector<unsigned byte> hash; 
};
// Constructors:Predicate:secureValue 
struct TLsecureValue {
	0	require SecureValue_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:LangPackString 
// LangPackString <--
// + TLlangPackString
// + TLlangPackStringPluralized
// + TLlangPackStringDeleted
//
// Constructors:Type:LangPackString 
struct LangPackString {
	0 optional int constructor; 
	1 require  LangPackString_Data data ;
};
// Constructors:Type:Data:LangPackString 
struct LangPackString_Data {
	0	optional string key_key; 
	1	optional string value; 
	2	optional string zero_value; 
	3	optional string one_value; 
	4	optional string two_value; 
	5	optional string few_value; 
	6	optional string many_value; 
	7	optional string other_value; 
};
// Constructors:Predicate:langPackString 
struct TLlangPackString {
	0	require LangPackString_Data data ;
};
// Constructors:Predicate:langPackStringPluralized 
struct TLlangPackStringPluralized {
	0	require LangPackString_Data data ;
};
// Constructors:Predicate:langPackStringDeleted 
struct TLlangPackStringDeleted {
	0	require LangPackString_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:help_Support 
// help_Support <--
// + TLhelp_support
//
// Constructors:Type:help_Support 
struct help_Support {
	0 optional int constructor; 
	1 require  help_Support_Data data ;
};
// Constructors:Type:Data:help_Support 
struct help_Support_Data {
	0	optional string phone_number; 
	1	optional User user; 
};
// Constructors:Predicate:help_support 
struct TLhelp_support {
	0	require help_Support_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:MaskCoords 
// MaskCoords <--
// + TLmaskCoords
//
// Constructors:Type:MaskCoords 
struct MaskCoords {
	0 optional int constructor; 
	1 require  MaskCoords_Data data ;
};
// Constructors:Type:Data:MaskCoords 
struct MaskCoords_Data {
	0	optional int n; 
	1	optional double x; 
	2	optional double y; 
	3	optional double zoom; 
};
// Constructors:Predicate:maskCoords 
struct TLmaskCoords {
	0	require MaskCoords_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:LabeledPrice 
// LabeledPrice <--
// + TLlabeledPrice
//
// Constructors:Type:LabeledPrice 
struct LabeledPrice {
	0 optional int constructor; 
	1 require  LabeledPrice_Data data ;
};
// Constructors:Type:Data:LabeledPrice 
struct LabeledPrice_Data {
	0	optional string label; 
	1	optional long amount; 
};
// Constructors:Predicate:labeledPrice 
struct TLlabeledPrice {
	0	require LabeledPrice_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:help_AppUpdate 
// help_AppUpdate <--
// + TLhelp_appUpdate
// + TLhelp_noAppUpdate
//
// Constructors:Type:help_AppUpdate 
struct help_AppUpdate {
	0 optional int constructor; 
	1 require  help_AppUpdate_Data data ;
};
// Constructors:Type:Data:help_AppUpdate 
struct help_AppUpdate_Data {
	0	optional bool can_not_skip; 
	1	optional int id; 
	2	optional string version; 
	3	optional string text; 
	4	optional vector<MessageEntity> entities; 
	5	optional Document document; 
	6	optional string url; 
};
// Constructors:Predicate:help_appUpdate 
struct TLhelp_appUpdate {
	0	require help_AppUpdate_Data data ;
};
// Constructors:Predicate:help_noAppUpdate 
struct TLhelp_noAppUpdate {
	0	require help_AppUpdate_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:payments_PaymentResult 
// payments_PaymentResult <--
// + TLpayments_paymentResult
// + TLpayments_paymentVerificationNeeded
//
// Constructors:Type:payments_PaymentResult 
struct payments_PaymentResult {
	0 optional int constructor; 
	1 require  payments_PaymentResult_Data data ;
};
// Constructors:Type:Data:payments_PaymentResult 
struct payments_PaymentResult_Data {
	0	optional Updates updates; 
	1	optional string url; 
};
// Constructors:Predicate:payments_paymentResult 
struct TLpayments_paymentResult {
	0	require payments_PaymentResult_Data data ;
};
// Constructors:Predicate:payments_paymentVerificationNeeded 
struct TLpayments_paymentVerificationNeeded {
	0	require payments_PaymentResult_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:SecureCredentialsEncrypted 
// SecureCredentialsEncrypted <--
// + TLsecureCredentialsEncrypted
//
// Constructors:Type:SecureCredentialsEncrypted 
struct SecureCredentialsEncrypted {
	0 optional int constructor; 
	1 require  SecureCredentialsEncrypted_Data data ;
};
// Constructors:Type:Data:SecureCredentialsEncrypted 
struct SecureCredentialsEncrypted_Data {
	0	optional vector<unsigned byte> data; 
	1	optional vector<unsigned byte> hash; 
	2	optional vector<unsigned byte> secret; 
};
// Constructors:Predicate:secureCredentialsEncrypted 
struct TLsecureCredentialsEncrypted {
	0	require SecureCredentialsEncrypted_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Page 
// Page <--
// + TLpage
//
// Constructors:Type:Page 
struct Page {
	0 optional int constructor; 
	1 require  Page_Data data ;
};
// Constructors:Type:Data:Page 
struct Page_Data {
	0	optional bool part; 
	1	optional bool rtl; 
	2	optional bool v2; 
	3	optional string url; 
	4	optional vector<PageBlock> blocks; 
	5	optional vector<Photo> photos; 
	6	optional vector<Document> documents; 
	7	optional int views; 
};
// Constructors:Predicate:page 
struct TLpage {
	0	require Page_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PasswordKdfAlgo 
// PasswordKdfAlgo <--
// + TLpasswordKdfAlgoUnknown
// + TLpasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow
//
// Constructors:Type:PasswordKdfAlgo 
struct PasswordKdfAlgo {
	0 optional int constructor; 
	1 require  PasswordKdfAlgo_Data data ;
};
// Constructors:Type:Data:PasswordKdfAlgo 
struct PasswordKdfAlgo_Data {
	0	optional vector<unsigned byte> salt1; 
	1	optional vector<unsigned byte> salt2; 
	2	optional int g; 
	3	optional vector<unsigned byte> p; 
};
// Constructors:Predicate:passwordKdfAlgoUnknown 
struct TLpasswordKdfAlgoUnknown {
	0	require PasswordKdfAlgo_Data data ;
};
// Constructors:Predicate:passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow 
struct TLpasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow {
	0	require PasswordKdfAlgo_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_DiscussionMessage 
// messages_DiscussionMessage <--
// + TLmessages_discussionMessage
//
// Constructors:Type:messages_DiscussionMessage 
struct messages_DiscussionMessage {
	0 optional int constructor; 
	1 require  messages_DiscussionMessage_Data data ;
};
// Constructors:Type:Data:messages_DiscussionMessage 
struct messages_DiscussionMessage_Data {
	0	optional vector<Message> messages; 
	1	optional int max_id; 
	2	optional int read_inbox_max_id; 
	3	optional int read_outbox_max_id; 
	4	optional vector<Chat> chats; 
	5	optional vector<User> users; 
};
// Constructors:Predicate:messages_discussionMessage 
struct TLmessages_discussionMessage {
	0	require messages_DiscussionMessage_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ChannelParticipant 
// ChannelParticipant <--
// + TLchannelParticipant
// + TLchannelParticipantSelf
// + TLchannelParticipantCreator
// + TLchannelParticipantAdmin
// + TLchannelParticipantBanned
// + TLchannelParticipantLeft
//
// Constructors:Type:ChannelParticipant 
struct ChannelParticipant {
	0 optional int constructor; 
	1 require  ChannelParticipant_Data data ;
};
// Constructors:Type:Data:ChannelParticipant 
struct ChannelParticipant_Data {
	0	optional int user_id; 
	1	optional int date; 
	2	optional int inviter_id; 
	3	optional ChatAdminRights admin_rights; 
	4	optional string rank; 
	5	optional bool can_edit; 
	6	optional bool self; 
	7	optional int promoted_by; 
	8	optional bool left; 
	9	optional int kicked_by; 
	10	optional ChatBannedRights banned_rights; 
};
// Constructors:Predicate:channelParticipant 
struct TLchannelParticipant {
	0	require ChannelParticipant_Data data ;
};
// Constructors:Predicate:channelParticipantSelf 
struct TLchannelParticipantSelf {
	0	require ChannelParticipant_Data data ;
};
// Constructors:Predicate:channelParticipantCreator 
struct TLchannelParticipantCreator {
	0	require ChannelParticipant_Data data ;
};
// Constructors:Predicate:channelParticipantAdmin 
struct TLchannelParticipantAdmin {
	0	require ChannelParticipant_Data data ;
};
// Constructors:Predicate:channelParticipantBanned 
struct TLchannelParticipantBanned {
	0	require ChannelParticipant_Data data ;
};
// Constructors:Predicate:channelParticipantLeft 
struct TLchannelParticipantLeft {
	0	require ChannelParticipant_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:account_Authorizations 
// account_Authorizations <--
// + TLaccount_authorizations
//
// Constructors:Type:account_Authorizations 
struct account_Authorizations {
	0 optional int constructor; 
	1 require  account_Authorizations_Data data ;
};
// Constructors:Type:Data:account_Authorizations 
struct account_Authorizations_Data {
	0	optional vector<Authorization> authorizations; 
};
// Constructors:Predicate:account_authorizations 
struct TLaccount_authorizations {
	0	require account_Authorizations_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PopularContact 
// PopularContact <--
// + TLpopularContact
//
// Constructors:Type:PopularContact 
struct PopularContact {
	0 optional int constructor; 
	1 require  PopularContact_Data data ;
};
// Constructors:Type:Data:PopularContact 
struct PopularContact_Data {
	0	optional long client_id; 
	1	optional int importers; 
};
// Constructors:Predicate:popularContact 
struct TLpopularContact {
	0	require PopularContact_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:WebPageAttribute 
// WebPageAttribute <--
// + TLwebPageAttributeTheme
//
// Constructors:Type:WebPageAttribute 
struct WebPageAttribute {
	0 optional int constructor; 
	1 require  WebPageAttribute_Data data ;
};
// Constructors:Type:Data:WebPageAttribute 
struct WebPageAttribute_Data {
	0	optional vector<Document> documents; 
	1	optional ThemeSettings settings; 
};
// Constructors:Predicate:webPageAttributeTheme 
struct TLwebPageAttributeTheme {
	0	require WebPageAttribute_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:StatsAbsValueAndPrev 
// StatsAbsValueAndPrev <--
// + TLstatsAbsValueAndPrev
//
// Constructors:Type:StatsAbsValueAndPrev 
struct StatsAbsValueAndPrev {
	0 optional int constructor; 
	1 require  StatsAbsValueAndPrev_Data data ;
};
// Constructors:Type:Data:StatsAbsValueAndPrev 
struct StatsAbsValueAndPrev_Data {
	0	optional double current; 
	1	optional double previous; 
};
// Constructors:Predicate:statsAbsValueAndPrev 
struct TLstatsAbsValueAndPrev {
	0	require StatsAbsValueAndPrev_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PhoneCallDiscardReason 
// PhoneCallDiscardReason <--
// + TLphoneCallDiscardReasonMissed
// + TLphoneCallDiscardReasonDisconnect
// + TLphoneCallDiscardReasonHangup
// + TLphoneCallDiscardReasonBusy
//
// Constructors:Type:PhoneCallDiscardReason 
struct PhoneCallDiscardReason {
	0 optional int constructor; 
	1 require  PhoneCallDiscardReason_Data data ;
};
// Constructors:Type:Data:PhoneCallDiscardReason 
struct PhoneCallDiscardReason_Data {
};
// Constructors:Predicate:phoneCallDiscardReasonMissed 
struct TLphoneCallDiscardReasonMissed {
	0	require PhoneCallDiscardReason_Data data ;
};
// Constructors:Predicate:phoneCallDiscardReasonDisconnect 
struct TLphoneCallDiscardReasonDisconnect {
	0	require PhoneCallDiscardReason_Data data ;
};
// Constructors:Predicate:phoneCallDiscardReasonHangup 
struct TLphoneCallDiscardReasonHangup {
	0	require PhoneCallDiscardReason_Data data ;
};
// Constructors:Predicate:phoneCallDiscardReasonBusy 
struct TLphoneCallDiscardReasonBusy {
	0	require PhoneCallDiscardReason_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Theme 
// Theme <--
// + TLtheme
//
// Constructors:Type:Theme 
struct Theme {
	0 optional int constructor; 
	1 require  Theme_Data data ;
};
// Constructors:Type:Data:Theme 
struct Theme_Data {
	0	optional bool creator; 
	1	optional bool default; 
	2	optional long id; 
	3	optional long access_hash; 
	4	optional string slug; 
	5	optional string title; 
	6	optional Document document; 
	7	optional ThemeSettings settings; 
	8	optional int installs_count; 
};
// Constructors:Predicate:theme 
struct TLtheme {
	0	require Theme_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ChatParticipants 
// ChatParticipants <--
// + TLchatParticipantsForbidden
// + TLchatParticipants
//
// Constructors:Type:ChatParticipants 
struct ChatParticipants {
	0 optional int constructor; 
	1 require  ChatParticipants_Data data ;
};
// Constructors:Type:Data:ChatParticipants 
struct ChatParticipants_Data {
	0	optional int chat_id; 
	1	optional ChatParticipant self_participant; 
	2	optional vector<ChatParticipant> participants; 
	3	optional int version; 
};
// Constructors:Predicate:chatParticipantsForbidden 
struct TLchatParticipantsForbidden {
	0	require ChatParticipants_Data data ;
};
// Constructors:Predicate:chatParticipants 
struct TLchatParticipants {
	0	require ChatParticipants_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:MessagesFilter 
// MessagesFilter <--
// + TLinputMessagesFilterEmpty
// + TLinputMessagesFilterPhotos
// + TLinputMessagesFilterVideo
// + TLinputMessagesFilterPhotoVideo
// + TLinputMessagesFilterDocument
// + TLinputMessagesFilterUrl
// + TLinputMessagesFilterGif
// + TLinputMessagesFilterVoice
// + TLinputMessagesFilterMusic
// + TLinputMessagesFilterChatPhotos
// + TLinputMessagesFilterPhoneCalls
// + TLinputMessagesFilterRoundVoice
// + TLinputMessagesFilterRoundVideo
// + TLinputMessagesFilterMyMentions
// + TLinputMessagesFilterGeo
// + TLinputMessagesFilterContacts
// + TLinputMessagesFilterPinned
//
// Constructors:Type:MessagesFilter 
struct MessagesFilter {
	0 optional int constructor; 
	1 require  MessagesFilter_Data data ;
};
// Constructors:Type:Data:MessagesFilter 
struct MessagesFilter_Data {
	0	optional bool missed; 
};
// Constructors:Predicate:inputMessagesFilterEmpty 
struct TLinputMessagesFilterEmpty {
	0	require MessagesFilter_Data data ;
};
// Constructors:Predicate:inputMessagesFilterPhotos 
struct TLinputMessagesFilterPhotos {
	0	require MessagesFilter_Data data ;
};
// Constructors:Predicate:inputMessagesFilterVideo 
struct TLinputMessagesFilterVideo {
	0	require MessagesFilter_Data data ;
};
// Constructors:Predicate:inputMessagesFilterPhotoVideo 
struct TLinputMessagesFilterPhotoVideo {
	0	require MessagesFilter_Data data ;
};
// Constructors:Predicate:inputMessagesFilterDocument 
struct TLinputMessagesFilterDocument {
	0	require MessagesFilter_Data data ;
};
// Constructors:Predicate:inputMessagesFilterUrl 
struct TLinputMessagesFilterUrl {
	0	require MessagesFilter_Data data ;
};
// Constructors:Predicate:inputMessagesFilterGif 
struct TLinputMessagesFilterGif {
	0	require MessagesFilter_Data data ;
};
// Constructors:Predicate:inputMessagesFilterVoice 
struct TLinputMessagesFilterVoice {
	0	require MessagesFilter_Data data ;
};
// Constructors:Predicate:inputMessagesFilterMusic 
struct TLinputMessagesFilterMusic {
	0	require MessagesFilter_Data data ;
};
// Constructors:Predicate:inputMessagesFilterChatPhotos 
struct TLinputMessagesFilterChatPhotos {
	0	require MessagesFilter_Data data ;
};
// Constructors:Predicate:inputMessagesFilterPhoneCalls 
struct TLinputMessagesFilterPhoneCalls {
	0	require MessagesFilter_Data data ;
};
// Constructors:Predicate:inputMessagesFilterRoundVoice 
struct TLinputMessagesFilterRoundVoice {
	0	require MessagesFilter_Data data ;
};
// Constructors:Predicate:inputMessagesFilterRoundVideo 
struct TLinputMessagesFilterRoundVideo {
	0	require MessagesFilter_Data data ;
};
// Constructors:Predicate:inputMessagesFilterMyMentions 
struct TLinputMessagesFilterMyMentions {
	0	require MessagesFilter_Data data ;
};
// Constructors:Predicate:inputMessagesFilterGeo 
struct TLinputMessagesFilterGeo {
	0	require MessagesFilter_Data data ;
};
// Constructors:Predicate:inputMessagesFilterContacts 
struct TLinputMessagesFilterContacts {
	0	require MessagesFilter_Data data ;
};
// Constructors:Predicate:inputMessagesFilterPinned 
struct TLinputMessagesFilterPinned {
	0	require MessagesFilter_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Error 
// Error <--
// + TLerror
//
// Constructors:Type:Error 
struct Error {
	0 optional int constructor; 
	1 require  Error_Data data ;
};
// Constructors:Type:Data:Error 
struct Error_Data {
	0	optional int code; 
	1	optional string text; 
};
// Constructors:Predicate:error 
struct TLerror {
	0	require Error_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputClientProxy 
// InputClientProxy <--
// + TLinputClientProxy
//
// Constructors:Type:InputClientProxy 
struct InputClientProxy {
	0 optional int constructor; 
	1 require  InputClientProxy_Data data ;
};
// Constructors:Type:Data:InputClientProxy 
struct InputClientProxy_Data {
	0	optional string address; 
	1	optional int port; 
};
// Constructors:Predicate:inputClientProxy 
struct TLinputClientProxy {
	0	require InputClientProxy_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:DialogFilter 
// DialogFilter <--
// + TLdialogFilter
//
// Constructors:Type:DialogFilter 
struct DialogFilter {
	0 optional int constructor; 
	1 require  DialogFilter_Data data ;
};
// Constructors:Type:Data:DialogFilter 
struct DialogFilter_Data {
	0	optional bool contacts; 
	1	optional bool non_contacts; 
	2	optional bool groups; 
	3	optional bool broadcasts; 
	4	optional bool bots; 
	5	optional bool exclude_muted; 
	6	optional bool exclude_read; 
	7	optional bool exclude_archived; 
	8	optional int id; 
	9	optional string title; 
	10	optional string emoticon; 
	11	optional vector<InputPeer> pinned_peers; 
	12	optional vector<InputPeer> include_peers; 
	13	optional vector<InputPeer> exclude_peers; 
};
// Constructors:Predicate:dialogFilter 
struct TLdialogFilter {
	0	require DialogFilter_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputSecureValue 
// InputSecureValue <--
// + TLinputSecureValue
//
// Constructors:Type:InputSecureValue 
struct InputSecureValue {
	0 optional int constructor; 
	1 require  InputSecureValue_Data data ;
};
// Constructors:Type:Data:InputSecureValue 
struct InputSecureValue_Data {
	0	optional SecureValueType type; 
	1	optional SecureData data; 
	2	optional InputSecureFile front_side; 
	3	optional InputSecureFile reverse_side; 
	4	optional InputSecureFile selfie; 
	5	optional vector<InputSecureFile> translation; 
	6	optional vector<InputSecureFile> files; 
	7	optional SecurePlainData plain_data; 
};
// Constructors:Predicate:inputSecureValue 
struct TLinputSecureValue {
	0	require InputSecureValue_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_SentEncryptedMessage 
// messages_SentEncryptedMessage <--
// + TLmessages_sentEncryptedMessage
// + TLmessages_sentEncryptedFile
//
// Constructors:Type:messages_SentEncryptedMessage 
struct messages_SentEncryptedMessage {
	0 optional int constructor; 
	1 require  messages_SentEncryptedMessage_Data data ;
};
// Constructors:Type:Data:messages_SentEncryptedMessage 
struct messages_SentEncryptedMessage_Data {
	0	optional int date; 
	1	optional EncryptedFile file; 
};
// Constructors:Predicate:messages_sentEncryptedMessage 
struct TLmessages_sentEncryptedMessage {
	0	require messages_SentEncryptedMessage_Data data ;
};
// Constructors:Predicate:messages_sentEncryptedFile 
struct TLmessages_sentEncryptedFile {
	0	require messages_SentEncryptedMessage_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:auth_SentCode 
// auth_SentCode <--
// + TLauth_sentCode
//
// Constructors:Type:auth_SentCode 
struct auth_SentCode {
	0 optional int constructor; 
	1 require  auth_SentCode_Data data ;
};
// Constructors:Type:Data:auth_SentCode 
struct auth_SentCode_Data {
	0	optional auth_SentCodeType type; 
	1	optional string phone_code_hash; 
	2	optional auth_CodeType next_type; 
	3	optional int timeout; 
};
// Constructors:Predicate:auth_sentCode 
struct TLauth_sentCode {
	0	require auth_SentCode_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputPhoto 
// InputPhoto <--
// + TLinputPhotoEmpty
// + TLinputPhoto
//
// Constructors:Type:InputPhoto 
struct InputPhoto {
	0 optional int constructor; 
	1 require  InputPhoto_Data data ;
};
// Constructors:Type:Data:InputPhoto 
struct InputPhoto_Data {
	0	optional long id; 
	1	optional long access_hash; 
	2	optional vector<unsigned byte> file_reference; 
};
// Constructors:Predicate:inputPhotoEmpty 
struct TLinputPhotoEmpty {
	0	require InputPhoto_Data data ;
};
// Constructors:Predicate:inputPhoto 
struct TLinputPhoto {
	0	require InputPhoto_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:SecureValueError 
// SecureValueError <--
// + TLsecureValueErrorData
// + TLsecureValueErrorFrontSide
// + TLsecureValueErrorReverseSide
// + TLsecureValueErrorSelfie
// + TLsecureValueErrorFile
// + TLsecureValueErrorFiles
// + TLsecureValueError
// + TLsecureValueErrorTranslationFile
// + TLsecureValueErrorTranslationFiles
//
// Constructors:Type:SecureValueError 
struct SecureValueError {
	0 optional int constructor; 
	1 require  SecureValueError_Data data ;
};
// Constructors:Type:Data:SecureValueError 
struct SecureValueError_Data {
	0	optional SecureValueType type; 
	1	optional vector<unsigned byte> data_hash; 
	2	optional string field; 
	3	optional string text; 
	4	optional vector<unsigned byte> file_hash; 
	5	optional vector<vector<unsigned byte>> file_hash_6; 
	6	optional vector<unsigned byte> hash; 
};
// Constructors:Predicate:secureValueErrorData 
struct TLsecureValueErrorData {
	0	require SecureValueError_Data data ;
};
// Constructors:Predicate:secureValueErrorFrontSide 
struct TLsecureValueErrorFrontSide {
	0	require SecureValueError_Data data ;
};
// Constructors:Predicate:secureValueErrorReverseSide 
struct TLsecureValueErrorReverseSide {
	0	require SecureValueError_Data data ;
};
// Constructors:Predicate:secureValueErrorSelfie 
struct TLsecureValueErrorSelfie {
	0	require SecureValueError_Data data ;
};
// Constructors:Predicate:secureValueErrorFile 
struct TLsecureValueErrorFile {
	0	require SecureValueError_Data data ;
};
// Constructors:Predicate:secureValueErrorFiles 
struct TLsecureValueErrorFiles {
	0	require SecureValueError_Data data ;
};
// Constructors:Predicate:secureValueError 
struct TLsecureValueError {
	0	require SecureValueError_Data data ;
};
// Constructors:Predicate:secureValueErrorTranslationFile 
struct TLsecureValueErrorTranslationFile {
	0	require SecureValueError_Data data ;
};
// Constructors:Predicate:secureValueErrorTranslationFiles 
struct TLsecureValueErrorTranslationFiles {
	0	require SecureValueError_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:WallPaperSettings 
// WallPaperSettings <--
// + TLwallPaperSettings
//
// Constructors:Type:WallPaperSettings 
struct WallPaperSettings {
	0 optional int constructor; 
	1 require  WallPaperSettings_Data data ;
};
// Constructors:Type:Data:WallPaperSettings 
struct WallPaperSettings_Data {
	0	optional bool blur; 
	1	optional bool motion; 
	2	optional int background_color; 
	3	optional int second_background_color; 
	4	optional int intensity; 
	5	optional int rotation; 
};
// Constructors:Predicate:wallPaperSettings 
struct TLwallPaperSettings {
	0	require WallPaperSettings_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:auth_CodeType 
// auth_CodeType <--
// + TLauth_codeTypeSms
// + TLauth_codeTypeCall
// + TLauth_codeTypeFlashCall
//
// Constructors:Type:auth_CodeType 
struct auth_CodeType {
	0 optional int constructor; 
	1 require  auth_CodeType_Data data ;
};
// Constructors:Type:Data:auth_CodeType 
struct auth_CodeType_Data {
};
// Constructors:Predicate:auth_codeTypeSms 
struct TLauth_codeTypeSms {
	0	require auth_CodeType_Data data ;
};
// Constructors:Predicate:auth_codeTypeCall 
struct TLauth_codeTypeCall {
	0	require auth_CodeType_Data data ;
};
// Constructors:Predicate:auth_codeTypeFlashCall 
struct TLauth_codeTypeFlashCall {
	0	require auth_CodeType_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:BotInlineResult 
// BotInlineResult <--
// + TLbotInlineResult
// + TLbotInlineMediaResult
//
// Constructors:Type:BotInlineResult 
struct BotInlineResult {
	0 optional int constructor; 
	1 require  BotInlineResult_Data data ;
};
// Constructors:Type:Data:BotInlineResult 
struct BotInlineResult_Data {
	0	optional string id; 
	1	optional string type; 
	2	optional string title; 
	3	optional string description; 
	4	optional string url; 
	5	optional WebDocument thumb; 
	6	optional WebDocument content; 
	7	optional BotInlineMessage send_message; 
	8	optional Photo photo; 
	9	optional Document document; 
};
// Constructors:Predicate:botInlineResult 
struct TLbotInlineResult {
	0	require BotInlineResult_Data data ;
};
// Constructors:Predicate:botInlineMediaResult 
struct TLbotInlineMediaResult {
	0	require BotInlineResult_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ChatPhoto 
// ChatPhoto <--
// + TLchatPhotoEmpty
// + TLchatPhoto
//
// Constructors:Type:ChatPhoto 
struct ChatPhoto {
	0 optional int constructor; 
	1 require  ChatPhoto_Data data ;
};
// Constructors:Type:Data:ChatPhoto 
struct ChatPhoto_Data {
	0	optional bool has_video; 
	1	optional FileLocation photo_small; 
	2	optional FileLocation photo_big; 
	3	optional int dc_id; 
};
// Constructors:Predicate:chatPhotoEmpty 
struct TLchatPhotoEmpty {
	0	require ChatPhoto_Data data ;
};
// Constructors:Predicate:chatPhoto 
struct TLchatPhoto {
	0	require ChatPhoto_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PollAnswer 
// PollAnswer <--
// + TLpollAnswer
//
// Constructors:Type:PollAnswer 
struct PollAnswer {
	0 optional int constructor; 
	1 require  PollAnswer_Data data ;
};
// Constructors:Type:Data:PollAnswer 
struct PollAnswer_Data {
	0	optional string text; 
	1	optional vector<unsigned byte> option; 
};
// Constructors:Predicate:pollAnswer 
struct TLpollAnswer {
	0	require PollAnswer_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:BotInfo 
// BotInfo <--
// + TLbotInfo
//
// Constructors:Type:BotInfo 
struct BotInfo {
	0 optional int constructor; 
	1 require  BotInfo_Data data ;
};
// Constructors:Type:Data:BotInfo 
struct BotInfo_Data {
	0	optional int user_id; 
	1	optional string description; 
	2	optional vector<BotCommand> commands; 
};
// Constructors:Predicate:botInfo 
struct TLbotInfo {
	0	require BotInfo_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_HighScores 
// messages_HighScores <--
// + TLmessages_highScores
//
// Constructors:Type:messages_HighScores 
struct messages_HighScores {
	0 optional int constructor; 
	1 require  messages_HighScores_Data data ;
};
// Constructors:Type:Data:messages_HighScores 
struct messages_HighScores_Data {
	0	optional vector<HighScore> scores; 
	1	optional vector<User> users; 
};
// Constructors:Predicate:messages_highScores 
struct TLmessages_highScores {
	0	require messages_HighScores_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputMessage 
// InputMessage <--
// + TLinputMessageID
// + TLinputMessageReplyTo
// + TLinputMessagePinned
// + TLinputMessageCallbackQuery
//
// Constructors:Type:InputMessage 
struct InputMessage {
	0 optional int constructor; 
	1 require  InputMessage_Data data ;
};
// Constructors:Type:Data:InputMessage 
struct InputMessage_Data {
	0	optional int id; 
	1	optional long query_id; 
};
// Constructors:Predicate:inputMessageID 
struct TLinputMessageID {
	0	require InputMessage_Data data ;
};
// Constructors:Predicate:inputMessageReplyTo 
struct TLinputMessageReplyTo {
	0	require InputMessage_Data data ;
};
// Constructors:Predicate:inputMessagePinned 
struct TLinputMessagePinned {
	0	require InputMessage_Data data ;
};
// Constructors:Predicate:inputMessageCallbackQuery 
struct TLinputMessageCallbackQuery {
	0	require InputMessage_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:EmojiURL 
// EmojiURL <--
// + TLemojiURL
//
// Constructors:Type:EmojiURL 
struct EmojiURL {
	0 optional int constructor; 
	1 require  EmojiURL_Data data ;
};
// Constructors:Type:Data:EmojiURL 
struct EmojiURL_Data {
	0	optional string url; 
};
// Constructors:Predicate:emojiURL 
struct TLemojiURL {
	0	require EmojiURL_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:RecentMeUrl 
// RecentMeUrl <--
// + TLrecentMeUrlUnknown
// + TLrecentMeUrlUser
// + TLrecentMeUrlChat
// + TLrecentMeUrlChatInvite
// + TLrecentMeUrlStickerSet
//
// Constructors:Type:RecentMeUrl 
struct RecentMeUrl {
	0 optional int constructor; 
	1 require  RecentMeUrl_Data data ;
};
// Constructors:Type:Data:RecentMeUrl 
struct RecentMeUrl_Data {
	0	optional string url; 
	1	optional int user_id; 
	2	optional int chat_id; 
	3	optional ChatInvite chat_invite; 
	4	optional StickerSetCovered set; 
};
// Constructors:Predicate:recentMeUrlUnknown 
struct TLrecentMeUrlUnknown {
	0	require RecentMeUrl_Data data ;
};
// Constructors:Predicate:recentMeUrlUser 
struct TLrecentMeUrlUser {
	0	require RecentMeUrl_Data data ;
};
// Constructors:Predicate:recentMeUrlChat 
struct TLrecentMeUrlChat {
	0	require RecentMeUrl_Data data ;
};
// Constructors:Predicate:recentMeUrlChatInvite 
struct TLrecentMeUrlChatInvite {
	0	require RecentMeUrl_Data data ;
};
// Constructors:Predicate:recentMeUrlStickerSet 
struct TLrecentMeUrlStickerSet {
	0	require RecentMeUrl_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputUser 
// InputUser <--
// + TLinputUserEmpty
// + TLinputUserSelf
// + TLinputUser
// + TLinputUserFromMessage
//
// Constructors:Type:InputUser 
struct InputUser {
	0 optional int constructor; 
	1 require  InputUser_Data data ;
};
// Constructors:Type:Data:InputUser 
struct InputUser_Data {
	0	optional int user_id; 
	1	optional long access_hash; 
	2	optional InputPeer peer; 
	3	optional int msg_id; 
};
// Constructors:Predicate:inputUserEmpty 
struct TLinputUserEmpty {
	0	require InputUser_Data data ;
};
// Constructors:Predicate:inputUserSelf 
struct TLinputUserSelf {
	0	require InputUser_Data data ;
};
// Constructors:Predicate:inputUser 
struct TLinputUser {
	0	require InputUser_Data data ;
};
// Constructors:Predicate:inputUserFromMessage 
struct TLinputUserFromMessage {
	0	require InputUser_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PhotoSize 
// PhotoSize <--
// + TLphotoSizeEmpty
// + TLphotoSize
// + TLphotoCachedSize
// + TLphotoStrippedSize
// + TLphotoSizeProgressive
// + TLphotoPathSize
//
// Constructors:Type:PhotoSize 
struct PhotoSize {
	0 optional int constructor; 
	1 require  PhotoSize_Data data ;
};
// Constructors:Type:Data:PhotoSize 
struct PhotoSize_Data {
	0	optional string type; 
	1	optional FileLocation location; 
	2	optional int w; 
	3	optional int h; 
	4	optional int size; 
	5	optional vector<unsigned byte> bytes; 
	6	optional vector<int> sizes; 
};
// Constructors:Predicate:photoSizeEmpty 
struct TLphotoSizeEmpty {
	0	require PhotoSize_Data data ;
};
// Constructors:Predicate:photoSize 
struct TLphotoSize {
	0	require PhotoSize_Data data ;
};
// Constructors:Predicate:photoCachedSize 
struct TLphotoCachedSize {
	0	require PhotoSize_Data data ;
};
// Constructors:Predicate:photoStrippedSize 
struct TLphotoStrippedSize {
	0	require PhotoSize_Data data ;
};
// Constructors:Predicate:photoSizeProgressive 
struct TLphotoSizeProgressive {
	0	require PhotoSize_Data data ;
};
// Constructors:Predicate:photoPathSize 
struct TLphotoPathSize {
	0	require PhotoSize_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ExportedChatInvite 
// ExportedChatInvite <--
// + TLchatInviteEmpty
// + TLchatInviteExported
//
// Constructors:Type:ExportedChatInvite 
struct ExportedChatInvite {
	0 optional int constructor; 
	1 require  ExportedChatInvite_Data data ;
};
// Constructors:Type:Data:ExportedChatInvite 
struct ExportedChatInvite_Data {
	0	optional string link; 
};
// Constructors:Predicate:chatInviteEmpty 
struct TLchatInviteEmpty {
	0	require ExportedChatInvite_Data data ;
};
// Constructors:Predicate:chatInviteExported 
struct TLchatInviteExported {
	0	require ExportedChatInvite_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:contacts_TopPeers 
// contacts_TopPeers <--
// + TLcontacts_topPeersNotModified
// + TLcontacts_topPeers
// + TLcontacts_topPeersDisabled
//
// Constructors:Type:contacts_TopPeers 
struct contacts_TopPeers {
	0 optional int constructor; 
	1 require  contacts_TopPeers_Data data ;
};
// Constructors:Type:Data:contacts_TopPeers 
struct contacts_TopPeers_Data {
	0	optional vector<TopPeerCategoryPeers> categories; 
	1	optional vector<Chat> chats; 
	2	optional vector<User> users; 
};
// Constructors:Predicate:contacts_topPeersNotModified 
struct TLcontacts_topPeersNotModified {
	0	require contacts_TopPeers_Data data ;
};
// Constructors:Predicate:contacts_topPeers 
struct TLcontacts_topPeers {
	0	require contacts_TopPeers_Data data ;
};
// Constructors:Predicate:contacts_topPeersDisabled 
struct TLcontacts_topPeersDisabled {
	0	require contacts_TopPeers_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Dialog 
// Dialog <--
// + TLdialog
// + TLdialogFolder
//
// Constructors:Type:Dialog 
struct Dialog {
	0 optional int constructor; 
	1 require  Dialog_Data data ;
};
// Constructors:Type:Data:Dialog 
struct Dialog_Data {
	0	optional bool pinned; 
	1	optional bool unread_mark; 
	2	optional Peer peer; 
	3	optional int top_message; 
	4	optional int read_inbox_max_id; 
	5	optional int read_outbox_max_id; 
	6	optional int unread_count; 
	7	optional int unread_mentions_count; 
	8	optional PeerNotifySettings notify_settings; 
	9	optional int pts; 
	10	optional DraftMessage draft; 
	11	optional int folder_id; 
	12	optional Folder folder; 
	13	optional int unread_muted_peers_count; 
	14	optional int unread_unmuted_peers_count; 
	15	optional int unread_muted_messages_count; 
	16	optional int unread_unmuted_messages_count; 
};
// Constructors:Predicate:dialog 
struct TLdialog {
	0	require Dialog_Data data ;
};
// Constructors:Predicate:dialogFolder 
struct TLdialogFolder {
	0	require Dialog_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:StatsDateRangeDays 
// StatsDateRangeDays <--
// + TLstatsDateRangeDays
//
// Constructors:Type:StatsDateRangeDays 
struct StatsDateRangeDays {
	0 optional int constructor; 
	1 require  StatsDateRangeDays_Data data ;
};
// Constructors:Type:Data:StatsDateRangeDays 
struct StatsDateRangeDays_Data {
	0	optional int min_date; 
	1	optional int max_date; 
};
// Constructors:Predicate:statsDateRangeDays 
struct TLstatsDateRangeDays {
	0	require StatsDateRangeDays_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:account_WebAuthorizations 
// account_WebAuthorizations <--
// + TLaccount_webAuthorizations
//
// Constructors:Type:account_WebAuthorizations 
struct account_WebAuthorizations {
	0 optional int constructor; 
	1 require  account_WebAuthorizations_Data data ;
};
// Constructors:Type:Data:account_WebAuthorizations 
struct account_WebAuthorizations_Data {
	0	optional vector<WebAuthorization> authorizations; 
	1	optional vector<User> users; 
};
// Constructors:Predicate:account_webAuthorizations 
struct TLaccount_webAuthorizations {
	0	require account_WebAuthorizations_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:stats_MegagroupStats 
// stats_MegagroupStats <--
// + TLstats_megagroupStats
//
// Constructors:Type:stats_MegagroupStats 
struct stats_MegagroupStats {
	0 optional int constructor; 
	1 require  stats_MegagroupStats_Data data ;
};
// Constructors:Type:Data:stats_MegagroupStats 
struct stats_MegagroupStats_Data {
	0	optional StatsDateRangeDays period; 
	1	optional StatsAbsValueAndPrev members; 
	2	optional StatsAbsValueAndPrev messages; 
	3	optional StatsAbsValueAndPrev viewers; 
	4	optional StatsAbsValueAndPrev posters; 
	5	optional StatsGraph growth_graph; 
	6	optional StatsGraph members_graph; 
	7	optional StatsGraph new_members_by_source_graph; 
	8	optional StatsGraph languages_graph; 
	9	optional StatsGraph messages_graph; 
	10	optional StatsGraph actions_graph; 
	11	optional StatsGraph top_hours_graph; 
	12	optional StatsGraph weekdays_graph; 
	13	optional vector<StatsGroupTopPoster> top_posters; 
	14	optional vector<StatsGroupTopAdmin> top_admins; 
	15	optional vector<StatsGroupTopInviter> top_inviters; 
	16	optional vector<User> users; 
};
// Constructors:Predicate:stats_megagroupStats 
struct TLstats_megagroupStats {
	0	require stats_MegagroupStats_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:account_PasswordSettings 
// account_PasswordSettings <--
// + TLaccount_passwordSettings
//
// Constructors:Type:account_PasswordSettings 
struct account_PasswordSettings {
	0 optional int constructor; 
	1 require  account_PasswordSettings_Data data ;
};
// Constructors:Type:Data:account_PasswordSettings 
struct account_PasswordSettings_Data {
	0	optional string email; 
	1	optional SecureSecretSettings secure_settings; 
};
// Constructors:Predicate:account_passwordSettings 
struct TLaccount_passwordSettings {
	0	require account_PasswordSettings_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputChatPhoto 
// InputChatPhoto <--
// + TLinputChatPhotoEmpty
// + TLinputChatUploadedPhoto
// + TLinputChatPhoto
//
// Constructors:Type:InputChatPhoto 
struct InputChatPhoto {
	0 optional int constructor; 
	1 require  InputChatPhoto_Data data ;
};
// Constructors:Type:Data:InputChatPhoto 
struct InputChatPhoto_Data {
	0	optional InputFile file; 
	1	optional InputFile video; 
	2	optional double video_start_ts; 
	3	optional InputPhoto id; 
};
// Constructors:Predicate:inputChatPhotoEmpty 
struct TLinputChatPhotoEmpty {
	0	require InputChatPhoto_Data data ;
};
// Constructors:Predicate:inputChatUploadedPhoto 
struct TLinputChatUploadedPhoto {
	0	require InputChatPhoto_Data data ;
};
// Constructors:Predicate:inputChatPhoto 
struct TLinputChatPhoto {
	0	require InputChatPhoto_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ChannelParticipantsFilter 
// ChannelParticipantsFilter <--
// + TLchannelParticipantsRecent
// + TLchannelParticipantsAdmins
// + TLchannelParticipantsKicked
// + TLchannelParticipantsBots
// + TLchannelParticipantsBanned
// + TLchannelParticipantsSearch
// + TLchannelParticipantsContacts
// + TLchannelParticipantsMentions
//
// Constructors:Type:ChannelParticipantsFilter 
struct ChannelParticipantsFilter {
	0 optional int constructor; 
	1 require  ChannelParticipantsFilter_Data data ;
};
// Constructors:Type:Data:ChannelParticipantsFilter 
struct ChannelParticipantsFilter_Data {
	0	optional string q; 
	1	optional int top_msg_id; 
};
// Constructors:Predicate:channelParticipantsRecent 
struct TLchannelParticipantsRecent {
	0	require ChannelParticipantsFilter_Data data ;
};
// Constructors:Predicate:channelParticipantsAdmins 
struct TLchannelParticipantsAdmins {
	0	require ChannelParticipantsFilter_Data data ;
};
// Constructors:Predicate:channelParticipantsKicked 
struct TLchannelParticipantsKicked {
	0	require ChannelParticipantsFilter_Data data ;
};
// Constructors:Predicate:channelParticipantsBots 
struct TLchannelParticipantsBots {
	0	require ChannelParticipantsFilter_Data data ;
};
// Constructors:Predicate:channelParticipantsBanned 
struct TLchannelParticipantsBanned {
	0	require ChannelParticipantsFilter_Data data ;
};
// Constructors:Predicate:channelParticipantsSearch 
struct TLchannelParticipantsSearch {
	0	require ChannelParticipantsFilter_Data data ;
};
// Constructors:Predicate:channelParticipantsContacts 
struct TLchannelParticipantsContacts {
	0	require ChannelParticipantsFilter_Data data ;
};
// Constructors:Predicate:channelParticipantsMentions 
struct TLchannelParticipantsMentions {
	0	require ChannelParticipantsFilter_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_Chats 
// messages_Chats <--
// + TLmessages_chats
// + TLmessages_chatsSlice
//
// Constructors:Type:messages_Chats 
struct messages_Chats {
	0 optional int constructor; 
	1 require  messages_Chats_Data data ;
};
// Constructors:Type:Data:messages_Chats 
struct messages_Chats_Data {
	0	optional vector<Chat> chats; 
	1	optional int count; 
};
// Constructors:Predicate:messages_chats 
struct TLmessages_chats {
	0	require messages_Chats_Data data ;
};
// Constructors:Predicate:messages_chatsSlice 
struct TLmessages_chatsSlice {
	0	require messages_Chats_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:EmojiKeywordsDifference 
// EmojiKeywordsDifference <--
// + TLemojiKeywordsDifference
//
// Constructors:Type:EmojiKeywordsDifference 
struct EmojiKeywordsDifference {
	0 optional int constructor; 
	1 require  EmojiKeywordsDifference_Data data ;
};
// Constructors:Type:Data:EmojiKeywordsDifference 
struct EmojiKeywordsDifference_Data {
	0	optional string lang_code; 
	1	optional int from_version; 
	2	optional int version; 
	3	optional vector<EmojiKeyword> keywords; 
};
// Constructors:Predicate:emojiKeywordsDifference 
struct TLemojiKeywordsDifference {
	0	require EmojiKeywordsDifference_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:SecureData 
// SecureData <--
// + TLsecureData
//
// Constructors:Type:SecureData 
struct SecureData {
	0 optional int constructor; 
	1 require  SecureData_Data data ;
};
// Constructors:Type:Data:SecureData 
struct SecureData_Data {
	0	optional vector<unsigned byte> data; 
	1	optional vector<unsigned byte> data_hash; 
	2	optional vector<unsigned byte> secret; 
};
// Constructors:Predicate:secureData 
struct TLsecureData {
	0	require SecureData_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ChannelAdminLogEventsFilter 
// ChannelAdminLogEventsFilter <--
// + TLchannelAdminLogEventsFilter
//
// Constructors:Type:ChannelAdminLogEventsFilter 
struct ChannelAdminLogEventsFilter {
	0 optional int constructor; 
	1 require  ChannelAdminLogEventsFilter_Data data ;
};
// Constructors:Type:Data:ChannelAdminLogEventsFilter 
struct ChannelAdminLogEventsFilter_Data {
	0	optional bool join; 
	1	optional bool leave; 
	2	optional bool invite; 
	3	optional bool ban; 
	4	optional bool unban; 
	5	optional bool kick; 
	6	optional bool unkick; 
	7	optional bool promote; 
	8	optional bool demote; 
	9	optional bool info; 
	10	optional bool settings; 
	11	optional bool pinned; 
	12	optional bool edit; 
	13	optional bool delete; 
	14	optional bool group_call; 
};
// Constructors:Predicate:channelAdminLogEventsFilter 
struct TLchannelAdminLogEventsFilter {
	0	require ChannelAdminLogEventsFilter_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PhoneConnection 
// PhoneConnection <--
// + TLphoneConnection
// + TLphoneConnectionWebrtc
//
// Constructors:Type:PhoneConnection 
struct PhoneConnection {
	0 optional int constructor; 
	1 require  PhoneConnection_Data data ;
};
// Constructors:Type:Data:PhoneConnection 
struct PhoneConnection_Data {
	0	optional long id; 
	1	optional string ip; 
	2	optional string ipv6; 
	3	optional int port; 
	4	optional vector<unsigned byte> peer_tag; 
	5	optional bool turn; 
	6	optional bool stun; 
	7	optional string username; 
	8	optional string password; 
};
// Constructors:Predicate:phoneConnection 
struct TLphoneConnection {
	0	require PhoneConnection_Data data ;
};
// Constructors:Predicate:phoneConnectionWebrtc 
struct TLphoneConnectionWebrtc {
	0	require PhoneConnection_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:photos_Photo 
// photos_Photo <--
// + TLphotos_photo
//
// Constructors:Type:photos_Photo 
struct photos_Photo {
	0 optional int constructor; 
	1 require  photos_Photo_Data data ;
};
// Constructors:Type:Data:photos_Photo 
struct photos_Photo_Data {
	0	optional Photo photo; 
	1	optional vector<User> users; 
};
// Constructors:Predicate:photos_photo 
struct TLphotos_photo {
	0	require photos_Photo_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:account_ContentSettings 
// account_ContentSettings <--
// + TLaccount_contentSettings
//
// Constructors:Type:account_ContentSettings 
struct account_ContentSettings {
	0 optional int constructor; 
	1 require  account_ContentSettings_Data data ;
};
// Constructors:Type:Data:account_ContentSettings 
struct account_ContentSettings_Data {
	0	optional bool sensitive_enabled; 
	1	optional bool sensitive_can_change; 
};
// Constructors:Predicate:account_contentSettings 
struct TLaccount_contentSettings {
	0	require account_ContentSettings_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:BotCommand 
// BotCommand <--
// + TLbotCommand
//
// Constructors:Type:BotCommand 
struct BotCommand {
	0 optional int constructor; 
	1 require  BotCommand_Data data ;
};
// Constructors:Type:Data:BotCommand 
struct BotCommand_Data {
	0	optional string command; 
	1	optional string description; 
};
// Constructors:Predicate:botCommand 
struct TLbotCommand {
	0	require BotCommand_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:account_PasswordInputSettings 
// account_PasswordInputSettings <--
// + TLaccount_passwordInputSettings
//
// Constructors:Type:account_PasswordInputSettings 
struct account_PasswordInputSettings {
	0 optional int constructor; 
	1 require  account_PasswordInputSettings_Data data ;
};
// Constructors:Type:Data:account_PasswordInputSettings 
struct account_PasswordInputSettings_Data {
	0	optional PasswordKdfAlgo new_algo; 
	1	optional vector<unsigned byte> new_password_hash; 
	2	optional string hint; 
	3	optional string email; 
	4	optional SecureSecretSettings new_secure_settings; 
};
// Constructors:Predicate:account_passwordInputSettings 
struct TLaccount_passwordInputSettings {
	0	require account_PasswordInputSettings_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:stats_MessageStats 
// stats_MessageStats <--
// + TLstats_messageStats
//
// Constructors:Type:stats_MessageStats 
struct stats_MessageStats {
	0 optional int constructor; 
	1 require  stats_MessageStats_Data data ;
};
// Constructors:Type:Data:stats_MessageStats 
struct stats_MessageStats_Data {
	0	optional StatsGraph views_graph; 
};
// Constructors:Predicate:stats_messageStats 
struct TLstats_messageStats {
	0	require stats_MessageStats_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:SecureSecretSettings 
// SecureSecretSettings <--
// + TLsecureSecretSettings
//
// Constructors:Type:SecureSecretSettings 
struct SecureSecretSettings {
	0 optional int constructor; 
	1 require  SecureSecretSettings_Data data ;
};
// Constructors:Type:Data:SecureSecretSettings 
struct SecureSecretSettings_Data {
	0	optional SecurePasswordKdfAlgo secure_algo; 
	1	optional vector<unsigned byte> secure_secret; 
	2	optional long secure_secret_id; 
};
// Constructors:Predicate:secureSecretSettings 
struct TLsecureSecretSettings {
	0	require SecureSecretSettings_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:account_WallPapers 
// account_WallPapers <--
// + TLaccount_wallPapersNotModified
// + TLaccount_wallPapers
//
// Constructors:Type:account_WallPapers 
struct account_WallPapers {
	0 optional int constructor; 
	1 require  account_WallPapers_Data data ;
};
// Constructors:Type:Data:account_WallPapers 
struct account_WallPapers_Data {
	0	optional int hash; 
	1	optional vector<WallPaper> wallpapers; 
};
// Constructors:Predicate:account_wallPapersNotModified 
struct TLaccount_wallPapersNotModified {
	0	require account_WallPapers_Data data ;
};
// Constructors:Predicate:account_wallPapers 
struct TLaccount_wallPapers {
	0	require account_WallPapers_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputSingleMedia 
// InputSingleMedia <--
// + TLinputSingleMedia
//
// Constructors:Type:InputSingleMedia 
struct InputSingleMedia {
	0 optional int constructor; 
	1 require  InputSingleMedia_Data data ;
};
// Constructors:Type:Data:InputSingleMedia 
struct InputSingleMedia_Data {
	0	optional InputMedia media; 
	1	optional long random_id; 
	2	optional string message; 
	3	optional vector<MessageEntity> entities; 
};
// Constructors:Predicate:inputSingleMedia 
struct TLinputSingleMedia {
	0	require InputSingleMedia_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputFolderPeer 
// InputFolderPeer <--
// + TLinputFolderPeer
//
// Constructors:Type:InputFolderPeer 
struct InputFolderPeer {
	0 optional int constructor; 
	1 require  InputFolderPeer_Data data ;
};
// Constructors:Type:Data:InputFolderPeer 
struct InputFolderPeer_Data {
	0	optional InputPeer peer; 
	1	optional int folder_id; 
};
// Constructors:Predicate:inputFolderPeer 
struct TLinputFolderPeer {
	0	require InputFolderPeer_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_SavedGifs 
// messages_SavedGifs <--
// + TLmessages_savedGifsNotModified
// + TLmessages_savedGifs
//
// Constructors:Type:messages_SavedGifs 
struct messages_SavedGifs {
	0 optional int constructor; 
	1 require  messages_SavedGifs_Data data ;
};
// Constructors:Type:Data:messages_SavedGifs 
struct messages_SavedGifs_Data {
	0	optional int hash; 
	1	optional vector<Document> gifs; 
};
// Constructors:Predicate:messages_savedGifsNotModified 
struct TLmessages_savedGifsNotModified {
	0	require messages_SavedGifs_Data data ;
};
// Constructors:Predicate:messages_savedGifs 
struct TLmessages_savedGifs {
	0	require messages_SavedGifs_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:AutoDownloadSettings 
// AutoDownloadSettings <--
// + TLautoDownloadSettings
//
// Constructors:Type:AutoDownloadSettings 
struct AutoDownloadSettings {
	0 optional int constructor; 
	1 require  AutoDownloadSettings_Data data ;
};
// Constructors:Type:Data:AutoDownloadSettings 
struct AutoDownloadSettings_Data {
	0	optional bool disabled; 
	1	optional bool video_preload_large; 
	2	optional bool audio_preload_next; 
	3	optional bool phonecalls_less_data; 
	4	optional int photo_size_max; 
	5	optional int video_size_max; 
	6	optional int file_size_max; 
	7	optional int video_upload_maxbitrate; 
};
// Constructors:Predicate:autoDownloadSettings 
struct TLautoDownloadSettings {
	0	require AutoDownloadSettings_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:CdnConfig 
// CdnConfig <--
// + TLcdnConfig
//
// Constructors:Type:CdnConfig 
struct CdnConfig {
	0 optional int constructor; 
	1 require  CdnConfig_Data data ;
};
// Constructors:Type:Data:CdnConfig 
struct CdnConfig_Data {
	0	optional vector<CdnPublicKey> public_keys; 
};
// Constructors:Predicate:cdnConfig 
struct TLcdnConfig {
	0	require CdnConfig_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PrivacyRule 
// PrivacyRule <--
// + TLprivacyValueAllowContacts
// + TLprivacyValueAllowAll
// + TLprivacyValueAllowUsers
// + TLprivacyValueDisallowContacts
// + TLprivacyValueDisallowAll
// + TLprivacyValueDisallowUsers
// + TLprivacyValueAllowChatParticipants
// + TLprivacyValueDisallowChatParticipants
//
// Constructors:Type:PrivacyRule 
struct PrivacyRule {
	0 optional int constructor; 
	1 require  PrivacyRule_Data data ;
};
// Constructors:Type:Data:PrivacyRule 
struct PrivacyRule_Data {
	0	optional vector<int> users; 
	1	optional vector<int> chats; 
};
// Constructors:Predicate:privacyValueAllowContacts 
struct TLprivacyValueAllowContacts {
	0	require PrivacyRule_Data data ;
};
// Constructors:Predicate:privacyValueAllowAll 
struct TLprivacyValueAllowAll {
	0	require PrivacyRule_Data data ;
};
// Constructors:Predicate:privacyValueAllowUsers 
struct TLprivacyValueAllowUsers {
	0	require PrivacyRule_Data data ;
};
// Constructors:Predicate:privacyValueDisallowContacts 
struct TLprivacyValueDisallowContacts {
	0	require PrivacyRule_Data data ;
};
// Constructors:Predicate:privacyValueDisallowAll 
struct TLprivacyValueDisallowAll {
	0	require PrivacyRule_Data data ;
};
// Constructors:Predicate:privacyValueDisallowUsers 
struct TLprivacyValueDisallowUsers {
	0	require PrivacyRule_Data data ;
};
// Constructors:Predicate:privacyValueAllowChatParticipants 
struct TLprivacyValueAllowChatParticipants {
	0	require PrivacyRule_Data data ;
};
// Constructors:Predicate:privacyValueDisallowChatParticipants 
struct TLprivacyValueDisallowChatParticipants {
	0	require PrivacyRule_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ExportedMessageLink 
// ExportedMessageLink <--
// + TLexportedMessageLink
//
// Constructors:Type:ExportedMessageLink 
struct ExportedMessageLink {
	0 optional int constructor; 
	1 require  ExportedMessageLink_Data data ;
};
// Constructors:Type:Data:ExportedMessageLink 
struct ExportedMessageLink_Data {
	0	optional string link; 
	1	optional string html; 
};
// Constructors:Predicate:exportedMessageLink 
struct TLexportedMessageLink {
	0	require ExportedMessageLink_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:payments_PaymentForm 
// payments_PaymentForm <--
// + TLpayments_paymentForm
//
// Constructors:Type:payments_PaymentForm 
struct payments_PaymentForm {
	0 optional int constructor; 
	1 require  payments_PaymentForm_Data data ;
};
// Constructors:Type:Data:payments_PaymentForm 
struct payments_PaymentForm_Data {
	0	optional bool can_save_credentials; 
	1	optional bool password_missing; 
	2	optional int bot_id; 
	3	optional Invoice invoice; 
	4	optional int provider_id; 
	5	optional string url; 
	6	optional string native_provider; 
	7	optional DataJSON native_params; 
	8	optional PaymentRequestedInfo saved_info; 
	9	optional PaymentSavedCredentials saved_credentials; 
	10	optional vector<User> users; 
};
// Constructors:Predicate:payments_paymentForm 
struct TLpayments_paymentForm {
	0	require payments_PaymentForm_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:TopPeerCategory 
// TopPeerCategory <--
// + TLtopPeerCategoryBotsPM
// + TLtopPeerCategoryBotsInline
// + TLtopPeerCategoryCorrespondents
// + TLtopPeerCategoryGroups
// + TLtopPeerCategoryChannels
// + TLtopPeerCategoryPhoneCalls
// + TLtopPeerCategoryForwardUsers
// + TLtopPeerCategoryForwardChats
//
// Constructors:Type:TopPeerCategory 
struct TopPeerCategory {
	0 optional int constructor; 
	1 require  TopPeerCategory_Data data ;
};
// Constructors:Type:Data:TopPeerCategory 
struct TopPeerCategory_Data {
};
// Constructors:Predicate:topPeerCategoryBotsPM 
struct TLtopPeerCategoryBotsPM {
	0	require TopPeerCategory_Data data ;
};
// Constructors:Predicate:topPeerCategoryBotsInline 
struct TLtopPeerCategoryBotsInline {
	0	require TopPeerCategory_Data data ;
};
// Constructors:Predicate:topPeerCategoryCorrespondents 
struct TLtopPeerCategoryCorrespondents {
	0	require TopPeerCategory_Data data ;
};
// Constructors:Predicate:topPeerCategoryGroups 
struct TLtopPeerCategoryGroups {
	0	require TopPeerCategory_Data data ;
};
// Constructors:Predicate:topPeerCategoryChannels 
struct TLtopPeerCategoryChannels {
	0	require TopPeerCategory_Data data ;
};
// Constructors:Predicate:topPeerCategoryPhoneCalls 
struct TLtopPeerCategoryPhoneCalls {
	0	require TopPeerCategory_Data data ;
};
// Constructors:Predicate:topPeerCategoryForwardUsers 
struct TLtopPeerCategoryForwardUsers {
	0	require TopPeerCategory_Data data ;
};
// Constructors:Predicate:topPeerCategoryForwardChats 
struct TLtopPeerCategoryForwardChats {
	0	require TopPeerCategory_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PageRelatedArticle 
// PageRelatedArticle <--
// + TLpageRelatedArticle
//
// Constructors:Type:PageRelatedArticle 
struct PageRelatedArticle {
	0 optional int constructor; 
	1 require  PageRelatedArticle_Data data ;
};
// Constructors:Type:Data:PageRelatedArticle 
struct PageRelatedArticle_Data {
	0	optional string url; 
	1	optional long webpage_id; 
	2	optional string title; 
	3	optional string description; 
	4	optional long photo_id; 
	5	optional string author; 
	6	optional int published_date; 
};
// Constructors:Predicate:pageRelatedArticle 
struct TLpageRelatedArticle {
	0	require PageRelatedArticle_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_BotCallbackAnswer 
// messages_BotCallbackAnswer <--
// + TLmessages_botCallbackAnswer
//
// Constructors:Type:messages_BotCallbackAnswer 
struct messages_BotCallbackAnswer {
	0 optional int constructor; 
	1 require  messages_BotCallbackAnswer_Data data ;
};
// Constructors:Type:Data:messages_BotCallbackAnswer 
struct messages_BotCallbackAnswer_Data {
	0	optional bool alert; 
	1	optional bool has_url; 
	2	optional bool native_ui; 
	3	optional string message; 
	4	optional string url; 
	5	optional int cache_time; 
};
// Constructors:Predicate:messages_botCallbackAnswer 
struct TLmessages_botCallbackAnswer {
	0	require messages_BotCallbackAnswer_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputStickerSetItem 
// InputStickerSetItem <--
// + TLinputStickerSetItem
//
// Constructors:Type:InputStickerSetItem 
struct InputStickerSetItem {
	0 optional int constructor; 
	1 require  InputStickerSetItem_Data data ;
};
// Constructors:Type:Data:InputStickerSetItem 
struct InputStickerSetItem_Data {
	0	optional InputDocument document; 
	1	optional string emoji; 
	2	optional MaskCoords mask_coords; 
};
// Constructors:Predicate:inputStickerSetItem 
struct TLinputStickerSetItem {
	0	require InputStickerSetItem_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputGeoPoint 
// InputGeoPoint <--
// + TLinputGeoPointEmpty
// + TLinputGeoPoint
//
// Constructors:Type:InputGeoPoint 
struct InputGeoPoint {
	0 optional int constructor; 
	1 require  InputGeoPoint_Data data ;
};
// Constructors:Type:Data:InputGeoPoint 
struct InputGeoPoint_Data {
	0	optional double lat; 
	1	optional double long_key; 
	2	optional int accuracy_radius; 
};
// Constructors:Predicate:inputGeoPointEmpty 
struct TLinputGeoPointEmpty {
	0	require InputGeoPoint_Data data ;
};
// Constructors:Predicate:inputGeoPoint 
struct TLinputGeoPoint {
	0	require InputGeoPoint_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:auth_PasswordRecovery 
// auth_PasswordRecovery <--
// + TLauth_passwordRecovery
//
// Constructors:Type:auth_PasswordRecovery 
struct auth_PasswordRecovery {
	0 optional int constructor; 
	1 require  auth_PasswordRecovery_Data data ;
};
// Constructors:Type:Data:auth_PasswordRecovery 
struct auth_PasswordRecovery_Data {
	0	optional string email_pattern; 
};
// Constructors:Predicate:auth_passwordRecovery 
struct TLauth_passwordRecovery {
	0	require auth_PasswordRecovery_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:BankCardOpenUrl 
// BankCardOpenUrl <--
// + TLbankCardOpenUrl
//
// Constructors:Type:BankCardOpenUrl 
struct BankCardOpenUrl {
	0 optional int constructor; 
	1 require  BankCardOpenUrl_Data data ;
};
// Constructors:Type:Data:BankCardOpenUrl 
struct BankCardOpenUrl_Data {
	0	optional string url; 
	1	optional string name; 
};
// Constructors:Predicate:bankCardOpenUrl 
struct TLbankCardOpenUrl {
	0	require BankCardOpenUrl_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ContactStatus 
// ContactStatus <--
// + TLcontactStatus
//
// Constructors:Type:ContactStatus 
struct ContactStatus {
	0 optional int constructor; 
	1 require  ContactStatus_Data data ;
};
// Constructors:Type:Data:ContactStatus 
struct ContactStatus_Data {
	0	optional int user_id; 
	1	optional UserStatus status; 
};
// Constructors:Predicate:contactStatus 
struct TLcontactStatus {
	0	require ContactStatus_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:KeyboardButtonRow 
// KeyboardButtonRow <--
// + TLkeyboardButtonRow
//
// Constructors:Type:KeyboardButtonRow 
struct KeyboardButtonRow {
	0 optional int constructor; 
	1 require  KeyboardButtonRow_Data data ;
};
// Constructors:Type:Data:KeyboardButtonRow 
struct KeyboardButtonRow_Data {
	0	optional vector<KeyboardButton> buttons; 
};
// Constructors:Predicate:keyboardButtonRow 
struct TLkeyboardButtonRow {
	0	require KeyboardButtonRow_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputFile 
// InputFile <--
// + TLinputFile
// + TLinputFileBig
//
// Constructors:Type:InputFile 
struct InputFile {
	0 optional int constructor; 
	1 require  InputFile_Data data ;
};
// Constructors:Type:Data:InputFile 
struct InputFile_Data {
	0	optional long id; 
	1	optional int parts; 
	2	optional string name; 
	3	optional string md5_checksum; 
};
// Constructors:Predicate:inputFile 
struct TLinputFile {
	0	require InputFile_Data data ;
};
// Constructors:Predicate:inputFileBig 
struct TLinputFileBig {
	0	require InputFile_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PrivacyKey 
// PrivacyKey <--
// + TLprivacyKeyStatusTimestamp
// + TLprivacyKeyChatInvite
// + TLprivacyKeyPhoneCall
// + TLprivacyKeyPhoneP2P
// + TLprivacyKeyForwards
// + TLprivacyKeyProfilePhoto
// + TLprivacyKeyPhoneNumber
// + TLprivacyKeyAddedByPhone
//
// Constructors:Type:PrivacyKey 
struct PrivacyKey {
	0 optional int constructor; 
	1 require  PrivacyKey_Data data ;
};
// Constructors:Type:Data:PrivacyKey 
struct PrivacyKey_Data {
};
// Constructors:Predicate:privacyKeyStatusTimestamp 
struct TLprivacyKeyStatusTimestamp {
	0	require PrivacyKey_Data data ;
};
// Constructors:Predicate:privacyKeyChatInvite 
struct TLprivacyKeyChatInvite {
	0	require PrivacyKey_Data data ;
};
// Constructors:Predicate:privacyKeyPhoneCall 
struct TLprivacyKeyPhoneCall {
	0	require PrivacyKey_Data data ;
};
// Constructors:Predicate:privacyKeyPhoneP2P 
struct TLprivacyKeyPhoneP2P {
	0	require PrivacyKey_Data data ;
};
// Constructors:Predicate:privacyKeyForwards 
struct TLprivacyKeyForwards {
	0	require PrivacyKey_Data data ;
};
// Constructors:Predicate:privacyKeyProfilePhoto 
struct TLprivacyKeyProfilePhoto {
	0	require PrivacyKey_Data data ;
};
// Constructors:Predicate:privacyKeyPhoneNumber 
struct TLprivacyKeyPhoneNumber {
	0	require PrivacyKey_Data data ;
};
// Constructors:Predicate:privacyKeyAddedByPhone 
struct TLprivacyKeyAddedByPhone {
	0	require PrivacyKey_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:WebDocument 
// WebDocument <--
// + TLwebDocument
// + TLwebDocumentNoProxy
//
// Constructors:Type:WebDocument 
struct WebDocument {
	0 optional int constructor; 
	1 require  WebDocument_Data data ;
};
// Constructors:Type:Data:WebDocument 
struct WebDocument_Data {
	0	optional string url; 
	1	optional long access_hash; 
	2	optional int size; 
	3	optional string mime_type; 
	4	optional vector<DocumentAttribute> attributes; 
};
// Constructors:Predicate:webDocument 
struct TLwebDocument {
	0	require WebDocument_Data data ;
};
// Constructors:Predicate:webDocumentNoProxy 
struct TLwebDocumentNoProxy {
	0	require WebDocument_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:help_RecentMeUrls 
// help_RecentMeUrls <--
// + TLhelp_recentMeUrls
//
// Constructors:Type:help_RecentMeUrls 
struct help_RecentMeUrls {
	0 optional int constructor; 
	1 require  help_RecentMeUrls_Data data ;
};
// Constructors:Type:Data:help_RecentMeUrls 
struct help_RecentMeUrls_Data {
	0	optional vector<RecentMeUrl> urls; 
	1	optional vector<Chat> chats; 
	2	optional vector<User> users; 
};
// Constructors:Predicate:help_recentMeUrls 
struct TLhelp_recentMeUrls {
	0	require help_RecentMeUrls_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:payments_ValidatedRequestedInfo 
// payments_ValidatedRequestedInfo <--
// + TLpayments_validatedRequestedInfo
//
// Constructors:Type:payments_ValidatedRequestedInfo 
struct payments_ValidatedRequestedInfo {
	0 optional int constructor; 
	1 require  payments_ValidatedRequestedInfo_Data data ;
};
// Constructors:Type:Data:payments_ValidatedRequestedInfo 
struct payments_ValidatedRequestedInfo_Data {
	0	optional string id; 
	1	optional vector<ShippingOption> shipping_options; 
};
// Constructors:Predicate:payments_validatedRequestedInfo 
struct TLpayments_validatedRequestedInfo {
	0	require payments_ValidatedRequestedInfo_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageReplyHeader 
// MessageReplyHeader <--
// + TLmessageReplyHeader
//
// Constructors:Type:MessageReplyHeader 
struct MessageReplyHeader {
	0 optional int constructor; 
	1 require  MessageReplyHeader_Data data ;
};
// Constructors:Type:Data:MessageReplyHeader 
struct MessageReplyHeader_Data {
	0	optional int reply_to_msg_id; 
	1	optional Peer reply_to_peer_id; 
	2	optional int reply_to_top_id; 
};
// Constructors:Predicate:messageReplyHeader 
struct TLmessageReplyHeader {
	0	require MessageReplyHeader_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:help_CountryCode 
// help_CountryCode <--
// + TLhelp_countryCode
//
// Constructors:Type:help_CountryCode 
struct help_CountryCode {
	0 optional int constructor; 
	1 require  help_CountryCode_Data data ;
};
// Constructors:Type:Data:help_CountryCode 
struct help_CountryCode_Data {
	0	optional string country_code; 
	1	optional vector<string> prefixes; 
	2	optional vector<string> patterns; 
};
// Constructors:Predicate:help_countryCode 
struct TLhelp_countryCode {
	0	require help_CountryCode_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ChatOnlines 
// ChatOnlines <--
// + TLchatOnlines
//
// Constructors:Type:ChatOnlines 
struct ChatOnlines {
	0 optional int constructor; 
	1 require  ChatOnlines_Data data ;
};
// Constructors:Type:Data:ChatOnlines 
struct ChatOnlines_Data {
	0	optional int onlines; 
};
// Constructors:Predicate:chatOnlines 
struct TLchatOnlines {
	0	require ChatOnlines_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:User 
// User <--
// + TLuserEmpty
// + TLuser
//
// Constructors:Type:User 
struct User {
	0 optional int constructor; 
	1 require  User_Data data ;
};
// Constructors:Type:Data:User 
struct User_Data {
	0	optional int id; 
	1	optional bool self; 
	2	optional bool contact; 
	3	optional bool mutual_contact; 
	4	optional bool deleted; 
	5	optional bool bot; 
	6	optional bool bot_chat_history; 
	7	optional bool bot_nochats; 
	8	optional bool verified; 
	9	optional bool restricted; 
	10	optional bool min; 
	11	optional bool bot_inline_geo; 
	12	optional bool support; 
	13	optional bool scam; 
	14	optional bool apply_min_photo; 
	15	optional long access_hash; 
	16	optional string first_name; 
	17	optional string last_name; 
	18	optional string username; 
	19	optional string phone; 
	20	optional UserProfilePhoto photo; 
	21	optional UserStatus status; 
	22	optional int bot_info_version; 
	23	optional vector<RestrictionReason> restriction_reason; 
	24	optional string bot_inline_placeholder; 
	25	optional string lang_code; 
};
// Constructors:Predicate:userEmpty 
struct TLuserEmpty {
	0	require User_Data data ;
};
// Constructors:Predicate:user 
struct TLuser {
	0	require User_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:help_TermsOfServiceUpdate 
// help_TermsOfServiceUpdate <--
// + TLhelp_termsOfServiceUpdateEmpty
// + TLhelp_termsOfServiceUpdate
//
// Constructors:Type:help_TermsOfServiceUpdate 
struct help_TermsOfServiceUpdate {
	0 optional int constructor; 
	1 require  help_TermsOfServiceUpdate_Data data ;
};
// Constructors:Type:Data:help_TermsOfServiceUpdate 
struct help_TermsOfServiceUpdate_Data {
	0	optional int expires; 
	1	optional help_TermsOfService terms_of_service; 
};
// Constructors:Predicate:help_termsOfServiceUpdateEmpty 
struct TLhelp_termsOfServiceUpdateEmpty {
	0	require help_TermsOfServiceUpdate_Data data ;
};
// Constructors:Predicate:help_termsOfServiceUpdate 
struct TLhelp_termsOfServiceUpdate {
	0	require help_TermsOfServiceUpdate_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:FileLocation 
// FileLocation <--
// + TLfileLocationToBeDeprecated
//
// Constructors:Type:FileLocation 
struct FileLocation {
	0 optional int constructor; 
	1 require  FileLocation_Data data ;
};
// Constructors:Type:Data:FileLocation 
struct FileLocation_Data {
	0	optional long volume_id; 
	1	optional int local_id; 
};
// Constructors:Predicate:fileLocationToBeDeprecated 
struct TLfileLocationToBeDeprecated {
	0	require FileLocation_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_SearchCounter 
// messages_SearchCounter <--
// + TLmessages_searchCounter
//
// Constructors:Type:messages_SearchCounter 
struct messages_SearchCounter {
	0 optional int constructor; 
	1 require  messages_SearchCounter_Data data ;
};
// Constructors:Type:Data:messages_SearchCounter 
struct messages_SearchCounter_Data {
	0	optional bool inexact; 
	1	optional MessagesFilter filter; 
	2	optional int count; 
};
// Constructors:Predicate:messages_searchCounter 
struct TLmessages_searchCounter {
	0	require messages_SearchCounter_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PageListItem 
// PageListItem <--
// + TLpageListItemText
// + TLpageListItemBlocks
//
// Constructors:Type:PageListItem 
struct PageListItem {
	0 optional int constructor; 
	1 require  PageListItem_Data data ;
};
// Constructors:Type:Data:PageListItem 
struct PageListItem_Data {
	0	optional RichText text; 
	1	optional vector<PageBlock> blocks; 
};
// Constructors:Predicate:pageListItemText 
struct TLpageListItemText {
	0	require PageListItem_Data data ;
};
// Constructors:Predicate:pageListItemBlocks 
struct TLpageListItemBlocks {
	0	require PageListItem_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:SendMessageAction 
// SendMessageAction <--
// + TLsendMessageTypingAction
// + TLsendMessageCancelAction
// + TLsendMessageRecordVideoAction
// + TLsendMessageUploadVideoAction
// + TLsendMessageRecordAudioAction
// + TLsendMessageUploadAudioAction
// + TLsendMessageUploadPhotoAction
// + TLsendMessageUploadDocumentAction
// + TLsendMessageGeoLocationAction
// + TLsendMessageChooseContactAction
// + TLsendMessageGamePlayAction
// + TLsendMessageRecordRoundAction
// + TLsendMessageUploadRoundAction
//
// Constructors:Type:SendMessageAction 
struct SendMessageAction {
	0 optional int constructor; 
	1 require  SendMessageAction_Data data ;
};
// Constructors:Type:Data:SendMessageAction 
struct SendMessageAction_Data {
	0	optional int progress; 
};
// Constructors:Predicate:sendMessageTypingAction 
struct TLsendMessageTypingAction {
	0	require SendMessageAction_Data data ;
};
// Constructors:Predicate:sendMessageCancelAction 
struct TLsendMessageCancelAction {
	0	require SendMessageAction_Data data ;
};
// Constructors:Predicate:sendMessageRecordVideoAction 
struct TLsendMessageRecordVideoAction {
	0	require SendMessageAction_Data data ;
};
// Constructors:Predicate:sendMessageUploadVideoAction 
struct TLsendMessageUploadVideoAction {
	0	require SendMessageAction_Data data ;
};
// Constructors:Predicate:sendMessageRecordAudioAction 
struct TLsendMessageRecordAudioAction {
	0	require SendMessageAction_Data data ;
};
// Constructors:Predicate:sendMessageUploadAudioAction 
struct TLsendMessageUploadAudioAction {
	0	require SendMessageAction_Data data ;
};
// Constructors:Predicate:sendMessageUploadPhotoAction 
struct TLsendMessageUploadPhotoAction {
	0	require SendMessageAction_Data data ;
};
// Constructors:Predicate:sendMessageUploadDocumentAction 
struct TLsendMessageUploadDocumentAction {
	0	require SendMessageAction_Data data ;
};
// Constructors:Predicate:sendMessageGeoLocationAction 
struct TLsendMessageGeoLocationAction {
	0	require SendMessageAction_Data data ;
};
// Constructors:Predicate:sendMessageChooseContactAction 
struct TLsendMessageChooseContactAction {
	0	require SendMessageAction_Data data ;
};
// Constructors:Predicate:sendMessageGamePlayAction 
struct TLsendMessageGamePlayAction {
	0	require SendMessageAction_Data data ;
};
// Constructors:Predicate:sendMessageRecordRoundAction 
struct TLsendMessageRecordRoundAction {
	0	require SendMessageAction_Data data ;
};
// Constructors:Predicate:sendMessageUploadRoundAction 
struct TLsendMessageUploadRoundAction {
	0	require SendMessageAction_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:AccountDaysTTL 
// AccountDaysTTL <--
// + TLaccountDaysTTL
//
// Constructors:Type:AccountDaysTTL 
struct AccountDaysTTL {
	0 optional int constructor; 
	1 require  AccountDaysTTL_Data data ;
};
// Constructors:Type:Data:AccountDaysTTL 
struct AccountDaysTTL_Data {
	0	optional int days; 
};
// Constructors:Predicate:accountDaysTTL 
struct TLaccountDaysTTL {
	0	require AccountDaysTTL_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Contact 
// Contact <--
// + TLcontact
//
// Constructors:Type:Contact 
struct Contact {
	0 optional int constructor; 
	1 require  Contact_Data data ;
};
// Constructors:Type:Data:Contact 
struct Contact_Data {
	0	optional int user_id; 
	1	optional Bool mutual; 
};
// Constructors:Predicate:contact 
struct TLcontact {
	0	require Contact_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_ArchivedStickers 
// messages_ArchivedStickers <--
// + TLmessages_archivedStickers
//
// Constructors:Type:messages_ArchivedStickers 
struct messages_ArchivedStickers {
	0 optional int constructor; 
	1 require  messages_ArchivedStickers_Data data ;
};
// Constructors:Type:Data:messages_ArchivedStickers 
struct messages_ArchivedStickers_Data {
	0	optional int count; 
	1	optional vector<StickerSetCovered> sets; 
};
// Constructors:Predicate:messages_archivedStickers 
struct TLmessages_archivedStickers {
	0	require messages_ArchivedStickers_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PageTableCell 
// PageTableCell <--
// + TLpageTableCell
//
// Constructors:Type:PageTableCell 
struct PageTableCell {
	0 optional int constructor; 
	1 require  PageTableCell_Data data ;
};
// Constructors:Type:Data:PageTableCell 
struct PageTableCell_Data {
	0	optional bool header; 
	1	optional bool align_center; 
	2	optional bool align_right; 
	3	optional bool valign_middle; 
	4	optional bool valign_bottom; 
	5	optional RichText text; 
	6	optional int colspan; 
	7	optional int rowspan; 
};
// Constructors:Predicate:pageTableCell 
struct TLpageTableCell {
	0	require PageTableCell_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:account_Takeout 
// account_Takeout <--
// + TLaccount_takeout
//
// Constructors:Type:account_Takeout 
struct account_Takeout {
	0 optional int constructor; 
	1 require  account_Takeout_Data data ;
};
// Constructors:Type:Data:account_Takeout 
struct account_Takeout_Data {
	0	optional long id; 
};
// Constructors:Predicate:account_takeout 
struct TLaccount_takeout {
	0	require account_Takeout_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:payments_PaymentReceipt 
// payments_PaymentReceipt <--
// + TLpayments_paymentReceipt
//
// Constructors:Type:payments_PaymentReceipt 
struct payments_PaymentReceipt {
	0 optional int constructor; 
	1 require  payments_PaymentReceipt_Data data ;
};
// Constructors:Type:Data:payments_PaymentReceipt 
struct payments_PaymentReceipt_Data {
	0	optional int date; 
	1	optional int bot_id; 
	2	optional Invoice invoice; 
	3	optional int provider_id; 
	4	optional PaymentRequestedInfo info; 
	5	optional ShippingOption shipping; 
	6	optional string currency; 
	7	optional long total_amount; 
	8	optional string credentials_title; 
	9	optional vector<User> users; 
};
// Constructors:Predicate:payments_paymentReceipt 
struct TLpayments_paymentReceipt {
	0	require payments_PaymentReceipt_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:TopPeer 
// TopPeer <--
// + TLtopPeer
//
// Constructors:Type:TopPeer 
struct TopPeer {
	0 optional int constructor; 
	1 require  TopPeer_Data data ;
};
// Constructors:Type:Data:TopPeer 
struct TopPeer_Data {
	0	optional Peer peer; 
	1	optional double rating; 
};
// Constructors:Predicate:topPeer 
struct TLtopPeer {
	0	require TopPeer_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Update 
// Update <--
// + TLupdateNewMessage
// + TLupdateMessageID
// + TLupdateDeleteMessages
// + TLupdateUserTyping
// + TLupdateChatUserTyping
// + TLupdateChatParticipants
// + TLupdateUserStatus
// + TLupdateUserName
// + TLupdateUserPhoto
// + TLupdateNewEncryptedMessage
// + TLupdateEncryptedChatTyping
// + TLupdateEncryption
// + TLupdateEncryptedMessagesRead
// + TLupdateChatParticipantAdd
// + TLupdateChatParticipantDelete
// + TLupdateDcOptions
// + TLupdateNotifySettings
// + TLupdateServiceNotification
// + TLupdatePrivacy
// + TLupdateUserPhone
// + TLupdateReadHistoryInbox
// + TLupdateReadHistoryOutbox
// + TLupdateWebPage
// + TLupdateReadMessagesContents
// + TLupdateChannelTooLong
// + TLupdateChannel
// + TLupdateNewChannelMessage
// + TLupdateReadChannelInbox
// + TLupdateDeleteChannelMessages
// + TLupdateChannelMessageViews
// + TLupdateChatParticipantAdmin
// + TLupdateNewStickerSet
// + TLupdateStickerSetsOrder
// + TLupdateStickerSets
// + TLupdateSavedGifs
// + TLupdateBotInlineQuery
// + TLupdateBotInlineSend
// + TLupdateEditChannelMessage
// + TLupdateBotCallbackQuery
// + TLupdateEditMessage
// + TLupdateInlineBotCallbackQuery
// + TLupdateReadChannelOutbox
// + TLupdateDraftMessage
// + TLupdateReadFeaturedStickers
// + TLupdateRecentStickers
// + TLupdateConfig
// + TLupdatePtsChanged
// + TLupdateChannelWebPage
// + TLupdateDialogPinned
// + TLupdatePinnedDialogs
// + TLupdateBotWebhookJSON
// + TLupdateBotWebhookJSONQuery
// + TLupdateBotShippingQuery
// + TLupdateBotPrecheckoutQuery
// + TLupdatePhoneCall
// + TLupdateLangPackTooLong
// + TLupdateLangPack
// + TLupdateFavedStickers
// + TLupdateChannelReadMessagesContents
// + TLupdateContactsReset
// + TLupdateChannelAvailableMessages
// + TLupdateDialogUnreadMark
// + TLupdateMessagePoll
// + TLupdateChatDefaultBannedRights
// + TLupdateFolderPeers
// + TLupdatePeerSettings
// + TLupdatePeerLocated
// + TLupdateNewScheduledMessage
// + TLupdateDeleteScheduledMessages
// + TLupdateTheme
// + TLupdateGeoLiveViewed
// + TLupdateLoginToken
// + TLupdateMessagePollVote
// + TLupdateDialogFilter
// + TLupdateDialogFilterOrder
// + TLupdateDialogFilters
// + TLupdatePhoneCallSignalingData
// + TLupdateChannelParticipant
// + TLupdateChannelMessageForwards
// + TLupdateReadChannelDiscussionInbox
// + TLupdateReadChannelDiscussionOutbox
// + TLupdatePeerBlocked
// + TLupdateChannelUserTyping
// + TLupdatePinnedMessages
// + TLupdatePinnedChannelMessages
//
// Constructors:Type:Update 
struct Update {
	0 optional int constructor; 
	1 require  Update_Data data ;
};
// Constructors:Type:Data:Update 
struct Update_Data {
	0	optional Message message; 
	1	optional int pts; 
	2	optional int pts_count; 
	3	optional int id; 
	4	optional long random_id; 
	5	optional vector<int> messages; 
	6	optional int user_id; 
	7	optional SendMessageAction action; 
	8	optional int chat_id; 
	9	optional ChatParticipants participants; 
	10	optional UserStatus status; 
	11	optional string first_name; 
	12	optional string last_name; 
	13	optional string username; 
	14	optional int date; 
	15	optional UserProfilePhoto photo; 
	16	optional Bool previous; 
	17	optional EncryptedMessage message_18; 
	18	optional int qts; 
	19	optional EncryptedChat chat; 
	20	optional int max_date; 
	21	optional int inviter_id; 
	22	optional int version; 
	23	optional vector<DcOption> dc_options; 
	24	optional NotifyPeer peer; 
	25	optional PeerNotifySettings notify_settings; 
	26	optional bool popup; 
	27	optional int inbox_date; 
	28	optional string type; 
	29	optional string message_30; 
	30	optional MessageMedia media; 
	31	optional vector<MessageEntity> entities; 
	32	optional PrivacyKey key_key; 
	33	optional vector<PrivacyRule> rules; 
	34	optional string phone; 
	35	optional int folder_id; 
	36	optional Peer peer_37; 
	37	optional int max_id; 
	38	optional int still_unread_count; 
	39	optional WebPage webpage; 
	40	optional int channel_id; 
	41	optional int views; 
	42	optional Bool is_admin; 
	43	optional messages_StickerSet stickerset; 
	44	optional bool masks; 
	45	optional vector<long> order; 
	46	optional long query_id; 
	47	optional string query; 
	48	optional GeoPoint geo; 
	49	optional string offset; 
	50	optional string id_51; 
	51	optional InputBotInlineMessageID msg_id; 
	52	optional int msg_id_53; 
	53	optional long chat_instance; 
	54	optional vector<unsigned byte> data; 
	55	optional string game_short_name; 
	56	optional DraftMessage draft; 
	57	optional bool pinned; 
	58	optional DialogPeer peer_59; 
	59	optional vector<DialogPeer> order_60; 
	60	optional DataJSON data_61; 
	61	optional int timeout; 
	62	optional vector<unsigned byte> payload; 
	63	optional PostAddress shipping_address; 
	64	optional PaymentRequestedInfo info; 
	65	optional string shipping_option_id; 
	66	optional string currency; 
	67	optional long total_amount; 
	68	optional PhoneCall phone_call; 
	69	optional string lang_code; 
	70	optional LangPackDifference difference; 
	71	optional int available_min_id; 
	72	optional bool unread; 
	73	optional long poll_id; 
	74	optional Poll poll; 
	75	optional PollResults results; 
	76	optional ChatBannedRights default_banned_rights; 
	77	optional vector<FolderPeer> folder_peers; 
	78	optional PeerSettings settings; 
	79	optional vector<PeerLocated> peers; 
	80	optional Theme theme; 
	81	optional vector<vector<unsigned byte>> options; 
	82	optional DialogFilter filter; 
	83	optional vector<int> order_84; 
	84	optional long phone_call_id; 
	85	optional ChannelParticipant prev_participant; 
	86	optional ChannelParticipant new_participant; 
	87	optional int forwards; 
	88	optional int top_msg_id; 
	89	optional int read_max_id; 
	90	optional int broadcast_id; 
	91	optional int broadcast_post; 
	92	optional Peer peer_id; 
	93	optional Bool blocked; 
};
// Constructors:Predicate:updateNewMessage 
struct TLupdateNewMessage {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateMessageID 
struct TLupdateMessageID {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateDeleteMessages 
struct TLupdateDeleteMessages {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateUserTyping 
struct TLupdateUserTyping {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateChatUserTyping 
struct TLupdateChatUserTyping {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateChatParticipants 
struct TLupdateChatParticipants {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateUserStatus 
struct TLupdateUserStatus {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateUserName 
struct TLupdateUserName {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateUserPhoto 
struct TLupdateUserPhoto {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateNewEncryptedMessage 
struct TLupdateNewEncryptedMessage {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateEncryptedChatTyping 
struct TLupdateEncryptedChatTyping {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateEncryption 
struct TLupdateEncryption {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateEncryptedMessagesRead 
struct TLupdateEncryptedMessagesRead {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateChatParticipantAdd 
struct TLupdateChatParticipantAdd {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateChatParticipantDelete 
struct TLupdateChatParticipantDelete {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateDcOptions 
struct TLupdateDcOptions {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateNotifySettings 
struct TLupdateNotifySettings {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateServiceNotification 
struct TLupdateServiceNotification {
	0	require Update_Data data ;
};
// Constructors:Predicate:updatePrivacy 
struct TLupdatePrivacy {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateUserPhone 
struct TLupdateUserPhone {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateReadHistoryInbox 
struct TLupdateReadHistoryInbox {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateReadHistoryOutbox 
struct TLupdateReadHistoryOutbox {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateWebPage 
struct TLupdateWebPage {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateReadMessagesContents 
struct TLupdateReadMessagesContents {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateChannelTooLong 
struct TLupdateChannelTooLong {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateChannel 
struct TLupdateChannel {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateNewChannelMessage 
struct TLupdateNewChannelMessage {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateReadChannelInbox 
struct TLupdateReadChannelInbox {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateDeleteChannelMessages 
struct TLupdateDeleteChannelMessages {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateChannelMessageViews 
struct TLupdateChannelMessageViews {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateChatParticipantAdmin 
struct TLupdateChatParticipantAdmin {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateNewStickerSet 
struct TLupdateNewStickerSet {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateStickerSetsOrder 
struct TLupdateStickerSetsOrder {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateStickerSets 
struct TLupdateStickerSets {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateSavedGifs 
struct TLupdateSavedGifs {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateBotInlineQuery 
struct TLupdateBotInlineQuery {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateBotInlineSend 
struct TLupdateBotInlineSend {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateEditChannelMessage 
struct TLupdateEditChannelMessage {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateBotCallbackQuery 
struct TLupdateBotCallbackQuery {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateEditMessage 
struct TLupdateEditMessage {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateInlineBotCallbackQuery 
struct TLupdateInlineBotCallbackQuery {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateReadChannelOutbox 
struct TLupdateReadChannelOutbox {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateDraftMessage 
struct TLupdateDraftMessage {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateReadFeaturedStickers 
struct TLupdateReadFeaturedStickers {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateRecentStickers 
struct TLupdateRecentStickers {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateConfig 
struct TLupdateConfig {
	0	require Update_Data data ;
};
// Constructors:Predicate:updatePtsChanged 
struct TLupdatePtsChanged {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateChannelWebPage 
struct TLupdateChannelWebPage {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateDialogPinned 
struct TLupdateDialogPinned {
	0	require Update_Data data ;
};
// Constructors:Predicate:updatePinnedDialogs 
struct TLupdatePinnedDialogs {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateBotWebhookJSON 
struct TLupdateBotWebhookJSON {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateBotWebhookJSONQuery 
struct TLupdateBotWebhookJSONQuery {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateBotShippingQuery 
struct TLupdateBotShippingQuery {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateBotPrecheckoutQuery 
struct TLupdateBotPrecheckoutQuery {
	0	require Update_Data data ;
};
// Constructors:Predicate:updatePhoneCall 
struct TLupdatePhoneCall {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateLangPackTooLong 
struct TLupdateLangPackTooLong {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateLangPack 
struct TLupdateLangPack {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateFavedStickers 
struct TLupdateFavedStickers {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateChannelReadMessagesContents 
struct TLupdateChannelReadMessagesContents {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateContactsReset 
struct TLupdateContactsReset {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateChannelAvailableMessages 
struct TLupdateChannelAvailableMessages {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateDialogUnreadMark 
struct TLupdateDialogUnreadMark {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateMessagePoll 
struct TLupdateMessagePoll {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateChatDefaultBannedRights 
struct TLupdateChatDefaultBannedRights {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateFolderPeers 
struct TLupdateFolderPeers {
	0	require Update_Data data ;
};
// Constructors:Predicate:updatePeerSettings 
struct TLupdatePeerSettings {
	0	require Update_Data data ;
};
// Constructors:Predicate:updatePeerLocated 
struct TLupdatePeerLocated {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateNewScheduledMessage 
struct TLupdateNewScheduledMessage {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateDeleteScheduledMessages 
struct TLupdateDeleteScheduledMessages {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateTheme 
struct TLupdateTheme {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateGeoLiveViewed 
struct TLupdateGeoLiveViewed {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateLoginToken 
struct TLupdateLoginToken {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateMessagePollVote 
struct TLupdateMessagePollVote {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateDialogFilter 
struct TLupdateDialogFilter {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateDialogFilterOrder 
struct TLupdateDialogFilterOrder {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateDialogFilters 
struct TLupdateDialogFilters {
	0	require Update_Data data ;
};
// Constructors:Predicate:updatePhoneCallSignalingData 
struct TLupdatePhoneCallSignalingData {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateChannelParticipant 
struct TLupdateChannelParticipant {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateChannelMessageForwards 
struct TLupdateChannelMessageForwards {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateReadChannelDiscussionInbox 
struct TLupdateReadChannelDiscussionInbox {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateReadChannelDiscussionOutbox 
struct TLupdateReadChannelDiscussionOutbox {
	0	require Update_Data data ;
};
// Constructors:Predicate:updatePeerBlocked 
struct TLupdatePeerBlocked {
	0	require Update_Data data ;
};
// Constructors:Predicate:updateChannelUserTyping 
struct TLupdateChannelUserTyping {
	0	require Update_Data data ;
};
// Constructors:Predicate:updatePinnedMessages 
struct TLupdatePinnedMessages {
	0	require Update_Data data ;
};
// Constructors:Predicate:updatePinnedChannelMessages 
struct TLupdatePinnedChannelMessages {
	0	require Update_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:BotInlineMessage 
// BotInlineMessage <--
// + TLbotInlineMessageMediaAuto
// + TLbotInlineMessageText
// + TLbotInlineMessageMediaGeo
// + TLbotInlineMessageMediaVenue
// + TLbotInlineMessageMediaContact
//
// Constructors:Type:BotInlineMessage 
struct BotInlineMessage {
	0 optional int constructor; 
	1 require  BotInlineMessage_Data data ;
};
// Constructors:Type:Data:BotInlineMessage 
struct BotInlineMessage_Data {
	0	optional string message; 
	1	optional vector<MessageEntity> entities; 
	2	optional ReplyMarkup reply_markup; 
	3	optional bool no_webpage; 
	4	optional GeoPoint geo; 
	5	optional int heading; 
	6	optional int period; 
	7	optional int proximity_notification_radius; 
	8	optional string title; 
	9	optional string address; 
	10	optional string provider; 
	11	optional string venue_id; 
	12	optional string venue_type; 
	13	optional string phone_number; 
	14	optional string first_name; 
	15	optional string last_name; 
	16	optional string vcard; 
};
// Constructors:Predicate:botInlineMessageMediaAuto 
struct TLbotInlineMessageMediaAuto {
	0	require BotInlineMessage_Data data ;
};
// Constructors:Predicate:botInlineMessageText 
struct TLbotInlineMessageText {
	0	require BotInlineMessage_Data data ;
};
// Constructors:Predicate:botInlineMessageMediaGeo 
struct TLbotInlineMessageMediaGeo {
	0	require BotInlineMessage_Data data ;
};
// Constructors:Predicate:botInlineMessageMediaVenue 
struct TLbotInlineMessageMediaVenue {
	0	require BotInlineMessage_Data data ;
};
// Constructors:Predicate:botInlineMessageMediaContact 
struct TLbotInlineMessageMediaContact {
	0	require BotInlineMessage_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputNotifyPeer 
// InputNotifyPeer <--
// + TLinputNotifyPeer
// + TLinputNotifyUsers
// + TLinputNotifyChats
// + TLinputNotifyBroadcasts
//
// Constructors:Type:InputNotifyPeer 
struct InputNotifyPeer {
	0 optional int constructor; 
	1 require  InputNotifyPeer_Data data ;
};
// Constructors:Type:Data:InputNotifyPeer 
struct InputNotifyPeer_Data {
	0	optional InputPeer peer; 
};
// Constructors:Predicate:inputNotifyPeer 
struct TLinputNotifyPeer {
	0	require InputNotifyPeer_Data data ;
};
// Constructors:Predicate:inputNotifyUsers 
struct TLinputNotifyUsers {
	0	require InputNotifyPeer_Data data ;
};
// Constructors:Predicate:inputNotifyChats 
struct TLinputNotifyChats {
	0	require InputNotifyPeer_Data data ;
};
// Constructors:Predicate:inputNotifyBroadcasts 
struct TLinputNotifyBroadcasts {
	0	require InputNotifyPeer_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:EncryptedMessage 
// EncryptedMessage <--
// + TLencryptedMessage
// + TLencryptedMessageService
//
// Constructors:Type:EncryptedMessage 
struct EncryptedMessage {
	0 optional int constructor; 
	1 require  EncryptedMessage_Data data ;
};
// Constructors:Type:Data:EncryptedMessage 
struct EncryptedMessage_Data {
	0	optional long random_id; 
	1	optional int chat_id; 
	2	optional int date; 
	3	optional vector<unsigned byte> bytes; 
	4	optional EncryptedFile file; 
};
// Constructors:Predicate:encryptedMessage 
struct TLencryptedMessage {
	0	require EncryptedMessage_Data data ;
};
// Constructors:Predicate:encryptedMessageService 
struct TLencryptedMessageService {
	0	require EncryptedMessage_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputDocument 
// InputDocument <--
// + TLinputDocumentEmpty
// + TLinputDocument
//
// Constructors:Type:InputDocument 
struct InputDocument {
	0 optional int constructor; 
	1 require  InputDocument_Data data ;
};
// Constructors:Type:Data:InputDocument 
struct InputDocument_Data {
	0	optional long id; 
	1	optional long access_hash; 
	2	optional vector<unsigned byte> file_reference; 
};
// Constructors:Predicate:inputDocumentEmpty 
struct TLinputDocumentEmpty {
	0	require InputDocument_Data data ;
};
// Constructors:Predicate:inputDocument 
struct TLinputDocument {
	0	require InputDocument_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageViews 
// MessageViews <--
// + TLmessageViews
//
// Constructors:Type:MessageViews 
struct MessageViews {
	0 optional int constructor; 
	1 require  MessageViews_Data data ;
};
// Constructors:Type:Data:MessageViews 
struct MessageViews_Data {
	0	optional int views; 
	1	optional int forwards; 
	2	optional MessageReplies replies; 
};
// Constructors:Predicate:messageViews 
struct TLmessageViews {
	0	require MessageViews_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:WebAuthorization 
// WebAuthorization <--
// + TLwebAuthorization
//
// Constructors:Type:WebAuthorization 
struct WebAuthorization {
	0 optional int constructor; 
	1 require  WebAuthorization_Data data ;
};
// Constructors:Type:Data:WebAuthorization 
struct WebAuthorization_Data {
	0	optional long hash; 
	1	optional int bot_id; 
	2	optional string domain; 
	3	optional string browser; 
	4	optional string platform; 
	5	optional int date_created; 
	6	optional int date_active; 
	7	optional string ip; 
	8	optional string region; 
};
// Constructors:Predicate:webAuthorization 
struct TLwebAuthorization {
	0	require WebAuthorization_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputContact 
// InputContact <--
// + TLinputPhoneContact
//
// Constructors:Type:InputContact 
struct InputContact {
	0 optional int constructor; 
	1 require  InputContact_Data data ;
};
// Constructors:Type:Data:InputContact 
struct InputContact_Data {
	0	optional long client_id; 
	1	optional string phone; 
	2	optional string first_name; 
	3	optional string last_name; 
};
// Constructors:Predicate:inputPhoneContact 
struct TLinputPhoneContact {
	0	require InputContact_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputPhoneCall 
// InputPhoneCall <--
// + TLinputPhoneCall
//
// Constructors:Type:InputPhoneCall 
struct InputPhoneCall {
	0 optional int constructor; 
	1 require  InputPhoneCall_Data data ;
};
// Constructors:Type:Data:InputPhoneCall 
struct InputPhoneCall_Data {
	0	optional long id; 
	1	optional long access_hash; 
};
// Constructors:Predicate:inputPhoneCall 
struct TLinputPhoneCall {
	0	require InputPhoneCall_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_MessageViews 
// messages_MessageViews <--
// + TLmessages_messageViews
//
// Constructors:Type:messages_MessageViews 
struct messages_MessageViews {
	0 optional int constructor; 
	1 require  messages_MessageViews_Data data ;
};
// Constructors:Type:Data:messages_MessageViews 
struct messages_MessageViews_Data {
	0	optional vector<MessageViews> views; 
	1	optional vector<Chat> chats; 
	2	optional vector<User> users; 
};
// Constructors:Predicate:messages_messageViews 
struct TLmessages_messageViews {
	0	require messages_MessageViews_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_FeaturedStickers 
// messages_FeaturedStickers <--
// + TLmessages_featuredStickersNotModified
// + TLmessages_featuredStickers
//
// Constructors:Type:messages_FeaturedStickers 
struct messages_FeaturedStickers {
	0 optional int constructor; 
	1 require  messages_FeaturedStickers_Data data ;
};
// Constructors:Type:Data:messages_FeaturedStickers 
struct messages_FeaturedStickers_Data {
	0	optional int count; 
	1	optional int hash; 
	2	optional vector<StickerSetCovered> sets; 
	3	optional vector<long> unread; 
};
// Constructors:Predicate:messages_featuredStickersNotModified 
struct TLmessages_featuredStickersNotModified {
	0	require messages_FeaturedStickers_Data data ;
};
// Constructors:Predicate:messages_featuredStickers 
struct TLmessages_featuredStickers {
	0	require messages_FeaturedStickers_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:UserFull 
// UserFull <--
// + TLuserFull
//
// Constructors:Type:UserFull 
struct UserFull {
	0 optional int constructor; 
	1 require  UserFull_Data data ;
};
// Constructors:Type:Data:UserFull 
struct UserFull_Data {
	0	optional bool blocked; 
	1	optional bool phone_calls_available; 
	2	optional bool phone_calls_private; 
	3	optional bool can_pin_message; 
	4	optional bool has_scheduled; 
	5	optional bool video_calls_available; 
	6	optional User user; 
	7	optional string about; 
	8	optional PeerSettings settings; 
	9	optional Photo profile_photo; 
	10	optional PeerNotifySettings notify_settings; 
	11	optional BotInfo bot_info; 
	12	optional int pinned_msg_id; 
	13	optional int common_chats_count; 
	14	optional int folder_id; 
};
// Constructors:Predicate:userFull 
struct TLuserFull {
	0	require UserFull_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:account_PrivacyRules 
// account_PrivacyRules <--
// + TLaccount_privacyRules
//
// Constructors:Type:account_PrivacyRules 
struct account_PrivacyRules {
	0 optional int constructor; 
	1 require  account_PrivacyRules_Data data ;
};
// Constructors:Type:Data:account_PrivacyRules 
struct account_PrivacyRules_Data {
	0	optional vector<PrivacyRule> rules; 
	1	optional vector<Chat> chats; 
	2	optional vector<User> users; 
};
// Constructors:Predicate:account_privacyRules 
struct TLaccount_privacyRules {
	0	require account_PrivacyRules_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageUserVote 
// MessageUserVote <--
// + TLmessageUserVote
// + TLmessageUserVoteInputOption
// + TLmessageUserVoteMultiple
//
// Constructors:Type:MessageUserVote 
struct MessageUserVote {
	0 optional int constructor; 
	1 require  MessageUserVote_Data data ;
};
// Constructors:Type:Data:MessageUserVote 
struct MessageUserVote_Data {
	0	optional int user_id; 
	1	optional vector<unsigned byte> option; 
	2	optional int date; 
	3	optional vector<vector<unsigned byte>> options; 
};
// Constructors:Predicate:messageUserVote 
struct TLmessageUserVote {
	0	require MessageUserVote_Data data ;
};
// Constructors:Predicate:messageUserVoteInputOption 
struct TLmessageUserVoteInputOption {
	0	require MessageUserVote_Data data ;
};
// Constructors:Predicate:messageUserVoteMultiple 
struct TLmessageUserVoteMultiple {
	0	require MessageUserVote_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputEncryptedFile 
// InputEncryptedFile <--
// + TLinputEncryptedFileEmpty
// + TLinputEncryptedFileUploaded
// + TLinputEncryptedFile
// + TLinputEncryptedFileBigUploaded
//
// Constructors:Type:InputEncryptedFile 
struct InputEncryptedFile {
	0 optional int constructor; 
	1 require  InputEncryptedFile_Data data ;
};
// Constructors:Type:Data:InputEncryptedFile 
struct InputEncryptedFile_Data {
	0	optional long id; 
	1	optional int parts; 
	2	optional string md5_checksum; 
	3	optional int key_fingerprint; 
	4	optional long access_hash; 
};
// Constructors:Predicate:inputEncryptedFileEmpty 
struct TLinputEncryptedFileEmpty {
	0	require InputEncryptedFile_Data data ;
};
// Constructors:Predicate:inputEncryptedFileUploaded 
struct TLinputEncryptedFileUploaded {
	0	require InputEncryptedFile_Data data ;
};
// Constructors:Predicate:inputEncryptedFile 
struct TLinputEncryptedFile {
	0	require InputEncryptedFile_Data data ;
};
// Constructors:Predicate:inputEncryptedFileBigUploaded 
struct TLinputEncryptedFileBigUploaded {
	0	require InputEncryptedFile_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:payments_SavedInfo 
// payments_SavedInfo <--
// + TLpayments_savedInfo
//
// Constructors:Type:payments_SavedInfo 
struct payments_SavedInfo {
	0 optional int constructor; 
	1 require  payments_SavedInfo_Data data ;
};
// Constructors:Type:Data:payments_SavedInfo 
struct payments_SavedInfo_Data {
	0	optional bool has_saved_credentials; 
	1	optional PaymentRequestedInfo saved_info; 
};
// Constructors:Predicate:payments_savedInfo 
struct TLpayments_savedInfo {
	0	require payments_SavedInfo_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PageBlock 
// PageBlock <--
// + TLpageBlockUnsupported
// + TLpageBlockTitle
// + TLpageBlockSubtitle
// + TLpageBlockAuthorDate
// + TLpageBlockHeader
// + TLpageBlockSubheader
// + TLpageBlockParagraph
// + TLpageBlockPreformatted
// + TLpageBlockFooter
// + TLpageBlockDivider
// + TLpageBlockAnchor
// + TLpageBlockList
// + TLpageBlockBlockquote
// + TLpageBlockPullquote
// + TLpageBlockPhoto
// + TLpageBlockVideo
// + TLpageBlockCover
// + TLpageBlockEmbed
// + TLpageBlockEmbedPost
// + TLpageBlockCollage
// + TLpageBlockSlideshow
// + TLpageBlockChannel
// + TLpageBlockAudio
// + TLpageBlockKicker
// + TLpageBlockTable
// + TLpageBlockOrderedList
// + TLpageBlockDetails
// + TLpageBlockRelatedArticles
// + TLpageBlockMap
//
// Constructors:Type:PageBlock 
struct PageBlock {
	0 optional int constructor; 
	1 require  PageBlock_Data data ;
};
// Constructors:Type:Data:PageBlock 
struct PageBlock_Data {
	0	optional RichText text; 
	1	optional RichText author; 
	2	optional int published_date; 
	3	optional string language; 
	4	optional string name; 
	5	optional vector<PageListItem> items; 
	6	optional RichText caption; 
	7	optional long photo_id; 
	8	optional PageCaption caption_9; 
	9	optional string url; 
	10	optional long webpage_id; 
	11	optional bool autoplay; 
	12	optional bool loop; 
	13	optional long video_id; 
	14	optional PageBlock cover; 
	15	optional bool full_width; 
	16	optional bool allow_scrolling; 
	17	optional string html; 
	18	optional long poster_photo_id; 
	19	optional int w; 
	20	optional int h; 
	21	optional long author_photo_id; 
	22	optional string author_23; 
	23	optional int date; 
	24	optional vector<PageBlock> blocks; 
	25	optional vector<PageBlock> items_26; 
	26	optional Chat channel; 
	27	optional long audio_id; 
	28	optional bool bordered; 
	29	optional bool striped; 
	30	optional RichText title; 
	31	optional vector<PageTableRow> rows; 
	32	optional vector<PageListOrderedItem> items_33; 
	33	optional bool open; 
	34	optional vector<PageRelatedArticle> articles; 
	35	optional GeoPoint geo; 
	36	optional int zoom; 
};
// Constructors:Predicate:pageBlockUnsupported 
struct TLpageBlockUnsupported {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockTitle 
struct TLpageBlockTitle {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockSubtitle 
struct TLpageBlockSubtitle {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockAuthorDate 
struct TLpageBlockAuthorDate {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockHeader 
struct TLpageBlockHeader {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockSubheader 
struct TLpageBlockSubheader {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockParagraph 
struct TLpageBlockParagraph {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockPreformatted 
struct TLpageBlockPreformatted {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockFooter 
struct TLpageBlockFooter {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockDivider 
struct TLpageBlockDivider {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockAnchor 
struct TLpageBlockAnchor {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockList 
struct TLpageBlockList {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockBlockquote 
struct TLpageBlockBlockquote {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockPullquote 
struct TLpageBlockPullquote {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockPhoto 
struct TLpageBlockPhoto {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockVideo 
struct TLpageBlockVideo {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockCover 
struct TLpageBlockCover {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockEmbed 
struct TLpageBlockEmbed {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockEmbedPost 
struct TLpageBlockEmbedPost {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockCollage 
struct TLpageBlockCollage {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockSlideshow 
struct TLpageBlockSlideshow {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockChannel 
struct TLpageBlockChannel {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockAudio 
struct TLpageBlockAudio {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockKicker 
struct TLpageBlockKicker {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockTable 
struct TLpageBlockTable {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockOrderedList 
struct TLpageBlockOrderedList {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockDetails 
struct TLpageBlockDetails {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockRelatedArticles 
struct TLpageBlockRelatedArticles {
	0	require PageBlock_Data data ;
};
// Constructors:Predicate:pageBlockMap 
struct TLpageBlockMap {
	0	require PageBlock_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageAction 
// MessageAction <--
// + TLmessageActionEmpty
// + TLmessageActionChatCreate
// + TLmessageActionChatEditTitle
// + TLmessageActionChatEditPhoto
// + TLmessageActionChatDeletePhoto
// + TLmessageActionChatAddUser
// + TLmessageActionChatDeleteUser
// + TLmessageActionChatJoinedByLink
// + TLmessageActionChannelCreate
// + TLmessageActionChatMigrateTo
// + TLmessageActionChannelMigrateFrom
// + TLmessageActionPinMessage
// + TLmessageActionHistoryClear
// + TLmessageActionGameScore
// + TLmessageActionPaymentSentMe
// + TLmessageActionPaymentSent
// + TLmessageActionPhoneCall
// + TLmessageActionScreenshotTaken
// + TLmessageActionCustomAction
// + TLmessageActionBotAllowed
// + TLmessageActionSecureValuesSentMe
// + TLmessageActionSecureValuesSent
// + TLmessageActionContactSignUp
// + TLmessageActionGeoProximityReached
//
// Constructors:Type:MessageAction 
struct MessageAction {
	0 optional int constructor; 
	1 require  MessageAction_Data data ;
};
// Constructors:Type:Data:MessageAction 
struct MessageAction_Data {
	0	optional string title; 
	1	optional vector<int> users; 
	2	optional Photo photo; 
	3	optional int user_id; 
	4	optional int inviter_id; 
	5	optional int channel_id; 
	6	optional int chat_id; 
	7	optional long game_id; 
	8	optional int score; 
	9	optional string currency; 
	10	optional long total_amount; 
	11	optional vector<unsigned byte> payload; 
	12	optional PaymentRequestedInfo info; 
	13	optional string shipping_option_id; 
	14	optional PaymentCharge charge; 
	15	optional bool video; 
	16	optional long call_id; 
	17	optional PhoneCallDiscardReason reason; 
	18	optional int duration; 
	19	optional string message; 
	20	optional string domain; 
	21	optional vector<SecureValue> values; 
	22	optional SecureCredentialsEncrypted credentials; 
	23	optional vector<SecureValueType> types; 
	24	optional Peer from_id; 
	25	optional Peer to_id; 
	26	optional int distance; 
};
// Constructors:Predicate:messageActionEmpty 
struct TLmessageActionEmpty {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionChatCreate 
struct TLmessageActionChatCreate {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionChatEditTitle 
struct TLmessageActionChatEditTitle {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionChatEditPhoto 
struct TLmessageActionChatEditPhoto {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionChatDeletePhoto 
struct TLmessageActionChatDeletePhoto {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionChatAddUser 
struct TLmessageActionChatAddUser {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionChatDeleteUser 
struct TLmessageActionChatDeleteUser {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionChatJoinedByLink 
struct TLmessageActionChatJoinedByLink {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionChannelCreate 
struct TLmessageActionChannelCreate {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionChatMigrateTo 
struct TLmessageActionChatMigrateTo {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionChannelMigrateFrom 
struct TLmessageActionChannelMigrateFrom {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionPinMessage 
struct TLmessageActionPinMessage {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionHistoryClear 
struct TLmessageActionHistoryClear {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionGameScore 
struct TLmessageActionGameScore {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionPaymentSentMe 
struct TLmessageActionPaymentSentMe {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionPaymentSent 
struct TLmessageActionPaymentSent {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionPhoneCall 
struct TLmessageActionPhoneCall {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionScreenshotTaken 
struct TLmessageActionScreenshotTaken {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionCustomAction 
struct TLmessageActionCustomAction {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionBotAllowed 
struct TLmessageActionBotAllowed {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionSecureValuesSentMe 
struct TLmessageActionSecureValuesSentMe {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionSecureValuesSent 
struct TLmessageActionSecureValuesSent {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionContactSignUp 
struct TLmessageActionContactSignUp {
	0	require MessageAction_Data data ;
};
// Constructors:Predicate:messageActionGeoProximityReached 
struct TLmessageActionGeoProximityReached {
	0	require MessageAction_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:SavedContact 
// SavedContact <--
// + TLsavedPhoneContact
//
// Constructors:Type:SavedContact 
struct SavedContact {
	0 optional int constructor; 
	1 require  SavedContact_Data data ;
};
// Constructors:Type:Data:SavedContact 
struct SavedContact_Data {
	0	optional string phone; 
	1	optional string first_name; 
	2	optional string last_name; 
	3	optional int date; 
};
// Constructors:Predicate:savedPhoneContact 
struct TLsavedPhoneContact {
	0	require SavedContact_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputCheckPasswordSRP 
// InputCheckPasswordSRP <--
// + TLinputCheckPasswordEmpty
// + TLinputCheckPasswordSRP
//
// Constructors:Type:InputCheckPasswordSRP 
struct InputCheckPasswordSRP {
	0 optional int constructor; 
	1 require  InputCheckPasswordSRP_Data data ;
};
// Constructors:Type:Data:InputCheckPasswordSRP 
struct InputCheckPasswordSRP_Data {
	0	optional long srp_id; 
	1	optional vector<unsigned byte> A; 
	2	optional vector<unsigned byte> M1; 
};
// Constructors:Predicate:inputCheckPasswordEmpty 
struct TLinputCheckPasswordEmpty {
	0	require InputCheckPasswordSRP_Data data ;
};
// Constructors:Predicate:inputCheckPasswordSRP 
struct TLinputCheckPasswordSRP {
	0	require InputCheckPasswordSRP_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputPeer 
// InputPeer <--
// + TLinputPeerEmpty
// + TLinputPeerSelf
// + TLinputPeerChat
// + TLinputPeerUser
// + TLinputPeerChannel
// + TLinputPeerUserFromMessage
// + TLinputPeerChannelFromMessage
//
// Constructors:Type:InputPeer 
struct InputPeer {
	0 optional int constructor; 
	1 require  InputPeer_Data data ;
};
// Constructors:Type:Data:InputPeer 
struct InputPeer_Data {
	0	optional int chat_id; 
	1	optional int user_id; 
	2	optional long access_hash; 
	3	optional int channel_id; 
	4	optional InputPeer peer; 
	5	optional int msg_id; 
};
// Constructors:Predicate:inputPeerEmpty 
struct TLinputPeerEmpty {
	0	require InputPeer_Data data ;
};
// Constructors:Predicate:inputPeerSelf 
struct TLinputPeerSelf {
	0	require InputPeer_Data data ;
};
// Constructors:Predicate:inputPeerChat 
struct TLinputPeerChat {
	0	require InputPeer_Data data ;
};
// Constructors:Predicate:inputPeerUser 
struct TLinputPeerUser {
	0	require InputPeer_Data data ;
};
// Constructors:Predicate:inputPeerChannel 
struct TLinputPeerChannel {
	0	require InputPeer_Data data ;
};
// Constructors:Predicate:inputPeerUserFromMessage 
struct TLinputPeerUserFromMessage {
	0	require InputPeer_Data data ;
};
// Constructors:Predicate:inputPeerChannelFromMessage 
struct TLinputPeerChannelFromMessage {
	0	require InputPeer_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Peer 
// Peer <--
// + TLpeerUser
// + TLpeerChat
// + TLpeerChannel
//
// Constructors:Type:Peer 
struct Peer {
	0 optional int constructor; 
	1 require  Peer_Data data ;
};
// Constructors:Type:Data:Peer 
struct Peer_Data {
	0	optional int user_id; 
	1	optional int chat_id; 
	2	optional int channel_id; 
};
// Constructors:Predicate:peerUser 
struct TLpeerUser {
	0	require Peer_Data data ;
};
// Constructors:Predicate:peerChat 
struct TLpeerChat {
	0	require Peer_Data data ;
};
// Constructors:Predicate:peerChannel 
struct TLpeerChannel {
	0	require Peer_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:auth_SentCodeType 
// auth_SentCodeType <--
// + TLauth_sentCodeTypeApp
// + TLauth_sentCodeTypeSms
// + TLauth_sentCodeTypeCall
// + TLauth_sentCodeTypeFlashCall
//
// Constructors:Type:auth_SentCodeType 
struct auth_SentCodeType {
	0 optional int constructor; 
	1 require  auth_SentCodeType_Data data ;
};
// Constructors:Type:Data:auth_SentCodeType 
struct auth_SentCodeType_Data {
	0	optional int length; 
	1	optional string pattern; 
};
// Constructors:Predicate:auth_sentCodeTypeApp 
struct TLauth_sentCodeTypeApp {
	0	require auth_SentCodeType_Data data ;
};
// Constructors:Predicate:auth_sentCodeTypeSms 
struct TLauth_sentCodeTypeSms {
	0	require auth_SentCodeType_Data data ;
};
// Constructors:Predicate:auth_sentCodeTypeCall 
struct TLauth_sentCodeTypeCall {
	0	require auth_SentCodeType_Data data ;
};
// Constructors:Predicate:auth_sentCodeTypeFlashCall 
struct TLauth_sentCodeTypeFlashCall {
	0	require auth_SentCodeType_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:StatsURL 
// StatsURL <--
// + TLstatsURL
//
// Constructors:Type:StatsURL 
struct StatsURL {
	0 optional int constructor; 
	1 require  StatsURL_Data data ;
};
// Constructors:Type:Data:StatsURL 
struct StatsURL_Data {
	0	optional string url; 
};
// Constructors:Predicate:statsURL 
struct TLstatsURL {
	0	require StatsURL_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:channels_ChannelParticipants 
// channels_ChannelParticipants <--
// + TLchannels_channelParticipants
// + TLchannels_channelParticipantsNotModified
//
// Constructors:Type:channels_ChannelParticipants 
struct channels_ChannelParticipants {
	0 optional int constructor; 
	1 require  channels_ChannelParticipants_Data data ;
};
// Constructors:Type:Data:channels_ChannelParticipants 
struct channels_ChannelParticipants_Data {
	0	optional int count; 
	1	optional vector<ChannelParticipant> participants; 
	2	optional vector<User> users; 
};
// Constructors:Predicate:channels_channelParticipants 
struct TLchannels_channelParticipants {
	0	require channels_ChannelParticipants_Data data ;
};
// Constructors:Predicate:channels_channelParticipantsNotModified 
struct TLchannels_channelParticipantsNotModified {
	0	require channels_ChannelParticipants_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:phone_PhoneCall 
// phone_PhoneCall <--
// + TLphone_phoneCall
//
// Constructors:Type:phone_PhoneCall 
struct phone_PhoneCall {
	0 optional int constructor; 
	1 require  phone_PhoneCall_Data data ;
};
// Constructors:Type:Data:phone_PhoneCall 
struct phone_PhoneCall_Data {
	0	optional PhoneCall phone_call; 
	1	optional vector<User> users; 
};
// Constructors:Predicate:phone_phoneCall 
struct TLphone_phoneCall {
	0	require phone_PhoneCall_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PaymentSavedCredentials 
// PaymentSavedCredentials <--
// + TLpaymentSavedCredentialsCard
//
// Constructors:Type:PaymentSavedCredentials 
struct PaymentSavedCredentials {
	0 optional int constructor; 
	1 require  PaymentSavedCredentials_Data data ;
};
// Constructors:Type:Data:PaymentSavedCredentials 
struct PaymentSavedCredentials_Data {
	0	optional string id; 
	1	optional string title; 
};
// Constructors:Predicate:paymentSavedCredentialsCard 
struct TLpaymentSavedCredentialsCard {
	0	require PaymentSavedCredentials_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:EmojiKeyword 
// EmojiKeyword <--
// + TLemojiKeyword
// + TLemojiKeywordDeleted
//
// Constructors:Type:EmojiKeyword 
struct EmojiKeyword {
	0 optional int constructor; 
	1 require  EmojiKeyword_Data data ;
};
// Constructors:Type:Data:EmojiKeyword 
struct EmojiKeyword_Data {
	0	optional string keyword; 
	1	optional vector<string> emoticons; 
};
// Constructors:Predicate:emojiKeyword 
struct TLemojiKeyword {
	0	require EmojiKeyword_Data data ;
};
// Constructors:Predicate:emojiKeywordDeleted 
struct TLemojiKeywordDeleted {
	0	require EmojiKeyword_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:contacts_ImportedContacts 
// contacts_ImportedContacts <--
// + TLcontacts_importedContacts
//
// Constructors:Type:contacts_ImportedContacts 
struct contacts_ImportedContacts {
	0 optional int constructor; 
	1 require  contacts_ImportedContacts_Data data ;
};
// Constructors:Type:Data:contacts_ImportedContacts 
struct contacts_ImportedContacts_Data {
	0	optional vector<ImportedContact> imported; 
	1	optional vector<PopularContact> popular_invites; 
	2	optional vector<long> retry_contacts; 
	3	optional vector<User> users; 
};
// Constructors:Predicate:contacts_importedContacts 
struct TLcontacts_importedContacts {
	0	require contacts_ImportedContacts_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ReplyMarkup 
// ReplyMarkup <--
// + TLreplyKeyboardHide
// + TLreplyKeyboardForceReply
// + TLreplyKeyboardMarkup
// + TLreplyInlineMarkup
//
// Constructors:Type:ReplyMarkup 
struct ReplyMarkup {
	0 optional int constructor; 
	1 require  ReplyMarkup_Data data ;
};
// Constructors:Type:Data:ReplyMarkup 
struct ReplyMarkup_Data {
	0	optional bool selective; 
	1	optional bool single_use; 
	2	optional bool resize; 
	3	optional vector<KeyboardButtonRow> rows; 
};
// Constructors:Predicate:replyKeyboardHide 
struct TLreplyKeyboardHide {
	0	require ReplyMarkup_Data data ;
};
// Constructors:Predicate:replyKeyboardForceReply 
struct TLreplyKeyboardForceReply {
	0	require ReplyMarkup_Data data ;
};
// Constructors:Predicate:replyKeyboardMarkup 
struct TLreplyKeyboardMarkup {
	0	require ReplyMarkup_Data data ;
};
// Constructors:Predicate:replyInlineMarkup 
struct TLreplyInlineMarkup {
	0	require ReplyMarkup_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:VideoSize 
// VideoSize <--
// + TLvideoSize
//
// Constructors:Type:VideoSize 
struct VideoSize {
	0 optional int constructor; 
	1 require  VideoSize_Data data ;
};
// Constructors:Type:Data:VideoSize 
struct VideoSize_Data {
	0	optional string type; 
	1	optional FileLocation location; 
	2	optional int w; 
	3	optional int h; 
	4	optional int size; 
	5	optional double video_start_ts; 
};
// Constructors:Predicate:videoSize 
struct TLvideoSize {
	0	require VideoSize_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Folder 
// Folder <--
// + TLfolder
//
// Constructors:Type:Folder 
struct Folder {
	0 optional int constructor; 
	1 require  Folder_Data data ;
};
// Constructors:Type:Data:Folder 
struct Folder_Data {
	0	optional bool autofill_new_broadcasts; 
	1	optional bool autofill_public_groups; 
	2	optional bool autofill_new_correspondents; 
	3	optional int id; 
	4	optional string title; 
	5	optional ChatPhoto photo; 
};
// Constructors:Predicate:folder 
struct TLfolder {
	0	require Folder_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PageTableRow 
// PageTableRow <--
// + TLpageTableRow
//
// Constructors:Type:PageTableRow 
struct PageTableRow {
	0 optional int constructor; 
	1 require  PageTableRow_Data data ;
};
// Constructors:Type:Data:PageTableRow 
struct PageTableRow_Data {
	0	optional vector<PageTableCell> cells; 
};
// Constructors:Predicate:pageTableRow 
struct TLpageTableRow {
	0	require PageTableRow_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputGame 
// InputGame <--
// + TLinputGameID
// + TLinputGameShortName
//
// Constructors:Type:InputGame 
struct InputGame {
	0 optional int constructor; 
	1 require  InputGame_Data data ;
};
// Constructors:Type:Data:InputGame 
struct InputGame_Data {
	0	optional long id; 
	1	optional long access_hash; 
	2	optional InputUser bot_id; 
	3	optional string short_name; 
};
// Constructors:Predicate:inputGameID 
struct TLinputGameID {
	0	require InputGame_Data data ;
};
// Constructors:Predicate:inputGameShortName 
struct TLinputGameShortName {
	0	require InputGame_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_PeerDialogs 
// messages_PeerDialogs <--
// + TLmessages_peerDialogs
//
// Constructors:Type:messages_PeerDialogs 
struct messages_PeerDialogs {
	0 optional int constructor; 
	1 require  messages_PeerDialogs_Data data ;
};
// Constructors:Type:Data:messages_PeerDialogs 
struct messages_PeerDialogs_Data {
	0	optional vector<Dialog> dialogs; 
	1	optional vector<Message> messages; 
	2	optional vector<Chat> chats; 
	3	optional vector<User> users; 
	4	optional updates_State state; 
};
// Constructors:Predicate:messages_peerDialogs 
struct TLmessages_peerDialogs {
	0	require messages_PeerDialogs_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ChatParticipant 
// ChatParticipant <--
// + TLchatParticipant
// + TLchatParticipantCreator
// + TLchatParticipantAdmin
//
// Constructors:Type:ChatParticipant 
struct ChatParticipant {
	0 optional int constructor; 
	1 require  ChatParticipant_Data data ;
};
// Constructors:Type:Data:ChatParticipant 
struct ChatParticipant_Data {
	0	optional int user_id; 
	1	optional int inviter_id; 
	2	optional int date; 
};
// Constructors:Predicate:chatParticipant 
struct TLchatParticipant {
	0	require ChatParticipant_Data data ;
};
// Constructors:Predicate:chatParticipantCreator 
struct TLchatParticipantCreator {
	0	require ChatParticipant_Data data ;
};
// Constructors:Predicate:chatParticipantAdmin 
struct TLchatParticipantAdmin {
	0	require ChatParticipant_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputChannel 
// InputChannel <--
// + TLinputChannelEmpty
// + TLinputChannel
// + TLinputChannelFromMessage
//
// Constructors:Type:InputChannel 
struct InputChannel {
	0 optional int constructor; 
	1 require  InputChannel_Data data ;
};
// Constructors:Type:Data:InputChannel 
struct InputChannel_Data {
	0	optional int channel_id; 
	1	optional long access_hash; 
	2	optional InputPeer peer; 
	3	optional int msg_id; 
};
// Constructors:Predicate:inputChannelEmpty 
struct TLinputChannelEmpty {
	0	require InputChannel_Data data ;
};
// Constructors:Predicate:inputChannel 
struct TLinputChannel {
	0	require InputChannel_Data data ;
};
// Constructors:Predicate:inputChannelFromMessage 
struct TLinputChannelFromMessage {
	0	require InputChannel_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:SecureValueHash 
// SecureValueHash <--
// + TLsecureValueHash
//
// Constructors:Type:SecureValueHash 
struct SecureValueHash {
	0 optional int constructor; 
	1 require  SecureValueHash_Data data ;
};
// Constructors:Type:Data:SecureValueHash 
struct SecureValueHash_Data {
	0	optional SecureValueType type; 
	1	optional vector<unsigned byte> hash; 
};
// Constructors:Predicate:secureValueHash 
struct TLsecureValueHash {
	0	require SecureValueHash_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Poll 
// Poll <--
// + TLpoll
//
// Constructors:Type:Poll 
struct Poll {
	0 optional int constructor; 
	1 require  Poll_Data data ;
};
// Constructors:Type:Data:Poll 
struct Poll_Data {
	0	optional long id; 
	1	optional bool closed; 
	2	optional bool public_voters; 
	3	optional bool multiple_choice; 
	4	optional bool quiz; 
	5	optional string question; 
	6	optional vector<PollAnswer> answers; 
	7	optional int close_period; 
	8	optional int close_date; 
};
// Constructors:Predicate:poll 
struct TLpoll {
	0	require Poll_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:help_CountriesList 
// help_CountriesList <--
// + TLhelp_countriesListNotModified
// + TLhelp_countriesList
//
// Constructors:Type:help_CountriesList 
struct help_CountriesList {
	0 optional int constructor; 
	1 require  help_CountriesList_Data data ;
};
// Constructors:Type:Data:help_CountriesList 
struct help_CountriesList_Data {
	0	optional vector<help_Country> countries; 
	1	optional int hash; 
};
// Constructors:Predicate:help_countriesListNotModified 
struct TLhelp_countriesListNotModified {
	0	require help_CountriesList_Data data ;
};
// Constructors:Predicate:help_countriesList 
struct TLhelp_countriesList {
	0	require help_CountriesList_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_StickerSet 
// messages_StickerSet <--
// + TLmessages_stickerSet
//
// Constructors:Type:messages_StickerSet 
struct messages_StickerSet {
	0 optional int constructor; 
	1 require  messages_StickerSet_Data data ;
};
// Constructors:Type:Data:messages_StickerSet 
struct messages_StickerSet_Data {
	0	optional StickerSet set; 
	1	optional vector<StickerPack> packs; 
	2	optional vector<Document> documents; 
};
// Constructors:Predicate:messages_stickerSet 
struct TLmessages_stickerSet {
	0	require messages_StickerSet_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_Dialogs 
// messages_Dialogs <--
// + TLmessages_dialogs
// + TLmessages_dialogsSlice
// + TLmessages_dialogsNotModified
//
// Constructors:Type:messages_Dialogs 
struct messages_Dialogs {
	0 optional int constructor; 
	1 require  messages_Dialogs_Data data ;
};
// Constructors:Type:Data:messages_Dialogs 
struct messages_Dialogs_Data {
	0	optional vector<Dialog> dialogs; 
	1	optional vector<Message> messages; 
	2	optional vector<Chat> chats; 
	3	optional vector<User> users; 
	4	optional int count; 
};
// Constructors:Predicate:messages_dialogs 
struct TLmessages_dialogs {
	0	require messages_Dialogs_Data data ;
};
// Constructors:Predicate:messages_dialogsSlice 
struct TLmessages_dialogsSlice {
	0	require messages_Dialogs_Data data ;
};
// Constructors:Predicate:messages_dialogsNotModified 
struct TLmessages_dialogsNotModified {
	0	require messages_Dialogs_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputTheme 
// InputTheme <--
// + TLinputTheme
// + TLinputThemeSlug
//
// Constructors:Type:InputTheme 
struct InputTheme {
	0 optional int constructor; 
	1 require  InputTheme_Data data ;
};
// Constructors:Type:Data:InputTheme 
struct InputTheme_Data {
	0	optional long id; 
	1	optional long access_hash; 
	2	optional string slug; 
};
// Constructors:Predicate:inputTheme 
struct TLinputTheme {
	0	require InputTheme_Data data ;
};
// Constructors:Predicate:inputThemeSlug 
struct TLinputThemeSlug {
	0	require InputTheme_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputPrivacyRule 
// InputPrivacyRule <--
// + TLinputPrivacyValueAllowContacts
// + TLinputPrivacyValueAllowAll
// + TLinputPrivacyValueAllowUsers
// + TLinputPrivacyValueDisallowContacts
// + TLinputPrivacyValueDisallowAll
// + TLinputPrivacyValueDisallowUsers
// + TLinputPrivacyValueAllowChatParticipants
// + TLinputPrivacyValueDisallowChatParticipants
//
// Constructors:Type:InputPrivacyRule 
struct InputPrivacyRule {
	0 optional int constructor; 
	1 require  InputPrivacyRule_Data data ;
};
// Constructors:Type:Data:InputPrivacyRule 
struct InputPrivacyRule_Data {
	0	optional vector<InputUser> users; 
	1	optional vector<int> chats; 
};
// Constructors:Predicate:inputPrivacyValueAllowContacts 
struct TLinputPrivacyValueAllowContacts {
	0	require InputPrivacyRule_Data data ;
};
// Constructors:Predicate:inputPrivacyValueAllowAll 
struct TLinputPrivacyValueAllowAll {
	0	require InputPrivacyRule_Data data ;
};
// Constructors:Predicate:inputPrivacyValueAllowUsers 
struct TLinputPrivacyValueAllowUsers {
	0	require InputPrivacyRule_Data data ;
};
// Constructors:Predicate:inputPrivacyValueDisallowContacts 
struct TLinputPrivacyValueDisallowContacts {
	0	require InputPrivacyRule_Data data ;
};
// Constructors:Predicate:inputPrivacyValueDisallowAll 
struct TLinputPrivacyValueDisallowAll {
	0	require InputPrivacyRule_Data data ;
};
// Constructors:Predicate:inputPrivacyValueDisallowUsers 
struct TLinputPrivacyValueDisallowUsers {
	0	require InputPrivacyRule_Data data ;
};
// Constructors:Predicate:inputPrivacyValueAllowChatParticipants 
struct TLinputPrivacyValueAllowChatParticipants {
	0	require InputPrivacyRule_Data data ;
};
// Constructors:Predicate:inputPrivacyValueDisallowChatParticipants 
struct TLinputPrivacyValueDisallowChatParticipants {
	0	require InputPrivacyRule_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:UrlAuthResult 
// UrlAuthResult <--
// + TLurlAuthResultRequest
// + TLurlAuthResultAccepted
// + TLurlAuthResultDefault
//
// Constructors:Type:UrlAuthResult 
struct UrlAuthResult {
	0 optional int constructor; 
	1 require  UrlAuthResult_Data data ;
};
// Constructors:Type:Data:UrlAuthResult 
struct UrlAuthResult_Data {
	0	optional bool request_write_access; 
	1	optional User bot; 
	2	optional string domain; 
	3	optional string url; 
};
// Constructors:Predicate:urlAuthResultRequest 
struct TLurlAuthResultRequest {
	0	require UrlAuthResult_Data data ;
};
// Constructors:Predicate:urlAuthResultAccepted 
struct TLurlAuthResultAccepted {
	0	require UrlAuthResult_Data data ;
};
// Constructors:Predicate:urlAuthResultDefault 
struct TLurlAuthResultDefault {
	0	require UrlAuthResult_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PhoneCall 
// PhoneCall <--
// + TLphoneCallEmpty
// + TLphoneCallWaiting
// + TLphoneCallRequested
// + TLphoneCallAccepted
// + TLphoneCall
// + TLphoneCallDiscarded
//
// Constructors:Type:PhoneCall 
struct PhoneCall {
	0 optional int constructor; 
	1 require  PhoneCall_Data data ;
};
// Constructors:Type:Data:PhoneCall 
struct PhoneCall_Data {
	0	optional long id; 
	1	optional bool video; 
	2	optional long access_hash; 
	3	optional int date; 
	4	optional int admin_id; 
	5	optional int participant_id; 
	6	optional PhoneCallProtocol protocol; 
	7	optional int receive_date; 
	8	optional vector<unsigned byte> g_a_hash; 
	9	optional vector<unsigned byte> g_b; 
	10	optional bool p2p_allowed; 
	11	optional vector<unsigned byte> g_a_or_b; 
	12	optional long key_fingerprint; 
	13	optional vector<PhoneConnection> connections; 
	14	optional int start_date; 
	15	optional bool need_rating; 
	16	optional bool need_debug; 
	17	optional PhoneCallDiscardReason reason; 
	18	optional int duration; 
};
// Constructors:Predicate:phoneCallEmpty 
struct TLphoneCallEmpty {
	0	require PhoneCall_Data data ;
};
// Constructors:Predicate:phoneCallWaiting 
struct TLphoneCallWaiting {
	0	require PhoneCall_Data data ;
};
// Constructors:Predicate:phoneCallRequested 
struct TLphoneCallRequested {
	0	require PhoneCall_Data data ;
};
// Constructors:Predicate:phoneCallAccepted 
struct TLphoneCallAccepted {
	0	require PhoneCall_Data data ;
};
// Constructors:Predicate:phoneCall 
struct TLphoneCall {
	0	require PhoneCall_Data data ;
};
// Constructors:Predicate:phoneCallDiscarded 
struct TLphoneCallDiscarded {
	0	require PhoneCall_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_AffectedMessages 
// messages_AffectedMessages <--
// + TLmessages_affectedMessages
//
// Constructors:Type:messages_AffectedMessages 
struct messages_AffectedMessages {
	0 optional int constructor; 
	1 require  messages_AffectedMessages_Data data ;
};
// Constructors:Type:Data:messages_AffectedMessages 
struct messages_AffectedMessages_Data {
	0	optional int pts; 
	1	optional int pts_count; 
};
// Constructors:Predicate:messages_affectedMessages 
struct TLmessages_affectedMessages {
	0	require messages_AffectedMessages_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PageListOrderedItem 
// PageListOrderedItem <--
// + TLpageListOrderedItemText
// + TLpageListOrderedItemBlocks
//
// Constructors:Type:PageListOrderedItem 
struct PageListOrderedItem {
	0 optional int constructor; 
	1 require  PageListOrderedItem_Data data ;
};
// Constructors:Type:Data:PageListOrderedItem 
struct PageListOrderedItem_Data {
	0	optional string num; 
	1	optional RichText text; 
	2	optional vector<PageBlock> blocks; 
};
// Constructors:Predicate:pageListOrderedItemText 
struct TLpageListOrderedItemText {
	0	require PageListOrderedItem_Data data ;
};
// Constructors:Predicate:pageListOrderedItemBlocks 
struct TLpageListOrderedItemBlocks {
	0	require PageListOrderedItem_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_BotResults 
// messages_BotResults <--
// + TLmessages_botResults
//
// Constructors:Type:messages_BotResults 
struct messages_BotResults {
	0 optional int constructor; 
	1 require  messages_BotResults_Data data ;
};
// Constructors:Type:Data:messages_BotResults 
struct messages_BotResults_Data {
	0	optional bool gallery; 
	1	optional long query_id; 
	2	optional string next_offset; 
	3	optional InlineBotSwitchPM switch_pm; 
	4	optional vector<BotInlineResult> results; 
	5	optional int cache_time; 
	6	optional vector<User> users; 
};
// Constructors:Predicate:messages_botResults 
struct TLmessages_botResults {
	0	require messages_BotResults_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputEncryptedChat 
// InputEncryptedChat <--
// + TLinputEncryptedChat
//
// Constructors:Type:InputEncryptedChat 
struct InputEncryptedChat {
	0 optional int constructor; 
	1 require  InputEncryptedChat_Data data ;
};
// Constructors:Type:Data:InputEncryptedChat 
struct InputEncryptedChat_Data {
	0	optional int chat_id; 
	1	optional long access_hash; 
};
// Constructors:Predicate:inputEncryptedChat 
struct TLinputEncryptedChat {
	0	require InputEncryptedChat_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_Messages 
// messages_Messages <--
// + TLmessages_messages
// + TLmessages_messagesSlice
// + TLmessages_channelMessages
// + TLmessages_messagesNotModified
//
// Constructors:Type:messages_Messages 
struct messages_Messages {
	0 optional int constructor; 
	1 require  messages_Messages_Data data ;
};
// Constructors:Type:Data:messages_Messages 
struct messages_Messages_Data {
	0	optional vector<Message> messages; 
	1	optional vector<Chat> chats; 
	2	optional vector<User> users; 
	3	optional bool inexact; 
	4	optional int count; 
	5	optional int next_rate; 
	6	optional int offset_id_offset; 
	7	optional int pts; 
};
// Constructors:Predicate:messages_messages 
struct TLmessages_messages {
	0	require messages_Messages_Data data ;
};
// Constructors:Predicate:messages_messagesSlice 
struct TLmessages_messagesSlice {
	0	require messages_Messages_Data data ;
};
// Constructors:Predicate:messages_channelMessages 
struct TLmessages_channelMessages {
	0	require messages_Messages_Data data ;
};
// Constructors:Predicate:messages_messagesNotModified 
struct TLmessages_messagesNotModified {
	0	require messages_Messages_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:RestrictionReason 
// RestrictionReason <--
// + TLrestrictionReason
//
// Constructors:Type:RestrictionReason 
struct RestrictionReason {
	0 optional int constructor; 
	1 require  RestrictionReason_Data data ;
};
// Constructors:Type:Data:RestrictionReason 
struct RestrictionReason_Data {
	0	optional string platform; 
	1	optional string reason; 
	2	optional string text; 
};
// Constructors:Predicate:restrictionReason 
struct TLrestrictionReason {
	0	require RestrictionReason_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ReportReason 
// ReportReason <--
// + TLinputReportReasonSpam
// + TLinputReportReasonViolence
// + TLinputReportReasonPornography
// + TLinputReportReasonChildAbuse
// + TLinputReportReasonOther
// + TLinputReportReasonCopyright
// + TLinputReportReasonGeoIrrelevant
//
// Constructors:Type:ReportReason 
struct ReportReason {
	0 optional int constructor; 
	1 require  ReportReason_Data data ;
};
// Constructors:Type:Data:ReportReason 
struct ReportReason_Data {
	0	optional string text; 
};
// Constructors:Predicate:inputReportReasonSpam 
struct TLinputReportReasonSpam {
	0	require ReportReason_Data data ;
};
// Constructors:Predicate:inputReportReasonViolence 
struct TLinputReportReasonViolence {
	0	require ReportReason_Data data ;
};
// Constructors:Predicate:inputReportReasonPornography 
struct TLinputReportReasonPornography {
	0	require ReportReason_Data data ;
};
// Constructors:Predicate:inputReportReasonChildAbuse 
struct TLinputReportReasonChildAbuse {
	0	require ReportReason_Data data ;
};
// Constructors:Predicate:inputReportReasonOther 
struct TLinputReportReasonOther {
	0	require ReportReason_Data data ;
};
// Constructors:Predicate:inputReportReasonCopyright 
struct TLinputReportReasonCopyright {
	0	require ReportReason_Data data ;
};
// Constructors:Predicate:inputReportReasonGeoIrrelevant 
struct TLinputReportReasonGeoIrrelevant {
	0	require ReportReason_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:contacts_ResolvedPeer 
// contacts_ResolvedPeer <--
// + TLcontacts_resolvedPeer
//
// Constructors:Type:contacts_ResolvedPeer 
struct contacts_ResolvedPeer {
	0 optional int constructor; 
	1 require  contacts_ResolvedPeer_Data data ;
};
// Constructors:Type:Data:contacts_ResolvedPeer 
struct contacts_ResolvedPeer_Data {
	0	optional Peer peer; 
	1	optional vector<Chat> chats; 
	2	optional vector<User> users; 
};
// Constructors:Predicate:contacts_resolvedPeer 
struct TLcontacts_resolvedPeer {
	0	require contacts_ResolvedPeer_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:GeoPoint 
// GeoPoint <--
// + TLgeoPointEmpty
// + TLgeoPoint
//
// Constructors:Type:GeoPoint 
struct GeoPoint {
	0 optional int constructor; 
	1 require  GeoPoint_Data data ;
};
// Constructors:Type:Data:GeoPoint 
struct GeoPoint_Data {
	0	optional double long_key; 
	1	optional double lat; 
	2	optional long access_hash; 
	3	optional int accuracy_radius; 
};
// Constructors:Predicate:geoPointEmpty 
struct TLgeoPointEmpty {
	0	require GeoPoint_Data data ;
};
// Constructors:Predicate:geoPoint 
struct TLgeoPoint {
	0	require GeoPoint_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:WallPaper 
// WallPaper <--
// + TLwallPaper
// + TLwallPaperNoFile
//
// Constructors:Type:WallPaper 
struct WallPaper {
	0 optional int constructor; 
	1 require  WallPaper_Data data ;
};
// Constructors:Type:Data:WallPaper 
struct WallPaper_Data {
	0	optional long id; 
	1	optional bool creator; 
	2	optional bool default; 
	3	optional bool pattern; 
	4	optional bool dark; 
	5	optional long access_hash; 
	6	optional string slug; 
	7	optional Document document; 
	8	optional WallPaperSettings settings; 
};
// Constructors:Predicate:wallPaper 
struct TLwallPaper {
	0	require WallPaper_Data data ;
};
// Constructors:Predicate:wallPaperNoFile 
struct TLwallPaperNoFile {
	0	require WallPaper_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:TopPeerCategoryPeers 
// TopPeerCategoryPeers <--
// + TLtopPeerCategoryPeers
//
// Constructors:Type:TopPeerCategoryPeers 
struct TopPeerCategoryPeers {
	0 optional int constructor; 
	1 require  TopPeerCategoryPeers_Data data ;
};
// Constructors:Type:Data:TopPeerCategoryPeers 
struct TopPeerCategoryPeers_Data {
	0	optional TopPeerCategory category; 
	1	optional int count; 
	2	optional vector<TopPeer> peers; 
};
// Constructors:Predicate:topPeerCategoryPeers 
struct TLtopPeerCategoryPeers {
	0	require TopPeerCategoryPeers_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputPeerNotifySettings 
// InputPeerNotifySettings <--
// + TLinputPeerNotifySettings
//
// Constructors:Type:InputPeerNotifySettings 
struct InputPeerNotifySettings {
	0 optional int constructor; 
	1 require  InputPeerNotifySettings_Data data ;
};
// Constructors:Type:Data:InputPeerNotifySettings 
struct InputPeerNotifySettings_Data {
	0	optional Bool show_previews; 
	1	optional Bool silent; 
	2	optional int mute_until; 
	3	optional string sound; 
};
// Constructors:Predicate:inputPeerNotifySettings 
struct TLinputPeerNotifySettings {
	0	require InputPeerNotifySettings_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputMedia 
// InputMedia <--
// + TLinputMediaEmpty
// + TLinputMediaUploadedPhoto
// + TLinputMediaPhoto
// + TLinputMediaGeoPoint
// + TLinputMediaContact
// + TLinputMediaUploadedDocument
// + TLinputMediaDocument
// + TLinputMediaVenue
// + TLinputMediaPhotoExternal
// + TLinputMediaDocumentExternal
// + TLinputMediaGame
// + TLinputMediaInvoice
// + TLinputMediaGeoLive
// + TLinputMediaPoll
// + TLinputMediaDice
//
// Constructors:Type:InputMedia 
struct InputMedia {
	0 optional int constructor; 
	1 require  InputMedia_Data data ;
};
// Constructors:Type:Data:InputMedia 
struct InputMedia_Data {
	0	optional InputFile file; 
	1	optional vector<InputDocument> stickers; 
	2	optional int ttl_seconds; 
	3	optional InputPhoto id; 
	4	optional InputGeoPoint geo_point; 
	5	optional string phone_number; 
	6	optional string first_name; 
	7	optional string last_name; 
	8	optional string vcard; 
	9	optional bool nosound_video; 
	10	optional bool force_file; 
	11	optional InputFile thumb; 
	12	optional string mime_type; 
	13	optional vector<DocumentAttribute> attributes; 
	14	optional InputDocument id_15; 
	15	optional string title; 
	16	optional string address; 
	17	optional string provider; 
	18	optional string venue_id; 
	19	optional string venue_type; 
	20	optional string url; 
	21	optional InputGame id_22; 
	22	optional string description; 
	23	optional InputWebDocument photo; 
	24	optional Invoice invoice; 
	25	optional vector<unsigned byte> payload; 
	26	optional DataJSON provider_data; 
	27	optional string start_param; 
	28	optional bool stopped; 
	29	optional int heading; 
	30	optional int period; 
	31	optional int proximity_notification_radius; 
	32	optional Poll poll; 
	33	optional vector<vector<unsigned byte>> correct_answers; 
	34	optional string solution; 
	35	optional vector<MessageEntity> solution_entities; 
	36	optional string emoticon; 
};
// Constructors:Predicate:inputMediaEmpty 
struct TLinputMediaEmpty {
	0	require InputMedia_Data data ;
};
// Constructors:Predicate:inputMediaUploadedPhoto 
struct TLinputMediaUploadedPhoto {
	0	require InputMedia_Data data ;
};
// Constructors:Predicate:inputMediaPhoto 
struct TLinputMediaPhoto {
	0	require InputMedia_Data data ;
};
// Constructors:Predicate:inputMediaGeoPoint 
struct TLinputMediaGeoPoint {
	0	require InputMedia_Data data ;
};
// Constructors:Predicate:inputMediaContact 
struct TLinputMediaContact {
	0	require InputMedia_Data data ;
};
// Constructors:Predicate:inputMediaUploadedDocument 
struct TLinputMediaUploadedDocument {
	0	require InputMedia_Data data ;
};
// Constructors:Predicate:inputMediaDocument 
struct TLinputMediaDocument {
	0	require InputMedia_Data data ;
};
// Constructors:Predicate:inputMediaVenue 
struct TLinputMediaVenue {
	0	require InputMedia_Data data ;
};
// Constructors:Predicate:inputMediaPhotoExternal 
struct TLinputMediaPhotoExternal {
	0	require InputMedia_Data data ;
};
// Constructors:Predicate:inputMediaDocumentExternal 
struct TLinputMediaDocumentExternal {
	0	require InputMedia_Data data ;
};
// Constructors:Predicate:inputMediaGame 
struct TLinputMediaGame {
	0	require InputMedia_Data data ;
};
// Constructors:Predicate:inputMediaInvoice 
struct TLinputMediaInvoice {
	0	require InputMedia_Data data ;
};
// Constructors:Predicate:inputMediaGeoLive 
struct TLinputMediaGeoLive {
	0	require InputMedia_Data data ;
};
// Constructors:Predicate:inputMediaPoll 
struct TLinputMediaPoll {
	0	require InputMedia_Data data ;
};
// Constructors:Predicate:inputMediaDice 
struct TLinputMediaDice {
	0	require InputMedia_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputWebFileLocation 
// InputWebFileLocation <--
// + TLinputWebFileLocation
// + TLinputWebFileGeoPointLocation
//
// Constructors:Type:InputWebFileLocation 
struct InputWebFileLocation {
	0 optional int constructor; 
	1 require  InputWebFileLocation_Data data ;
};
// Constructors:Type:Data:InputWebFileLocation 
struct InputWebFileLocation_Data {
	0	optional string url; 
	1	optional long access_hash; 
	2	optional InputGeoPoint geo_point; 
	3	optional int w; 
	4	optional int h; 
	5	optional int zoom; 
	6	optional int scale; 
};
// Constructors:Predicate:inputWebFileLocation 
struct TLinputWebFileLocation {
	0	require InputWebFileLocation_Data data ;
};
// Constructors:Predicate:inputWebFileGeoPointLocation 
struct TLinputWebFileGeoPointLocation {
	0	require InputWebFileLocation_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Chat 
// Chat <--
// + TLchatEmpty
// + TLchat
// + TLchatForbidden
// + TLchannel
// + TLchannelForbidden
//
// Constructors:Type:Chat 
struct Chat {
	0 optional int constructor; 
	1 require  Chat_Data data ;
};
// Constructors:Type:Data:Chat 
struct Chat_Data {
	0	optional int id; 
	1	optional bool creator; 
	2	optional bool kicked; 
	3	optional bool left; 
	4	optional bool deactivated; 
	5	optional bool call_active; 
	6	optional bool call_not_empty; 
	7	optional string title; 
	8	optional ChatPhoto photo; 
	9	optional int participants_count; 
	10	optional int date; 
	11	optional int version; 
	12	optional InputChannel migrated_to; 
	13	optional ChatAdminRights admin_rights; 
	14	optional ChatBannedRights default_banned_rights; 
	15	optional bool broadcast; 
	16	optional bool verified; 
	17	optional bool megagroup; 
	18	optional bool restricted; 
	19	optional bool signatures; 
	20	optional bool min; 
	21	optional bool scam; 
	22	optional bool has_link; 
	23	optional bool has_geo; 
	24	optional bool slowmode_enabled; 
	25	optional long access_hash; 
	26	optional string username; 
	27	optional vector<RestrictionReason> restriction_reason; 
	28	optional ChatBannedRights banned_rights; 
	29	optional int until_date; 
};
// Constructors:Predicate:chatEmpty 
struct TLchatEmpty {
	0	require Chat_Data data ;
};
// Constructors:Predicate:chat 
struct TLchat {
	0	require Chat_Data data ;
};
// Constructors:Predicate:chatForbidden 
struct TLchatForbidden {
	0	require Chat_Data data ;
};
// Constructors:Predicate:channel 
struct TLchannel {
	0	require Chat_Data data ;
};
// Constructors:Predicate:channelForbidden 
struct TLchannelForbidden {
	0	require Chat_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:channels_ChannelParticipant 
// channels_ChannelParticipant <--
// + TLchannels_channelParticipant
//
// Constructors:Type:channels_ChannelParticipant 
struct channels_ChannelParticipant {
	0 optional int constructor; 
	1 require  channels_ChannelParticipant_Data data ;
};
// Constructors:Type:Data:channels_ChannelParticipant 
struct channels_ChannelParticipant_Data {
	0	optional ChannelParticipant participant; 
	1	optional vector<User> users; 
};
// Constructors:Predicate:channels_channelParticipant 
struct TLchannels_channelParticipant {
	0	require channels_ChannelParticipant_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:EmojiLanguage 
// EmojiLanguage <--
// + TLemojiLanguage
//
// Constructors:Type:EmojiLanguage 
struct EmojiLanguage {
	0 optional int constructor; 
	1 require  EmojiLanguage_Data data ;
};
// Constructors:Type:Data:EmojiLanguage 
struct EmojiLanguage_Data {
	0	optional string lang_code; 
};
// Constructors:Predicate:emojiLanguage 
struct TLemojiLanguage {
	0	require EmojiLanguage_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Game 
// Game <--
// + TLgame
//
// Constructors:Type:Game 
struct Game {
	0 optional int constructor; 
	1 require  Game_Data data ;
};
// Constructors:Type:Data:Game 
struct Game_Data {
	0	optional long id; 
	1	optional long access_hash; 
	2	optional string short_name; 
	3	optional string title; 
	4	optional string description; 
	5	optional Photo photo; 
	6	optional Document document; 
};
// Constructors:Predicate:game 
struct TLgame {
	0	require Game_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Bool 
// Bool <--
// + TLboolFalse
// + TLboolTrue
//
// Constructors:Type:Bool 
struct Bool {
	0 optional int constructor; 
	1 require  Bool_Data data ;
};
// Constructors:Type:Data:Bool 
struct Bool_Data {
};
// Constructors:Predicate:boolFalse 
struct TLboolFalse {
	0	require Bool_Data data ;
};
// Constructors:Predicate:boolTrue 
struct TLboolTrue {
	0	require Bool_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:help_TermsOfService 
// help_TermsOfService <--
// + TLhelp_termsOfService
//
// Constructors:Type:help_TermsOfService 
struct help_TermsOfService {
	0 optional int constructor; 
	1 require  help_TermsOfService_Data data ;
};
// Constructors:Type:Data:help_TermsOfService 
struct help_TermsOfService_Data {
	0	optional bool popup; 
	1	optional DataJSON id; 
	2	optional string text; 
	3	optional vector<MessageEntity> entities; 
	4	optional int min_age_confirm; 
};
// Constructors:Predicate:help_termsOfService 
struct TLhelp_termsOfService {
	0	require help_TermsOfService_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Message 
// Message <--
// + TLmessageEmpty
// + TLmessage
// + TLmessageService
//
// Constructors:Type:Message 
struct Message {
	0 optional int constructor; 
	1 require  Message_Data data ;
};
// Constructors:Type:Data:Message 
struct Message_Data {
	0	optional int id; 
	1	optional bool out_key; 
	2	optional bool mentioned; 
	3	optional bool media_unread; 
	4	optional bool silent; 
	5	optional bool post; 
	6	optional bool from_scheduled; 
	7	optional bool legacy; 
	8	optional bool edit_hide; 
	9	optional bool pinned; 
	10	optional Peer from_id; 
	11	optional Peer peer_id; 
	12	optional MessageFwdHeader fwd_from; 
	13	optional int via_bot_id; 
	14	optional MessageReplyHeader reply_to; 
	15	optional int date; 
	16	optional string message; 
	17	optional MessageMedia media; 
	18	optional ReplyMarkup reply_markup; 
	19	optional vector<MessageEntity> entities; 
	20	optional int views; 
	21	optional int forwards; 
	22	optional MessageReplies replies; 
	23	optional int edit_date; 
	24	optional string post_author; 
	25	optional long grouped_id; 
	26	optional vector<RestrictionReason> restriction_reason; 
	27	optional MessageAction action; 
};
// Constructors:Predicate:messageEmpty 
struct TLmessageEmpty {
	0	require Message_Data data ;
};
// Constructors:Predicate:message 
struct TLmessage {
	0	require Message_Data data ;
};
// Constructors:Predicate:messageService 
struct TLmessageService {
	0	require Message_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:DcOption 
// DcOption <--
// + TLdcOption
//
// Constructors:Type:DcOption 
struct DcOption {
	0 optional int constructor; 
	1 require  DcOption_Data data ;
};
// Constructors:Type:Data:DcOption 
struct DcOption_Data {
	0	optional bool ipv6; 
	1	optional bool media_only; 
	2	optional bool tcpo_only; 
	3	optional bool cdn; 
	4	optional bool static; 
	5	optional int id; 
	6	optional string ip_address; 
	7	optional int port; 
	8	optional vector<unsigned byte> secret; 
};
// Constructors:Predicate:dcOption 
struct TLdcOption {
	0	require DcOption_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:EncryptedFile 
// EncryptedFile <--
// + TLencryptedFileEmpty
// + TLencryptedFile
//
// Constructors:Type:EncryptedFile 
struct EncryptedFile {
	0 optional int constructor; 
	1 require  EncryptedFile_Data data ;
};
// Constructors:Type:Data:EncryptedFile 
struct EncryptedFile_Data {
	0	optional long id; 
	1	optional long access_hash; 
	2	optional int size; 
	3	optional int dc_id; 
	4	optional int key_fingerprint; 
};
// Constructors:Predicate:encryptedFileEmpty 
struct TLencryptedFileEmpty {
	0	require EncryptedFile_Data data ;
};
// Constructors:Predicate:encryptedFile 
struct TLencryptedFile {
	0	require EncryptedFile_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_RecentStickers 
// messages_RecentStickers <--
// + TLmessages_recentStickersNotModified
// + TLmessages_recentStickers
//
// Constructors:Type:messages_RecentStickers 
struct messages_RecentStickers {
	0 optional int constructor; 
	1 require  messages_RecentStickers_Data data ;
};
// Constructors:Type:Data:messages_RecentStickers 
struct messages_RecentStickers_Data {
	0	optional int hash; 
	1	optional vector<StickerPack> packs; 
	2	optional vector<Document> stickers; 
	3	optional vector<int> dates; 
};
// Constructors:Predicate:messages_recentStickersNotModified 
struct TLmessages_recentStickersNotModified {
	0	require messages_RecentStickers_Data data ;
};
// Constructors:Predicate:messages_recentStickers 
struct TLmessages_recentStickers {
	0	require messages_RecentStickers_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ReceivedNotifyMessage 
// ReceivedNotifyMessage <--
// + TLreceivedNotifyMessage
//
// Constructors:Type:ReceivedNotifyMessage 
struct ReceivedNotifyMessage {
	0 optional int constructor; 
	1 require  ReceivedNotifyMessage_Data data ;
};
// Constructors:Type:Data:ReceivedNotifyMessage 
struct ReceivedNotifyMessage_Data {
	0	optional int id; 
	1	optional int flags; 
};
// Constructors:Predicate:receivedNotifyMessage 
struct TLreceivedNotifyMessage {
	0	require ReceivedNotifyMessage_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:help_Country 
// help_Country <--
// + TLhelp_country
//
// Constructors:Type:help_Country 
struct help_Country {
	0 optional int constructor; 
	1 require  help_Country_Data data ;
};
// Constructors:Type:Data:help_Country 
struct help_Country_Data {
	0	optional bool hidden; 
	1	optional string iso2; 
	2	optional string default_name; 
	3	optional string name; 
	4	optional vector<help_CountryCode> country_codes; 
};
// Constructors:Predicate:help_country 
struct TLhelp_country {
	0	require help_Country_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ChatAdminRights 
// ChatAdminRights <--
// + TLchatAdminRights
//
// Constructors:Type:ChatAdminRights 
struct ChatAdminRights {
	0 optional int constructor; 
	1 require  ChatAdminRights_Data data ;
};
// Constructors:Type:Data:ChatAdminRights 
struct ChatAdminRights_Data {
	0	optional bool change_info; 
	1	optional bool post_messages; 
	2	optional bool edit_messages; 
	3	optional bool delete_messages; 
	4	optional bool ban_users; 
	5	optional bool invite_users; 
	6	optional bool pin_messages; 
	7	optional bool add_admins; 
	8	optional bool anonymous; 
	9	optional bool manage_call; 
};
// Constructors:Predicate:chatAdminRights 
struct TLchatAdminRights {
	0	require ChatAdminRights_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:WebPage 
// WebPage <--
// + TLwebPageEmpty
// + TLwebPagePending
// + TLwebPage
// + TLwebPageNotModified
//
// Constructors:Type:WebPage 
struct WebPage {
	0 optional int constructor; 
	1 require  WebPage_Data data ;
};
// Constructors:Type:Data:WebPage 
struct WebPage_Data {
	0	optional long id; 
	1	optional int date; 
	2	optional string url; 
	3	optional string display_url; 
	4	optional int hash; 
	5	optional string type; 
	6	optional string site_name; 
	7	optional string title; 
	8	optional string description; 
	9	optional Photo photo; 
	10	optional string embed_url; 
	11	optional string embed_type; 
	12	optional int embed_width; 
	13	optional int embed_height; 
	14	optional int duration; 
	15	optional string author; 
	16	optional Document document; 
	17	optional Page cached_page; 
	18	optional vector<WebPageAttribute> attributes; 
	19	optional int cached_page_views; 
};
// Constructors:Predicate:webPageEmpty 
struct TLwebPageEmpty {
	0	require WebPage_Data data ;
};
// Constructors:Predicate:webPagePending 
struct TLwebPagePending {
	0	require WebPage_Data data ;
};
// Constructors:Predicate:webPage 
struct TLwebPage {
	0	require WebPage_Data data ;
};
// Constructors:Predicate:webPageNotModified 
struct TLwebPageNotModified {
	0	require WebPage_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:FileHash 
// FileHash <--
// + TLfileHash
//
// Constructors:Type:FileHash 
struct FileHash {
	0 optional int constructor; 
	1 require  FileHash_Data data ;
};
// Constructors:Type:Data:FileHash 
struct FileHash_Data {
	0	optional int offset; 
	1	optional int limit; 
	2	optional vector<unsigned byte> hash; 
};
// Constructors:Predicate:fileHash 
struct TLfileHash {
	0	require FileHash_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:GlobalPrivacySettings 
// GlobalPrivacySettings <--
// + TLglobalPrivacySettings
//
// Constructors:Type:GlobalPrivacySettings 
struct GlobalPrivacySettings {
	0 optional int constructor; 
	1 require  GlobalPrivacySettings_Data data ;
};
// Constructors:Type:Data:GlobalPrivacySettings 
struct GlobalPrivacySettings_Data {
	0	optional Bool archive_and_mute_new_noncontact_peers; 
};
// Constructors:Predicate:globalPrivacySettings 
struct TLglobalPrivacySettings {
	0	require GlobalPrivacySettings_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:DataJSON 
// DataJSON <--
// + TLdataJSON
//
// Constructors:Type:DataJSON 
struct DataJSON {
	0 optional int constructor; 
	1 require  DataJSON_Data data ;
};
// Constructors:Type:Data:DataJSON 
struct DataJSON_Data {
	0	optional string data; 
};
// Constructors:Predicate:dataJSON 
struct TLdataJSON {
	0	require DataJSON_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:SecurePlainData 
// SecurePlainData <--
// + TLsecurePlainPhone
// + TLsecurePlainEmail
//
// Constructors:Type:SecurePlainData 
struct SecurePlainData {
	0 optional int constructor; 
	1 require  SecurePlainData_Data data ;
};
// Constructors:Type:Data:SecurePlainData 
struct SecurePlainData_Data {
	0	optional string phone; 
	1	optional string email; 
};
// Constructors:Predicate:securePlainPhone 
struct TLsecurePlainPhone {
	0	require SecurePlainData_Data data ;
};
// Constructors:Predicate:securePlainEmail 
struct TLsecurePlainEmail {
	0	require SecurePlainData_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Null 
// Null <--
// + TLnull
//
// Constructors:Type:Null 
struct Null {
	0 optional int constructor; 
	1 require  Null_Data data ;
};
// Constructors:Type:Data:Null 
struct Null_Data {
};
// Constructors:Predicate:null 
struct TLnull {
	0	require Null_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:StatsGraph 
// StatsGraph <--
// + TLstatsGraphAsync
// + TLstatsGraphError
// + TLstatsGraph
//
// Constructors:Type:StatsGraph 
struct StatsGraph {
	0 optional int constructor; 
	1 require  StatsGraph_Data data ;
};
// Constructors:Type:Data:StatsGraph 
struct StatsGraph_Data {
	0	optional string token; 
	1	optional string error; 
	2	optional DataJSON json; 
	3	optional string zoom_token; 
};
// Constructors:Predicate:statsGraphAsync 
struct TLstatsGraphAsync {
	0	require StatsGraph_Data data ;
};
// Constructors:Predicate:statsGraphError 
struct TLstatsGraphError {
	0	require StatsGraph_Data data ;
};
// Constructors:Predicate:statsGraph 
struct TLstatsGraph {
	0	require StatsGraph_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:EncryptedChat 
// EncryptedChat <--
// + TLencryptedChatEmpty
// + TLencryptedChatWaiting
// + TLencryptedChatRequested
// + TLencryptedChat
// + TLencryptedChatDiscarded
//
// Constructors:Type:EncryptedChat 
struct EncryptedChat {
	0 optional int constructor; 
	1 require  EncryptedChat_Data data ;
};
// Constructors:Type:Data:EncryptedChat 
struct EncryptedChat_Data {
	0	optional int id; 
	1	optional long access_hash; 
	2	optional int date; 
	3	optional int admin_id; 
	4	optional int participant_id; 
	5	optional int folder_id; 
	6	optional vector<unsigned byte> g_a; 
	7	optional vector<unsigned byte> g_a_or_b; 
	8	optional long key_fingerprint; 
};
// Constructors:Predicate:encryptedChatEmpty 
struct TLencryptedChatEmpty {
	0	require EncryptedChat_Data data ;
};
// Constructors:Predicate:encryptedChatWaiting 
struct TLencryptedChatWaiting {
	0	require EncryptedChat_Data data ;
};
// Constructors:Predicate:encryptedChatRequested 
struct TLencryptedChatRequested {
	0	require EncryptedChat_Data data ;
};
// Constructors:Predicate:encryptedChat 
struct TLencryptedChat {
	0	require EncryptedChat_Data data ;
};
// Constructors:Predicate:encryptedChatDiscarded 
struct TLencryptedChatDiscarded {
	0	require EncryptedChat_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:storage_FileType 
// storage_FileType <--
// + TLstorage_fileUnknown
// + TLstorage_filePartial
// + TLstorage_fileJpeg
// + TLstorage_fileGif
// + TLstorage_filePng
// + TLstorage_filePdf
// + TLstorage_fileMp3
// + TLstorage_fileMov
// + TLstorage_fileMp4
// + TLstorage_fileWebp
//
// Constructors:Type:storage_FileType 
struct storage_FileType {
	0 optional int constructor; 
	1 require  storage_FileType_Data data ;
};
// Constructors:Type:Data:storage_FileType 
struct storage_FileType_Data {
};
// Constructors:Predicate:storage_fileUnknown 
struct TLstorage_fileUnknown {
	0	require storage_FileType_Data data ;
};
// Constructors:Predicate:storage_filePartial 
struct TLstorage_filePartial {
	0	require storage_FileType_Data data ;
};
// Constructors:Predicate:storage_fileJpeg 
struct TLstorage_fileJpeg {
	0	require storage_FileType_Data data ;
};
// Constructors:Predicate:storage_fileGif 
struct TLstorage_fileGif {
	0	require storage_FileType_Data data ;
};
// Constructors:Predicate:storage_filePng 
struct TLstorage_filePng {
	0	require storage_FileType_Data data ;
};
// Constructors:Predicate:storage_filePdf 
struct TLstorage_filePdf {
	0	require storage_FileType_Data data ;
};
// Constructors:Predicate:storage_fileMp3 
struct TLstorage_fileMp3 {
	0	require storage_FileType_Data data ;
};
// Constructors:Predicate:storage_fileMov 
struct TLstorage_fileMov {
	0	require storage_FileType_Data data ;
};
// Constructors:Predicate:storage_fileMp4 
struct TLstorage_fileMp4 {
	0	require storage_FileType_Data data ;
};
// Constructors:Predicate:storage_fileWebp 
struct TLstorage_fileWebp {
	0	require storage_FileType_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_Stickers 
// messages_Stickers <--
// + TLmessages_stickersNotModified
// + TLmessages_stickers
//
// Constructors:Type:messages_Stickers 
struct messages_Stickers {
	0 optional int constructor; 
	1 require  messages_Stickers_Data data ;
};
// Constructors:Type:Data:messages_Stickers 
struct messages_Stickers_Data {
	0	optional int hash; 
	1	optional vector<Document> stickers; 
};
// Constructors:Predicate:messages_stickersNotModified 
struct TLmessages_stickersNotModified {
	0	require messages_Stickers_Data data ;
};
// Constructors:Predicate:messages_stickers 
struct TLmessages_stickers {
	0	require messages_Stickers_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PhoneCallProtocol 
// PhoneCallProtocol <--
// + TLphoneCallProtocol
//
// Constructors:Type:PhoneCallProtocol 
struct PhoneCallProtocol {
	0 optional int constructor; 
	1 require  PhoneCallProtocol_Data data ;
};
// Constructors:Type:Data:PhoneCallProtocol 
struct PhoneCallProtocol_Data {
	0	optional bool udp_p2p; 
	1	optional bool udp_reflector; 
	2	optional int min_layer; 
	3	optional int max_layer; 
	4	optional vector<string> library_versions; 
};
// Constructors:Predicate:phoneCallProtocol 
struct TLphoneCallProtocol {
	0	require PhoneCallProtocol_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PollAnswerVoters 
// PollAnswerVoters <--
// + TLpollAnswerVoters
//
// Constructors:Type:PollAnswerVoters 
struct PollAnswerVoters {
	0 optional int constructor; 
	1 require  PollAnswerVoters_Data data ;
};
// Constructors:Type:Data:PollAnswerVoters 
struct PollAnswerVoters_Data {
	0	optional bool chosen; 
	1	optional bool correct; 
	2	optional vector<unsigned byte> option; 
	3	optional int voters; 
};
// Constructors:Predicate:pollAnswerVoters 
struct TLpollAnswerVoters {
	0	require PollAnswerVoters_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:channels_AdminLogResults 
// channels_AdminLogResults <--
// + TLchannels_adminLogResults
//
// Constructors:Type:channels_AdminLogResults 
struct channels_AdminLogResults {
	0 optional int constructor; 
	1 require  channels_AdminLogResults_Data data ;
};
// Constructors:Type:Data:channels_AdminLogResults 
struct channels_AdminLogResults_Data {
	0	optional vector<ChannelAdminLogEvent> events; 
	1	optional vector<Chat> chats; 
	2	optional vector<User> users; 
};
// Constructors:Predicate:channels_adminLogResults 
struct TLchannels_adminLogResults {
	0	require channels_AdminLogResults_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:stats_BroadcastStats 
// stats_BroadcastStats <--
// + TLstats_broadcastStats
//
// Constructors:Type:stats_BroadcastStats 
struct stats_BroadcastStats {
	0 optional int constructor; 
	1 require  stats_BroadcastStats_Data data ;
};
// Constructors:Type:Data:stats_BroadcastStats 
struct stats_BroadcastStats_Data {
	0	optional StatsDateRangeDays period; 
	1	optional StatsAbsValueAndPrev followers; 
	2	optional StatsAbsValueAndPrev views_per_post; 
	3	optional StatsAbsValueAndPrev shares_per_post; 
	4	optional StatsPercentValue enabled_notifications; 
	5	optional StatsGraph growth_graph; 
	6	optional StatsGraph followers_graph; 
	7	optional StatsGraph mute_graph; 
	8	optional StatsGraph top_hours_graph; 
	9	optional StatsGraph interactions_graph; 
	10	optional StatsGraph iv_interactions_graph; 
	11	optional StatsGraph views_by_source_graph; 
	12	optional StatsGraph new_followers_by_source_graph; 
	13	optional StatsGraph languages_graph; 
	14	optional vector<MessageInteractionCounters> recent_message_interactions; 
};
// Constructors:Predicate:stats_broadcastStats 
struct TLstats_broadcastStats {
	0	require stats_BroadcastStats_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:SecurePasswordKdfAlgo 
// SecurePasswordKdfAlgo <--
// + TLsecurePasswordKdfAlgoUnknown
// + TLsecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000
// + TLsecurePasswordKdfAlgoSHA512
//
// Constructors:Type:SecurePasswordKdfAlgo 
struct SecurePasswordKdfAlgo {
	0 optional int constructor; 
	1 require  SecurePasswordKdfAlgo_Data data ;
};
// Constructors:Type:Data:SecurePasswordKdfAlgo 
struct SecurePasswordKdfAlgo_Data {
	0	optional vector<unsigned byte> salt; 
};
// Constructors:Predicate:securePasswordKdfAlgoUnknown 
struct TLsecurePasswordKdfAlgoUnknown {
	0	require SecurePasswordKdfAlgo_Data data ;
};
// Constructors:Predicate:securePasswordKdfAlgoPBKDF2HMACSHA512iter100000 
struct TLsecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 {
	0	require SecurePasswordKdfAlgo_Data data ;
};
// Constructors:Predicate:securePasswordKdfAlgoSHA512 
struct TLsecurePasswordKdfAlgoSHA512 {
	0	require SecurePasswordKdfAlgo_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:auth_Authorization 
// auth_Authorization <--
// + TLauth_authorization
// + TLauth_authorizationSignUpRequired
//
// Constructors:Type:auth_Authorization 
struct auth_Authorization {
	0 optional int constructor; 
	1 require  auth_Authorization_Data data ;
};
// Constructors:Type:Data:auth_Authorization 
struct auth_Authorization_Data {
	0	optional int tmp_sessions; 
	1	optional User user; 
	2	optional help_TermsOfService terms_of_service; 
};
// Constructors:Predicate:auth_authorization 
struct TLauth_authorization {
	0	require auth_Authorization_Data data ;
};
// Constructors:Predicate:auth_authorizationSignUpRequired 
struct TLauth_authorizationSignUpRequired {
	0	require auth_Authorization_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputFileLocation 
// InputFileLocation <--
// + TLinputFileLocation
// + TLinputEncryptedFileLocation
// + TLinputDocumentFileLocation
// + TLinputSecureFileLocation
// + TLinputTakeoutFileLocation
// + TLinputPhotoFileLocation
// + TLinputPhotoLegacyFileLocation
// + TLinputPeerPhotoFileLocation
// + TLinputStickerSetThumb
//
// Constructors:Type:InputFileLocation 
struct InputFileLocation {
	0 optional int constructor; 
	1 require  InputFileLocation_Data data ;
};
// Constructors:Type:Data:InputFileLocation 
struct InputFileLocation_Data {
	0	optional long volume_id; 
	1	optional int local_id; 
	2	optional long secret; 
	3	optional vector<unsigned byte> file_reference; 
	4	optional long id; 
	5	optional long access_hash; 
	6	optional string thumb_size; 
	7	optional bool big; 
	8	optional InputPeer peer; 
	9	optional InputStickerSet stickerset; 
};
// Constructors:Predicate:inputFileLocation 
struct TLinputFileLocation {
	0	require InputFileLocation_Data data ;
};
// Constructors:Predicate:inputEncryptedFileLocation 
struct TLinputEncryptedFileLocation {
	0	require InputFileLocation_Data data ;
};
// Constructors:Predicate:inputDocumentFileLocation 
struct TLinputDocumentFileLocation {
	0	require InputFileLocation_Data data ;
};
// Constructors:Predicate:inputSecureFileLocation 
struct TLinputSecureFileLocation {
	0	require InputFileLocation_Data data ;
};
// Constructors:Predicate:inputTakeoutFileLocation 
struct TLinputTakeoutFileLocation {
	0	require InputFileLocation_Data data ;
};
// Constructors:Predicate:inputPhotoFileLocation 
struct TLinputPhotoFileLocation {
	0	require InputFileLocation_Data data ;
};
// Constructors:Predicate:inputPhotoLegacyFileLocation 
struct TLinputPhotoLegacyFileLocation {
	0	require InputFileLocation_Data data ;
};
// Constructors:Predicate:inputPeerPhotoFileLocation 
struct TLinputPeerPhotoFileLocation {
	0	require InputFileLocation_Data data ;
};
// Constructors:Predicate:inputStickerSetThumb 
struct TLinputStickerSetThumb {
	0	require InputFileLocation_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputStickeredMedia 
// InputStickeredMedia <--
// + TLinputStickeredMediaPhoto
// + TLinputStickeredMediaDocument
//
// Constructors:Type:InputStickeredMedia 
struct InputStickeredMedia {
	0 optional int constructor; 
	1 require  InputStickeredMedia_Data data ;
};
// Constructors:Type:Data:InputStickeredMedia 
struct InputStickeredMedia_Data {
	0	optional InputPhoto id; 
	1	optional InputDocument id_2; 
};
// Constructors:Predicate:inputStickeredMediaPhoto 
struct TLinputStickeredMediaPhoto {
	0	require InputStickeredMedia_Data data ;
};
// Constructors:Predicate:inputStickeredMediaDocument 
struct TLinputStickeredMediaDocument {
	0	require InputStickeredMedia_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ShippingOption 
// ShippingOption <--
// + TLshippingOption
//
// Constructors:Type:ShippingOption 
struct ShippingOption {
	0 optional int constructor; 
	1 require  ShippingOption_Data data ;
};
// Constructors:Type:Data:ShippingOption 
struct ShippingOption_Data {
	0	optional string id; 
	1	optional string title; 
	2	optional vector<LabeledPrice> prices; 
};
// Constructors:Predicate:shippingOption 
struct TLshippingOption {
	0	require ShippingOption_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageInteractionCounters 
// MessageInteractionCounters <--
// + TLmessageInteractionCounters
//
// Constructors:Type:MessageInteractionCounters 
struct MessageInteractionCounters {
	0 optional int constructor; 
	1 require  MessageInteractionCounters_Data data ;
};
// Constructors:Type:Data:MessageInteractionCounters 
struct MessageInteractionCounters_Data {
	0	optional int msg_id; 
	1	optional int views; 
	2	optional int forwards; 
};
// Constructors:Predicate:messageInteractionCounters 
struct TLmessageInteractionCounters {
	0	require MessageInteractionCounters_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:DocumentAttribute 
// DocumentAttribute <--
// + TLdocumentAttributeImageSize
// + TLdocumentAttributeAnimated
// + TLdocumentAttributeSticker
// + TLdocumentAttributeVideo
// + TLdocumentAttributeAudio
// + TLdocumentAttributeFilename
// + TLdocumentAttributeHasStickers
//
// Constructors:Type:DocumentAttribute 
struct DocumentAttribute {
	0 optional int constructor; 
	1 require  DocumentAttribute_Data data ;
};
// Constructors:Type:Data:DocumentAttribute 
struct DocumentAttribute_Data {
	0	optional int w; 
	1	optional int h; 
	2	optional bool mask; 
	3	optional string alt; 
	4	optional InputStickerSet stickerset; 
	5	optional MaskCoords mask_coords; 
	6	optional bool round_message; 
	7	optional bool supports_streaming; 
	8	optional int duration; 
	9	optional bool voice; 
	10	optional string title; 
	11	optional string performer; 
	12	optional vector<unsigned byte> waveform; 
	13	optional string file_name; 
};
// Constructors:Predicate:documentAttributeImageSize 
struct TLdocumentAttributeImageSize {
	0	require DocumentAttribute_Data data ;
};
// Constructors:Predicate:documentAttributeAnimated 
struct TLdocumentAttributeAnimated {
	0	require DocumentAttribute_Data data ;
};
// Constructors:Predicate:documentAttributeSticker 
struct TLdocumentAttributeSticker {
	0	require DocumentAttribute_Data data ;
};
// Constructors:Predicate:documentAttributeVideo 
struct TLdocumentAttributeVideo {
	0	require DocumentAttribute_Data data ;
};
// Constructors:Predicate:documentAttributeAudio 
struct TLdocumentAttributeAudio {
	0	require DocumentAttribute_Data data ;
};
// Constructors:Predicate:documentAttributeFilename 
struct TLdocumentAttributeFilename {
	0	require DocumentAttribute_Data data ;
};
// Constructors:Predicate:documentAttributeHasStickers 
struct TLdocumentAttributeHasStickers {
	0	require DocumentAttribute_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:SecureRequiredType 
// SecureRequiredType <--
// + TLsecureRequiredType
// + TLsecureRequiredTypeOneOf
//
// Constructors:Type:SecureRequiredType 
struct SecureRequiredType {
	0 optional int constructor; 
	1 require  SecureRequiredType_Data data ;
};
// Constructors:Type:Data:SecureRequiredType 
struct SecureRequiredType_Data {
	0	optional bool native_names; 
	1	optional bool selfie_required; 
	2	optional bool translation_required; 
	3	optional SecureValueType type; 
	4	optional vector<SecureRequiredType> types; 
};
// Constructors:Predicate:secureRequiredType 
struct TLsecureRequiredType {
	0	require SecureRequiredType_Data data ;
};
// Constructors:Predicate:secureRequiredTypeOneOf 
struct TLsecureRequiredTypeOneOf {
	0	require SecureRequiredType_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:help_PromoData 
// help_PromoData <--
// + TLhelp_promoDataEmpty
// + TLhelp_promoData
//
// Constructors:Type:help_PromoData 
struct help_PromoData {
	0 optional int constructor; 
	1 require  help_PromoData_Data data ;
};
// Constructors:Type:Data:help_PromoData 
struct help_PromoData_Data {
	0	optional int expires; 
	1	optional bool proxy; 
	2	optional Peer peer; 
	3	optional vector<Chat> chats; 
	4	optional vector<User> users; 
	5	optional string psa_type; 
	6	optional string psa_message; 
};
// Constructors:Predicate:help_promoDataEmpty 
struct TLhelp_promoDataEmpty {
	0	require help_PromoData_Data data ;
};
// Constructors:Predicate:help_promoData 
struct TLhelp_promoData {
	0	require help_PromoData_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:JSONValue 
// JSONValue <--
// + TLjsonNull
// + TLjsonBool
// + TLjsonNumber
// + TLjsonString
// + TLjsonArray
// + TLjsonObject
//
// Constructors:Type:JSONValue 
struct JSONValue {
	0 optional int constructor; 
	1 require  JSONValue_Data data ;
};
// Constructors:Type:Data:JSONValue 
struct JSONValue_Data {
	0	optional Bool value; 
	1	optional double value_2; 
	2	optional string value_3; 
	3	optional vector<JSONValue> value_4; 
	4	optional vector<JSONObjectValue> value_5; 
};
// Constructors:Predicate:jsonNull 
struct TLjsonNull {
	0	require JSONValue_Data data ;
};
// Constructors:Predicate:jsonBool 
struct TLjsonBool {
	0	require JSONValue_Data data ;
};
// Constructors:Predicate:jsonNumber 
struct TLjsonNumber {
	0	require JSONValue_Data data ;
};
// Constructors:Predicate:jsonString 
struct TLjsonString {
	0	require JSONValue_Data data ;
};
// Constructors:Predicate:jsonArray 
struct TLjsonArray {
	0	require JSONValue_Data data ;
};
// Constructors:Predicate:jsonObject 
struct TLjsonObject {
	0	require JSONValue_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:help_UserInfo 
// help_UserInfo <--
// + TLhelp_userInfoEmpty
// + TLhelp_userInfo
//
// Constructors:Type:help_UserInfo 
struct help_UserInfo {
	0 optional int constructor; 
	1 require  help_UserInfo_Data data ;
};
// Constructors:Type:Data:help_UserInfo 
struct help_UserInfo_Data {
	0	optional string message; 
	1	optional vector<MessageEntity> entities; 
	2	optional string author; 
	3	optional int date; 
};
// Constructors:Predicate:help_userInfoEmpty 
struct TLhelp_userInfoEmpty {
	0	require help_UserInfo_Data data ;
};
// Constructors:Predicate:help_userInfo 
struct TLhelp_userInfo {
	0	require help_UserInfo_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Authorization 
// Authorization <--
// + TLauthorization
//
// Constructors:Type:Authorization 
struct Authorization {
	0 optional int constructor; 
	1 require  Authorization_Data data ;
};
// Constructors:Type:Data:Authorization 
struct Authorization_Data {
	0	optional bool current; 
	1	optional bool official_app; 
	2	optional bool password_pending; 
	3	optional long hash; 
	4	optional string device_model; 
	5	optional string platform; 
	6	optional string system_version; 
	7	optional int api_id; 
	8	optional string app_name; 
	9	optional string app_version; 
	10	optional int date_created; 
	11	optional int date_active; 
	12	optional string ip; 
	13	optional string country; 
	14	optional string region; 
};
// Constructors:Predicate:authorization 
struct TLauthorization {
	0	require Authorization_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_VotesList 
// messages_VotesList <--
// + TLmessages_votesList
//
// Constructors:Type:messages_VotesList 
struct messages_VotesList {
	0 optional int constructor; 
	1 require  messages_VotesList_Data data ;
};
// Constructors:Type:Data:messages_VotesList 
struct messages_VotesList_Data {
	0	optional int count; 
	1	optional vector<MessageUserVote> votes; 
	2	optional vector<User> users; 
	3	optional string next_offset; 
};
// Constructors:Predicate:messages_votesList 
struct TLmessages_votesList {
	0	require messages_VotesList_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:auth_LoginToken 
// auth_LoginToken <--
// + TLauth_loginToken
// + TLauth_loginTokenMigrateTo
// + TLauth_loginTokenSuccess
//
// Constructors:Type:auth_LoginToken 
struct auth_LoginToken {
	0 optional int constructor; 
	1 require  auth_LoginToken_Data data ;
};
// Constructors:Type:Data:auth_LoginToken 
struct auth_LoginToken_Data {
	0	optional int expires; 
	1	optional vector<unsigned byte> token; 
	2	optional int dc_id; 
	3	optional auth_Authorization authorization; 
};
// Constructors:Predicate:auth_loginToken 
struct TLauth_loginToken {
	0	require auth_LoginToken_Data data ;
};
// Constructors:Predicate:auth_loginTokenMigrateTo 
struct TLauth_loginTokenMigrateTo {
	0	require auth_LoginToken_Data data ;
};
// Constructors:Predicate:auth_loginTokenSuccess 
struct TLauth_loginTokenSuccess {
	0	require auth_LoginToken_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:JSONObjectValue 
// JSONObjectValue <--
// + TLjsonObjectValue
//
// Constructors:Type:JSONObjectValue 
struct JSONObjectValue {
	0 optional int constructor; 
	1 require  JSONObjectValue_Data data ;
};
// Constructors:Type:Data:JSONObjectValue 
struct JSONObjectValue_Data {
	0	optional string key_key; 
	1	optional JSONValue value; 
};
// Constructors:Predicate:jsonObjectValue 
struct TLjsonObjectValue {
	0	require JSONObjectValue_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_DhConfig 
// messages_DhConfig <--
// + TLmessages_dhConfigNotModified
// + TLmessages_dhConfig
//
// Constructors:Type:messages_DhConfig 
struct messages_DhConfig {
	0 optional int constructor; 
	1 require  messages_DhConfig_Data data ;
};
// Constructors:Type:Data:messages_DhConfig 
struct messages_DhConfig_Data {
	0	optional vector<unsigned byte> random; 
	1	optional int g; 
	2	optional vector<unsigned byte> p; 
	3	optional int version; 
};
// Constructors:Predicate:messages_dhConfigNotModified 
struct TLmessages_dhConfigNotModified {
	0	require messages_DhConfig_Data data ;
};
// Constructors:Predicate:messages_dhConfig 
struct TLmessages_dhConfig {
	0	require messages_DhConfig_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_FoundStickerSets 
// messages_FoundStickerSets <--
// + TLmessages_foundStickerSetsNotModified
// + TLmessages_foundStickerSets
//
// Constructors:Type:messages_FoundStickerSets 
struct messages_FoundStickerSets {
	0 optional int constructor; 
	1 require  messages_FoundStickerSets_Data data ;
};
// Constructors:Type:Data:messages_FoundStickerSets 
struct messages_FoundStickerSets_Data {
	0	optional int hash; 
	1	optional vector<StickerSetCovered> sets; 
};
// Constructors:Predicate:messages_foundStickerSetsNotModified 
struct TLmessages_foundStickerSetsNotModified {
	0	require messages_FoundStickerSets_Data data ;
};
// Constructors:Predicate:messages_foundStickerSets 
struct TLmessages_foundStickerSets {
	0	require messages_FoundStickerSets_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageFwdHeader 
// MessageFwdHeader <--
// + TLmessageFwdHeader
//
// Constructors:Type:MessageFwdHeader 
struct MessageFwdHeader {
	0 optional int constructor; 
	1 require  MessageFwdHeader_Data data ;
};
// Constructors:Type:Data:MessageFwdHeader 
struct MessageFwdHeader_Data {
	0	optional Peer from_id; 
	1	optional string from_name; 
	2	optional int date; 
	3	optional int channel_post; 
	4	optional string post_author; 
	5	optional Peer saved_from_peer; 
	6	optional int saved_from_msg_id; 
	7	optional string psa_type; 
};
// Constructors:Predicate:messageFwdHeader 
struct TLmessageFwdHeader {
	0	require MessageFwdHeader_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:KeyboardButton 
// KeyboardButton <--
// + TLkeyboardButton
// + TLkeyboardButtonUrl
// + TLkeyboardButtonCallback
// + TLkeyboardButtonRequestPhone
// + TLkeyboardButtonRequestGeoLocation
// + TLkeyboardButtonSwitchInline
// + TLkeyboardButtonGame
// + TLkeyboardButtonBuy
// + TLkeyboardButtonUrlAuth
// + TLinputKeyboardButtonUrlAuth
// + TLkeyboardButtonRequestPoll
//
// Constructors:Type:KeyboardButton 
struct KeyboardButton {
	0 optional int constructor; 
	1 require  KeyboardButton_Data data ;
};
// Constructors:Type:Data:KeyboardButton 
struct KeyboardButton_Data {
	0	optional string text; 
	1	optional string url; 
	2	optional bool requires_password; 
	3	optional vector<unsigned byte> data; 
	4	optional bool same_peer; 
	5	optional string query; 
	6	optional string fwd_text; 
	7	optional int button_id; 
	8	optional bool request_write_access; 
	9	optional InputUser bot; 
	10	optional Bool quiz; 
};
// Constructors:Predicate:keyboardButton 
struct TLkeyboardButton {
	0	require KeyboardButton_Data data ;
};
// Constructors:Predicate:keyboardButtonUrl 
struct TLkeyboardButtonUrl {
	0	require KeyboardButton_Data data ;
};
// Constructors:Predicate:keyboardButtonCallback 
struct TLkeyboardButtonCallback {
	0	require KeyboardButton_Data data ;
};
// Constructors:Predicate:keyboardButtonRequestPhone 
struct TLkeyboardButtonRequestPhone {
	0	require KeyboardButton_Data data ;
};
// Constructors:Predicate:keyboardButtonRequestGeoLocation 
struct TLkeyboardButtonRequestGeoLocation {
	0	require KeyboardButton_Data data ;
};
// Constructors:Predicate:keyboardButtonSwitchInline 
struct TLkeyboardButtonSwitchInline {
	0	require KeyboardButton_Data data ;
};
// Constructors:Predicate:keyboardButtonGame 
struct TLkeyboardButtonGame {
	0	require KeyboardButton_Data data ;
};
// Constructors:Predicate:keyboardButtonBuy 
struct TLkeyboardButtonBuy {
	0	require KeyboardButton_Data data ;
};
// Constructors:Predicate:keyboardButtonUrlAuth 
struct TLkeyboardButtonUrlAuth {
	0	require KeyboardButton_Data data ;
};
// Constructors:Predicate:inputKeyboardButtonUrlAuth 
struct TLinputKeyboardButtonUrlAuth {
	0	require KeyboardButton_Data data ;
};
// Constructors:Predicate:keyboardButtonRequestPoll 
struct TLkeyboardButtonRequestPoll {
	0	require KeyboardButton_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputAppEvent 
// InputAppEvent <--
// + TLinputAppEvent
//
// Constructors:Type:InputAppEvent 
struct InputAppEvent {
	0 optional int constructor; 
	1 require  InputAppEvent_Data data ;
};
// Constructors:Type:Data:InputAppEvent 
struct InputAppEvent_Data {
	0	optional double time; 
	1	optional string type; 
	2	optional long peer; 
	3	optional JSONValue data; 
};
// Constructors:Predicate:inputAppEvent 
struct TLinputAppEvent {
	0	require InputAppEvent_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputBotInlineMessage 
// InputBotInlineMessage <--
// + TLinputBotInlineMessageMediaAuto
// + TLinputBotInlineMessageText
// + TLinputBotInlineMessageMediaGeo
// + TLinputBotInlineMessageMediaVenue
// + TLinputBotInlineMessageMediaContact
// + TLinputBotInlineMessageGame
//
// Constructors:Type:InputBotInlineMessage 
struct InputBotInlineMessage {
	0 optional int constructor; 
	1 require  InputBotInlineMessage_Data data ;
};
// Constructors:Type:Data:InputBotInlineMessage 
struct InputBotInlineMessage_Data {
	0	optional string message; 
	1	optional vector<MessageEntity> entities; 
	2	optional ReplyMarkup reply_markup; 
	3	optional bool no_webpage; 
	4	optional InputGeoPoint geo_point; 
	5	optional int heading; 
	6	optional int period; 
	7	optional int proximity_notification_radius; 
	8	optional string title; 
	9	optional string address; 
	10	optional string provider; 
	11	optional string venue_id; 
	12	optional string venue_type; 
	13	optional string phone_number; 
	14	optional string first_name; 
	15	optional string last_name; 
	16	optional string vcard; 
};
// Constructors:Predicate:inputBotInlineMessageMediaAuto 
struct TLinputBotInlineMessageMediaAuto {
	0	require InputBotInlineMessage_Data data ;
};
// Constructors:Predicate:inputBotInlineMessageText 
struct TLinputBotInlineMessageText {
	0	require InputBotInlineMessage_Data data ;
};
// Constructors:Predicate:inputBotInlineMessageMediaGeo 
struct TLinputBotInlineMessageMediaGeo {
	0	require InputBotInlineMessage_Data data ;
};
// Constructors:Predicate:inputBotInlineMessageMediaVenue 
struct TLinputBotInlineMessageMediaVenue {
	0	require InputBotInlineMessage_Data data ;
};
// Constructors:Predicate:inputBotInlineMessageMediaContact 
struct TLinputBotInlineMessageMediaContact {
	0	require InputBotInlineMessage_Data data ;
};
// Constructors:Predicate:inputBotInlineMessageGame 
struct TLinputBotInlineMessageGame {
	0	require InputBotInlineMessage_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Invoice 
// Invoice <--
// + TLinvoice
//
// Constructors:Type:Invoice 
struct Invoice {
	0 optional int constructor; 
	1 require  Invoice_Data data ;
};
// Constructors:Type:Data:Invoice 
struct Invoice_Data {
	0	optional bool test; 
	1	optional bool name_requested; 
	2	optional bool phone_requested; 
	3	optional bool email_requested; 
	4	optional bool shipping_address_requested; 
	5	optional bool flexible; 
	6	optional bool phone_to_provider; 
	7	optional bool email_to_provider; 
	8	optional string currency; 
	9	optional vector<LabeledPrice> prices; 
};
// Constructors:Predicate:invoice 
struct TLinvoice {
	0	require Invoice_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:DialogFilterSuggested 
// DialogFilterSuggested <--
// + TLdialogFilterSuggested
//
// Constructors:Type:DialogFilterSuggested 
struct DialogFilterSuggested {
	0 optional int constructor; 
	1 require  DialogFilterSuggested_Data data ;
};
// Constructors:Type:Data:DialogFilterSuggested 
struct DialogFilterSuggested_Data {
	0	optional DialogFilter filter; 
	1	optional string description; 
};
// Constructors:Predicate:dialogFilterSuggested 
struct TLdialogFilterSuggested {
	0	require DialogFilterSuggested_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputWebDocument 
// InputWebDocument <--
// + TLinputWebDocument
//
// Constructors:Type:InputWebDocument 
struct InputWebDocument {
	0 optional int constructor; 
	1 require  InputWebDocument_Data data ;
};
// Constructors:Type:Data:InputWebDocument 
struct InputWebDocument_Data {
	0	optional string url; 
	1	optional int size; 
	2	optional string mime_type; 
	3	optional vector<DocumentAttribute> attributes; 
};
// Constructors:Predicate:inputWebDocument 
struct TLinputWebDocument {
	0	require InputWebDocument_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:updates_State 
// updates_State <--
// + TLupdates_state
//
// Constructors:Type:updates_State 
struct updates_State {
	0 optional int constructor; 
	1 require  updates_State_Data data ;
};
// Constructors:Type:Data:updates_State 
struct updates_State_Data {
	0	optional int pts; 
	1	optional int qts; 
	2	optional int date; 
	3	optional int seq; 
	4	optional int unread_count; 
};
// Constructors:Predicate:updates_state 
struct TLupdates_state {
	0	require updates_State_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputBotInlineResult 
// InputBotInlineResult <--
// + TLinputBotInlineResult
// + TLinputBotInlineResultPhoto
// + TLinputBotInlineResultDocument
// + TLinputBotInlineResultGame
//
// Constructors:Type:InputBotInlineResult 
struct InputBotInlineResult {
	0 optional int constructor; 
	1 require  InputBotInlineResult_Data data ;
};
// Constructors:Type:Data:InputBotInlineResult 
struct InputBotInlineResult_Data {
	0	optional string id; 
	1	optional string type; 
	2	optional string title; 
	3	optional string description; 
	4	optional string url; 
	5	optional InputWebDocument thumb; 
	6	optional InputWebDocument content; 
	7	optional InputBotInlineMessage send_message; 
	8	optional InputPhoto photo; 
	9	optional InputDocument document; 
	10	optional string short_name; 
};
// Constructors:Predicate:inputBotInlineResult 
struct TLinputBotInlineResult {
	0	require InputBotInlineResult_Data data ;
};
// Constructors:Predicate:inputBotInlineResultPhoto 
struct TLinputBotInlineResultPhoto {
	0	require InputBotInlineResult_Data data ;
};
// Constructors:Predicate:inputBotInlineResultDocument 
struct TLinputBotInlineResultDocument {
	0	require InputBotInlineResult_Data data ;
};
// Constructors:Predicate:inputBotInlineResultGame 
struct TLinputBotInlineResultGame {
	0	require InputBotInlineResult_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InlineBotSwitchPM 
// InlineBotSwitchPM <--
// + TLinlineBotSwitchPM
//
// Constructors:Type:InlineBotSwitchPM 
struct InlineBotSwitchPM {
	0 optional int constructor; 
	1 require  InlineBotSwitchPM_Data data ;
};
// Constructors:Type:Data:InlineBotSwitchPM 
struct InlineBotSwitchPM_Data {
	0	optional string text; 
	1	optional string start_param; 
};
// Constructors:Predicate:inlineBotSwitchPM 
struct TLinlineBotSwitchPM {
	0	require InlineBotSwitchPM_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_AllStickers 
// messages_AllStickers <--
// + TLmessages_allStickersNotModified
// + TLmessages_allStickers
//
// Constructors:Type:messages_AllStickers 
struct messages_AllStickers {
	0 optional int constructor; 
	1 require  messages_AllStickers_Data data ;
};
// Constructors:Type:Data:messages_AllStickers 
struct messages_AllStickers_Data {
	0	optional int hash; 
	1	optional vector<StickerSet> sets; 
};
// Constructors:Predicate:messages_allStickersNotModified 
struct TLmessages_allStickersNotModified {
	0	require messages_AllStickers_Data data ;
};
// Constructors:Predicate:messages_allStickers 
struct TLmessages_allStickers {
	0	require messages_AllStickers_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputBotInlineMessageID 
// InputBotInlineMessageID <--
// + TLinputBotInlineMessageID
//
// Constructors:Type:InputBotInlineMessageID 
struct InputBotInlineMessageID {
	0 optional int constructor; 
	1 require  InputBotInlineMessageID_Data data ;
};
// Constructors:Type:Data:InputBotInlineMessageID 
struct InputBotInlineMessageID_Data {
	0	optional int dc_id; 
	1	optional long id; 
	2	optional long access_hash; 
};
// Constructors:Predicate:inputBotInlineMessageID 
struct TLinputBotInlineMessageID {
	0	require InputBotInlineMessageID_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:FolderPeer 
// FolderPeer <--
// + TLfolderPeer
//
// Constructors:Type:FolderPeer 
struct FolderPeer {
	0 optional int constructor; 
	1 require  FolderPeer_Data data ;
};
// Constructors:Type:Data:FolderPeer 
struct FolderPeer_Data {
	0	optional Peer peer; 
	1	optional int folder_id; 
};
// Constructors:Predicate:folderPeer 
struct TLfolderPeer {
	0	require FolderPeer_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PaymentRequestedInfo 
// PaymentRequestedInfo <--
// + TLpaymentRequestedInfo
//
// Constructors:Type:PaymentRequestedInfo 
struct PaymentRequestedInfo {
	0 optional int constructor; 
	1 require  PaymentRequestedInfo_Data data ;
};
// Constructors:Type:Data:PaymentRequestedInfo 
struct PaymentRequestedInfo_Data {
	0	optional string name; 
	1	optional string phone; 
	2	optional string email; 
	3	optional PostAddress shipping_address; 
};
// Constructors:Predicate:paymentRequestedInfo 
struct TLpaymentRequestedInfo {
	0	require PaymentRequestedInfo_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageReplies 
// MessageReplies <--
// + TLmessageReplies
//
// Constructors:Type:MessageReplies 
struct MessageReplies {
	0 optional int constructor; 
	1 require  MessageReplies_Data data ;
};
// Constructors:Type:Data:MessageReplies 
struct MessageReplies_Data {
	0	optional bool comments; 
	1	optional int replies; 
	2	optional int replies_pts; 
	3	optional vector<Peer> recent_repliers; 
	4	optional int channel_id; 
	5	optional int max_id; 
	6	optional int read_max_id; 
};
// Constructors:Predicate:messageReplies 
struct TLmessageReplies {
	0	require MessageReplies_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:upload_CdnFile 
// upload_CdnFile <--
// + TLupload_cdnFileReuploadNeeded
// + TLupload_cdnFile
//
// Constructors:Type:upload_CdnFile 
struct upload_CdnFile {
	0 optional int constructor; 
	1 require  upload_CdnFile_Data data ;
};
// Constructors:Type:Data:upload_CdnFile 
struct upload_CdnFile_Data {
	0	optional vector<unsigned byte> request_token; 
	1	optional vector<unsigned byte> bytes; 
};
// Constructors:Predicate:upload_cdnFileReuploadNeeded 
struct TLupload_cdnFileReuploadNeeded {
	0	require upload_CdnFile_Data data ;
};
// Constructors:Predicate:upload_cdnFile 
struct TLupload_cdnFile {
	0	require upload_CdnFile_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ChatInvite 
// ChatInvite <--
// + TLchatInviteAlready
// + TLchatInvite
// + TLchatInvitePeek
//
// Constructors:Type:ChatInvite 
struct ChatInvite {
	0 optional int constructor; 
	1 require  ChatInvite_Data data ;
};
// Constructors:Type:Data:ChatInvite 
struct ChatInvite_Data {
	0	optional Chat chat; 
	1	optional bool channel; 
	2	optional bool broadcast; 
	3	optional bool public; 
	4	optional bool megagroup; 
	5	optional string title; 
	6	optional Photo photo; 
	7	optional int participants_count; 
	8	optional vector<User> participants; 
	9	optional int expires; 
};
// Constructors:Predicate:chatInviteAlready 
struct TLchatInviteAlready {
	0	require ChatInvite_Data data ;
};
// Constructors:Predicate:chatInvite 
struct TLchatInvite {
	0	require ChatInvite_Data data ;
};
// Constructors:Predicate:chatInvitePeek 
struct TLchatInvitePeek {
	0	require ChatInvite_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:LangPackDifference 
// LangPackDifference <--
// + TLlangPackDifference
//
// Constructors:Type:LangPackDifference 
struct LangPackDifference {
	0 optional int constructor; 
	1 require  LangPackDifference_Data data ;
};
// Constructors:Type:Data:LangPackDifference 
struct LangPackDifference_Data {
	0	optional string lang_code; 
	1	optional int from_version; 
	2	optional int version; 
	3	optional vector<LangPackString> strings; 
};
// Constructors:Predicate:langPackDifference 
struct TLlangPackDifference {
	0	require LangPackDifference_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:StatsGroupTopAdmin 
// StatsGroupTopAdmin <--
// + TLstatsGroupTopAdmin
//
// Constructors:Type:StatsGroupTopAdmin 
struct StatsGroupTopAdmin {
	0 optional int constructor; 
	1 require  StatsGroupTopAdmin_Data data ;
};
// Constructors:Type:Data:StatsGroupTopAdmin 
struct StatsGroupTopAdmin_Data {
	0	optional int user_id; 
	1	optional int deleted; 
	2	optional int kicked; 
	3	optional int banned; 
};
// Constructors:Predicate:statsGroupTopAdmin 
struct TLstatsGroupTopAdmin {
	0	require StatsGroupTopAdmin_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_ChatFull 
// messages_ChatFull <--
// + TLmessages_chatFull
//
// Constructors:Type:messages_ChatFull 
struct messages_ChatFull {
	0 optional int constructor; 
	1 require  messages_ChatFull_Data data ;
};
// Constructors:Type:Data:messages_ChatFull 
struct messages_ChatFull_Data {
	0	optional ChatFull full_chat; 
	1	optional vector<Chat> chats; 
	2	optional vector<User> users; 
};
// Constructors:Predicate:messages_chatFull 
struct TLmessages_chatFull {
	0	require messages_ChatFull_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:RichText 
// RichText <--
// + TLtextEmpty
// + TLtextPlain
// + TLtextBold
// + TLtextItalic
// + TLtextUnderline
// + TLtextStrike
// + TLtextFixed
// + TLtextUrl
// + TLtextEmail
// + TLtextConcat
// + TLtextSubscript
// + TLtextSuperscript
// + TLtextMarked
// + TLtextPhone
// + TLtextImage
// + TLtextAnchor
//
// Constructors:Type:RichText 
struct RichText {
	0 optional int constructor; 
	1 require  RichText_Data data ;
};
// Constructors:Type:Data:RichText 
struct RichText_Data {
	0	optional string text; 
	1	optional RichText text_2; 
	2	optional string url; 
	3	optional long webpage_id; 
	4	optional string email; 
	5	optional vector<RichText> texts; 
	6	optional string phone; 
	7	optional long document_id; 
	8	optional int w; 
	9	optional int h; 
	10	optional string name; 
};
// Constructors:Predicate:textEmpty 
struct TLtextEmpty {
	0	require RichText_Data data ;
};
// Constructors:Predicate:textPlain 
struct TLtextPlain {
	0	require RichText_Data data ;
};
// Constructors:Predicate:textBold 
struct TLtextBold {
	0	require RichText_Data data ;
};
// Constructors:Predicate:textItalic 
struct TLtextItalic {
	0	require RichText_Data data ;
};
// Constructors:Predicate:textUnderline 
struct TLtextUnderline {
	0	require RichText_Data data ;
};
// Constructors:Predicate:textStrike 
struct TLtextStrike {
	0	require RichText_Data data ;
};
// Constructors:Predicate:textFixed 
struct TLtextFixed {
	0	require RichText_Data data ;
};
// Constructors:Predicate:textUrl 
struct TLtextUrl {
	0	require RichText_Data data ;
};
// Constructors:Predicate:textEmail 
struct TLtextEmail {
	0	require RichText_Data data ;
};
// Constructors:Predicate:textConcat 
struct TLtextConcat {
	0	require RichText_Data data ;
};
// Constructors:Predicate:textSubscript 
struct TLtextSubscript {
	0	require RichText_Data data ;
};
// Constructors:Predicate:textSuperscript 
struct TLtextSuperscript {
	0	require RichText_Data data ;
};
// Constructors:Predicate:textMarked 
struct TLtextMarked {
	0	require RichText_Data data ;
};
// Constructors:Predicate:textPhone 
struct TLtextPhone {
	0	require RichText_Data data ;
};
// Constructors:Predicate:textImage 
struct TLtextImage {
	0	require RichText_Data data ;
};
// Constructors:Predicate:textAnchor 
struct TLtextAnchor {
	0	require RichText_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_MessageEditData 
// messages_MessageEditData <--
// + TLmessages_messageEditData
//
// Constructors:Type:messages_MessageEditData 
struct messages_MessageEditData {
	0 optional int constructor; 
	1 require  messages_MessageEditData_Data data ;
};
// Constructors:Type:Data:messages_MessageEditData 
struct messages_MessageEditData_Data {
	0	optional bool caption; 
};
// Constructors:Predicate:messages_messageEditData 
struct TLmessages_messageEditData {
	0	require messages_MessageEditData_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PeerLocated 
// PeerLocated <--
// + TLpeerLocated
// + TLpeerSelfLocated
//
// Constructors:Type:PeerLocated 
struct PeerLocated {
	0 optional int constructor; 
	1 require  PeerLocated_Data data ;
};
// Constructors:Type:Data:PeerLocated 
struct PeerLocated_Data {
	0	optional Peer peer; 
	1	optional int expires; 
	2	optional int distance; 
};
// Constructors:Predicate:peerLocated 
struct TLpeerLocated {
	0	require PeerLocated_Data data ;
};
// Constructors:Predicate:peerSelfLocated 
struct TLpeerSelfLocated {
	0	require PeerLocated_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:account_AutoDownloadSettings 
// account_AutoDownloadSettings <--
// + TLaccount_autoDownloadSettings
//
// Constructors:Type:account_AutoDownloadSettings 
struct account_AutoDownloadSettings {
	0 optional int constructor; 
	1 require  account_AutoDownloadSettings_Data data ;
};
// Constructors:Type:Data:account_AutoDownloadSettings 
struct account_AutoDownloadSettings_Data {
	0	optional AutoDownloadSettings low; 
	1	optional AutoDownloadSettings medium; 
	2	optional AutoDownloadSettings high; 
};
// Constructors:Predicate:account_autoDownloadSettings 
struct TLaccount_autoDownloadSettings {
	0	require account_AutoDownloadSettings_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:StickerPack 
// StickerPack <--
// + TLstickerPack
//
// Constructors:Type:StickerPack 
struct StickerPack {
	0 optional int constructor; 
	1 require  StickerPack_Data data ;
};
// Constructors:Type:Data:StickerPack 
struct StickerPack_Data {
	0	optional string emoticon; 
	1	optional vector<long> documents; 
};
// Constructors:Predicate:stickerPack 
struct TLstickerPack {
	0	require StickerPack_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ChatBannedRights 
// ChatBannedRights <--
// + TLchatBannedRights
//
// Constructors:Type:ChatBannedRights 
struct ChatBannedRights {
	0 optional int constructor; 
	1 require  ChatBannedRights_Data data ;
};
// Constructors:Type:Data:ChatBannedRights 
struct ChatBannedRights_Data {
	0	optional bool view_messages; 
	1	optional bool send_messages; 
	2	optional bool send_media; 
	3	optional bool send_stickers; 
	4	optional bool send_gifs; 
	5	optional bool send_games; 
	6	optional bool send_inline; 
	7	optional bool embed_links; 
	8	optional bool send_polls; 
	9	optional bool change_info; 
	10	optional bool invite_users; 
	11	optional bool pin_messages; 
	12	optional int until_date; 
};
// Constructors:Predicate:chatBannedRights 
struct TLchatBannedRights {
	0	require ChatBannedRights_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:upload_File 
// upload_File <--
// + TLupload_file
// + TLupload_fileCdnRedirect
//
// Constructors:Type:upload_File 
struct upload_File {
	0 optional int constructor; 
	1 require  upload_File_Data data ;
};
// Constructors:Type:Data:upload_File 
struct upload_File_Data {
	0	optional storage_FileType type; 
	1	optional int mtime; 
	2	optional vector<unsigned byte> bytes; 
	3	optional int dc_id; 
	4	optional vector<unsigned byte> file_token; 
	5	optional vector<unsigned byte> encryption_key; 
	6	optional vector<unsigned byte> encryption_iv; 
	7	optional vector<FileHash> file_hashes; 
};
// Constructors:Predicate:upload_file 
struct TLupload_file {
	0	require upload_File_Data data ;
};
// Constructors:Predicate:upload_fileCdnRedirect 
struct TLupload_fileCdnRedirect {
	0	require upload_File_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputPrivacyKey 
// InputPrivacyKey <--
// + TLinputPrivacyKeyStatusTimestamp
// + TLinputPrivacyKeyChatInvite
// + TLinputPrivacyKeyPhoneCall
// + TLinputPrivacyKeyPhoneP2P
// + TLinputPrivacyKeyForwards
// + TLinputPrivacyKeyProfilePhoto
// + TLinputPrivacyKeyPhoneNumber
// + TLinputPrivacyKeyAddedByPhone
//
// Constructors:Type:InputPrivacyKey 
struct InputPrivacyKey {
	0 optional int constructor; 
	1 require  InputPrivacyKey_Data data ;
};
// Constructors:Type:Data:InputPrivacyKey 
struct InputPrivacyKey_Data {
};
// Constructors:Predicate:inputPrivacyKeyStatusTimestamp 
struct TLinputPrivacyKeyStatusTimestamp {
	0	require InputPrivacyKey_Data data ;
};
// Constructors:Predicate:inputPrivacyKeyChatInvite 
struct TLinputPrivacyKeyChatInvite {
	0	require InputPrivacyKey_Data data ;
};
// Constructors:Predicate:inputPrivacyKeyPhoneCall 
struct TLinputPrivacyKeyPhoneCall {
	0	require InputPrivacyKey_Data data ;
};
// Constructors:Predicate:inputPrivacyKeyPhoneP2P 
struct TLinputPrivacyKeyPhoneP2P {
	0	require InputPrivacyKey_Data data ;
};
// Constructors:Predicate:inputPrivacyKeyForwards 
struct TLinputPrivacyKeyForwards {
	0	require InputPrivacyKey_Data data ;
};
// Constructors:Predicate:inputPrivacyKeyProfilePhoto 
struct TLinputPrivacyKeyProfilePhoto {
	0	require InputPrivacyKey_Data data ;
};
// Constructors:Predicate:inputPrivacyKeyPhoneNumber 
struct TLinputPrivacyKeyPhoneNumber {
	0	require InputPrivacyKey_Data data ;
};
// Constructors:Predicate:inputPrivacyKeyAddedByPhone 
struct TLinputPrivacyKeyAddedByPhone {
	0	require InputPrivacyKey_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:auth_ExportedAuthorization 
// auth_ExportedAuthorization <--
// + TLauth_exportedAuthorization
//
// Constructors:Type:auth_ExportedAuthorization 
struct auth_ExportedAuthorization {
	0 optional int constructor; 
	1 require  auth_ExportedAuthorization_Data data ;
};
// Constructors:Type:Data:auth_ExportedAuthorization 
struct auth_ExportedAuthorization_Data {
	0	optional int id; 
	1	optional vector<unsigned byte> bytes; 
};
// Constructors:Predicate:auth_exportedAuthorization 
struct TLauth_exportedAuthorization {
	0	require auth_ExportedAuthorization_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ChannelAdminLogEventAction 
// ChannelAdminLogEventAction <--
// + TLchannelAdminLogEventActionChangeTitle
// + TLchannelAdminLogEventActionChangeAbout
// + TLchannelAdminLogEventActionChangeUsername
// + TLchannelAdminLogEventActionChangePhoto
// + TLchannelAdminLogEventActionToggleInvites
// + TLchannelAdminLogEventActionToggleSignatures
// + TLchannelAdminLogEventActionUpdatePinned
// + TLchannelAdminLogEventActionEditMessage
// + TLchannelAdminLogEventActionDeleteMessage
// + TLchannelAdminLogEventActionParticipantJoin
// + TLchannelAdminLogEventActionParticipantLeave
// + TLchannelAdminLogEventActionParticipantInvite
// + TLchannelAdminLogEventActionParticipantToggleBan
// + TLchannelAdminLogEventActionParticipantToggleAdmin
// + TLchannelAdminLogEventActionChangeStickerSet
// + TLchannelAdminLogEventActionTogglePreHistoryHidden
// + TLchannelAdminLogEventActionDefaultBannedRights
// + TLchannelAdminLogEventActionStopPoll
// + TLchannelAdminLogEventActionChangeLinkedChat
// + TLchannelAdminLogEventActionChangeLocation
// + TLchannelAdminLogEventActionToggleSlowMode
//
// Constructors:Type:ChannelAdminLogEventAction 
struct ChannelAdminLogEventAction {
	0 optional int constructor; 
	1 require  ChannelAdminLogEventAction_Data data ;
};
// Constructors:Type:Data:ChannelAdminLogEventAction 
struct ChannelAdminLogEventAction_Data {
	0	optional string prev_value; 
	1	optional string new_value; 
	2	optional Photo prev_photo; 
	3	optional Photo new_photo; 
	4	optional Bool new_value_5; 
	5	optional Message message; 
	6	optional Message prev_message; 
	7	optional Message new_message; 
	8	optional ChannelParticipant participant; 
	9	optional ChannelParticipant prev_participant; 
	10	optional ChannelParticipant new_participant; 
	11	optional InputStickerSet prev_stickerset; 
	12	optional InputStickerSet new_stickerset; 
	13	optional ChatBannedRights prev_banned_rights; 
	14	optional ChatBannedRights new_banned_rights; 
	15	optional int prev_value_16; 
	16	optional int new_value_17; 
	17	optional ChannelLocation prev_value_18; 
	18	optional ChannelLocation new_value_19; 
};
// Constructors:Predicate:channelAdminLogEventActionChangeTitle 
struct TLchannelAdminLogEventActionChangeTitle {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionChangeAbout 
struct TLchannelAdminLogEventActionChangeAbout {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionChangeUsername 
struct TLchannelAdminLogEventActionChangeUsername {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionChangePhoto 
struct TLchannelAdminLogEventActionChangePhoto {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionToggleInvites 
struct TLchannelAdminLogEventActionToggleInvites {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionToggleSignatures 
struct TLchannelAdminLogEventActionToggleSignatures {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionUpdatePinned 
struct TLchannelAdminLogEventActionUpdatePinned {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionEditMessage 
struct TLchannelAdminLogEventActionEditMessage {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionDeleteMessage 
struct TLchannelAdminLogEventActionDeleteMessage {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionParticipantJoin 
struct TLchannelAdminLogEventActionParticipantJoin {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionParticipantLeave 
struct TLchannelAdminLogEventActionParticipantLeave {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionParticipantInvite 
struct TLchannelAdminLogEventActionParticipantInvite {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionParticipantToggleBan 
struct TLchannelAdminLogEventActionParticipantToggleBan {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionParticipantToggleAdmin 
struct TLchannelAdminLogEventActionParticipantToggleAdmin {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionChangeStickerSet 
struct TLchannelAdminLogEventActionChangeStickerSet {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionTogglePreHistoryHidden 
struct TLchannelAdminLogEventActionTogglePreHistoryHidden {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionDefaultBannedRights 
struct TLchannelAdminLogEventActionDefaultBannedRights {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionStopPoll 
struct TLchannelAdminLogEventActionStopPoll {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionChangeLinkedChat 
struct TLchannelAdminLogEventActionChangeLinkedChat {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionChangeLocation 
struct TLchannelAdminLogEventActionChangeLocation {
	0	require ChannelAdminLogEventAction_Data data ;
};
// Constructors:Predicate:channelAdminLogEventActionToggleSlowMode 
struct TLchannelAdminLogEventActionToggleSlowMode {
	0	require ChannelAdminLogEventAction_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:account_Themes 
// account_Themes <--
// + TLaccount_themesNotModified
// + TLaccount_themes
//
// Constructors:Type:account_Themes 
struct account_Themes {
	0 optional int constructor; 
	1 require  account_Themes_Data data ;
};
// Constructors:Type:Data:account_Themes 
struct account_Themes_Data {
	0	optional int hash; 
	1	optional vector<Theme> themes; 
};
// Constructors:Predicate:account_themesNotModified 
struct TLaccount_themesNotModified {
	0	require account_Themes_Data data ;
};
// Constructors:Predicate:account_themes 
struct TLaccount_themes {
	0	require account_Themes_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:DialogPeer 
// DialogPeer <--
// + TLdialogPeer
// + TLdialogPeerFolder
//
// Constructors:Type:DialogPeer 
struct DialogPeer {
	0 optional int constructor; 
	1 require  DialogPeer_Data data ;
};
// Constructors:Type:Data:DialogPeer 
struct DialogPeer_Data {
	0	optional Peer peer; 
	1	optional int folder_id; 
};
// Constructors:Predicate:dialogPeer 
struct TLdialogPeer {
	0	require DialogPeer_Data data ;
};
// Constructors:Predicate:dialogPeerFolder 
struct TLdialogPeerFolder {
	0	require DialogPeer_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PageCaption 
// PageCaption <--
// + TLpageCaption
//
// Constructors:Type:PageCaption 
struct PageCaption {
	0 optional int constructor; 
	1 require  PageCaption_Data data ;
};
// Constructors:Type:Data:PageCaption 
struct PageCaption_Data {
	0	optional RichText text; 
	1	optional RichText credit; 
};
// Constructors:Predicate:pageCaption 
struct TLpageCaption {
	0	require PageCaption_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:StickerSet 
// StickerSet <--
// + TLstickerSet
//
// Constructors:Type:StickerSet 
struct StickerSet {
	0 optional int constructor; 
	1 require  StickerSet_Data data ;
};
// Constructors:Type:Data:StickerSet 
struct StickerSet_Data {
	0	optional bool archived; 
	1	optional bool official; 
	2	optional bool masks; 
	3	optional bool animated; 
	4	optional int installed_date; 
	5	optional long id; 
	6	optional long access_hash; 
	7	optional string title; 
	8	optional string short_name; 
	9	optional PhotoSize thumb; 
	10	optional int thumb_dc_id; 
	11	optional int count; 
	12	optional int hash; 
};
// Constructors:Predicate:stickerSet 
struct TLstickerSet {
	0	require StickerSet_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:UserProfilePhoto 
// UserProfilePhoto <--
// + TLuserProfilePhotoEmpty
// + TLuserProfilePhoto
//
// Constructors:Type:UserProfilePhoto 
struct UserProfilePhoto {
	0 optional int constructor; 
	1 require  UserProfilePhoto_Data data ;
};
// Constructors:Type:Data:UserProfilePhoto 
struct UserProfilePhoto_Data {
	0	optional bool has_video; 
	1	optional long photo_id; 
	2	optional FileLocation photo_small; 
	3	optional FileLocation photo_big; 
	4	optional int dc_id; 
};
// Constructors:Predicate:userProfilePhotoEmpty 
struct TLuserProfilePhotoEmpty {
	0	require UserProfilePhoto_Data data ;
};
// Constructors:Predicate:userProfilePhoto 
struct TLuserProfilePhoto {
	0	require UserProfilePhoto_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:payments_BankCardData 
// payments_BankCardData <--
// + TLpayments_bankCardData
//
// Constructors:Type:payments_BankCardData 
struct payments_BankCardData {
	0 optional int constructor; 
	1 require  payments_BankCardData_Data data ;
};
// Constructors:Type:Data:payments_BankCardData 
struct payments_BankCardData_Data {
	0	optional string title; 
	1	optional vector<BankCardOpenUrl> open_urls; 
};
// Constructors:Predicate:payments_bankCardData 
struct TLpayments_bankCardData {
	0	require payments_BankCardData_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:help_SupportName 
// help_SupportName <--
// + TLhelp_supportName
//
// Constructors:Type:help_SupportName 
struct help_SupportName {
	0 optional int constructor; 
	1 require  help_SupportName_Data data ;
};
// Constructors:Type:Data:help_SupportName 
struct help_SupportName_Data {
	0	optional string name; 
};
// Constructors:Predicate:help_supportName 
struct TLhelp_supportName {
	0	require help_SupportName_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PeerNotifySettings 
// PeerNotifySettings <--
// + TLpeerNotifySettings
//
// Constructors:Type:PeerNotifySettings 
struct PeerNotifySettings {
	0 optional int constructor; 
	1 require  PeerNotifySettings_Data data ;
};
// Constructors:Type:Data:PeerNotifySettings 
struct PeerNotifySettings_Data {
	0	optional Bool show_previews; 
	1	optional Bool silent; 
	2	optional int mute_until; 
	3	optional string sound; 
};
// Constructors:Predicate:peerNotifySettings 
struct TLpeerNotifySettings {
	0	require PeerNotifySettings_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:account_TmpPassword 
// account_TmpPassword <--
// + TLaccount_tmpPassword
//
// Constructors:Type:account_TmpPassword 
struct account_TmpPassword {
	0 optional int constructor; 
	1 require  account_TmpPassword_Data data ;
};
// Constructors:Type:Data:account_TmpPassword 
struct account_TmpPassword_Data {
	0	optional vector<unsigned byte> tmp_password; 
	1	optional int valid_until; 
};
// Constructors:Predicate:account_tmpPassword 
struct TLaccount_tmpPassword {
	0	require account_TmpPassword_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:StatsPercentValue 
// StatsPercentValue <--
// + TLstatsPercentValue
//
// Constructors:Type:StatsPercentValue 
struct StatsPercentValue {
	0 optional int constructor; 
	1 require  StatsPercentValue_Data data ;
};
// Constructors:Type:Data:StatsPercentValue 
struct StatsPercentValue_Data {
	0	optional double part; 
	1	optional double total; 
};
// Constructors:Predicate:statsPercentValue 
struct TLstatsPercentValue {
	0	require StatsPercentValue_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:updates_ChannelDifference 
// updates_ChannelDifference <--
// + TLupdates_channelDifferenceEmpty
// + TLupdates_channelDifferenceTooLong
// + TLupdates_channelDifference
//
// Constructors:Type:updates_ChannelDifference 
struct updates_ChannelDifference {
	0 optional int constructor; 
	1 require  updates_ChannelDifference_Data data ;
};
// Constructors:Type:Data:updates_ChannelDifference 
struct updates_ChannelDifference_Data {
	0	optional bool final; 
	1	optional int pts; 
	2	optional int timeout; 
	3	optional Dialog dialog; 
	4	optional vector<Message> messages; 
	5	optional vector<Chat> chats; 
	6	optional vector<User> users; 
	7	optional vector<Message> new_messages; 
	8	optional vector<Update> other_updates; 
};
// Constructors:Predicate:updates_channelDifferenceEmpty 
struct TLupdates_channelDifferenceEmpty {
	0	require updates_ChannelDifference_Data data ;
};
// Constructors:Predicate:updates_channelDifferenceTooLong 
struct TLupdates_channelDifferenceTooLong {
	0	require updates_ChannelDifference_Data data ;
};
// Constructors:Predicate:updates_channelDifference 
struct TLupdates_channelDifference {
	0	require updates_ChannelDifference_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:CdnPublicKey 
// CdnPublicKey <--
// + TLcdnPublicKey
//
// Constructors:Type:CdnPublicKey 
struct CdnPublicKey {
	0 optional int constructor; 
	1 require  CdnPublicKey_Data data ;
};
// Constructors:Type:Data:CdnPublicKey 
struct CdnPublicKey_Data {
	0	optional int dc_id; 
	1	optional string public_key; 
};
// Constructors:Predicate:cdnPublicKey 
struct TLcdnPublicKey {
	0	require CdnPublicKey_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:CodeSettings 
// CodeSettings <--
// + TLcodeSettings
//
// Constructors:Type:CodeSettings 
struct CodeSettings {
	0 optional int constructor; 
	1 require  CodeSettings_Data data ;
};
// Constructors:Type:Data:CodeSettings 
struct CodeSettings_Data {
	0	optional bool allow_flashcall; 
	1	optional bool current_number; 
	2	optional bool allow_app_hash; 
};
// Constructors:Predicate:codeSettings 
struct TLcodeSettings {
	0	require CodeSettings_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:help_DeepLinkInfo 
// help_DeepLinkInfo <--
// + TLhelp_deepLinkInfoEmpty
// + TLhelp_deepLinkInfo
//
// Constructors:Type:help_DeepLinkInfo 
struct help_DeepLinkInfo {
	0 optional int constructor; 
	1 require  help_DeepLinkInfo_Data data ;
};
// Constructors:Type:Data:help_DeepLinkInfo 
struct help_DeepLinkInfo_Data {
	0	optional bool update_app; 
	1	optional string message; 
	2	optional vector<MessageEntity> entities; 
};
// Constructors:Predicate:help_deepLinkInfoEmpty 
struct TLhelp_deepLinkInfoEmpty {
	0	require help_DeepLinkInfo_Data data ;
};
// Constructors:Predicate:help_deepLinkInfo 
struct TLhelp_deepLinkInfo {
	0	require help_DeepLinkInfo_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputDialogPeer 
// InputDialogPeer <--
// + TLinputDialogPeer
// + TLinputDialogPeerFolder
//
// Constructors:Type:InputDialogPeer 
struct InputDialogPeer {
	0 optional int constructor; 
	1 require  InputDialogPeer_Data data ;
};
// Constructors:Type:Data:InputDialogPeer 
struct InputDialogPeer_Data {
	0	optional InputPeer peer; 
	1	optional int folder_id; 
};
// Constructors:Predicate:inputDialogPeer 
struct TLinputDialogPeer {
	0	require InputDialogPeer_Data data ;
};
// Constructors:Predicate:inputDialogPeerFolder 
struct TLinputDialogPeerFolder {
	0	require InputDialogPeer_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputSecureFile 
// InputSecureFile <--
// + TLinputSecureFileUploaded
// + TLinputSecureFile
//
// Constructors:Type:InputSecureFile 
struct InputSecureFile {
	0 optional int constructor; 
	1 require  InputSecureFile_Data data ;
};
// Constructors:Type:Data:InputSecureFile 
struct InputSecureFile_Data {
	0	optional long id; 
	1	optional int parts; 
	2	optional string md5_checksum; 
	3	optional vector<unsigned byte> file_hash; 
	4	optional vector<unsigned byte> secret; 
	5	optional long access_hash; 
};
// Constructors:Predicate:inputSecureFileUploaded 
struct TLinputSecureFileUploaded {
	0	require InputSecureFile_Data data ;
};
// Constructors:Predicate:inputSecureFile 
struct TLinputSecureFile {
	0	require InputSecureFile_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ThemeSettings 
// ThemeSettings <--
// + TLthemeSettings
//
// Constructors:Type:ThemeSettings 
struct ThemeSettings {
	0 optional int constructor; 
	1 require  ThemeSettings_Data data ;
};
// Constructors:Type:Data:ThemeSettings 
struct ThemeSettings_Data {
	0	optional BaseTheme base_theme; 
	1	optional int accent_color; 
	2	optional int message_top_color; 
	3	optional int message_bottom_color; 
	4	optional WallPaper wallpaper; 
};
// Constructors:Predicate:themeSettings 
struct TLthemeSettings {
	0	require ThemeSettings_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:LangPackLanguage 
// LangPackLanguage <--
// + TLlangPackLanguage
//
// Constructors:Type:LangPackLanguage 
struct LangPackLanguage {
	0 optional int constructor; 
	1 require  LangPackLanguage_Data data ;
};
// Constructors:Type:Data:LangPackLanguage 
struct LangPackLanguage_Data {
	0	optional bool official; 
	1	optional bool rtl; 
	2	optional bool beta; 
	3	optional string name; 
	4	optional string native_name; 
	5	optional string lang_code; 
	6	optional string base_lang_code; 
	7	optional string plural_code; 
	8	optional int strings_count; 
	9	optional int translated_count; 
	10	optional string translations_url; 
};
// Constructors:Predicate:langPackLanguage 
struct TLlangPackLanguage {
	0	require LangPackLanguage_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:NearestDc 
// NearestDc <--
// + TLnearestDc
//
// Constructors:Type:NearestDc 
struct NearestDc {
	0 optional int constructor; 
	1 require  NearestDc_Data data ;
};
// Constructors:Type:Data:NearestDc 
struct NearestDc_Data {
	0	optional string country; 
	1	optional int this_dc; 
	2	optional int nearest_dc; 
};
// Constructors:Predicate:nearestDc 
struct TLnearestDc {
	0	require NearestDc_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PaymentCharge 
// PaymentCharge <--
// + TLpaymentCharge
//
// Constructors:Type:PaymentCharge 
struct PaymentCharge {
	0 optional int constructor; 
	1 require  PaymentCharge_Data data ;
};
// Constructors:Type:Data:PaymentCharge 
struct PaymentCharge_Data {
	0	optional string id; 
	1	optional string provider_charge_id; 
};
// Constructors:Predicate:paymentCharge 
struct TLpaymentCharge {
	0	require PaymentCharge_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:InputWallPaper 
// InputWallPaper <--
// + TLinputWallPaper
// + TLinputWallPaperSlug
// + TLinputWallPaperNoFile
//
// Constructors:Type:InputWallPaper 
struct InputWallPaper {
	0 optional int constructor; 
	1 require  InputWallPaper_Data data ;
};
// Constructors:Type:Data:InputWallPaper 
struct InputWallPaper_Data {
	0	optional long id; 
	1	optional long access_hash; 
	2	optional string slug; 
};
// Constructors:Predicate:inputWallPaper 
struct TLinputWallPaper {
	0	require InputWallPaper_Data data ;
};
// Constructors:Predicate:inputWallPaperSlug 
struct TLinputWallPaperSlug {
	0	require InputWallPaper_Data data ;
};
// Constructors:Predicate:inputWallPaperNoFile 
struct TLinputWallPaperNoFile {
	0	require InputWallPaper_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:StickerSetCovered 
// StickerSetCovered <--
// + TLstickerSetCovered
// + TLstickerSetMultiCovered
//
// Constructors:Type:StickerSetCovered 
struct StickerSetCovered {
	0 optional int constructor; 
	1 require  StickerSetCovered_Data data ;
};
// Constructors:Type:Data:StickerSetCovered 
struct StickerSetCovered_Data {
	0	optional StickerSet set; 
	1	optional Document cover; 
	2	optional vector<Document> covers; 
};
// Constructors:Predicate:stickerSetCovered 
struct TLstickerSetCovered {
	0	require StickerSetCovered_Data data ;
};
// Constructors:Predicate:stickerSetMultiCovered 
struct TLstickerSetMultiCovered {
	0	require StickerSetCovered_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:account_SentEmailCode 
// account_SentEmailCode <--
// + TLaccount_sentEmailCode
//
// Constructors:Type:account_SentEmailCode 
struct account_SentEmailCode {
	0 optional int constructor; 
	1 require  account_SentEmailCode_Data data ;
};
// Constructors:Type:Data:account_SentEmailCode 
struct account_SentEmailCode_Data {
	0	optional string email_pattern; 
	1	optional int length; 
};
// Constructors:Predicate:account_sentEmailCode 
struct TLaccount_sentEmailCode {
	0	require account_SentEmailCode_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_InactiveChats 
// messages_InactiveChats <--
// + TLmessages_inactiveChats
//
// Constructors:Type:messages_InactiveChats 
struct messages_InactiveChats {
	0 optional int constructor; 
	1 require  messages_InactiveChats_Data data ;
};
// Constructors:Type:Data:messages_InactiveChats 
struct messages_InactiveChats_Data {
	0	optional vector<int> dates; 
	1	optional vector<Chat> chats; 
	2	optional vector<User> users; 
};
// Constructors:Predicate:messages_inactiveChats 
struct TLmessages_inactiveChats {
	0	require messages_InactiveChats_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:True 
// True <--
// + TLtrue
//
// Constructors:Type:True 
struct True {
	0 optional int constructor; 
	1 require  True_Data data ;
};
// Constructors:Type:Data:True 
struct True_Data {
};
// Constructors:Predicate:true 
struct TLtrue {
	0	require True_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:photos_Photos 
// photos_Photos <--
// + TLphotos_photos
// + TLphotos_photosSlice
//
// Constructors:Type:photos_Photos 
struct photos_Photos {
	0 optional int constructor; 
	1 require  photos_Photos_Data data ;
};
// Constructors:Type:Data:photos_Photos 
struct photos_Photos_Data {
	0	optional vector<Photo> photos; 
	1	optional vector<User> users; 
	2	optional int count; 
};
// Constructors:Predicate:photos_photos 
struct TLphotos_photos {
	0	require photos_Photos_Data data ;
};
// Constructors:Predicate:photos_photosSlice 
struct TLphotos_photosSlice {
	0	require photos_Photos_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:DraftMessage 
// DraftMessage <--
// + TLdraftMessageEmpty
// + TLdraftMessage
//
// Constructors:Type:DraftMessage 
struct DraftMessage {
	0 optional int constructor; 
	1 require  DraftMessage_Data data ;
};
// Constructors:Type:Data:DraftMessage 
struct DraftMessage_Data {
	0	optional int date; 
	1	optional bool no_webpage; 
	2	optional int reply_to_msg_id; 
	3	optional string message; 
	4	optional vector<MessageEntity> entities; 
};
// Constructors:Predicate:draftMessageEmpty 
struct TLdraftMessageEmpty {
	0	require DraftMessage_Data data ;
};
// Constructors:Predicate:draftMessage 
struct TLdraftMessage {
	0	require DraftMessage_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:HighScore 
// HighScore <--
// + TLhighScore
//
// Constructors:Type:HighScore 
struct HighScore {
	0 optional int constructor; 
	1 require  HighScore_Data data ;
};
// Constructors:Type:Data:HighScore 
struct HighScore_Data {
	0	optional int pos; 
	1	optional int user_id; 
	2	optional int score; 
};
// Constructors:Predicate:highScore 
struct TLhighScore {
	0	require HighScore_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_StickerSetInstallResult 
// messages_StickerSetInstallResult <--
// + TLmessages_stickerSetInstallResultSuccess
// + TLmessages_stickerSetInstallResultArchive
//
// Constructors:Type:messages_StickerSetInstallResult 
struct messages_StickerSetInstallResult {
	0 optional int constructor; 
	1 require  messages_StickerSetInstallResult_Data data ;
};
// Constructors:Type:Data:messages_StickerSetInstallResult 
struct messages_StickerSetInstallResult_Data {
	0	optional vector<StickerSetCovered> sets; 
};
// Constructors:Predicate:messages_stickerSetInstallResultSuccess 
struct TLmessages_stickerSetInstallResultSuccess {
	0	require messages_StickerSetInstallResult_Data data ;
};
// Constructors:Predicate:messages_stickerSetInstallResultArchive 
struct TLmessages_stickerSetInstallResultArchive {
	0	require messages_StickerSetInstallResult_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_FavedStickers 
// messages_FavedStickers <--
// + TLmessages_favedStickersNotModified
// + TLmessages_favedStickers
//
// Constructors:Type:messages_FavedStickers 
struct messages_FavedStickers {
	0 optional int constructor; 
	1 require  messages_FavedStickers_Data data ;
};
// Constructors:Type:Data:messages_FavedStickers 
struct messages_FavedStickers_Data {
	0	optional int hash; 
	1	optional vector<StickerPack> packs; 
	2	optional vector<Document> stickers; 
};
// Constructors:Predicate:messages_favedStickersNotModified 
struct TLmessages_favedStickersNotModified {
	0	require messages_FavedStickers_Data data ;
};
// Constructors:Predicate:messages_favedStickers 
struct TLmessages_favedStickers {
	0	require messages_FavedStickers_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:contacts_Contacts 
// contacts_Contacts <--
// + TLcontacts_contactsNotModified
// + TLcontacts_contacts
//
// Constructors:Type:contacts_Contacts 
struct contacts_Contacts {
	0 optional int constructor; 
	1 require  contacts_Contacts_Data data ;
};
// Constructors:Type:Data:contacts_Contacts 
struct contacts_Contacts_Data {
	0	optional vector<Contact> contacts; 
	1	optional int saved_count; 
	2	optional vector<User> users; 
};
// Constructors:Predicate:contacts_contactsNotModified 
struct TLcontacts_contactsNotModified {
	0	require contacts_Contacts_Data data ;
};
// Constructors:Predicate:contacts_contacts 
struct TLcontacts_contacts {
	0	require contacts_Contacts_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageRange 
// MessageRange <--
// + TLmessageRange
//
// Constructors:Type:MessageRange 
struct MessageRange {
	0 optional int constructor; 
	1 require  MessageRange_Data data ;
};
// Constructors:Type:Data:MessageRange 
struct MessageRange_Data {
	0	optional int min_id; 
	1	optional int max_id; 
};
// Constructors:Predicate:messageRange 
struct TLmessageRange {
	0	require MessageRange_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:help_InviteText 
// help_InviteText <--
// + TLhelp_inviteText
//
// Constructors:Type:help_InviteText 
struct help_InviteText {
	0 optional int constructor; 
	1 require  help_InviteText_Data data ;
};
// Constructors:Type:Data:help_InviteText 
struct help_InviteText_Data {
	0	optional string message; 
};
// Constructors:Predicate:help_inviteText 
struct TLhelp_inviteText {
	0	require help_InviteText_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ChatFull 
// ChatFull <--
// + TLchatFull
// + TLchannelFull
//
// Constructors:Type:ChatFull 
struct ChatFull {
	0 optional int constructor; 
	1 require  ChatFull_Data data ;
};
// Constructors:Type:Data:ChatFull 
struct ChatFull_Data {
	0	optional bool can_set_username; 
	1	optional bool has_scheduled; 
	2	optional int id; 
	3	optional string about; 
	4	optional ChatParticipants participants; 
	5	optional Photo chat_photo; 
	6	optional PeerNotifySettings notify_settings; 
	7	optional ExportedChatInvite exported_invite; 
	8	optional vector<BotInfo> bot_info; 
	9	optional int pinned_msg_id; 
	10	optional int folder_id; 
	11	optional bool can_view_participants; 
	12	optional bool can_set_stickers; 
	13	optional bool hidden_prehistory; 
	14	optional bool can_set_location; 
	15	optional bool can_view_stats; 
	16	optional bool blocked; 
	17	optional int participants_count; 
	18	optional int admins_count; 
	19	optional int kicked_count; 
	20	optional int banned_count; 
	21	optional int online_count; 
	22	optional int read_inbox_max_id; 
	23	optional int read_outbox_max_id; 
	24	optional int unread_count; 
	25	optional int migrated_from_chat_id; 
	26	optional int migrated_from_max_id; 
	27	optional StickerSet stickerset; 
	28	optional int available_min_id; 
	29	optional int linked_chat_id; 
	30	optional ChannelLocation location; 
	31	optional int slowmode_seconds; 
	32	optional int slowmode_next_send_date; 
	33	optional int stats_dc; 
	34	optional int pts; 
};
// Constructors:Predicate:chatFull 
struct TLchatFull {
	0	require ChatFull_Data data ;
};
// Constructors:Predicate:channelFull 
struct TLchannelFull {
	0	require ChatFull_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:SecureFile 
// SecureFile <--
// + TLsecureFileEmpty
// + TLsecureFile
//
// Constructors:Type:SecureFile 
struct SecureFile {
	0 optional int constructor; 
	1 require  SecureFile_Data data ;
};
// Constructors:Type:Data:SecureFile 
struct SecureFile_Data {
	0	optional long id; 
	1	optional long access_hash; 
	2	optional int size; 
	3	optional int dc_id; 
	4	optional int date; 
	5	optional vector<unsigned byte> file_hash; 
	6	optional vector<unsigned byte> secret; 
};
// Constructors:Predicate:secureFileEmpty 
struct TLsecureFileEmpty {
	0	require SecureFile_Data data ;
};
// Constructors:Predicate:secureFile 
struct TLsecureFile {
	0	require SecureFile_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:ChannelMessagesFilter 
// ChannelMessagesFilter <--
// + TLchannelMessagesFilterEmpty
// + TLchannelMessagesFilter
//
// Constructors:Type:ChannelMessagesFilter 
struct ChannelMessagesFilter {
	0 optional int constructor; 
	1 require  ChannelMessagesFilter_Data data ;
};
// Constructors:Type:Data:ChannelMessagesFilter 
struct ChannelMessagesFilter_Data {
	0	optional bool exclude_new_messages; 
	1	optional vector<MessageRange> ranges; 
};
// Constructors:Predicate:channelMessagesFilterEmpty 
struct TLchannelMessagesFilterEmpty {
	0	require ChannelMessagesFilter_Data data ;
};
// Constructors:Predicate:channelMessagesFilter 
struct TLchannelMessagesFilter {
	0	require ChannelMessagesFilter_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:SecureValueType 
// SecureValueType <--
// + TLsecureValueTypePersonalDetails
// + TLsecureValueTypePassport
// + TLsecureValueTypeDriverLicense
// + TLsecureValueTypeIdentityCard
// + TLsecureValueTypeInternalPassport
// + TLsecureValueTypeAddress
// + TLsecureValueTypeUtilityBill
// + TLsecureValueTypeBankStatement
// + TLsecureValueTypeRentalAgreement
// + TLsecureValueTypePassportRegistration
// + TLsecureValueTypeTemporaryRegistration
// + TLsecureValueTypePhone
// + TLsecureValueTypeEmail
//
// Constructors:Type:SecureValueType 
struct SecureValueType {
	0 optional int constructor; 
	1 require  SecureValueType_Data data ;
};
// Constructors:Type:Data:SecureValueType 
struct SecureValueType_Data {
};
// Constructors:Predicate:secureValueTypePersonalDetails 
struct TLsecureValueTypePersonalDetails {
	0	require SecureValueType_Data data ;
};
// Constructors:Predicate:secureValueTypePassport 
struct TLsecureValueTypePassport {
	0	require SecureValueType_Data data ;
};
// Constructors:Predicate:secureValueTypeDriverLicense 
struct TLsecureValueTypeDriverLicense {
	0	require SecureValueType_Data data ;
};
// Constructors:Predicate:secureValueTypeIdentityCard 
struct TLsecureValueTypeIdentityCard {
	0	require SecureValueType_Data data ;
};
// Constructors:Predicate:secureValueTypeInternalPassport 
struct TLsecureValueTypeInternalPassport {
	0	require SecureValueType_Data data ;
};
// Constructors:Predicate:secureValueTypeAddress 
struct TLsecureValueTypeAddress {
	0	require SecureValueType_Data data ;
};
// Constructors:Predicate:secureValueTypeUtilityBill 
struct TLsecureValueTypeUtilityBill {
	0	require SecureValueType_Data data ;
};
// Constructors:Predicate:secureValueTypeBankStatement 
struct TLsecureValueTypeBankStatement {
	0	require SecureValueType_Data data ;
};
// Constructors:Predicate:secureValueTypeRentalAgreement 
struct TLsecureValueTypeRentalAgreement {
	0	require SecureValueType_Data data ;
};
// Constructors:Predicate:secureValueTypePassportRegistration 
struct TLsecureValueTypePassportRegistration {
	0	require SecureValueType_Data data ;
};
// Constructors:Predicate:secureValueTypeTemporaryRegistration 
struct TLsecureValueTypeTemporaryRegistration {
	0	require SecureValueType_Data data ;
};
// Constructors:Predicate:secureValueTypePhone 
struct TLsecureValueTypePhone {
	0	require SecureValueType_Data data ;
};
// Constructors:Predicate:secureValueTypeEmail 
struct TLsecureValueTypeEmail {
	0	require SecureValueType_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:PeerSettings 
// PeerSettings <--
// + TLpeerSettings
//
// Constructors:Type:PeerSettings 
struct PeerSettings {
	0 optional int constructor; 
	1 require  PeerSettings_Data data ;
};
// Constructors:Type:Data:PeerSettings 
struct PeerSettings_Data {
	0	optional bool report_spam; 
	1	optional bool add_contact; 
	2	optional bool block_contact; 
	3	optional bool share_contact; 
	4	optional bool need_contacts_exception; 
	5	optional bool report_geo; 
	6	optional bool autoarchived; 
	7	optional int geo_distance; 
};
// Constructors:Predicate:peerSettings 
struct TLpeerSettings {
	0	require PeerSettings_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:contacts_Blocked 
// contacts_Blocked <--
// + TLcontacts_blocked
// + TLcontacts_blockedSlice
//
// Constructors:Type:contacts_Blocked 
struct contacts_Blocked {
	0 optional int constructor; 
	1 require  contacts_Blocked_Data data ;
};
// Constructors:Type:Data:contacts_Blocked 
struct contacts_Blocked_Data {
	0	optional vector<PeerBlocked> blocked; 
	1	optional vector<Chat> chats; 
	2	optional vector<User> users; 
	3	optional int count; 
};
// Constructors:Predicate:contacts_blocked 
struct TLcontacts_blocked {
	0	require contacts_Blocked_Data data ;
};
// Constructors:Predicate:contacts_blockedSlice 
struct TLcontacts_blockedSlice {
	0	require contacts_Blocked_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Document 
// Document <--
// + TLdocumentEmpty
// + TLdocument
//
// Constructors:Type:Document 
struct Document {
	0 optional int constructor; 
	1 require  Document_Data data ;
};
// Constructors:Type:Data:Document 
struct Document_Data {
	0	optional long id; 
	1	optional long access_hash; 
	2	optional vector<unsigned byte> file_reference; 
	3	optional int date; 
	4	optional string mime_type; 
	5	optional int size; 
	6	optional vector<PhotoSize> thumbs; 
	7	optional vector<VideoSize> video_thumbs; 
	8	optional int dc_id; 
	9	optional vector<DocumentAttribute> attributes; 
};
// Constructors:Predicate:documentEmpty 
struct TLdocumentEmpty {
	0	require Document_Data data ;
};
// Constructors:Predicate:document 
struct TLdocument {
	0	require Document_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Updates 
// Updates <--
// + TLupdatesTooLong
// + TLupdateShortMessage
// + TLupdateShortChatMessage
// + TLupdateShort
// + TLupdatesCombined
// + TLupdates
// + TLupdateShortSentMessage
//
// Constructors:Type:Updates 
struct Updates {
	0 optional int constructor; 
	1 require  Updates_Data data ;
};
// Constructors:Type:Data:Updates 
struct Updates_Data {
	0	optional bool out_key; 
	1	optional bool mentioned; 
	2	optional bool media_unread; 
	3	optional bool silent; 
	4	optional int id; 
	5	optional int user_id; 
	6	optional string message; 
	7	optional int pts; 
	8	optional int pts_count; 
	9	optional int date; 
	10	optional MessageFwdHeader fwd_from; 
	11	optional int via_bot_id; 
	12	optional MessageReplyHeader reply_to; 
	13	optional vector<MessageEntity> entities; 
	14	optional int from_id; 
	15	optional int chat_id; 
	16	optional Update update; 
	17	optional vector<Update> updates; 
	18	optional vector<User> users; 
	19	optional vector<Chat> chats; 
	20	optional int seq_start; 
	21	optional int seq; 
	22	optional MessageMedia media; 
};
// Constructors:Predicate:updatesTooLong 
struct TLupdatesTooLong {
	0	require Updates_Data data ;
};
// Constructors:Predicate:updateShortMessage 
struct TLupdateShortMessage {
	0	require Updates_Data data ;
};
// Constructors:Predicate:updateShortChatMessage 
struct TLupdateShortChatMessage {
	0	require Updates_Data data ;
};
// Constructors:Predicate:updateShort 
struct TLupdateShort {
	0	require Updates_Data data ;
};
// Constructors:Predicate:updatesCombined 
struct TLupdatesCombined {
	0	require Updates_Data data ;
};
// Constructors:Predicate:updates 
struct TLupdates {
	0	require Updates_Data data ;
};
// Constructors:Predicate:updateShortSentMessage 
struct TLupdateShortSentMessage {
	0	require Updates_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:Config 
// Config <--
// + TLconfig
//
// Constructors:Type:Config 
struct Config {
	0 optional int constructor; 
	1 require  Config_Data data ;
};
// Constructors:Type:Data:Config 
struct Config_Data {
	0	optional bool phonecalls_enabled; 
	1	optional bool default_p2p_contacts; 
	2	optional bool preload_featured_stickers; 
	3	optional bool ignore_phone_entities; 
	4	optional bool revoke_pm_inbox; 
	5	optional bool blocked_mode; 
	6	optional bool pfs_enabled; 
	7	optional int date; 
	8	optional int expires; 
	9	optional Bool test_mode; 
	10	optional int this_dc; 
	11	optional vector<DcOption> dc_options; 
	12	optional string dc_txt_domain_name; 
	13	optional int chat_size_max; 
	14	optional int megagroup_size_max; 
	15	optional int forwarded_count_max; 
	16	optional int online_update_period_ms; 
	17	optional int offline_blur_timeout_ms; 
	18	optional int offline_idle_timeout_ms; 
	19	optional int online_cloud_timeout_ms; 
	20	optional int notify_cloud_delay_ms; 
	21	optional int notify_default_delay_ms; 
	22	optional int push_chat_period_ms; 
	23	optional int push_chat_limit; 
	24	optional int saved_gifs_limit; 
	25	optional int edit_time_limit; 
	26	optional int revoke_time_limit; 
	27	optional int revoke_pm_time_limit; 
	28	optional int rating_e_decay; 
	29	optional int stickers_recent_limit; 
	30	optional int stickers_faved_limit; 
	31	optional int channels_read_media_period; 
	32	optional int tmp_sessions; 
	33	optional int pinned_dialogs_count_max; 
	34	optional int pinned_infolder_count_max; 
	35	optional int call_receive_timeout_ms; 
	36	optional int call_ring_timeout_ms; 
	37	optional int call_connect_timeout_ms; 
	38	optional int call_packet_timeout_ms; 
	39	optional string me_url_prefix; 
	40	optional string autoupdate_url_prefix; 
	41	optional string gif_search_username; 
	42	optional string venue_search_username; 
	43	optional string img_search_username; 
	44	optional string static_maps_provider; 
	45	optional int caption_length_max; 
	46	optional int message_length_max; 
	47	optional int webfile_dc_id; 
	48	optional string suggested_lang_code; 
	49	optional int lang_pack_version; 
	50	optional int base_lang_pack_version; 
};
// Constructors:Predicate:config 
struct TLconfig {
	0	require Config_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageMedia 
// MessageMedia <--
// + TLmessageMediaEmpty
// + TLmessageMediaPhoto
// + TLmessageMediaGeo
// + TLmessageMediaContact
// + TLmessageMediaUnsupported
// + TLmessageMediaDocument
// + TLmessageMediaWebPage
// + TLmessageMediaVenue
// + TLmessageMediaGame
// + TLmessageMediaInvoice
// + TLmessageMediaGeoLive
// + TLmessageMediaPoll
// + TLmessageMediaDice
//
// Constructors:Type:MessageMedia 
struct MessageMedia {
	0 optional int constructor; 
	1 require  MessageMedia_Data data ;
};
// Constructors:Type:Data:MessageMedia 
struct MessageMedia_Data {
	0	optional Photo photo; 
	1	optional int ttl_seconds; 
	2	optional GeoPoint geo; 
	3	optional string phone_number; 
	4	optional string first_name; 
	5	optional string last_name; 
	6	optional string vcard; 
	7	optional int user_id; 
	8	optional Document document; 
	9	optional WebPage webpage; 
	10	optional string title; 
	11	optional string address; 
	12	optional string provider; 
	13	optional string venue_id; 
	14	optional string venue_type; 
	15	optional Game game; 
	16	optional bool shipping_address_requested; 
	17	optional bool test; 
	18	optional string description; 
	19	optional WebDocument photo_20; 
	20	optional int receipt_msg_id; 
	21	optional string currency; 
	22	optional long total_amount; 
	23	optional string start_param; 
	24	optional int heading; 
	25	optional int period; 
	26	optional int proximity_notification_radius; 
	27	optional Poll poll; 
	28	optional PollResults results; 
	29	optional int value; 
	30	optional string emoticon; 
};
// Constructors:Predicate:messageMediaEmpty 
struct TLmessageMediaEmpty {
	0	require MessageMedia_Data data ;
};
// Constructors:Predicate:messageMediaPhoto 
struct TLmessageMediaPhoto {
	0	require MessageMedia_Data data ;
};
// Constructors:Predicate:messageMediaGeo 
struct TLmessageMediaGeo {
	0	require MessageMedia_Data data ;
};
// Constructors:Predicate:messageMediaContact 
struct TLmessageMediaContact {
	0	require MessageMedia_Data data ;
};
// Constructors:Predicate:messageMediaUnsupported 
struct TLmessageMediaUnsupported {
	0	require MessageMedia_Data data ;
};
// Constructors:Predicate:messageMediaDocument 
struct TLmessageMediaDocument {
	0	require MessageMedia_Data data ;
};
// Constructors:Predicate:messageMediaWebPage 
struct TLmessageMediaWebPage {
	0	require MessageMedia_Data data ;
};
// Constructors:Predicate:messageMediaVenue 
struct TLmessageMediaVenue {
	0	require MessageMedia_Data data ;
};
// Constructors:Predicate:messageMediaGame 
struct TLmessageMediaGame {
	0	require MessageMedia_Data data ;
};
// Constructors:Predicate:messageMediaInvoice 
struct TLmessageMediaInvoice {
	0	require MessageMedia_Data data ;
};
// Constructors:Predicate:messageMediaGeoLive 
struct TLmessageMediaGeoLive {
	0	require MessageMedia_Data data ;
};
// Constructors:Predicate:messageMediaPoll 
struct TLmessageMediaPoll {
	0	require MessageMedia_Data data ;
};
// Constructors:Predicate:messageMediaDice 
struct TLmessageMediaDice {
	0	require MessageMedia_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:BaseTheme 
// BaseTheme <--
// + TLbaseThemeClassic
// + TLbaseThemeDay
// + TLbaseThemeNight
// + TLbaseThemeTinted
// + TLbaseThemeArctic
//
// Constructors:Type:BaseTheme 
struct BaseTheme {
	0 optional int constructor; 
	1 require  BaseTheme_Data data ;
};
// Constructors:Type:Data:BaseTheme 
struct BaseTheme_Data {
};
// Constructors:Predicate:baseThemeClassic 
struct TLbaseThemeClassic {
	0	require BaseTheme_Data data ;
};
// Constructors:Predicate:baseThemeDay 
struct TLbaseThemeDay {
	0	require BaseTheme_Data data ;
};
// Constructors:Predicate:baseThemeNight 
struct TLbaseThemeNight {
	0	require BaseTheme_Data data ;
};
// Constructors:Predicate:baseThemeTinted 
struct TLbaseThemeTinted {
	0	require BaseTheme_Data data ;
};
// Constructors:Predicate:baseThemeArctic 
struct TLbaseThemeArctic {
	0	require BaseTheme_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Constructors:StatsGroupTopInviter 
// StatsGroupTopInviter <--
// + TLstatsGroupTopInviter
//
// Constructors:Type:StatsGroupTopInviter 
struct StatsGroupTopInviter {
	0 optional int constructor; 
	1 require  StatsGroupTopInviter_Data data ;
};
// Constructors:Type:Data:StatsGroupTopInviter 
struct StatsGroupTopInviter_Data {
	0	optional int user_id; 
	1	optional int invitations; 
};
// Constructors:Predicate:statsGroupTopInviter 
struct TLstatsGroupTopInviter {
	0	require StatsGroupTopInviter_Data data ;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getParticipant 
//
struct TLchannels_getParticipant {
	0	optional InputChannel channel;
	1	optional InputUser user_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getPeerDialogs 
//
struct TLmessages_getPeerDialogs {
	0	optional vector<InputDialogPeer> peers;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getPinnedDialogs 
//
struct TLmessages_getPinnedDialogs {
	0	optional int folder_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_readHistory 
//
struct TLmessages_readHistory {
	0	optional InputPeer peer;
	1	optional int max_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_deleteMessages 
//
struct TLmessages_deleteMessages {
	0	optional bool revoke;
	1	optional vector<int> id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_readMessageContents 
//
struct TLmessages_readMessageContents {
	0	optional vector<int> id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_deleteMessages 
//
struct TLchannels_deleteMessages {
	0	optional InputChannel channel;
	1	optional vector<int> id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getAllStickers 
//
struct TLmessages_getAllStickers {
	0	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getMaskStickers 
//
struct TLmessages_getMaskStickers {
	0	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getSuggestedDialogFilters 
//
struct TLmessages_getSuggestedDialogFilters {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_updateProfile 
//
struct TLaccount_updateProfile {
	0	optional string first_name;
	1	optional string last_name;
	2	optional string about;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_updateUsername 
//
struct TLaccount_updateUsername {
	0	optional string username;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_changePhone 
//
struct TLaccount_changePhone {
	0	optional string phone_number;
	1	optional string phone_code_hash;
	2	optional string phone_code;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getSupport 
//
struct TLhelp_getSupport {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getDialogs 
//
struct TLmessages_getDialogs {
	0	optional bool exclude_pinned;
	1	optional int folder_id;
	2	optional int offset_date;
	3	optional int offset_id;
	4	optional InputPeer offset_peer;
	5	optional int limit;
	6	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_exportMessageLink 
//
struct TLchannels_exportMessageLink {
	0	optional bool grouped;
	1	optional bool thread;
	2	optional InputChannel channel;
	3	optional int id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stats_loadAsyncGraph 
//
struct TLstats_loadAsyncGraph {
	0	optional string token;
	1	optional long x;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getAppConfig 
//
struct TLhelp_getAppConfig {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getAccountTTL 
//
struct TLaccount_getAccountTTL {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_exportLoginToken 
//
struct TLauth_exportLoginToken {
	0	optional int api_id;
	1	optional string api_hash;
	2	optional vector<int> except_ids;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_importLoginToken 
//
struct TLauth_importLoginToken {
	0	optional vector<unsigned byte> token;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_deleteContacts 
//
struct TLcontacts_deleteContacts {
	0	optional vector<InputUser> id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendMessage 
//
struct TLmessages_sendMessage {
	0	optional bool no_webpage;
	1	optional bool silent;
	2	optional bool background;
	3	optional bool clear_draft;
	4	optional InputPeer peer;
	5	optional int reply_to_msg_id;
	6	optional string message;
	7	optional long random_id;
	8	optional ReplyMarkup reply_markup;
	9	optional vector<MessageEntity> entities;
	10	optional int schedule_date;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendMedia 
//
struct TLmessages_sendMedia {
	0	optional bool silent;
	1	optional bool background;
	2	optional bool clear_draft;
	3	optional InputPeer peer;
	4	optional int reply_to_msg_id;
	5	optional InputMedia media;
	6	optional string message;
	7	optional long random_id;
	8	optional ReplyMarkup reply_markup;
	9	optional vector<MessageEntity> entities;
	10	optional int schedule_date;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_forwardMessages 
//
struct TLmessages_forwardMessages {
	0	optional bool silent;
	1	optional bool background;
	2	optional bool with_my_score;
	3	optional InputPeer from_peer;
	4	optional vector<int> id;
	5	optional vector<long> random_id;
	6	optional InputPeer to_peer;
	7	optional int schedule_date;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_editChatTitle 
//
struct TLmessages_editChatTitle {
	0	optional int chat_id;
	1	optional string title;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_editChatPhoto 
//
struct TLmessages_editChatPhoto {
	0	optional int chat_id;
	1	optional InputChatPhoto photo;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_addChatUser 
//
struct TLmessages_addChatUser {
	0	optional int chat_id;
	1	optional InputUser user_id;
	2	optional int fwd_limit;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_deleteChatUser 
//
struct TLmessages_deleteChatUser {
	0	optional int chat_id;
	1	optional InputUser user_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_createChat 
//
struct TLmessages_createChat {
	0	optional vector<InputUser> users;
	1	optional string title;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_importChatInvite 
//
struct TLmessages_importChatInvite {
	0	optional string hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_startBot 
//
struct TLmessages_startBot {
	0	optional InputUser bot;
	1	optional InputPeer peer;
	2	optional long random_id;
	3	optional string start_param;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getAppChangelog 
//
struct TLhelp_getAppChangelog {
	0	optional string prev_app_version;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_createChannel 
//
struct TLchannels_createChannel {
	0	optional bool broadcast;
	1	optional bool megagroup;
	2	optional string title;
	3	optional string about;
	4	optional InputGeoPoint geo_point;
	5	optional string address;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_editAdmin 
//
struct TLchannels_editAdmin {
	0	optional InputChannel channel;
	1	optional InputUser user_id;
	2	optional ChatAdminRights admin_rights;
	3	optional string rank;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_editTitle 
//
struct TLchannels_editTitle {
	0	optional InputChannel channel;
	1	optional string title;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_editPhoto 
//
struct TLchannels_editPhoto {
	0	optional InputChannel channel;
	1	optional InputChatPhoto photo;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_joinChannel 
//
struct TLchannels_joinChannel {
	0	optional InputChannel channel;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_leaveChannel 
//
struct TLchannels_leaveChannel {
	0	optional InputChannel channel;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_inviteToChannel 
//
struct TLchannels_inviteToChannel {
	0	optional InputChannel channel;
	1	optional vector<InputUser> users;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_deleteChannel 
//
struct TLchannels_deleteChannel {
	0	optional InputChannel channel;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_migrateChat 
//
struct TLmessages_migrateChat {
	0	optional int chat_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendInlineBotResult 
//
struct TLmessages_sendInlineBotResult {
	0	optional bool silent;
	1	optional bool background;
	2	optional bool clear_draft;
	3	optional bool hide_via;
	4	optional InputPeer peer;
	5	optional int reply_to_msg_id;
	6	optional long random_id;
	7	optional long query_id;
	8	optional string id;
	9	optional int schedule_date;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_toggleSignatures 
//
struct TLchannels_toggleSignatures {
	0	optional InputChannel channel;
	1	optional Bool enabled;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_editMessage 
//
struct TLmessages_editMessage {
	0	optional bool no_webpage;
	1	optional InputPeer peer;
	2	optional int id;
	3	optional string message;
	4	optional InputMedia media;
	5	optional ReplyMarkup reply_markup;
	6	optional vector<MessageEntity> entities;
	7	optional int schedule_date;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getAllDrafts 
//
struct TLmessages_getAllDrafts {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_setGameScore 
//
struct TLmessages_setGameScore {
	0	optional bool edit_message;
	1	optional bool force;
	2	optional InputPeer peer;
	3	optional int id;
	4	optional InputUser user_id;
	5	optional int score;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:phone_discardCall 
//
struct TLphone_discardCall {
	0	optional bool video;
	1	optional InputPhoneCall peer;
	2	optional int duration;
	3	optional PhoneCallDiscardReason reason;
	4	optional long connection_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:phone_setCallRating 
//
struct TLphone_setCallRating {
	0	optional bool user_initiative;
	1	optional InputPhoneCall peer;
	2	optional int rating;
	3	optional string comment;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_editBanned 
//
struct TLchannels_editBanned {
	0	optional InputChannel channel;
	1	optional InputUser user_id;
	2	optional ChatBannedRights banned_rights;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendScreenshotNotification 
//
struct TLmessages_sendScreenshotNotification {
	0	optional InputPeer peer;
	1	optional int reply_to_msg_id;
	2	optional long random_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_togglePreHistoryHidden 
//
struct TLchannels_togglePreHistoryHidden {
	0	optional InputChannel channel;
	1	optional Bool enabled;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendMultiMedia 
//
struct TLmessages_sendMultiMedia {
	0	optional bool silent;
	1	optional bool background;
	2	optional bool clear_draft;
	3	optional InputPeer peer;
	4	optional int reply_to_msg_id;
	5	optional vector<InputSingleMedia> multi_media;
	6	optional int schedule_date;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_updatePinnedMessage 
//
struct TLmessages_updatePinnedMessage {
	0	optional bool silent;
	1	optional bool unpin;
	2	optional bool pm_oneside;
	3	optional InputPeer peer;
	4	optional int id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getNotifyExceptions 
//
struct TLaccount_getNotifyExceptions {
	0	optional bool compare_sound;
	1	optional InputNotifyPeer peer;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendVote 
//
struct TLmessages_sendVote {
	0	optional InputPeer peer;
	1	optional int msg_id;
	2	optional vector<vector<unsigned byte>> options;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getPollResults 
//
struct TLmessages_getPollResults {
	0	optional InputPeer peer;
	1	optional int msg_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_editChatDefaultBannedRights 
//
struct TLmessages_editChatDefaultBannedRights {
	0	optional InputPeer peer;
	1	optional ChatBannedRights banned_rights;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:folders_editPeerFolders 
//
struct TLfolders_editPeerFolders {
	0	optional vector<InputFolderPeer> folder_peers;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:folders_deleteFolder 
//
struct TLfolders_deleteFolder {
	0	optional int folder_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_addContact 
//
struct TLcontacts_addContact {
	0	optional bool add_phone_privacy_exception;
	1	optional InputUser id;
	2	optional string first_name;
	3	optional string last_name;
	4	optional string phone;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_acceptContact 
//
struct TLcontacts_acceptContact {
	0	optional InputUser id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_editCreator 
//
struct TLchannels_editCreator {
	0	optional InputChannel channel;
	1	optional InputUser user_id;
	2	optional InputCheckPasswordSRP password;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_getLocated 
//
struct TLcontacts_getLocated {
	0	optional bool background;
	1	optional InputGeoPoint geo_point;
	2	optional int self_expires;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_toggleSlowMode 
//
struct TLchannels_toggleSlowMode {
	0	optional InputChannel channel;
	1	optional int seconds;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendScheduledMessages 
//
struct TLmessages_sendScheduledMessages {
	0	optional InputPeer peer;
	1	optional vector<int> id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_deleteScheduledMessages 
//
struct TLmessages_deleteScheduledMessages {
	0	optional InputPeer peer;
	1	optional vector<int> id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_blockFromReplies 
//
struct TLcontacts_blockFromReplies {
	0	optional bool delete_message;
	1	optional bool delete_history;
	2	optional bool report_spam;
	3	optional int msg_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_sendVerifyEmailCode 
//
struct TLaccount_sendVerifyEmailCode {
	0	optional string email;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getMessagesViews 
//
struct TLmessages_getMessagesViews {
	0	optional InputPeer peer;
	1	optional vector<int> id;
	2	optional Bool increment;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:invokeAfterMsg 
//
struct TLinvokeAfterMsg {
	0	optional long msg_id;
	1	optional vector<unsigned byte> query;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:invokeAfterMsgs 
//
struct TLinvokeAfterMsgs {
	0	optional vector<long> msg_ids;
	1	optional vector<unsigned byte> query;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:initConnection 
//
struct TLinitConnection {
	0	optional int api_id;
	1	optional string device_model;
	2	optional string system_version;
	3	optional string app_version;
	4	optional string system_lang_code;
	5	optional string lang_pack;
	6	optional string lang_code;
	7	optional InputClientProxy proxy;
	8	optional JSONValue params;
	9	optional vector<unsigned byte> query;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:invokeWithLayer 
//
struct TLinvokeWithLayer {
	0	optional int layer;
	1	optional vector<unsigned byte> query;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:invokeWithoutUpdates 
//
struct TLinvokeWithoutUpdates {
	0	optional vector<unsigned byte> query;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:invokeWithMessagesRange 
//
struct TLinvokeWithMessagesRange {
	0	optional MessageRange range;
	1	optional vector<unsigned byte> query;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:invokeWithTakeout 
//
struct TLinvokeWithTakeout {
	0	optional long takeout_id;
	1	optional vector<unsigned byte> query;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:photos_getUserPhotos 
//
struct TLphotos_getUserPhotos {
	0	optional InputUser user_id;
	1	optional int offset;
	2	optional long max_id;
	3	optional int limit;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:photos_updateProfilePhoto 
//
struct TLphotos_updateProfilePhoto {
	0	optional InputPhoto id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:photos_uploadProfilePhoto 
//
struct TLphotos_uploadProfilePhoto {
	0	optional InputFile file;
	1	optional InputFile video;
	2	optional double video_start_ts;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getPasswordSettings 
//
struct TLaccount_getPasswordSettings {
	0	optional InputCheckPasswordSRP password;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:langpack_getLangPack 
//
struct TLlangpack_getLangPack {
	0	optional string lang_pack;
	1	optional string lang_code;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:langpack_getDifference 
//
struct TLlangpack_getDifference {
	0	optional string lang_pack;
	1	optional string lang_code;
	2	optional int from_version;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_resolveUsername 
//
struct TLcontacts_resolveUsername {
	0	optional string username;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getNearestDc 
//
struct TLhelp_getNearestDc {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_requestPasswordRecovery 
//
struct TLauth_requestPasswordRecovery {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendEncrypted 
//
struct TLmessages_sendEncrypted {
	0	optional bool silent;
	1	optional InputEncryptedChat peer;
	2	optional long random_id;
	3	optional vector<unsigned byte> data;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendEncryptedFile 
//
struct TLmessages_sendEncryptedFile {
	0	optional bool silent;
	1	optional InputEncryptedChat peer;
	2	optional long random_id;
	3	optional vector<unsigned byte> data;
	4	optional InputEncryptedFile file;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendEncryptedService 
//
struct TLmessages_sendEncryptedService {
	0	optional InputEncryptedChat peer;
	1	optional long random_id;
	2	optional vector<unsigned byte> data;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:updates_getDifference 
//
struct TLupdates_getDifference {
	0	optional int pts;
	1	optional int pts_total_limit;
	2	optional int date;
	3	optional int qts;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getAllSecureValues 
//
struct TLaccount_getAllSecureValues {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getSecureValue 
//
struct TLaccount_getSecureValue {
	0	optional vector<SecureValueType> types;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getRecentStickers 
//
struct TLmessages_getRecentStickers {
	0	optional bool attached;
	1	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_installStickerSet 
//
struct TLmessages_installStickerSet {
	0	optional InputStickerSet stickerset;
	1	optional Bool archived;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_getBlocked 
//
struct TLcontacts_getBlocked {
	0	optional int offset;
	1	optional int limit;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_requestUrlAuth 
//
struct TLmessages_requestUrlAuth {
	0	optional InputPeer peer;
	1	optional int msg_id;
	2	optional int button_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_acceptUrlAuth 
//
struct TLmessages_acceptUrlAuth {
	0	optional bool write_allowed;
	1	optional InputPeer peer;
	2	optional int msg_id;
	3	optional int button_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_search 
//
struct TLcontacts_search {
	0	optional string q;
	1	optional int limit;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stats_getMegagroupStats 
//
struct TLstats_getMegagroupStats {
	0	optional bool dark;
	1	optional InputChannel channel;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:upload_getFile 
//
struct TLupload_getFile {
	0	optional bool precise;
	1	optional bool cdn_supported;
	2	optional InputFileLocation location;
	3	optional int offset;
	4	optional int limit;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getWebAuthorizations 
//
struct TLaccount_getWebAuthorizations {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:upload_getCdnFile 
//
struct TLupload_getCdnFile {
	0	optional vector<unsigned byte> file_token;
	1	optional int offset;
	2	optional int limit;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getContentSettings 
//
struct TLaccount_getContentSettings {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_getContactIDs 
//
struct TLcontacts_getContactIDs {
	0	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getEmojiKeywordsLanguages 
//
struct TLmessages_getEmojiKeywordsLanguages {
	0	optional vector<string> lang_codes;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_deleteHistory 
//
struct TLmessages_deleteHistory {
	0	optional bool just_clear;
	1	optional bool revoke;
	2	optional InputPeer peer;
	3	optional int max_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_deleteUserHistory 
//
struct TLchannels_deleteUserHistory {
	0	optional InputChannel channel;
	1	optional InputUser user_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_readMentions 
//
struct TLmessages_readMentions {
	0	optional InputPeer peer;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_unpinAllMessages 
//
struct TLmessages_unpinAllMessages {
	0	optional InputPeer peer;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getAttachedStickers 
//
struct TLmessages_getAttachedStickers {
	0	optional InputStickeredMedia media;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getTermsOfServiceUpdate 
//
struct TLhelp_getTermsOfServiceUpdate {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:langpack_getLanguage 
//
struct TLlangpack_getLanguage {
	0	optional string lang_pack;
	1	optional string lang_code;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getPromoData 
//
struct TLhelp_getPromoData {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_searchStickerSets 
//
struct TLmessages_searchStickerSets {
	0	optional bool exclude_featured;
	1	optional string q;
	2	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:updates_getState 
//
struct TLupdates_getState {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getDocumentByHash 
//
struct TLmessages_getDocumentByHash {
	0	optional vector<unsigned byte> sha256;
	1	optional int size;
	2	optional string mime_type;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_uploadTheme 
//
struct TLaccount_uploadTheme {
	0	optional InputFile file;
	1	optional InputFile thumb;
	2	optional string file_name;
	3	optional string mime_type;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:langpack_getLanguages 
//
struct TLlangpack_getLanguages {
	0	optional string lang_pack;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getDialogFilters 
//
struct TLmessages_getDialogFilters {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getEmojiKeywords 
//
struct TLmessages_getEmojiKeywords {
	0	optional string lang_code;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getEmojiKeywordsDifference 
//
struct TLmessages_getEmojiKeywordsDifference {
	0	optional string lang_code;
	1	optional int from_version;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getThemes 
//
struct TLaccount_getThemes {
	0	optional string format;
	1	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getAuthorizationForm 
//
struct TLaccount_getAuthorizationForm {
	0	optional int bot_id;
	1	optional string scope;
	2	optional string public_key;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getMultiWallPapers 
//
struct TLaccount_getMultiWallPapers {
	0	optional vector<InputWallPaper> wallpapers;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getCdnConfig 
//
struct TLhelp_getCdnConfig {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:payments_getSavedInfo 
//
struct TLpayments_getSavedInfo {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getWallPaper 
//
struct TLaccount_getWallPaper {
	0	optional InputWallPaper wallpaper;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_uploadWallPaper 
//
struct TLaccount_uploadWallPaper {
	0	optional InputFile file;
	1	optional string mime_type;
	2	optional WallPaperSettings settings;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_logOut 
//
struct TLauth_logOut {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_resetAuthorizations 
//
struct TLauth_resetAuthorizations {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_bindTempAuthKey 
//
struct TLauth_bindTempAuthKey {
	0	optional long perm_auth_key_id;
	1	optional long nonce;
	2	optional int expires_at;
	3	optional vector<unsigned byte> encrypted_message;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_registerDevice 
//
struct TLaccount_registerDevice {
	0	optional bool no_muted;
	1	optional int token_type;
	2	optional string token;
	3	optional Bool app_sandbox;
	4	optional vector<unsigned byte> secret;
	5	optional vector<int> other_uids;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_unregisterDevice 
//
struct TLaccount_unregisterDevice {
	0	optional int token_type;
	1	optional string token;
	2	optional vector<int> other_uids;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_updateNotifySettings 
//
struct TLaccount_updateNotifySettings {
	0	optional InputNotifyPeer peer;
	1	optional InputPeerNotifySettings settings;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_resetNotifySettings 
//
struct TLaccount_resetNotifySettings {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_updateStatus 
//
struct TLaccount_updateStatus {
	0	optional Bool offline;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_reportPeer 
//
struct TLaccount_reportPeer {
	0	optional InputPeer peer;
	1	optional ReportReason reason;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_deleteByPhones 
//
struct TLcontacts_deleteByPhones {
	0	optional vector<string> phones;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_block 
//
struct TLcontacts_block {
	0	optional InputPeer id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_unblock 
//
struct TLcontacts_unblock {
	0	optional InputPeer id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_setTyping 
//
struct TLmessages_setTyping {
	0	optional InputPeer peer;
	1	optional int top_msg_id;
	2	optional SendMessageAction action;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_reportSpam 
//
struct TLmessages_reportSpam {
	0	optional InputPeer peer;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_report 
//
struct TLmessages_report {
	0	optional InputPeer peer;
	1	optional vector<int> id;
	2	optional ReportReason reason;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:upload_saveFilePart 
//
struct TLupload_saveFilePart {
	0	optional long file_id;
	1	optional int file_part;
	2	optional vector<unsigned byte> bytes;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_discardEncryption 
//
struct TLmessages_discardEncryption {
	0	optional int chat_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_setEncryptedTyping 
//
struct TLmessages_setEncryptedTyping {
	0	optional InputEncryptedChat peer;
	1	optional Bool typing;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_readEncryptedHistory 
//
struct TLmessages_readEncryptedHistory {
	0	optional InputEncryptedChat peer;
	1	optional int max_date;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_reportEncryptedSpam 
//
struct TLmessages_reportEncryptedSpam {
	0	optional InputEncryptedChat peer;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:upload_saveBigFilePart 
//
struct TLupload_saveBigFilePart {
	0	optional long file_id;
	1	optional int file_part;
	2	optional int file_total_parts;
	3	optional vector<unsigned byte> bytes;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_checkUsername 
//
struct TLaccount_checkUsername {
	0	optional string username;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_deleteAccount 
//
struct TLaccount_deleteAccount {
	0	optional string reason;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_setAccountTTL 
//
struct TLaccount_setAccountTTL {
	0	optional AccountDaysTTL ttl;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_updateDeviceLocked 
//
struct TLaccount_updateDeviceLocked {
	0	optional int period;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_resetAuthorization 
//
struct TLaccount_resetAuthorization {
	0	optional long hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_updatePasswordSettings 
//
struct TLaccount_updatePasswordSettings {
	0	optional InputCheckPasswordSRP password;
	1	optional account_PasswordInputSettings new_settings;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_uninstallStickerSet 
//
struct TLmessages_uninstallStickerSet {
	0	optional InputStickerSet stickerset;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_readHistory 
//
struct TLchannels_readHistory {
	0	optional InputChannel channel;
	1	optional int max_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_reportSpam 
//
struct TLchannels_reportSpam {
	0	optional InputChannel channel;
	1	optional InputUser user_id;
	2	optional vector<int> id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_checkUsername 
//
struct TLchannels_checkUsername {
	0	optional InputChannel channel;
	1	optional string username;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_updateUsername 
//
struct TLchannels_updateUsername {
	0	optional InputChannel channel;
	1	optional string username;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_editChatAdmin 
//
struct TLmessages_editChatAdmin {
	0	optional int chat_id;
	1	optional InputUser user_id;
	2	optional Bool is_admin;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_reorderStickerSets 
//
struct TLmessages_reorderStickerSets {
	0	optional bool masks;
	1	optional vector<long> order;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_saveGif 
//
struct TLmessages_saveGif {
	0	optional InputDocument id;
	1	optional Bool unsave;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_setInlineBotResults 
//
struct TLmessages_setInlineBotResults {
	0	optional bool gallery;
	1	optional bool private;
	2	optional long query_id;
	3	optional vector<InputBotInlineResult> results;
	4	optional int cache_time;
	5	optional string next_offset;
	6	optional InlineBotSwitchPM switch_pm;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_cancelCode 
//
struct TLauth_cancelCode {
	0	optional string phone_number;
	1	optional string phone_code_hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_editInlineBotMessage 
//
struct TLmessages_editInlineBotMessage {
	0	optional bool no_webpage;
	1	optional InputBotInlineMessageID id;
	2	optional string message;
	3	optional InputMedia media;
	4	optional ReplyMarkup reply_markup;
	5	optional vector<MessageEntity> entities;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_setBotCallbackAnswer 
//
struct TLmessages_setBotCallbackAnswer {
	0	optional bool alert;
	1	optional long query_id;
	2	optional string message;
	3	optional string url;
	4	optional int cache_time;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_resetTopPeerRating 
//
struct TLcontacts_resetTopPeerRating {
	0	optional TopPeerCategory category;
	1	optional InputPeer peer;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_saveDraft 
//
struct TLmessages_saveDraft {
	0	optional bool no_webpage;
	1	optional int reply_to_msg_id;
	2	optional InputPeer peer;
	3	optional string message;
	4	optional vector<MessageEntity> entities;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_readFeaturedStickers 
//
struct TLmessages_readFeaturedStickers {
	0	optional vector<long> id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_saveRecentSticker 
//
struct TLmessages_saveRecentSticker {
	0	optional bool attached;
	1	optional InputDocument id;
	2	optional Bool unsave;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_clearRecentStickers 
//
struct TLmessages_clearRecentStickers {
	0	optional bool attached;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_confirmPhone 
//
struct TLaccount_confirmPhone {
	0	optional string phone_code_hash;
	1	optional string phone_code;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_dropTempAuthKeys 
//
struct TLauth_dropTempAuthKeys {
	0	optional vector<long> except_auth_keys;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_setInlineGameScore 
//
struct TLmessages_setInlineGameScore {
	0	optional bool edit_message;
	1	optional bool force;
	2	optional InputBotInlineMessageID id;
	3	optional InputUser user_id;
	4	optional int score;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_setBotUpdatesStatus 
//
struct TLhelp_setBotUpdatesStatus {
	0	optional int pending_updates_count;
	1	optional string message;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_toggleDialogPin 
//
struct TLmessages_toggleDialogPin {
	0	optional bool pinned;
	1	optional InputDialogPeer peer;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_reorderPinnedDialogs 
//
struct TLmessages_reorderPinnedDialogs {
	0	optional bool force;
	1	optional int folder_id;
	2	optional vector<InputDialogPeer> order;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:bots_answerWebhookJSONQuery 
//
struct TLbots_answerWebhookJSONQuery {
	0	optional long query_id;
	1	optional DataJSON data;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:payments_clearSavedInfo 
//
struct TLpayments_clearSavedInfo {
	0	optional bool credentials;
	1	optional bool info;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_setBotShippingResults 
//
struct TLmessages_setBotShippingResults {
	0	optional long query_id;
	1	optional string error;
	2	optional vector<ShippingOption> shipping_options;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_setBotPrecheckoutResults 
//
struct TLmessages_setBotPrecheckoutResults {
	0	optional bool success;
	1	optional long query_id;
	2	optional string error;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:phone_receivedCall 
//
struct TLphone_receivedCall {
	0	optional InputPhoneCall peer;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:phone_saveCallDebug 
//
struct TLphone_saveCallDebug {
	0	optional InputPhoneCall peer;
	1	optional DataJSON debug;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_setStickers 
//
struct TLchannels_setStickers {
	0	optional InputChannel channel;
	1	optional InputStickerSet stickerset;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_faveSticker 
//
struct TLmessages_faveSticker {
	0	optional InputDocument id;
	1	optional Bool unfave;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_readMessageContents 
//
struct TLchannels_readMessageContents {
	0	optional InputChannel channel;
	1	optional vector<int> id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_resetSaved 
//
struct TLcontacts_resetSaved {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_deleteHistory 
//
struct TLchannels_deleteHistory {
	0	optional InputChannel channel;
	1	optional int max_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_resetWebAuthorization 
//
struct TLaccount_resetWebAuthorization {
	0	optional long hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_resetWebAuthorizations 
//
struct TLaccount_resetWebAuthorizations {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_acceptTermsOfService 
//
struct TLhelp_acceptTermsOfService {
	0	optional DataJSON id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_deleteSecureValue 
//
struct TLaccount_deleteSecureValue {
	0	optional vector<SecureValueType> types;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:users_setSecureValueErrors 
//
struct TLusers_setSecureValueErrors {
	0	optional InputUser id;
	1	optional vector<SecureValueError> errors;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_acceptAuthorization 
//
struct TLaccount_acceptAuthorization {
	0	optional int bot_id;
	1	optional string scope;
	2	optional string public_key;
	3	optional vector<SecureValueHash> value_hashes;
	4	optional SecureCredentialsEncrypted credentials;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_verifyPhone 
//
struct TLaccount_verifyPhone {
	0	optional string phone_number;
	1	optional string phone_code_hash;
	2	optional string phone_code;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_verifyEmail 
//
struct TLaccount_verifyEmail {
	0	optional string email;
	1	optional string code;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_finishTakeoutSession 
//
struct TLaccount_finishTakeoutSession {
	0	optional bool success;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_markDialogUnread 
//
struct TLmessages_markDialogUnread {
	0	optional bool unread;
	1	optional InputDialogPeer peer;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_toggleTopPeers 
//
struct TLcontacts_toggleTopPeers {
	0	optional Bool enabled;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_clearAllDrafts 
//
struct TLmessages_clearAllDrafts {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_saveAppLog 
//
struct TLhelp_saveAppLog {
	0	optional vector<InputAppEvent> events;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_confirmPasswordEmail 
//
struct TLaccount_confirmPasswordEmail {
	0	optional string code;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_resendPasswordEmail 
//
struct TLaccount_resendPasswordEmail {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_cancelPasswordEmail 
//
struct TLaccount_cancelPasswordEmail {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getContactSignUpNotification 
//
struct TLaccount_getContactSignUpNotification {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_setContactSignUpNotification 
//
struct TLaccount_setContactSignUpNotification {
	0	optional Bool silent;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_editChatAbout 
//
struct TLmessages_editChatAbout {
	0	optional InputPeer peer;
	1	optional string about;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_saveWallPaper 
//
struct TLaccount_saveWallPaper {
	0	optional InputWallPaper wallpaper;
	1	optional Bool unsave;
	2	optional WallPaperSettings settings;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_installWallPaper 
//
struct TLaccount_installWallPaper {
	0	optional InputWallPaper wallpaper;
	1	optional WallPaperSettings settings;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_resetWallPapers 
//
struct TLaccount_resetWallPapers {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_saveAutoDownloadSettings 
//
struct TLaccount_saveAutoDownloadSettings {
	0	optional bool low;
	1	optional bool high;
	2	optional AutoDownloadSettings settings;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_setDiscussionGroup 
//
struct TLchannels_setDiscussionGroup {
	0	optional InputChannel broadcast;
	1	optional InputChannel group;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_hidePeerSettingsBar 
//
struct TLmessages_hidePeerSettingsBar {
	0	optional InputPeer peer;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_editLocation 
//
struct TLchannels_editLocation {
	0	optional InputChannel channel;
	1	optional InputGeoPoint geo_point;
	2	optional string address;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_saveTheme 
//
struct TLaccount_saveTheme {
	0	optional InputTheme theme;
	1	optional Bool unsave;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_installTheme 
//
struct TLaccount_installTheme {
	0	optional bool dark;
	1	optional string format;
	2	optional InputTheme theme;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_setContentSettings 
//
struct TLaccount_setContentSettings {
	0	optional bool sensitive_enabled;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_toggleStickerSets 
//
struct TLmessages_toggleStickerSets {
	0	optional bool uninstall;
	1	optional bool archive;
	2	optional bool unarchive;
	3	optional vector<InputStickerSet> stickersets;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_updateDialogFilter 
//
struct TLmessages_updateDialogFilter {
	0	optional int id;
	1	optional DialogFilter filter;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_updateDialogFiltersOrder 
//
struct TLmessages_updateDialogFiltersOrder {
	0	optional vector<int> order;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:bots_setBotCommands 
//
struct TLbots_setBotCommands {
	0	optional vector<BotCommand> commands;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_hidePromoData 
//
struct TLhelp_hidePromoData {
	0	optional InputPeer peer;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:phone_sendSignalingData 
//
struct TLphone_sendSignalingData {
	0	optional InputPhoneCall peer;
	1	optional vector<unsigned byte> data;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_dismissSuggestion 
//
struct TLhelp_dismissSuggestion {
	0	optional string suggestion;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_readDiscussion 
//
struct TLmessages_readDiscussion {
	0	optional InputPeer peer;
	1	optional int msg_id;
	2	optional int read_max_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getInviteText 
//
struct TLhelp_getInviteText {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:users_getUsers 
//
struct TLusers_getUsers {
	0	optional vector<InputUser> id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getBotCallbackAnswer 
//
struct TLmessages_getBotCallbackAnswer {
	0	optional bool game;
	1	optional InputPeer peer;
	2	optional int msg_id;
	3	optional vector<unsigned byte> data;
	4	optional InputCheckPasswordSRP password;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getPollVotes 
//
struct TLmessages_getPollVotes {
	0	optional InputPeer peer;
	1	optional int id;
	2	optional vector<unsigned byte> option;
	3	optional string offset;
	4	optional int limit;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_receivedMessages 
//
struct TLmessages_receivedMessages {
	0	optional int max_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getParticipants 
//
struct TLchannels_getParticipants {
	0	optional InputChannel channel;
	1	optional ChannelParticipantsFilter filter;
	2	optional int offset;
	3	optional int limit;
	4	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getFeaturedStickers 
//
struct TLmessages_getFeaturedStickers {
	0	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getOldFeaturedStickers 
//
struct TLmessages_getOldFeaturedStickers {
	0	optional int offset;
	1	optional int limit;
	2	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getCountriesList 
//
struct TLhelp_getCountriesList {
	0	optional string lang_code;
	1	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getNotifySettings 
//
struct TLaccount_getNotifySettings {
	0	optional InputNotifyPeer peer;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_importContacts 
//
struct TLcontacts_importContacts {
	0	optional vector<InputContact> contacts;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_sendCode 
//
struct TLauth_sendCode {
	0	optional string phone_number;
	1	optional int api_id;
	2	optional string api_hash;
	3	optional CodeSettings settings;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_sendChangePhoneCode 
//
struct TLaccount_sendChangePhoneCode {
	0	optional string phone_number;
	1	optional CodeSettings settings;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_resendCode 
//
struct TLauth_resendCode {
	0	optional string phone_number;
	1	optional string phone_code_hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_sendConfirmPhoneCode 
//
struct TLaccount_sendConfirmPhoneCode {
	0	optional string hash;
	1	optional CodeSettings settings;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_sendVerifyPhoneCode 
//
struct TLaccount_sendVerifyPhoneCode {
	0	optional string phone_number;
	1	optional CodeSettings settings;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getWallPapers 
//
struct TLaccount_getWallPapers {
	0	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:users_getFullUser 
//
struct TLusers_getFullUser {
	0	optional InputUser id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getMessageEditData 
//
struct TLmessages_getMessageEditData {
	0	optional InputPeer peer;
	1	optional int id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_exportAuthorization 
//
struct TLauth_exportAuthorization {
	0	optional int dc_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getPassportConfig 
//
struct TLhelp_getPassportConfig {
	0	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:phone_requestCall 
//
struct TLphone_requestCall {
	0	optional bool video;
	1	optional InputUser user_id;
	2	optional int random_id;
	3	optional vector<unsigned byte> g_a_hash;
	4	optional PhoneCallProtocol protocol;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:phone_acceptCall 
//
struct TLphone_acceptCall {
	0	optional InputPhoneCall peer;
	1	optional vector<unsigned byte> g_b;
	2	optional PhoneCallProtocol protocol;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:phone_confirmCall 
//
struct TLphone_confirmCall {
	0	optional InputPhoneCall peer;
	1	optional vector<unsigned byte> g_a;
	2	optional long key_fingerprint;
	3	optional PhoneCallProtocol protocol;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getArchivedStickers 
//
struct TLmessages_getArchivedStickers {
	0	optional bool masks;
	1	optional long offset_id;
	2	optional int limit;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:bots_sendCustomRequest 
//
struct TLbots_sendCustomRequest {
	0	optional string custom_method;
	1	optional DataJSON params;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:phone_getCallConfig 
//
struct TLphone_getCallConfig {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_exportChatInvite 
//
struct TLmessages_exportChatInvite {
	0	optional InputPeer peer;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getDialogUnreadMarks 
//
struct TLmessages_getDialogUnreadMarks {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_getContacts 
//
struct TLcontacts_getContacts {
	0	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:upload_reuploadCdnFile 
//
struct TLupload_reuploadCdnFile {
	0	optional vector<unsigned byte> file_token;
	1	optional vector<unsigned byte> request_token;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:upload_getCdnFileHashes 
//
struct TLupload_getCdnFileHashes {
	0	optional vector<unsigned byte> file_token;
	1	optional int offset;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:upload_getFileHashes 
//
struct TLupload_getFileHashes {
	0	optional InputFileLocation location;
	1	optional int offset;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getUserInfo 
//
struct TLhelp_getUserInfo {
	0	optional InputUser user_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_editUserInfo 
//
struct TLhelp_editUserInfo {
	0	optional InputUser user_id;
	1	optional string message;
	2	optional vector<MessageEntity> entities;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:payments_getPaymentForm 
//
struct TLpayments_getPaymentForm {
	0	optional int msg_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stats_getMessageStats 
//
struct TLstats_getMessageStats {
	0	optional bool dark;
	1	optional InputChannel channel;
	2	optional int msg_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getStatsURL 
//
struct TLmessages_getStatsURL {
	0	optional bool dark;
	1	optional InputPeer peer;
	2	optional string params;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getSavedGifs 
//
struct TLmessages_getSavedGifs {
	0	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getChats 
//
struct TLmessages_getChats {
	0	optional vector<int> id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getChannels 
//
struct TLchannels_getChannels {
	0	optional vector<InputChannel> id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getAdminedPublicChannels 
//
struct TLchannels_getAdminedPublicChannels {
	0	optional bool by_location;
	1	optional bool check_limit;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getCommonChats 
//
struct TLmessages_getCommonChats {
	0	optional InputUser user_id;
	1	optional int max_id;
	2	optional int limit;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getAllChats 
//
struct TLmessages_getAllChats {
	0	optional vector<int> except_ids;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getLeftChannels 
//
struct TLchannels_getLeftChannels {
	0	optional int offset;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getGroupsForDiscussion 
//
struct TLchannels_getGroupsForDiscussion {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:payments_sendPaymentForm 
//
struct TLpayments_sendPaymentForm {
	0	optional int msg_id;
	1	optional string requested_info_id;
	2	optional string shipping_option_id;
	3	optional InputPaymentCredentials credentials;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_createTheme 
//
struct TLaccount_createTheme {
	0	optional string slug;
	1	optional string title;
	2	optional InputDocument document;
	3	optional InputThemeSettings settings;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_updateTheme 
//
struct TLaccount_updateTheme {
	0	optional string format;
	1	optional InputTheme theme;
	2	optional string slug;
	3	optional string title;
	4	optional InputDocument document;
	5	optional InputThemeSettings settings;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getTheme 
//
struct TLaccount_getTheme {
	0	optional string format;
	1	optional InputTheme theme;
	2	optional long document_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getSearchCounters 
//
struct TLmessages_getSearchCounters {
	0	optional InputPeer peer;
	1	optional vector<MessagesFilter> filters;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_signUp 
//
struct TLauth_signUp {
	0	optional string phone_number;
	1	optional string phone_code_hash;
	2	optional string first_name;
	3	optional string last_name;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_signIn 
//
struct TLauth_signIn {
	0	optional string phone_number;
	1	optional string phone_code_hash;
	2	optional string phone_code;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_importAuthorization 
//
struct TLauth_importAuthorization {
	0	optional int id;
	1	optional vector<unsigned byte> bytes;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_importBotAuthorization 
//
struct TLauth_importBotAuthorization {
	0	optional int flags;
	1	optional int api_id;
	2	optional string api_hash;
	3	optional string bot_auth_token;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_checkPassword 
//
struct TLauth_checkPassword {
	0	optional InputCheckPasswordSRP password;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_recoverPassword 
//
struct TLauth_recoverPassword {
	0	optional string code;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getDhConfig 
//
struct TLmessages_getDhConfig {
	0	optional int version;
	1	optional int random_length;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_uploadEncryptedFile 
//
struct TLmessages_uploadEncryptedFile {
	0	optional InputEncryptedChat peer;
	1	optional InputEncryptedFile file;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_saveSecureValue 
//
struct TLaccount_saveSecureValue {
	0	optional InputSecureValue value;
	1	optional long secure_secret_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getStickers 
//
struct TLmessages_getStickers {
	0	optional string emoticon;
	1	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getSupportName 
//
struct TLhelp_getSupportName {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_getTopPeers 
//
struct TLcontacts_getTopPeers {
	0	optional bool correspondents;
	1	optional bool bots_pm;
	2	optional bool bots_inline;
	3	optional bool phone_calls;
	4	optional bool forward_users;
	5	optional bool forward_chats;
	6	optional bool groups;
	7	optional bool channels;
	8	optional int offset;
	9	optional int limit;
	10	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getFavedStickers 
//
struct TLmessages_getFavedStickers {
	0	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:payments_getBankCardData 
//
struct TLpayments_getBankCardData {
	0	optional string number;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getDiscussionMessage 
//
struct TLmessages_getDiscussionMessage {
	0	optional InputPeer peer;
	1	optional int msg_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_requestEncryption 
//
struct TLmessages_requestEncryption {
	0	optional InputUser user_id;
	1	optional int random_id;
	2	optional vector<unsigned byte> g_a;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_acceptEncryption 
//
struct TLmessages_acceptEncryption {
	0	optional InputEncryptedChat peer;
	1	optional vector<unsigned byte> g_b;
	2	optional long key_fingerprint;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:updates_getChannelDifference 
//
struct TLupdates_getChannelDifference {
	0	optional bool force;
	1	optional InputChannel channel;
	2	optional ChannelMessagesFilter filter;
	3	optional int pts;
	4	optional int limit;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getWebPagePreview 
//
struct TLmessages_getWebPagePreview {
	0	optional string message;
	1	optional vector<MessageEntity> entities;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_uploadMedia 
//
struct TLmessages_uploadMedia {
	0	optional InputPeer peer;
	1	optional InputMedia media;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getOnlines 
//
struct TLmessages_getOnlines {
	0	optional InputPeer peer;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getRecentMeUrls 
//
struct TLhelp_getRecentMeUrls {
	0	optional string referer;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:payments_getPaymentReceipt 
//
struct TLpayments_getPaymentReceipt {
	0	optional int msg_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getFullChat 
//
struct TLmessages_getFullChat {
	0	optional int chat_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getFullChannel 
//
struct TLchannels_getFullChannel {
	0	optional InputChannel channel;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:upload_getWebFile 
//
struct TLupload_getWebFile {
	0	optional InputWebFileLocation location;
	1	optional int offset;
	2	optional int limit;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getAutoDownloadSettings 
//
struct TLaccount_getAutoDownloadSettings {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getWebPage 
//
struct TLmessages_getWebPage {
	0	optional string url;
	1	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stats_getBroadcastStats 
//
struct TLstats_getBroadcastStats {
	0	optional bool dark;
	1	optional InputChannel channel;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_acceptLoginToken 
//
struct TLauth_acceptLoginToken {
	0	optional vector<unsigned byte> token;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getConfig 
//
struct TLhelp_getConfig {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getGameHighScores 
//
struct TLmessages_getGameHighScores {
	0	optional InputPeer peer;
	1	optional int id;
	2	optional InputUser user_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getInlineGameHighScores 
//
struct TLmessages_getInlineGameHighScores {
	0	optional InputBotInlineMessageID id;
	1	optional InputUser user_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getPrivacy 
//
struct TLaccount_getPrivacy {
	0	optional InputPrivacyKey key_key;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_setPrivacy 
//
struct TLaccount_setPrivacy {
	0	optional InputPrivacyKey key_key;
	1	optional vector<InputPrivacyRule> rules;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_getSaved 
//
struct TLcontacts_getSaved {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:langpack_getStrings 
//
struct TLlangpack_getStrings {
	0	optional string lang_pack;
	1	optional string lang_code;
	2	optional vector<string> keys;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getDeepLinkInfo 
//
struct TLhelp_getDeepLinkInfo {
	0	optional string path;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getAdminLog 
//
struct TLchannels_getAdminLog {
	0	optional InputChannel channel;
	1	optional string q;
	2	optional ChannelAdminLogEventsFilter events_filter;
	3	optional vector<InputUser> admins;
	4	optional long max_id;
	5	optional long min_id;
	6	optional int limit;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getTmpPassword 
//
struct TLaccount_getTmpPassword {
	0	optional InputCheckPasswordSRP password;
	1	optional int period;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_initTakeoutSession 
//
struct TLaccount_initTakeoutSession {
	0	optional bool contacts;
	1	optional bool message_users;
	2	optional bool message_chats;
	3	optional bool message_megagroups;
	4	optional bool message_channels;
	5	optional bool files;
	6	optional int file_max_size;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:payments_validateRequestedInfo 
//
struct TLpayments_validateRequestedInfo {
	0	optional bool save;
	1	optional int msg_id;
	2	optional PaymentRequestedInfo info;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getInactiveChannels 
//
struct TLchannels_getInactiveChannels {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getSplitRanges 
//
struct TLmessages_getSplitRanges {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_checkChatInvite 
//
struct TLmessages_checkChatInvite {
	0	optional string hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getGlobalPrivacySettings 
//
struct TLaccount_getGlobalPrivacySettings {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_setGlobalPrivacySettings 
//
struct TLaccount_setGlobalPrivacySettings {
	0	optional GlobalPrivacySettings settings;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getStickerSet 
//
struct TLmessages_getStickerSet {
	0	optional InputStickerSet stickerset;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stickers_createStickerSet 
//
struct TLstickers_createStickerSet {
	0	optional bool masks;
	1	optional bool animated;
	2	optional InputUser user_id;
	3	optional string title;
	4	optional string short_name;
	5	optional InputDocument thumb;
	6	optional vector<InputStickerSetItem> stickers;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stickers_removeStickerFromSet 
//
struct TLstickers_removeStickerFromSet {
	0	optional InputDocument sticker;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stickers_changeStickerPosition 
//
struct TLstickers_changeStickerPosition {
	0	optional InputDocument sticker;
	1	optional int position;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stickers_addStickerToSet 
//
struct TLstickers_addStickerToSet {
	0	optional InputStickerSet stickerset;
	1	optional InputStickerSetItem sticker;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stickers_setStickerSetThumb 
//
struct TLstickers_setStickerSetThumb {
	0	optional InputStickerSet stickerset;
	1	optional InputDocument thumb;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getPassword 
//
struct TLaccount_getPassword {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getInlineBotResults 
//
struct TLmessages_getInlineBotResults {
	0	optional InputUser bot;
	1	optional InputPeer peer;
	2	optional InputGeoPoint geo_point;
	3	optional string query;
	4	optional string offset;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getEmojiURL 
//
struct TLmessages_getEmojiURL {
	0	optional string lang_code;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_getStatuses 
//
struct TLcontacts_getStatuses {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getAppUpdate 
//
struct TLhelp_getAppUpdate {
	0	optional string source;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getPeerSettings 
//
struct TLmessages_getPeerSettings {
	0	optional InputPeer peer;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getMessages 
//
struct TLmessages_getMessages {
	0	optional vector<InputMessage> id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getHistory 
//
struct TLmessages_getHistory {
	0	optional InputPeer peer;
	1	optional int offset_id;
	2	optional int offset_date;
	3	optional int add_offset;
	4	optional int limit;
	5	optional int max_id;
	6	optional int min_id;
	7	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_search 
//
struct TLmessages_search {
	0	optional InputPeer peer;
	1	optional string q;
	2	optional InputPeer from_id;
	3	optional int top_msg_id;
	4	optional MessagesFilter filter;
	5	optional int min_date;
	6	optional int max_date;
	7	optional int offset_id;
	8	optional int add_offset;
	9	optional int limit;
	10	optional int max_id;
	11	optional int min_id;
	12	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getMessages 
//
struct TLchannels_getMessages {
	0	optional InputChannel channel;
	1	optional vector<InputMessage> id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_searchGlobal 
//
struct TLmessages_searchGlobal {
	0	optional int folder_id;
	1	optional string q;
	2	optional MessagesFilter filter;
	3	optional int min_date;
	4	optional int max_date;
	5	optional int offset_rate;
	6	optional InputPeer offset_peer;
	7	optional int offset_id;
	8	optional int limit;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getUnreadMentions 
//
struct TLmessages_getUnreadMentions {
	0	optional InputPeer peer;
	1	optional int offset_id;
	2	optional int add_offset;
	3	optional int limit;
	4	optional int max_id;
	5	optional int min_id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getRecentLocations 
//
struct TLmessages_getRecentLocations {
	0	optional InputPeer peer;
	1	optional int limit;
	2	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getScheduledHistory 
//
struct TLmessages_getScheduledHistory {
	0	optional InputPeer peer;
	1	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getScheduledMessages 
//
struct TLmessages_getScheduledMessages {
	0	optional InputPeer peer;
	1	optional vector<int> id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getReplies 
//
struct TLmessages_getReplies {
	0	optional InputPeer peer;
	1	optional int msg_id;
	2	optional int offset_id;
	3	optional int offset_date;
	4	optional int add_offset;
	5	optional int limit;
	6	optional int max_id;
	7	optional int min_id;
	8	optional int hash;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stats_getMessagePublicForwards 
//
struct TLstats_getMessagePublicForwards {
	0	optional InputChannel channel;
	1	optional int msg_id;
	2	optional int offset_rate;
	3	optional InputPeer offset_peer;
	4	optional int offset_id;
	5	optional int limit;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getAuthorizations 
//
struct TLaccount_getAuthorizations {
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:photos_deletePhotos 
//
struct TLphotos_deletePhotos {
	0	optional vector<InputPhoto> id;
};
///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_receivedQueue 
//
struct TLmessages_receivedQueue {
	0	optional int max_qts;
};
interface Apicontacts {
	vector<SavedContact> contacts_getSaved(TLcontacts_getSaved params);
	Bool contacts_deleteByPhones(TLcontacts_deleteByPhones params);
	Bool contacts_block(TLcontacts_block params);
	Bool contacts_unblock(TLcontacts_unblock params);
	Bool contacts_resetTopPeerRating(TLcontacts_resetTopPeerRating params);
	Bool contacts_resetSaved(TLcontacts_resetSaved params);
	Bool contacts_toggleTopPeers(TLcontacts_toggleTopPeers params);
	vector<int> contacts_getContactIDs(TLcontacts_getContactIDs params);
	contacts_ImportedContacts contacts_importContacts(TLcontacts_importContacts params);
	contacts_Contacts contacts_getContacts(TLcontacts_getContacts params);
	vector<ContactStatus> contacts_getStatuses(TLcontacts_getStatuses params);
	contacts_Found contacts_search(TLcontacts_search params);
	contacts_Blocked contacts_getBlocked(TLcontacts_getBlocked params);
	contacts_ResolvedPeer contacts_resolveUsername(TLcontacts_resolveUsername params);
	contacts_TopPeers contacts_getTopPeers(TLcontacts_getTopPeers params);
	Updates contacts_deleteContacts(TLcontacts_deleteContacts params);
	Updates contacts_addContact(TLcontacts_addContact params);
	Updates contacts_acceptContact(TLcontacts_acceptContact params);
	Updates contacts_getLocated(TLcontacts_getLocated params);
	Updates contacts_blockFromReplies(TLcontacts_blockFromReplies params);
};
interface Apiphone {
	Bool phone_receivedCall(TLphone_receivedCall params);
	Bool phone_saveCallDebug(TLphone_saveCallDebug params);
	Bool phone_sendSignalingData(TLphone_sendSignalingData params);
	phone_PhoneCall phone_requestCall(TLphone_requestCall params);
	phone_PhoneCall phone_acceptCall(TLphone_acceptCall params);
	phone_PhoneCall phone_confirmCall(TLphone_confirmCall params);
	DataJSON phone_getCallConfig(TLphone_getCallConfig params);
	Updates phone_discardCall(TLphone_discardCall params);
	Updates phone_setCallRating(TLphone_setCallRating params);
};
interface Apistats {
	StatsGraph stats_loadAsyncGraph(TLstats_loadAsyncGraph params);
	messages_Messages stats_getMessagePublicForwards(TLstats_getMessagePublicForwards params);
	stats_BroadcastStats stats_getBroadcastStats(TLstats_getBroadcastStats params);
	stats_MessageStats stats_getMessageStats(TLstats_getMessageStats params);
	stats_MegagroupStats stats_getMegagroupStats(TLstats_getMegagroupStats params);
};
interface Apihelp {
	NearestDc help_getNearestDc(TLhelp_getNearestDc params);
	JSONValue help_getAppConfig(TLhelp_getAppConfig params);
	Bool help_setBotUpdatesStatus(TLhelp_setBotUpdatesStatus params);
	Bool help_acceptTermsOfService(TLhelp_acceptTermsOfService params);
	Bool help_saveAppLog(TLhelp_saveAppLog params);
	Bool help_hidePromoData(TLhelp_hidePromoData params);
	Bool help_dismissSuggestion(TLhelp_dismissSuggestion params);
	help_DeepLinkInfo help_getDeepLinkInfo(TLhelp_getDeepLinkInfo params);
	help_RecentMeUrls help_getRecentMeUrls(TLhelp_getRecentMeUrls params);
	help_UserInfo help_getUserInfo(TLhelp_getUserInfo params);
	help_UserInfo help_editUserInfo(TLhelp_editUserInfo params);
	help_AppUpdate help_getAppUpdate(TLhelp_getAppUpdate params);
	help_InviteText help_getInviteText(TLhelp_getInviteText params);
	help_PassportConfig help_getPassportConfig(TLhelp_getPassportConfig params);
	help_TermsOfServiceUpdate help_getTermsOfServiceUpdate(TLhelp_getTermsOfServiceUpdate params);
	CdnConfig help_getCdnConfig(TLhelp_getCdnConfig params);
	help_PromoData help_getPromoData(TLhelp_getPromoData params);
	help_CountriesList help_getCountriesList(TLhelp_getCountriesList params);
	help_Support help_getSupport(TLhelp_getSupport params);
	Config help_getConfig(TLhelp_getConfig params);
	help_SupportName help_getSupportName(TLhelp_getSupportName params);
	Updates help_getAppChangelog(TLhelp_getAppChangelog params);
};
interface Apipayments {
	Bool payments_clearSavedInfo(TLpayments_clearSavedInfo params);
	payments_BankCardData payments_getBankCardData(TLpayments_getBankCardData params);
	payments_PaymentReceipt payments_getPaymentReceipt(TLpayments_getPaymentReceipt params);
	payments_PaymentForm payments_getPaymentForm(TLpayments_getPaymentForm params);
	payments_SavedInfo payments_getSavedInfo(TLpayments_getSavedInfo params);
	payments_ValidatedRequestedInfo payments_validateRequestedInfo(TLpayments_validateRequestedInfo params);
	payments_PaymentResult payments_sendPaymentForm(TLpayments_sendPaymentForm params);
};
interface Apiphotos {
	photos_Photos photos_getUserPhotos(TLphotos_getUserPhotos params);
	photos_Photo photos_updateProfilePhoto(TLphotos_updateProfilePhoto params);
	photos_Photo photos_uploadProfilePhoto(TLphotos_uploadProfilePhoto params);
	vector<long> photos_deletePhotos(TLphotos_deletePhotos params);
};
interface Apiupdates {
	updates_ChannelDifference updates_getChannelDifference(TLupdates_getChannelDifference params);
	updates_State updates_getState(TLupdates_getState params);
	updates_Difference updates_getDifference(TLupdates_getDifference params);
};
interface Apifolders {
	Updates folders_editPeerFolders(TLfolders_editPeerFolders params);
	Updates folders_deleteFolder(TLfolders_deleteFolder params);
};
interface Apilangpack {
	vector<LangPackString> langpack_getStrings(TLlangpack_getStrings params);
	LangPackLanguage langpack_getLanguage(TLlangpack_getLanguage params);
	LangPackDifference langpack_getLangPack(TLlangpack_getLangPack params);
	LangPackDifference langpack_getDifference(TLlangpack_getDifference params);
	vector<LangPackLanguage> langpack_getLanguages(TLlangpack_getLanguages params);
};
interface Apiauth {
	Bool auth_logOut(TLauth_logOut params);
	Bool auth_resetAuthorizations(TLauth_resetAuthorizations params);
	Bool auth_bindTempAuthKey(TLauth_bindTempAuthKey params);
	Bool auth_cancelCode(TLauth_cancelCode params);
	Bool auth_dropTempAuthKeys(TLauth_dropTempAuthKeys params);
	auth_PasswordRecovery auth_requestPasswordRecovery(TLauth_requestPasswordRecovery params);
	auth_SentCode auth_sendCode(TLauth_sendCode params);
	auth_SentCode auth_resendCode(TLauth_resendCode params);
	auth_Authorization auth_signUp(TLauth_signUp params);
	auth_Authorization auth_signIn(TLauth_signIn params);
	auth_Authorization auth_importAuthorization(TLauth_importAuthorization params);
	auth_Authorization auth_importBotAuthorization(TLauth_importBotAuthorization params);
	auth_Authorization auth_checkPassword(TLauth_checkPassword params);
	auth_Authorization auth_recoverPassword(TLauth_recoverPassword params);
	Authorization auth_acceptLoginToken(TLauth_acceptLoginToken params);
	auth_LoginToken auth_exportLoginToken(TLauth_exportLoginToken params);
	auth_LoginToken auth_importLoginToken(TLauth_importLoginToken params);
	auth_ExportedAuthorization auth_exportAuthorization(TLauth_exportAuthorization params);
};
interface Apistickers {
	messages_StickerSet stickers_createStickerSet(TLstickers_createStickerSet params);
	messages_StickerSet stickers_removeStickerFromSet(TLstickers_removeStickerFromSet params);
	messages_StickerSet stickers_changeStickerPosition(TLstickers_changeStickerPosition params);
	messages_StickerSet stickers_addStickerToSet(TLstickers_addStickerToSet params);
	messages_StickerSet stickers_setStickerSetThumb(TLstickers_setStickerSetThumb params);
};
interface Apichannels {
	Bool channels_readHistory(TLchannels_readHistory params);
	Bool channels_reportSpam(TLchannels_reportSpam params);
	Bool channels_checkUsername(TLchannels_checkUsername params);
	Bool channels_updateUsername(TLchannels_updateUsername params);
	Bool channels_setStickers(TLchannels_setStickers params);
	Bool channels_readMessageContents(TLchannels_readMessageContents params);
	Bool channels_deleteHistory(TLchannels_deleteHistory params);
	Bool channels_setDiscussionGroup(TLchannels_setDiscussionGroup params);
	Bool channels_editLocation(TLchannels_editLocation params);
	channels_ChannelParticipant channels_getParticipant(TLchannels_getParticipant params);
	channels_AdminLogResults channels_getAdminLog(TLchannels_getAdminLog params);
	channels_ChannelParticipants channels_getParticipants(TLchannels_getParticipants params);
	messages_ChatFull channels_getFullChannel(TLchannels_getFullChannel params);
	messages_Messages channels_getMessages(TLchannels_getMessages params);
	messages_Chats channels_getChannels(TLchannels_getChannels params);
	messages_Chats channels_getAdminedPublicChannels(TLchannels_getAdminedPublicChannels params);
	messages_Chats channels_getLeftChannels(TLchannels_getLeftChannels params);
	messages_Chats channels_getGroupsForDiscussion(TLchannels_getGroupsForDiscussion params);
	messages_AffectedMessages channels_deleteMessages(TLchannels_deleteMessages params);
	messages_InactiveChats channels_getInactiveChannels(TLchannels_getInactiveChannels params);
	ExportedMessageLink channels_exportMessageLink(TLchannels_exportMessageLink params);
	messages_AffectedHistory channels_deleteUserHistory(TLchannels_deleteUserHistory params);
	Updates channels_createChannel(TLchannels_createChannel params);
	Updates channels_editAdmin(TLchannels_editAdmin params);
	Updates channels_editTitle(TLchannels_editTitle params);
	Updates channels_editPhoto(TLchannels_editPhoto params);
	Updates channels_joinChannel(TLchannels_joinChannel params);
	Updates channels_leaveChannel(TLchannels_leaveChannel params);
	Updates channels_inviteToChannel(TLchannels_inviteToChannel params);
	Updates channels_deleteChannel(TLchannels_deleteChannel params);
	Updates channels_toggleSignatures(TLchannels_toggleSignatures params);
	Updates channels_editBanned(TLchannels_editBanned params);
	Updates channels_togglePreHistoryHidden(TLchannels_togglePreHistoryHidden params);
	Updates channels_editCreator(TLchannels_editCreator params);
	Updates channels_toggleSlowMode(TLchannels_toggleSlowMode params);
};
interface Apibots {
	Bool bots_answerWebhookJSONQuery(TLbots_answerWebhookJSONQuery params);
	Bool bots_setBotCommands(TLbots_setBotCommands params);
	DataJSON bots_sendCustomRequest(TLbots_sendCustomRequest params);
};
interface Apiusers {
	Bool users_setSecureValueErrors(TLusers_setSecureValueErrors params);
	vector<User> users_getUsers(TLusers_getUsers params);
	UserFull users_getFullUser(TLusers_getFullUser params);
};
interface Apiupload {
	upload_File upload_getFile(TLupload_getFile params);
	upload_CdnFile upload_getCdnFile(TLupload_getCdnFile params);
	Bool upload_saveFilePart(TLupload_saveFilePart params);
	Bool upload_saveBigFilePart(TLupload_saveBigFilePart params);
	vector<FileHash> upload_reuploadCdnFile(TLupload_reuploadCdnFile params);
	vector<FileHash> upload_getCdnFileHashes(TLupload_getCdnFileHashes params);
	vector<FileHash> upload_getFileHashes(TLupload_getFileHashes params);
	upload_WebFile upload_getWebFile(TLupload_getWebFile params);
};
interface Apimessages {
	messages_MessageViews messages_getMessagesViews(TLmessages_getMessagesViews params);
	messages_FavedStickers messages_getFavedStickers(TLmessages_getFavedStickers params);
	vector<messages_SearchCounter> messages_getSearchCounters(TLmessages_getSearchCounters params);
	Bool messages_setTyping(TLmessages_setTyping params);
	Bool messages_reportSpam(TLmessages_reportSpam params);
	Bool messages_report(TLmessages_report params);
	Bool messages_discardEncryption(TLmessages_discardEncryption params);
	Bool messages_setEncryptedTyping(TLmessages_setEncryptedTyping params);
	Bool messages_readEncryptedHistory(TLmessages_readEncryptedHistory params);
	Bool messages_reportEncryptedSpam(TLmessages_reportEncryptedSpam params);
	Bool messages_uninstallStickerSet(TLmessages_uninstallStickerSet params);
	Bool messages_editChatAdmin(TLmessages_editChatAdmin params);
	Bool messages_reorderStickerSets(TLmessages_reorderStickerSets params);
	Bool messages_saveGif(TLmessages_saveGif params);
	Bool messages_setInlineBotResults(TLmessages_setInlineBotResults params);
	Bool messages_editInlineBotMessage(TLmessages_editInlineBotMessage params);
	Bool messages_setBotCallbackAnswer(TLmessages_setBotCallbackAnswer params);
	Bool messages_saveDraft(TLmessages_saveDraft params);
	Bool messages_readFeaturedStickers(TLmessages_readFeaturedStickers params);
	Bool messages_saveRecentSticker(TLmessages_saveRecentSticker params);
	Bool messages_clearRecentStickers(TLmessages_clearRecentStickers params);
	Bool messages_setInlineGameScore(TLmessages_setInlineGameScore params);
	Bool messages_toggleDialogPin(TLmessages_toggleDialogPin params);
	Bool messages_reorderPinnedDialogs(TLmessages_reorderPinnedDialogs params);
	Bool messages_setBotShippingResults(TLmessages_setBotShippingResults params);
	Bool messages_setBotPrecheckoutResults(TLmessages_setBotPrecheckoutResults params);
	Bool messages_faveSticker(TLmessages_faveSticker params);
	Bool messages_markDialogUnread(TLmessages_markDialogUnread params);
	Bool messages_clearAllDrafts(TLmessages_clearAllDrafts params);
	Bool messages_editChatAbout(TLmessages_editChatAbout params);
	Bool messages_hidePeerSettingsBar(TLmessages_hidePeerSettingsBar params);
	Bool messages_toggleStickerSets(TLmessages_toggleStickerSets params);
	Bool messages_updateDialogFilter(TLmessages_updateDialogFilter params);
	Bool messages_updateDialogFiltersOrder(TLmessages_updateDialogFiltersOrder params);
	Bool messages_readDiscussion(TLmessages_readDiscussion params);
	messages_DhConfig messages_getDhConfig(TLmessages_getDhConfig params);
	WebPage messages_getWebPage(TLmessages_getWebPage params);
	vector<DialogFilter> messages_getDialogFilters(TLmessages_getDialogFilters params);
	messages_PeerDialogs messages_getPeerDialogs(TLmessages_getPeerDialogs params);
	messages_PeerDialogs messages_getPinnedDialogs(TLmessages_getPinnedDialogs params);
	messages_SentEncryptedMessage messages_sendEncrypted(TLmessages_sendEncrypted params);
	messages_SentEncryptedMessage messages_sendEncryptedFile(TLmessages_sendEncryptedFile params);
	messages_SentEncryptedMessage messages_sendEncryptedService(TLmessages_sendEncryptedService params);
	messages_StickerSet messages_getStickerSet(TLmessages_getStickerSet params);
	ExportedChatInvite messages_exportChatInvite(TLmessages_exportChatInvite params);
	vector<DialogFilterSuggested> messages_getSuggestedDialogFilters(TLmessages_getSuggestedDialogFilters params);
	vector<StickerSetCovered> messages_getAttachedStickers(TLmessages_getAttachedStickers params);
	vector<DialogPeer> messages_getDialogUnreadMarks(TLmessages_getDialogUnreadMarks params);
	ChatOnlines messages_getOnlines(TLmessages_getOnlines params);
	EncryptedFile messages_uploadEncryptedFile(TLmessages_uploadEncryptedFile params);
	EmojiKeywordsDifference messages_getEmojiKeywords(TLmessages_getEmojiKeywords params);
	EmojiKeywordsDifference messages_getEmojiKeywordsDifference(TLmessages_getEmojiKeywordsDifference params);
	messages_BotResults messages_getInlineBotResults(TLmessages_getInlineBotResults params);
	PeerSettings messages_getPeerSettings(TLmessages_getPeerSettings params);
	messages_FeaturedStickers messages_getFeaturedStickers(TLmessages_getFeaturedStickers params);
	messages_FeaturedStickers messages_getOldFeaturedStickers(TLmessages_getOldFeaturedStickers params);
	messages_DiscussionMessage messages_getDiscussionMessage(TLmessages_getDiscussionMessage params);
	vector<EmojiLanguage> messages_getEmojiKeywordsLanguages(TLmessages_getEmojiKeywordsLanguages params);
	EmojiURL messages_getEmojiURL(TLmessages_getEmojiURL params);
	messages_ChatFull messages_getFullChat(TLmessages_getFullChat params);
	messages_BotCallbackAnswer messages_getBotCallbackAnswer(TLmessages_getBotCallbackAnswer params);
	messages_Messages messages_getMessages(TLmessages_getMessages params);
	messages_Messages messages_getHistory(TLmessages_getHistory params);
	messages_Messages messages_search(TLmessages_search params);
	messages_Messages messages_searchGlobal(TLmessages_searchGlobal params);
	messages_Messages messages_getUnreadMentions(TLmessages_getUnreadMentions params);
	messages_Messages messages_getRecentLocations(TLmessages_getRecentLocations params);
	messages_Messages messages_getScheduledHistory(TLmessages_getScheduledHistory params);
	messages_Messages messages_getScheduledMessages(TLmessages_getScheduledMessages params);
	messages_Messages messages_getReplies(TLmessages_getReplies params);
	EncryptedChat messages_requestEncryption(TLmessages_requestEncryption params);
	EncryptedChat messages_acceptEncryption(TLmessages_acceptEncryption params);
	messages_ArchivedStickers messages_getArchivedStickers(TLmessages_getArchivedStickers params);
	messages_VotesList messages_getPollVotes(TLmessages_getPollVotes params);
	messages_SavedGifs messages_getSavedGifs(TLmessages_getSavedGifs params);
	MessageMedia messages_getWebPagePreview(TLmessages_getWebPagePreview params);
	MessageMedia messages_uploadMedia(TLmessages_uploadMedia params);
	messages_Chats messages_getChats(TLmessages_getChats params);
	messages_Chats messages_getCommonChats(TLmessages_getCommonChats params);
	messages_Chats messages_getAllChats(TLmessages_getAllChats params);
	messages_AffectedMessages messages_readHistory(TLmessages_readHistory params);
	messages_AffectedMessages messages_deleteMessages(TLmessages_deleteMessages params);
	messages_AffectedMessages messages_readMessageContents(TLmessages_readMessageContents params);
	messages_RecentStickers messages_getRecentStickers(TLmessages_getRecentStickers params);
	UrlAuthResult messages_requestUrlAuth(TLmessages_requestUrlAuth params);
	UrlAuthResult messages_acceptUrlAuth(TLmessages_acceptUrlAuth params);
	messages_Dialogs messages_getDialogs(TLmessages_getDialogs params);
	messages_AllStickers messages_getAllStickers(TLmessages_getAllStickers params);
	messages_AllStickers messages_getMaskStickers(TLmessages_getMaskStickers params);
	messages_StickerSetInstallResult messages_installStickerSet(TLmessages_installStickerSet params);
	messages_MessageEditData messages_getMessageEditData(TLmessages_getMessageEditData params);
	messages_HighScores messages_getGameHighScores(TLmessages_getGameHighScores params);
	messages_HighScores messages_getInlineGameHighScores(TLmessages_getInlineGameHighScores params);
	vector<ReceivedNotifyMessage> messages_receivedMessages(TLmessages_receivedMessages params);
	messages_Stickers messages_getStickers(TLmessages_getStickers params);
	Document messages_getDocumentByHash(TLmessages_getDocumentByHash params);
	vector<MessageRange> messages_getSplitRanges(TLmessages_getSplitRanges params);
	StatsURL messages_getStatsURL(TLmessages_getStatsURL params);
	messages_AffectedHistory messages_deleteHistory(TLmessages_deleteHistory params);
	messages_AffectedHistory messages_readMentions(TLmessages_readMentions params);
	messages_AffectedHistory messages_unpinAllMessages(TLmessages_unpinAllMessages params);
	messages_FoundStickerSets messages_searchStickerSets(TLmessages_searchStickerSets params);
	ChatInvite messages_checkChatInvite(TLmessages_checkChatInvite params);
	vector<long> messages_receivedQueue(TLmessages_receivedQueue params);
	Updates messages_sendMessage(TLmessages_sendMessage params);
	Updates messages_sendMedia(TLmessages_sendMedia params);
	Updates messages_forwardMessages(TLmessages_forwardMessages params);
	Updates messages_editChatTitle(TLmessages_editChatTitle params);
	Updates messages_editChatPhoto(TLmessages_editChatPhoto params);
	Updates messages_addChatUser(TLmessages_addChatUser params);
	Updates messages_deleteChatUser(TLmessages_deleteChatUser params);
	Updates messages_createChat(TLmessages_createChat params);
	Updates messages_importChatInvite(TLmessages_importChatInvite params);
	Updates messages_startBot(TLmessages_startBot params);
	Updates messages_migrateChat(TLmessages_migrateChat params);
	Updates messages_sendInlineBotResult(TLmessages_sendInlineBotResult params);
	Updates messages_editMessage(TLmessages_editMessage params);
	Updates messages_getAllDrafts(TLmessages_getAllDrafts params);
	Updates messages_setGameScore(TLmessages_setGameScore params);
	Updates messages_sendScreenshotNotification(TLmessages_sendScreenshotNotification params);
	Updates messages_sendMultiMedia(TLmessages_sendMultiMedia params);
	Updates messages_updatePinnedMessage(TLmessages_updatePinnedMessage params);
	Updates messages_sendVote(TLmessages_sendVote params);
	Updates messages_getPollResults(TLmessages_getPollResults params);
	Updates messages_editChatDefaultBannedRights(TLmessages_editChatDefaultBannedRights params);
	Updates messages_sendScheduledMessages(TLmessages_sendScheduledMessages params);
	Updates messages_deleteScheduledMessages(TLmessages_deleteScheduledMessages params);
};
interface Apiaccount {
	account_WebAuthorizations account_getWebAuthorizations(TLaccount_getWebAuthorizations params);
	GlobalPrivacySettings account_getGlobalPrivacySettings(TLaccount_getGlobalPrivacySettings params);
	GlobalPrivacySettings account_setGlobalPrivacySettings(TLaccount_setGlobalPrivacySettings params);
	Bool account_registerDevice(TLaccount_registerDevice params);
	Bool account_unregisterDevice(TLaccount_unregisterDevice params);
	Bool account_updateNotifySettings(TLaccount_updateNotifySettings params);
	Bool account_resetNotifySettings(TLaccount_resetNotifySettings params);
	Bool account_updateStatus(TLaccount_updateStatus params);
	Bool account_reportPeer(TLaccount_reportPeer params);
	Bool account_checkUsername(TLaccount_checkUsername params);
	Bool account_deleteAccount(TLaccount_deleteAccount params);
	Bool account_setAccountTTL(TLaccount_setAccountTTL params);
	Bool account_updateDeviceLocked(TLaccount_updateDeviceLocked params);
	Bool account_resetAuthorization(TLaccount_resetAuthorization params);
	Bool account_updatePasswordSettings(TLaccount_updatePasswordSettings params);
	Bool account_confirmPhone(TLaccount_confirmPhone params);
	Bool account_resetWebAuthorization(TLaccount_resetWebAuthorization params);
	Bool account_resetWebAuthorizations(TLaccount_resetWebAuthorizations params);
	Bool account_deleteSecureValue(TLaccount_deleteSecureValue params);
	Bool account_acceptAuthorization(TLaccount_acceptAuthorization params);
	Bool account_verifyPhone(TLaccount_verifyPhone params);
	Bool account_verifyEmail(TLaccount_verifyEmail params);
	Bool account_finishTakeoutSession(TLaccount_finishTakeoutSession params);
	Bool account_confirmPasswordEmail(TLaccount_confirmPasswordEmail params);
	Bool account_resendPasswordEmail(TLaccount_resendPasswordEmail params);
	Bool account_cancelPasswordEmail(TLaccount_cancelPasswordEmail params);
	Bool account_getContactSignUpNotification(TLaccount_getContactSignUpNotification params);
	Bool account_setContactSignUpNotification(TLaccount_setContactSignUpNotification params);
	Bool account_saveWallPaper(TLaccount_saveWallPaper params);
	Bool account_installWallPaper(TLaccount_installWallPaper params);
	Bool account_resetWallPapers(TLaccount_resetWallPapers params);
	Bool account_saveAutoDownloadSettings(TLaccount_saveAutoDownloadSettings params);
	Bool account_saveTheme(TLaccount_saveTheme params);
	Bool account_installTheme(TLaccount_installTheme params);
	Bool account_setContentSettings(TLaccount_setContentSettings params);
	account_SentEmailCode account_sendVerifyEmailCode(TLaccount_sendVerifyEmailCode params);
	AccountDaysTTL account_getAccountTTL(TLaccount_getAccountTTL params);
	account_Password account_getPassword(TLaccount_getPassword params);
	account_TmpPassword account_getTmpPassword(TLaccount_getTmpPassword params);
	User account_updateProfile(TLaccount_updateProfile params);
	User account_updateUsername(TLaccount_updateUsername params);
	User account_changePhone(TLaccount_changePhone params);
	account_Themes account_getThemes(TLaccount_getThemes params);
	SecureValue account_saveSecureValue(TLaccount_saveSecureValue params);
	auth_SentCode account_sendChangePhoneCode(TLaccount_sendChangePhoneCode params);
	auth_SentCode account_sendConfirmPhoneCode(TLaccount_sendConfirmPhoneCode params);
	auth_SentCode account_sendVerifyPhoneCode(TLaccount_sendVerifyPhoneCode params);
	account_PasswordSettings account_getPasswordSettings(TLaccount_getPasswordSettings params);
	account_ContentSettings account_getContentSettings(TLaccount_getContentSettings params);
	account_WallPapers account_getWallPapers(TLaccount_getWallPapers params);
	vector<SecureValue> account_getAllSecureValues(TLaccount_getAllSecureValues params);
	vector<SecureValue> account_getSecureValue(TLaccount_getSecureValue params);
	account_AuthorizationForm account_getAuthorizationForm(TLaccount_getAuthorizationForm params);
	account_Takeout account_initTakeoutSession(TLaccount_initTakeoutSession params);
	account_Authorizations account_getAuthorizations(TLaccount_getAuthorizations params);
	vector<WallPaper> account_getMultiWallPapers(TLaccount_getMultiWallPapers params);
	WallPaper account_getWallPaper(TLaccount_getWallPaper params);
	WallPaper account_uploadWallPaper(TLaccount_uploadWallPaper params);
	Document account_uploadTheme(TLaccount_uploadTheme params);
	account_AutoDownloadSettings account_getAutoDownloadSettings(TLaccount_getAutoDownloadSettings params);
	Theme account_createTheme(TLaccount_createTheme params);
	Theme account_updateTheme(TLaccount_updateTheme params);
	Theme account_getTheme(TLaccount_getTheme params);
	account_PrivacyRules account_getPrivacy(TLaccount_getPrivacy params);
	account_PrivacyRules account_setPrivacy(TLaccount_setPrivacy params);
	PeerNotifySettings account_getNotifySettings(TLaccount_getNotifySettings params);
	Updates account_getNotifyExceptions(TLaccount_getNotifyExceptions params);
};
};
