package mtproto

///////////////////////////////////////////////////////////////////////////////
// Constructors:LangPackDifference
// LangPackDifference <--
// + TLlangPackDifference
//
// Constructors:Type:LangPackDifference
type LangPackDifference struct {
	constructor int32
	data        *LangPackDifference_Data
}

// Constructors:Type:Data:LangPackDifference
type LangPackDifference_Data struct {
	lang_code    string
	from_version int32
	version      int32
	strings      []*LangPackString
}

// Constructors:Predicate:langPackDifference
type TLlangPackDifference struct {
	data *LangPackDifference_Data
}

// Constructors:New:langPackDifference
func NewTLlangPackDifference() *TLlangPackDifference {
	return &TLlangPackDifference{data: &LangPackDifference_Data{}}
}
func (m *TLlangPackDifference) Setlang_code(v string)          { m.data.lang_code = v }
func (m *TLlangPackDifference) Getlang_code() string           { return m.data.lang_code }
func (m *TLlangPackDifference) Setfrom_version(v int32)        { m.data.from_version = v }
func (m *TLlangPackDifference) Getfrom_version() int32         { return m.data.from_version }
func (m *TLlangPackDifference) Setversion(v int32)             { m.data.version = v }
func (m *TLlangPackDifference) Getversion() int32              { return m.data.version }
func (m *TLlangPackDifference) Setstrings(v []*LangPackString) { m.data.strings = v }
func (m *TLlangPackDifference) Getstrings() []*LangPackString  { return m.data.strings }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputDialogPeer
// InputDialogPeer <--
// + TLinputDialogPeer
// + TLinputDialogPeerFolder
//
// Constructors:Type:InputDialogPeer
type InputDialogPeer struct {
	constructor int32
	data        *InputDialogPeer_Data
}

// Constructors:Type:Data:InputDialogPeer
type InputDialogPeer_Data struct {
	peer      *InputPeer
	folder_id int32
}

// Constructors:Predicate:inputDialogPeer
type TLinputDialogPeer struct {
	data *InputDialogPeer_Data
}

// Constructors:New:inputDialogPeer
func NewTLinputDialogPeer() *TLinputDialogPeer {
	return &TLinputDialogPeer{data: &InputDialogPeer_Data{}}
}

// Constructors:Predicate:inputDialogPeerFolder
type TLinputDialogPeerFolder struct {
	data *InputDialogPeer_Data
}

// Constructors:New:inputDialogPeerFolder
func NewTLinputDialogPeerFolder() *TLinputDialogPeerFolder {
	return &TLinputDialogPeerFolder{data: &InputDialogPeer_Data{}}
}
func (m *TLinputDialogPeer) Setpeer(v *InputPeer)       { m.data.peer = v }
func (m *TLinputDialogPeer) Getpeer() *InputPeer        { return m.data.peer }
func (m *TLinputDialogPeerFolder) Setfolder_id(v int32) { m.data.folder_id = v }
func (m *TLinputDialogPeerFolder) Getfolder_id() int32  { return m.data.folder_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:SecureCredentialsEncrypted
// SecureCredentialsEncrypted <--
// + TLsecureCredentialsEncrypted
//
// Constructors:Type:SecureCredentialsEncrypted
type SecureCredentialsEncrypted struct {
	constructor int32
	data        *SecureCredentialsEncrypted_Data
}

// Constructors:Type:Data:SecureCredentialsEncrypted
type SecureCredentialsEncrypted_Data struct {
	data   []byte
	hash   []byte
	secret []byte
}

// Constructors:Predicate:secureCredentialsEncrypted
type TLsecureCredentialsEncrypted struct {
	data *SecureCredentialsEncrypted_Data
}

// Constructors:New:secureCredentialsEncrypted
func NewTLsecureCredentialsEncrypted() *TLsecureCredentialsEncrypted {
	return &TLsecureCredentialsEncrypted{data: &SecureCredentialsEncrypted_Data{}}
}
func (m *TLsecureCredentialsEncrypted) Setdata(v []byte)   { m.data.data = v }
func (m *TLsecureCredentialsEncrypted) Getdata() []byte    { return m.data.data }
func (m *TLsecureCredentialsEncrypted) Sethash(v []byte)   { m.data.hash = v }
func (m *TLsecureCredentialsEncrypted) Gethash() []byte    { return m.data.hash }
func (m *TLsecureCredentialsEncrypted) Setsecret(v []byte) { m.data.secret = v }
func (m *TLsecureCredentialsEncrypted) Getsecret() []byte  { return m.data.secret }

///////////////////////////////////////////////////////////////////////////////
// Constructors:Theme
// Theme <--
// + TLtheme
//
// Constructors:Type:Theme
type Theme struct {
	constructor int32
	data        *Theme_Data
}

// Constructors:Type:Data:Theme
type Theme_Data struct {
	creator        bool
	default_key    bool
	id             int64
	access_hash    int64
	slug           string
	title          string
	document       *Document
	settings       *ThemeSettings
	installs_count int32
}

// Constructors:Predicate:theme
type TLtheme struct {
	data *Theme_Data
}

// Constructors:New:theme
func NewTLtheme() *TLtheme {
	return &TLtheme{data: &Theme_Data{}}
}
func (m *TLtheme) Setcreator(v bool)            { m.data.creator = v }
func (m *TLtheme) Getcreator() bool             { return m.data.creator }
func (m *TLtheme) Setdefault_key(v bool)        { m.data.default_key = v }
func (m *TLtheme) Getdefault_key() bool         { return m.data.default_key }
func (m *TLtheme) Setid(v int64)                { m.data.id = v }
func (m *TLtheme) Getid() int64                 { return m.data.id }
func (m *TLtheme) Setaccess_hash(v int64)       { m.data.access_hash = v }
func (m *TLtheme) Getaccess_hash() int64        { return m.data.access_hash }
func (m *TLtheme) Setslug(v string)             { m.data.slug = v }
func (m *TLtheme) Getslug() string              { return m.data.slug }
func (m *TLtheme) Settitle(v string)            { m.data.title = v }
func (m *TLtheme) Gettitle() string             { return m.data.title }
func (m *TLtheme) Setdocument(v *Document)      { m.data.document = v }
func (m *TLtheme) Getdocument() *Document       { return m.data.document }
func (m *TLtheme) Setsettings(v *ThemeSettings) { m.data.settings = v }
func (m *TLtheme) Getsettings() *ThemeSettings  { return m.data.settings }
func (m *TLtheme) Setinstalls_count(v int32)    { m.data.installs_count = v }
func (m *TLtheme) Getinstalls_count() int32     { return m.data.installs_count }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PhoneCallProtocol
// PhoneCallProtocol <--
// + TLphoneCallProtocol
//
// Constructors:Type:PhoneCallProtocol
type PhoneCallProtocol struct {
	constructor int32
	data        *PhoneCallProtocol_Data
}

// Constructors:Type:Data:PhoneCallProtocol
type PhoneCallProtocol_Data struct {
	udp_p2p          bool
	udp_reflector    bool
	min_layer        int32
	max_layer        int32
	library_versions []string
}

// Constructors:Predicate:phoneCallProtocol
type TLphoneCallProtocol struct {
	data *PhoneCallProtocol_Data
}

// Constructors:New:phoneCallProtocol
func NewTLphoneCallProtocol() *TLphoneCallProtocol {
	return &TLphoneCallProtocol{data: &PhoneCallProtocol_Data{}}
}
func (m *TLphoneCallProtocol) Setudp_p2p(v bool)              { m.data.udp_p2p = v }
func (m *TLphoneCallProtocol) Getudp_p2p() bool               { return m.data.udp_p2p }
func (m *TLphoneCallProtocol) Setudp_reflector(v bool)        { m.data.udp_reflector = v }
func (m *TLphoneCallProtocol) Getudp_reflector() bool         { return m.data.udp_reflector }
func (m *TLphoneCallProtocol) Setmin_layer(v int32)           { m.data.min_layer = v }
func (m *TLphoneCallProtocol) Getmin_layer() int32            { return m.data.min_layer }
func (m *TLphoneCallProtocol) Setmax_layer(v int32)           { m.data.max_layer = v }
func (m *TLphoneCallProtocol) Getmax_layer() int32            { return m.data.max_layer }
func (m *TLphoneCallProtocol) Setlibrary_versions(v []string) { m.data.library_versions = v }
func (m *TLphoneCallProtocol) Getlibrary_versions() []string  { return m.data.library_versions }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputNotifyPeer
// InputNotifyPeer <--
// + TLinputNotifyPeer
// + TLinputNotifyUsers
// + TLinputNotifyChats
// + TLinputNotifyBroadcasts
//
// Constructors:Type:InputNotifyPeer
type InputNotifyPeer struct {
	constructor int32
	data        *InputNotifyPeer_Data
}

// Constructors:Type:Data:InputNotifyPeer
type InputNotifyPeer_Data struct {
	peer *InputPeer
}

// Constructors:Predicate:inputNotifyPeer
type TLinputNotifyPeer struct {
	data *InputNotifyPeer_Data
}

// Constructors:New:inputNotifyPeer
func NewTLinputNotifyPeer() *TLinputNotifyPeer {
	return &TLinputNotifyPeer{data: &InputNotifyPeer_Data{}}
}

// Constructors:Predicate:inputNotifyUsers
type TLinputNotifyUsers struct {
	data *InputNotifyPeer_Data
}

// Constructors:New:inputNotifyUsers
func NewTLinputNotifyUsers() *TLinputNotifyUsers {
	return &TLinputNotifyUsers{data: &InputNotifyPeer_Data{}}
}

// Constructors:Predicate:inputNotifyChats
type TLinputNotifyChats struct {
	data *InputNotifyPeer_Data
}

// Constructors:New:inputNotifyChats
func NewTLinputNotifyChats() *TLinputNotifyChats {
	return &TLinputNotifyChats{data: &InputNotifyPeer_Data{}}
}

// Constructors:Predicate:inputNotifyBroadcasts
type TLinputNotifyBroadcasts struct {
	data *InputNotifyPeer_Data
}

// Constructors:New:inputNotifyBroadcasts
func NewTLinputNotifyBroadcasts() *TLinputNotifyBroadcasts {
	return &TLinputNotifyBroadcasts{data: &InputNotifyPeer_Data{}}
}
func (m *TLinputNotifyPeer) Setpeer(v *InputPeer) { m.data.peer = v }
func (m *TLinputNotifyPeer) Getpeer() *InputPeer  { return m.data.peer }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ReportReason
// ReportReason <--
// + TLinputReportReasonSpam
// + TLinputReportReasonViolence
// + TLinputReportReasonPornography
// + TLinputReportReasonChildAbuse
// + TLinputReportReasonOther
// + TLinputReportReasonCopyright
// + TLinputReportReasonGeoIrrelevant
//
// Constructors:Type:ReportReason
type ReportReason struct {
	constructor int32
	data        *ReportReason_Data
}

// Constructors:Type:Data:ReportReason
type ReportReason_Data struct {
	text string
}

// Constructors:Predicate:inputReportReasonSpam
type TLinputReportReasonSpam struct {
	data *ReportReason_Data
}

// Constructors:New:inputReportReasonSpam
func NewTLinputReportReasonSpam() *TLinputReportReasonSpam {
	return &TLinputReportReasonSpam{data: &ReportReason_Data{}}
}

// Constructors:Predicate:inputReportReasonViolence
type TLinputReportReasonViolence struct {
	data *ReportReason_Data
}

// Constructors:New:inputReportReasonViolence
func NewTLinputReportReasonViolence() *TLinputReportReasonViolence {
	return &TLinputReportReasonViolence{data: &ReportReason_Data{}}
}

// Constructors:Predicate:inputReportReasonPornography
type TLinputReportReasonPornography struct {
	data *ReportReason_Data
}

// Constructors:New:inputReportReasonPornography
func NewTLinputReportReasonPornography() *TLinputReportReasonPornography {
	return &TLinputReportReasonPornography{data: &ReportReason_Data{}}
}

// Constructors:Predicate:inputReportReasonChildAbuse
type TLinputReportReasonChildAbuse struct {
	data *ReportReason_Data
}

// Constructors:New:inputReportReasonChildAbuse
func NewTLinputReportReasonChildAbuse() *TLinputReportReasonChildAbuse {
	return &TLinputReportReasonChildAbuse{data: &ReportReason_Data{}}
}

// Constructors:Predicate:inputReportReasonOther
type TLinputReportReasonOther struct {
	data *ReportReason_Data
}

// Constructors:New:inputReportReasonOther
func NewTLinputReportReasonOther() *TLinputReportReasonOther {
	return &TLinputReportReasonOther{data: &ReportReason_Data{}}
}

// Constructors:Predicate:inputReportReasonCopyright
type TLinputReportReasonCopyright struct {
	data *ReportReason_Data
}

// Constructors:New:inputReportReasonCopyright
func NewTLinputReportReasonCopyright() *TLinputReportReasonCopyright {
	return &TLinputReportReasonCopyright{data: &ReportReason_Data{}}
}

// Constructors:Predicate:inputReportReasonGeoIrrelevant
type TLinputReportReasonGeoIrrelevant struct {
	data *ReportReason_Data
}

// Constructors:New:inputReportReasonGeoIrrelevant
func NewTLinputReportReasonGeoIrrelevant() *TLinputReportReasonGeoIrrelevant {
	return &TLinputReportReasonGeoIrrelevant{data: &ReportReason_Data{}}
}
func (m *TLinputReportReasonOther) Settext(v string) { m.data.text = v }
func (m *TLinputReportReasonOther) Gettext() string  { return m.data.text }

///////////////////////////////////////////////////////////////////////////////
// Constructors:Page
// Page <--
// + TLpage
//
// Constructors:Type:Page
type Page struct {
	constructor int32
	data        *Page_Data
}

// Constructors:Type:Data:Page
type Page_Data struct {
	part      bool
	rtl       bool
	v2        bool
	url       string
	blocks    []*PageBlock
	photos    []*Photo
	documents []*Document
	views     int32
}

// Constructors:Predicate:page
type TLpage struct {
	data *Page_Data
}

// Constructors:New:page
func NewTLpage() *TLpage {
	return &TLpage{data: &Page_Data{}}
}
func (m *TLpage) Setpart(v bool)             { m.data.part = v }
func (m *TLpage) Getpart() bool              { return m.data.part }
func (m *TLpage) Setrtl(v bool)              { m.data.rtl = v }
func (m *TLpage) Getrtl() bool               { return m.data.rtl }
func (m *TLpage) Setv2(v bool)               { m.data.v2 = v }
func (m *TLpage) Getv2() bool                { return m.data.v2 }
func (m *TLpage) Seturl(v string)            { m.data.url = v }
func (m *TLpage) Geturl() string             { return m.data.url }
func (m *TLpage) Setblocks(v []*PageBlock)   { m.data.blocks = v }
func (m *TLpage) Getblocks() []*PageBlock    { return m.data.blocks }
func (m *TLpage) Setphotos(v []*Photo)       { m.data.photos = v }
func (m *TLpage) Getphotos() []*Photo        { return m.data.photos }
func (m *TLpage) Setdocuments(v []*Document) { m.data.documents = v }
func (m *TLpage) Getdocuments() []*Document  { return m.data.documents }
func (m *TLpage) Setviews(v int32)           { m.data.views = v }
func (m *TLpage) Getviews() int32            { return m.data.views }

///////////////////////////////////////////////////////////////////////////////
// Constructors:stats_MessageStats
// stats_MessageStats <--
// + TLstats_messageStats
//
// Constructors:Type:stats_MessageStats
type stats_MessageStats struct {
	constructor int32
	data        *stats_MessageStats_Data
}

// Constructors:Type:Data:stats_MessageStats
type stats_MessageStats_Data struct {
	views_graph *StatsGraph
}

// Constructors:Predicate:stats_messageStats
type TLstats_messageStats struct {
	data *stats_MessageStats_Data
}

// Constructors:New:stats_messageStats
func NewTLstats_messageStats() *TLstats_messageStats {
	return &TLstats_messageStats{data: &stats_MessageStats_Data{}}
}
func (m *TLstats_messageStats) Setviews_graph(v *StatsGraph) { m.data.views_graph = v }
func (m *TLstats_messageStats) Getviews_graph() *StatsGraph  { return m.data.views_graph }

///////////////////////////////////////////////////////////////////////////////
// Constructors:help_DeepLinkInfo
// help_DeepLinkInfo <--
// + TLhelp_deepLinkInfoEmpty
// + TLhelp_deepLinkInfo
//
// Constructors:Type:help_DeepLinkInfo
type help_DeepLinkInfo struct {
	constructor int32
	data        *help_DeepLinkInfo_Data
}

// Constructors:Type:Data:help_DeepLinkInfo
type help_DeepLinkInfo_Data struct {
	update_app bool
	message    string
	entities   []*MessageEntity
}

// Constructors:Predicate:help_deepLinkInfoEmpty
type TLhelp_deepLinkInfoEmpty struct {
	data *help_DeepLinkInfo_Data
}

// Constructors:New:help_deepLinkInfoEmpty
func NewTLhelp_deepLinkInfoEmpty() *TLhelp_deepLinkInfoEmpty {
	return &TLhelp_deepLinkInfoEmpty{data: &help_DeepLinkInfo_Data{}}
}

// Constructors:Predicate:help_deepLinkInfo
type TLhelp_deepLinkInfo struct {
	data *help_DeepLinkInfo_Data
}

// Constructors:New:help_deepLinkInfo
func NewTLhelp_deepLinkInfo() *TLhelp_deepLinkInfo {
	return &TLhelp_deepLinkInfo{data: &help_DeepLinkInfo_Data{}}
}
func (m *TLhelp_deepLinkInfo) Setupdate_app(v bool)           { m.data.update_app = v }
func (m *TLhelp_deepLinkInfo) Getupdate_app() bool            { return m.data.update_app }
func (m *TLhelp_deepLinkInfo) Setmessage(v string)            { m.data.message = v }
func (m *TLhelp_deepLinkInfo) Getmessage() string             { return m.data.message }
func (m *TLhelp_deepLinkInfo) Setentities(v []*MessageEntity) { m.data.entities = v }
func (m *TLhelp_deepLinkInfo) Getentities() []*MessageEntity  { return m.data.entities }

///////////////////////////////////////////////////////////////////////////////
// Constructors:payments_SavedInfo
// payments_SavedInfo <--
// + TLpayments_savedInfo
//
// Constructors:Type:payments_SavedInfo
type payments_SavedInfo struct {
	constructor int32
	data        *payments_SavedInfo_Data
}

// Constructors:Type:Data:payments_SavedInfo
type payments_SavedInfo_Data struct {
	has_saved_credentials bool
	saved_info            *PaymentRequestedInfo
}

// Constructors:Predicate:payments_savedInfo
type TLpayments_savedInfo struct {
	data *payments_SavedInfo_Data
}

// Constructors:New:payments_savedInfo
func NewTLpayments_savedInfo() *TLpayments_savedInfo {
	return &TLpayments_savedInfo{data: &payments_SavedInfo_Data{}}
}
func (m *TLpayments_savedInfo) Sethas_saved_credentials(v bool)       { m.data.has_saved_credentials = v }
func (m *TLpayments_savedInfo) Gethas_saved_credentials() bool        { return m.data.has_saved_credentials }
func (m *TLpayments_savedInfo) Setsaved_info(v *PaymentRequestedInfo) { m.data.saved_info = v }
func (m *TLpayments_savedInfo) Getsaved_info() *PaymentRequestedInfo  { return m.data.saved_info }

///////////////////////////////////////////////////////////////////////////////
// Constructors:Game
// Game <--
// + TLgame
//
// Constructors:Type:Game
type Game struct {
	constructor int32
	data        *Game_Data
}

// Constructors:Type:Data:Game
type Game_Data struct {
	id          int64
	access_hash int64
	short_name  string
	title       string
	description string
	photo       *Photo
	document    *Document
}

// Constructors:Predicate:game
type TLgame struct {
	data *Game_Data
}

// Constructors:New:game
func NewTLgame() *TLgame {
	return &TLgame{data: &Game_Data{}}
}
func (m *TLgame) Setid(v int64)           { m.data.id = v }
func (m *TLgame) Getid() int64            { return m.data.id }
func (m *TLgame) Setaccess_hash(v int64)  { m.data.access_hash = v }
func (m *TLgame) Getaccess_hash() int64   { return m.data.access_hash }
func (m *TLgame) Setshort_name(v string)  { m.data.short_name = v }
func (m *TLgame) Getshort_name() string   { return m.data.short_name }
func (m *TLgame) Settitle(v string)       { m.data.title = v }
func (m *TLgame) Gettitle() string        { return m.data.title }
func (m *TLgame) Setdescription(v string) { m.data.description = v }
func (m *TLgame) Getdescription() string  { return m.data.description }
func (m *TLgame) Setphoto(v *Photo)       { m.data.photo = v }
func (m *TLgame) Getphoto() *Photo        { return m.data.photo }
func (m *TLgame) Setdocument(v *Document) { m.data.document = v }
func (m *TLgame) Getdocument() *Document  { return m.data.document }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputThemeSettings
// InputThemeSettings <--
// + TLinputThemeSettings
//
// Constructors:Type:InputThemeSettings
type InputThemeSettings struct {
	constructor int32
	data        *InputThemeSettings_Data
}

// Constructors:Type:Data:InputThemeSettings
type InputThemeSettings_Data struct {
	base_theme           *BaseTheme
	accent_color         int32
	message_top_color    int32
	message_bottom_color int32
	wallpaper            *InputWallPaper
	wallpaper_settings   *WallPaperSettings
}

// Constructors:Predicate:inputThemeSettings
type TLinputThemeSettings struct {
	data *InputThemeSettings_Data
}

// Constructors:New:inputThemeSettings
func NewTLinputThemeSettings() *TLinputThemeSettings {
	return &TLinputThemeSettings{data: &InputThemeSettings_Data{}}
}
func (m *TLinputThemeSettings) Setbase_theme(v *BaseTheme)      { m.data.base_theme = v }
func (m *TLinputThemeSettings) Getbase_theme() *BaseTheme       { return m.data.base_theme }
func (m *TLinputThemeSettings) Setaccent_color(v int32)         { m.data.accent_color = v }
func (m *TLinputThemeSettings) Getaccent_color() int32          { return m.data.accent_color }
func (m *TLinputThemeSettings) Setmessage_top_color(v int32)    { m.data.message_top_color = v }
func (m *TLinputThemeSettings) Getmessage_top_color() int32     { return m.data.message_top_color }
func (m *TLinputThemeSettings) Setmessage_bottom_color(v int32) { m.data.message_bottom_color = v }
func (m *TLinputThemeSettings) Getmessage_bottom_color() int32  { return m.data.message_bottom_color }
func (m *TLinputThemeSettings) Setwallpaper(v *InputWallPaper)  { m.data.wallpaper = v }
func (m *TLinputThemeSettings) Getwallpaper() *InputWallPaper   { return m.data.wallpaper }
func (m *TLinputThemeSettings) Setwallpaper_settings(v *WallPaperSettings) {
	m.data.wallpaper_settings = v
}
func (m *TLinputThemeSettings) Getwallpaper_settings() *WallPaperSettings {
	return m.data.wallpaper_settings
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:EmojiKeyword
// EmojiKeyword <--
// + TLemojiKeyword
// + TLemojiKeywordDeleted
//
// Constructors:Type:EmojiKeyword
type EmojiKeyword struct {
	constructor int32
	data        *EmojiKeyword_Data
}

// Constructors:Type:Data:EmojiKeyword
type EmojiKeyword_Data struct {
	keyword   string
	emoticons []string
}

// Constructors:Predicate:emojiKeyword
type TLemojiKeyword struct {
	data *EmojiKeyword_Data
}

// Constructors:New:emojiKeyword
func NewTLemojiKeyword() *TLemojiKeyword {
	return &TLemojiKeyword{data: &EmojiKeyword_Data{}}
}

// Constructors:Predicate:emojiKeywordDeleted
type TLemojiKeywordDeleted struct {
	data *EmojiKeyword_Data
}

// Constructors:New:emojiKeywordDeleted
func NewTLemojiKeywordDeleted() *TLemojiKeywordDeleted {
	return &TLemojiKeywordDeleted{data: &EmojiKeyword_Data{}}
}
func (m *TLemojiKeyword) Setkeyword(v string)            { m.data.keyword = v }
func (m *TLemojiKeyword) Getkeyword() string             { return m.data.keyword }
func (m *TLemojiKeyword) Setemoticons(v []string)        { m.data.emoticons = v }
func (m *TLemojiKeyword) Getemoticons() []string         { return m.data.emoticons }
func (m *TLemojiKeywordDeleted) Setkeyword(v string)     { m.data.keyword = v }
func (m *TLemojiKeywordDeleted) Getkeyword() string      { return m.data.keyword }
func (m *TLemojiKeywordDeleted) Setemoticons(v []string) { m.data.emoticons = v }
func (m *TLemojiKeywordDeleted) Getemoticons() []string  { return m.data.emoticons }

///////////////////////////////////////////////////////////////////////////////
// Constructors:auth_SentCode
// auth_SentCode <--
// + TLauth_sentCode
//
// Constructors:Type:auth_SentCode
type auth_SentCode struct {
	constructor int32
	data        *auth_SentCode_Data
}

// Constructors:Type:Data:auth_SentCode
type auth_SentCode_Data struct {
	type_key        *auth_SentCodeType
	phone_code_hash string
	next_type       *auth_CodeType
	timeout         int32
}

// Constructors:Predicate:auth_sentCode
type TLauth_sentCode struct {
	data *auth_SentCode_Data
}

// Constructors:New:auth_sentCode
func NewTLauth_sentCode() *TLauth_sentCode {
	return &TLauth_sentCode{data: &auth_SentCode_Data{}}
}
func (m *TLauth_sentCode) Settype_key(v *auth_SentCodeType) { m.data.type_key = v }
func (m *TLauth_sentCode) Gettype_key() *auth_SentCodeType  { return m.data.type_key }
func (m *TLauth_sentCode) Setphone_code_hash(v string)      { m.data.phone_code_hash = v }
func (m *TLauth_sentCode) Getphone_code_hash() string       { return m.data.phone_code_hash }
func (m *TLauth_sentCode) Setnext_type(v *auth_CodeType)    { m.data.next_type = v }
func (m *TLauth_sentCode) Getnext_type() *auth_CodeType     { return m.data.next_type }
func (m *TLauth_sentCode) Settimeout(v int32)               { m.data.timeout = v }
func (m *TLauth_sentCode) Gettimeout() int32                { return m.data.timeout }

///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageAction
// MessageAction <--
// + TLmessageActionEmpty
// + TLmessageActionChatCreate
// + TLmessageActionChatEditTitle
// + TLmessageActionChatEditPhoto
// + TLmessageActionChatDeletePhoto
// + TLmessageActionChatAddUser
// + TLmessageActionChatDeleteUser
// + TLmessageActionChatJoinedByLink
// + TLmessageActionChannelCreate
// + TLmessageActionChatMigrateTo
// + TLmessageActionChannelMigrateFrom
// + TLmessageActionPinMessage
// + TLmessageActionHistoryClear
// + TLmessageActionGameScore
// + TLmessageActionPaymentSentMe
// + TLmessageActionPaymentSent
// + TLmessageActionPhoneCall
// + TLmessageActionScreenshotTaken
// + TLmessageActionCustomAction
// + TLmessageActionBotAllowed
// + TLmessageActionSecureValuesSentMe
// + TLmessageActionSecureValuesSent
// + TLmessageActionContactSignUp
// + TLmessageActionGeoProximityReached
//
// Constructors:Type:MessageAction
type MessageAction struct {
	constructor int32
	data        *MessageAction_Data
}

// Constructors:Type:Data:MessageAction
type MessageAction_Data struct {
	title              string
	users              []int32
	photo              *Photo
	user_id            int32
	inviter_id         int32
	channel_id         int32
	chat_id            int32
	game_id            int64
	score              int32
	currency           string
	total_amount       int64
	payload            []byte
	info               *PaymentRequestedInfo
	shipping_option_id string
	charge             *PaymentCharge
	video              bool
	call_id            int64
	reason             *PhoneCallDiscardReason
	duration           int32
	message            string
	domain             string
	values             []*SecureValue
	credentials        *SecureCredentialsEncrypted
	types              []*SecureValueType
	from_id            *Peer
	to_id              *Peer
	distance           int32
}

// Constructors:Predicate:messageActionEmpty
type TLmessageActionEmpty struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionEmpty
func NewTLmessageActionEmpty() *TLmessageActionEmpty {
	return &TLmessageActionEmpty{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionChatCreate
type TLmessageActionChatCreate struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionChatCreate
func NewTLmessageActionChatCreate() *TLmessageActionChatCreate {
	return &TLmessageActionChatCreate{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionChatEditTitle
type TLmessageActionChatEditTitle struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionChatEditTitle
func NewTLmessageActionChatEditTitle() *TLmessageActionChatEditTitle {
	return &TLmessageActionChatEditTitle{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionChatEditPhoto
type TLmessageActionChatEditPhoto struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionChatEditPhoto
func NewTLmessageActionChatEditPhoto() *TLmessageActionChatEditPhoto {
	return &TLmessageActionChatEditPhoto{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionChatDeletePhoto
type TLmessageActionChatDeletePhoto struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionChatDeletePhoto
func NewTLmessageActionChatDeletePhoto() *TLmessageActionChatDeletePhoto {
	return &TLmessageActionChatDeletePhoto{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionChatAddUser
type TLmessageActionChatAddUser struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionChatAddUser
func NewTLmessageActionChatAddUser() *TLmessageActionChatAddUser {
	return &TLmessageActionChatAddUser{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionChatDeleteUser
type TLmessageActionChatDeleteUser struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionChatDeleteUser
func NewTLmessageActionChatDeleteUser() *TLmessageActionChatDeleteUser {
	return &TLmessageActionChatDeleteUser{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionChatJoinedByLink
type TLmessageActionChatJoinedByLink struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionChatJoinedByLink
func NewTLmessageActionChatJoinedByLink() *TLmessageActionChatJoinedByLink {
	return &TLmessageActionChatJoinedByLink{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionChannelCreate
type TLmessageActionChannelCreate struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionChannelCreate
func NewTLmessageActionChannelCreate() *TLmessageActionChannelCreate {
	return &TLmessageActionChannelCreate{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionChatMigrateTo
type TLmessageActionChatMigrateTo struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionChatMigrateTo
func NewTLmessageActionChatMigrateTo() *TLmessageActionChatMigrateTo {
	return &TLmessageActionChatMigrateTo{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionChannelMigrateFrom
type TLmessageActionChannelMigrateFrom struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionChannelMigrateFrom
func NewTLmessageActionChannelMigrateFrom() *TLmessageActionChannelMigrateFrom {
	return &TLmessageActionChannelMigrateFrom{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionPinMessage
type TLmessageActionPinMessage struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionPinMessage
func NewTLmessageActionPinMessage() *TLmessageActionPinMessage {
	return &TLmessageActionPinMessage{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionHistoryClear
type TLmessageActionHistoryClear struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionHistoryClear
func NewTLmessageActionHistoryClear() *TLmessageActionHistoryClear {
	return &TLmessageActionHistoryClear{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionGameScore
type TLmessageActionGameScore struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionGameScore
func NewTLmessageActionGameScore() *TLmessageActionGameScore {
	return &TLmessageActionGameScore{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionPaymentSentMe
type TLmessageActionPaymentSentMe struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionPaymentSentMe
func NewTLmessageActionPaymentSentMe() *TLmessageActionPaymentSentMe {
	return &TLmessageActionPaymentSentMe{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionPaymentSent
type TLmessageActionPaymentSent struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionPaymentSent
func NewTLmessageActionPaymentSent() *TLmessageActionPaymentSent {
	return &TLmessageActionPaymentSent{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionPhoneCall
type TLmessageActionPhoneCall struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionPhoneCall
func NewTLmessageActionPhoneCall() *TLmessageActionPhoneCall {
	return &TLmessageActionPhoneCall{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionScreenshotTaken
type TLmessageActionScreenshotTaken struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionScreenshotTaken
func NewTLmessageActionScreenshotTaken() *TLmessageActionScreenshotTaken {
	return &TLmessageActionScreenshotTaken{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionCustomAction
type TLmessageActionCustomAction struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionCustomAction
func NewTLmessageActionCustomAction() *TLmessageActionCustomAction {
	return &TLmessageActionCustomAction{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionBotAllowed
type TLmessageActionBotAllowed struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionBotAllowed
func NewTLmessageActionBotAllowed() *TLmessageActionBotAllowed {
	return &TLmessageActionBotAllowed{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionSecureValuesSentMe
type TLmessageActionSecureValuesSentMe struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionSecureValuesSentMe
func NewTLmessageActionSecureValuesSentMe() *TLmessageActionSecureValuesSentMe {
	return &TLmessageActionSecureValuesSentMe{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionSecureValuesSent
type TLmessageActionSecureValuesSent struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionSecureValuesSent
func NewTLmessageActionSecureValuesSent() *TLmessageActionSecureValuesSent {
	return &TLmessageActionSecureValuesSent{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionContactSignUp
type TLmessageActionContactSignUp struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionContactSignUp
func NewTLmessageActionContactSignUp() *TLmessageActionContactSignUp {
	return &TLmessageActionContactSignUp{data: &MessageAction_Data{}}
}

// Constructors:Predicate:messageActionGeoProximityReached
type TLmessageActionGeoProximityReached struct {
	data *MessageAction_Data
}

// Constructors:New:messageActionGeoProximityReached
func NewTLmessageActionGeoProximityReached() *TLmessageActionGeoProximityReached {
	return &TLmessageActionGeoProximityReached{data: &MessageAction_Data{}}
}
func (m *TLmessageActionChatCreate) Settitle(v string)                  { m.data.title = v }
func (m *TLmessageActionChatCreate) Gettitle() string                   { return m.data.title }
func (m *TLmessageActionChatCreate) Setusers(v []int32)                 { m.data.users = v }
func (m *TLmessageActionChatCreate) Getusers() []int32                  { return m.data.users }
func (m *TLmessageActionChatEditTitle) Settitle(v string)               { m.data.title = v }
func (m *TLmessageActionChatEditTitle) Gettitle() string                { return m.data.title }
func (m *TLmessageActionChatEditPhoto) Setphoto(v *Photo)               { m.data.photo = v }
func (m *TLmessageActionChatEditPhoto) Getphoto() *Photo                { return m.data.photo }
func (m *TLmessageActionChatAddUser) Setusers(v []int32)                { m.data.users = v }
func (m *TLmessageActionChatAddUser) Getusers() []int32                 { return m.data.users }
func (m *TLmessageActionChatDeleteUser) Setuser_id(v int32)             { m.data.user_id = v }
func (m *TLmessageActionChatDeleteUser) Getuser_id() int32              { return m.data.user_id }
func (m *TLmessageActionChatJoinedByLink) Setinviter_id(v int32)        { m.data.inviter_id = v }
func (m *TLmessageActionChatJoinedByLink) Getinviter_id() int32         { return m.data.inviter_id }
func (m *TLmessageActionChannelCreate) Settitle(v string)               { m.data.title = v }
func (m *TLmessageActionChannelCreate) Gettitle() string                { return m.data.title }
func (m *TLmessageActionChatMigrateTo) Setchannel_id(v int32)           { m.data.channel_id = v }
func (m *TLmessageActionChatMigrateTo) Getchannel_id() int32            { return m.data.channel_id }
func (m *TLmessageActionChannelMigrateFrom) Settitle(v string)          { m.data.title = v }
func (m *TLmessageActionChannelMigrateFrom) Gettitle() string           { return m.data.title }
func (m *TLmessageActionChannelMigrateFrom) Setchat_id(v int32)         { m.data.chat_id = v }
func (m *TLmessageActionChannelMigrateFrom) Getchat_id() int32          { return m.data.chat_id }
func (m *TLmessageActionGameScore) Setgame_id(v int64)                  { m.data.game_id = v }
func (m *TLmessageActionGameScore) Getgame_id() int64                   { return m.data.game_id }
func (m *TLmessageActionGameScore) Setscore(v int32)                    { m.data.score = v }
func (m *TLmessageActionGameScore) Getscore() int32                     { return m.data.score }
func (m *TLmessageActionPaymentSentMe) Setcurrency(v string)            { m.data.currency = v }
func (m *TLmessageActionPaymentSentMe) Getcurrency() string             { return m.data.currency }
func (m *TLmessageActionPaymentSentMe) Settotal_amount(v int64)         { m.data.total_amount = v }
func (m *TLmessageActionPaymentSentMe) Gettotal_amount() int64          { return m.data.total_amount }
func (m *TLmessageActionPaymentSentMe) Setpayload(v []byte)             { m.data.payload = v }
func (m *TLmessageActionPaymentSentMe) Getpayload() []byte              { return m.data.payload }
func (m *TLmessageActionPaymentSentMe) Setinfo(v *PaymentRequestedInfo) { m.data.info = v }
func (m *TLmessageActionPaymentSentMe) Getinfo() *PaymentRequestedInfo  { return m.data.info }
func (m *TLmessageActionPaymentSentMe) Setshipping_option_id(v string)  { m.data.shipping_option_id = v }
func (m *TLmessageActionPaymentSentMe) Getshipping_option_id() string {
	return m.data.shipping_option_id
}
func (m *TLmessageActionPaymentSentMe) Setcharge(v *PaymentCharge)      { m.data.charge = v }
func (m *TLmessageActionPaymentSentMe) Getcharge() *PaymentCharge       { return m.data.charge }
func (m *TLmessageActionPaymentSent) Setcurrency(v string)              { m.data.currency = v }
func (m *TLmessageActionPaymentSent) Getcurrency() string               { return m.data.currency }
func (m *TLmessageActionPaymentSent) Settotal_amount(v int64)           { m.data.total_amount = v }
func (m *TLmessageActionPaymentSent) Gettotal_amount() int64            { return m.data.total_amount }
func (m *TLmessageActionPhoneCall) Setvideo(v bool)                     { m.data.video = v }
func (m *TLmessageActionPhoneCall) Getvideo() bool                      { return m.data.video }
func (m *TLmessageActionPhoneCall) Setcall_id(v int64)                  { m.data.call_id = v }
func (m *TLmessageActionPhoneCall) Getcall_id() int64                   { return m.data.call_id }
func (m *TLmessageActionPhoneCall) Setreason(v *PhoneCallDiscardReason) { m.data.reason = v }
func (m *TLmessageActionPhoneCall) Getreason() *PhoneCallDiscardReason  { return m.data.reason }
func (m *TLmessageActionPhoneCall) Setduration(v int32)                 { m.data.duration = v }
func (m *TLmessageActionPhoneCall) Getduration() int32                  { return m.data.duration }
func (m *TLmessageActionCustomAction) Setmessage(v string)              { m.data.message = v }
func (m *TLmessageActionCustomAction) Getmessage() string               { return m.data.message }
func (m *TLmessageActionBotAllowed) Setdomain(v string)                 { m.data.domain = v }
func (m *TLmessageActionBotAllowed) Getdomain() string                  { return m.data.domain }
func (m *TLmessageActionSecureValuesSentMe) Setvalues(v []*SecureValue) { m.data.values = v }
func (m *TLmessageActionSecureValuesSentMe) Getvalues() []*SecureValue  { return m.data.values }
func (m *TLmessageActionSecureValuesSentMe) Setcredentials(v *SecureCredentialsEncrypted) {
	m.data.credentials = v
}
func (m *TLmessageActionSecureValuesSentMe) Getcredentials() *SecureCredentialsEncrypted {
	return m.data.credentials
}
func (m *TLmessageActionSecureValuesSent) Settypes(v []*SecureValueType) { m.data.types = v }
func (m *TLmessageActionSecureValuesSent) Gettypes() []*SecureValueType  { return m.data.types }
func (m *TLmessageActionGeoProximityReached) Setfrom_id(v *Peer)         { m.data.from_id = v }
func (m *TLmessageActionGeoProximityReached) Getfrom_id() *Peer          { return m.data.from_id }
func (m *TLmessageActionGeoProximityReached) Setto_id(v *Peer)           { m.data.to_id = v }
func (m *TLmessageActionGeoProximityReached) Getto_id() *Peer            { return m.data.to_id }
func (m *TLmessageActionGeoProximityReached) Setdistance(v int32)        { m.data.distance = v }
func (m *TLmessageActionGeoProximityReached) Getdistance() int32         { return m.data.distance }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PrivacyRule
// PrivacyRule <--
// + TLprivacyValueAllowContacts
// + TLprivacyValueAllowAll
// + TLprivacyValueAllowUsers
// + TLprivacyValueDisallowContacts
// + TLprivacyValueDisallowAll
// + TLprivacyValueDisallowUsers
// + TLprivacyValueAllowChatParticipants
// + TLprivacyValueDisallowChatParticipants
//
// Constructors:Type:PrivacyRule
type PrivacyRule struct {
	constructor int32
	data        *PrivacyRule_Data
}

// Constructors:Type:Data:PrivacyRule
type PrivacyRule_Data struct {
	users []int32
	chats []int32
}

// Constructors:Predicate:privacyValueAllowContacts
type TLprivacyValueAllowContacts struct {
	data *PrivacyRule_Data
}

// Constructors:New:privacyValueAllowContacts
func NewTLprivacyValueAllowContacts() *TLprivacyValueAllowContacts {
	return &TLprivacyValueAllowContacts{data: &PrivacyRule_Data{}}
}

// Constructors:Predicate:privacyValueAllowAll
type TLprivacyValueAllowAll struct {
	data *PrivacyRule_Data
}

// Constructors:New:privacyValueAllowAll
func NewTLprivacyValueAllowAll() *TLprivacyValueAllowAll {
	return &TLprivacyValueAllowAll{data: &PrivacyRule_Data{}}
}

// Constructors:Predicate:privacyValueAllowUsers
type TLprivacyValueAllowUsers struct {
	data *PrivacyRule_Data
}

// Constructors:New:privacyValueAllowUsers
func NewTLprivacyValueAllowUsers() *TLprivacyValueAllowUsers {
	return &TLprivacyValueAllowUsers{data: &PrivacyRule_Data{}}
}

// Constructors:Predicate:privacyValueDisallowContacts
type TLprivacyValueDisallowContacts struct {
	data *PrivacyRule_Data
}

// Constructors:New:privacyValueDisallowContacts
func NewTLprivacyValueDisallowContacts() *TLprivacyValueDisallowContacts {
	return &TLprivacyValueDisallowContacts{data: &PrivacyRule_Data{}}
}

// Constructors:Predicate:privacyValueDisallowAll
type TLprivacyValueDisallowAll struct {
	data *PrivacyRule_Data
}

// Constructors:New:privacyValueDisallowAll
func NewTLprivacyValueDisallowAll() *TLprivacyValueDisallowAll {
	return &TLprivacyValueDisallowAll{data: &PrivacyRule_Data{}}
}

// Constructors:Predicate:privacyValueDisallowUsers
type TLprivacyValueDisallowUsers struct {
	data *PrivacyRule_Data
}

// Constructors:New:privacyValueDisallowUsers
func NewTLprivacyValueDisallowUsers() *TLprivacyValueDisallowUsers {
	return &TLprivacyValueDisallowUsers{data: &PrivacyRule_Data{}}
}

// Constructors:Predicate:privacyValueAllowChatParticipants
type TLprivacyValueAllowChatParticipants struct {
	data *PrivacyRule_Data
}

// Constructors:New:privacyValueAllowChatParticipants
func NewTLprivacyValueAllowChatParticipants() *TLprivacyValueAllowChatParticipants {
	return &TLprivacyValueAllowChatParticipants{data: &PrivacyRule_Data{}}
}

// Constructors:Predicate:privacyValueDisallowChatParticipants
type TLprivacyValueDisallowChatParticipants struct {
	data *PrivacyRule_Data
}

// Constructors:New:privacyValueDisallowChatParticipants
func NewTLprivacyValueDisallowChatParticipants() *TLprivacyValueDisallowChatParticipants {
	return &TLprivacyValueDisallowChatParticipants{data: &PrivacyRule_Data{}}
}
func (m *TLprivacyValueAllowUsers) Setusers(v []int32)               { m.data.users = v }
func (m *TLprivacyValueAllowUsers) Getusers() []int32                { return m.data.users }
func (m *TLprivacyValueDisallowUsers) Setusers(v []int32)            { m.data.users = v }
func (m *TLprivacyValueDisallowUsers) Getusers() []int32             { return m.data.users }
func (m *TLprivacyValueAllowChatParticipants) Setchats(v []int32)    { m.data.chats = v }
func (m *TLprivacyValueAllowChatParticipants) Getchats() []int32     { return m.data.chats }
func (m *TLprivacyValueDisallowChatParticipants) Setchats(v []int32) { m.data.chats = v }
func (m *TLprivacyValueDisallowChatParticipants) Getchats() []int32  { return m.data.chats }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_Messages
// messages_Messages <--
// + TLmessages_messages
// + TLmessages_messagesSlice
// + TLmessages_channelMessages
// + TLmessages_messagesNotModified
//
// Constructors:Type:messages_Messages
type messages_Messages struct {
	constructor int32
	data        *messages_Messages_Data
}

// Constructors:Type:Data:messages_Messages
type messages_Messages_Data struct {
	messages         []*Message
	chats            []*Chat
	users            []*User
	inexact          bool
	count            int32
	next_rate        int32
	offset_id_offset int32
	pts              int32
}

// Constructors:Predicate:messages_messages
type TLmessages_messages struct {
	data *messages_Messages_Data
}

// Constructors:New:messages_messages
func NewTLmessages_messages() *TLmessages_messages {
	return &TLmessages_messages{data: &messages_Messages_Data{}}
}

// Constructors:Predicate:messages_messagesSlice
type TLmessages_messagesSlice struct {
	data *messages_Messages_Data
}

// Constructors:New:messages_messagesSlice
func NewTLmessages_messagesSlice() *TLmessages_messagesSlice {
	return &TLmessages_messagesSlice{data: &messages_Messages_Data{}}
}

// Constructors:Predicate:messages_channelMessages
type TLmessages_channelMessages struct {
	data *messages_Messages_Data
}

// Constructors:New:messages_channelMessages
func NewTLmessages_channelMessages() *TLmessages_channelMessages {
	return &TLmessages_channelMessages{data: &messages_Messages_Data{}}
}

// Constructors:Predicate:messages_messagesNotModified
type TLmessages_messagesNotModified struct {
	data *messages_Messages_Data
}

// Constructors:New:messages_messagesNotModified
func NewTLmessages_messagesNotModified() *TLmessages_messagesNotModified {
	return &TLmessages_messagesNotModified{data: &messages_Messages_Data{}}
}
func (m *TLmessages_messages) Setmessages(v []*Message)           { m.data.messages = v }
func (m *TLmessages_messages) Getmessages() []*Message            { return m.data.messages }
func (m *TLmessages_messages) Setchats(v []*Chat)                 { m.data.chats = v }
func (m *TLmessages_messages) Getchats() []*Chat                  { return m.data.chats }
func (m *TLmessages_messages) Setusers(v []*User)                 { m.data.users = v }
func (m *TLmessages_messages) Getusers() []*User                  { return m.data.users }
func (m *TLmessages_messagesSlice) Setinexact(v bool)             { m.data.inexact = v }
func (m *TLmessages_messagesSlice) Getinexact() bool              { return m.data.inexact }
func (m *TLmessages_messagesSlice) Setcount(v int32)              { m.data.count = v }
func (m *TLmessages_messagesSlice) Getcount() int32               { return m.data.count }
func (m *TLmessages_messagesSlice) Setnext_rate(v int32)          { m.data.next_rate = v }
func (m *TLmessages_messagesSlice) Getnext_rate() int32           { return m.data.next_rate }
func (m *TLmessages_messagesSlice) Setoffset_id_offset(v int32)   { m.data.offset_id_offset = v }
func (m *TLmessages_messagesSlice) Getoffset_id_offset() int32    { return m.data.offset_id_offset }
func (m *TLmessages_messagesSlice) Setmessages(v []*Message)      { m.data.messages = v }
func (m *TLmessages_messagesSlice) Getmessages() []*Message       { return m.data.messages }
func (m *TLmessages_messagesSlice) Setchats(v []*Chat)            { m.data.chats = v }
func (m *TLmessages_messagesSlice) Getchats() []*Chat             { return m.data.chats }
func (m *TLmessages_messagesSlice) Setusers(v []*User)            { m.data.users = v }
func (m *TLmessages_messagesSlice) Getusers() []*User             { return m.data.users }
func (m *TLmessages_channelMessages) Setinexact(v bool)           { m.data.inexact = v }
func (m *TLmessages_channelMessages) Getinexact() bool            { return m.data.inexact }
func (m *TLmessages_channelMessages) Setpts(v int32)              { m.data.pts = v }
func (m *TLmessages_channelMessages) Getpts() int32               { return m.data.pts }
func (m *TLmessages_channelMessages) Setcount(v int32)            { m.data.count = v }
func (m *TLmessages_channelMessages) Getcount() int32             { return m.data.count }
func (m *TLmessages_channelMessages) Setoffset_id_offset(v int32) { m.data.offset_id_offset = v }
func (m *TLmessages_channelMessages) Getoffset_id_offset() int32  { return m.data.offset_id_offset }
func (m *TLmessages_channelMessages) Setmessages(v []*Message)    { m.data.messages = v }
func (m *TLmessages_channelMessages) Getmessages() []*Message     { return m.data.messages }
func (m *TLmessages_channelMessages) Setchats(v []*Chat)          { m.data.chats = v }
func (m *TLmessages_channelMessages) Getchats() []*Chat           { return m.data.chats }
func (m *TLmessages_channelMessages) Setusers(v []*User)          { m.data.users = v }
func (m *TLmessages_channelMessages) Getusers() []*User           { return m.data.users }
func (m *TLmessages_messagesNotModified) Setcount(v int32)        { m.data.count = v }
func (m *TLmessages_messagesNotModified) Getcount() int32         { return m.data.count }

///////////////////////////////////////////////////////////////////////////////
// Constructors:EncryptedChat
// EncryptedChat <--
// + TLencryptedChatEmpty
// + TLencryptedChatWaiting
// + TLencryptedChatRequested
// + TLencryptedChat
// + TLencryptedChatDiscarded
//
// Constructors:Type:EncryptedChat
type EncryptedChat struct {
	constructor int32
	data        *EncryptedChat_Data
}

// Constructors:Type:Data:EncryptedChat
type EncryptedChat_Data struct {
	id              int32
	access_hash     int64
	date            int32
	admin_id        int32
	participant_id  int32
	folder_id       int32
	g_a             []byte
	g_a_or_b        []byte
	key_fingerprint int64
}

// Constructors:Predicate:encryptedChatEmpty
type TLencryptedChatEmpty struct {
	data *EncryptedChat_Data
}

// Constructors:New:encryptedChatEmpty
func NewTLencryptedChatEmpty() *TLencryptedChatEmpty {
	return &TLencryptedChatEmpty{data: &EncryptedChat_Data{}}
}

// Constructors:Predicate:encryptedChatWaiting
type TLencryptedChatWaiting struct {
	data *EncryptedChat_Data
}

// Constructors:New:encryptedChatWaiting
func NewTLencryptedChatWaiting() *TLencryptedChatWaiting {
	return &TLencryptedChatWaiting{data: &EncryptedChat_Data{}}
}

// Constructors:Predicate:encryptedChatRequested
type TLencryptedChatRequested struct {
	data *EncryptedChat_Data
}

// Constructors:New:encryptedChatRequested
func NewTLencryptedChatRequested() *TLencryptedChatRequested {
	return &TLencryptedChatRequested{data: &EncryptedChat_Data{}}
}

// Constructors:Predicate:encryptedChat
type TLencryptedChat struct {
	data *EncryptedChat_Data
}

// Constructors:New:encryptedChat
func NewTLencryptedChat() *TLencryptedChat {
	return &TLencryptedChat{data: &EncryptedChat_Data{}}
}

// Constructors:Predicate:encryptedChatDiscarded
type TLencryptedChatDiscarded struct {
	data *EncryptedChat_Data
}

// Constructors:New:encryptedChatDiscarded
func NewTLencryptedChatDiscarded() *TLencryptedChatDiscarded {
	return &TLencryptedChatDiscarded{data: &EncryptedChat_Data{}}
}
func (m *TLencryptedChatEmpty) Setid(v int32)                 { m.data.id = v }
func (m *TLencryptedChatEmpty) Getid() int32                  { return m.data.id }
func (m *TLencryptedChatWaiting) Setid(v int32)               { m.data.id = v }
func (m *TLencryptedChatWaiting) Getid() int32                { return m.data.id }
func (m *TLencryptedChatWaiting) Setaccess_hash(v int64)      { m.data.access_hash = v }
func (m *TLencryptedChatWaiting) Getaccess_hash() int64       { return m.data.access_hash }
func (m *TLencryptedChatWaiting) Setdate(v int32)             { m.data.date = v }
func (m *TLencryptedChatWaiting) Getdate() int32              { return m.data.date }
func (m *TLencryptedChatWaiting) Setadmin_id(v int32)         { m.data.admin_id = v }
func (m *TLencryptedChatWaiting) Getadmin_id() int32          { return m.data.admin_id }
func (m *TLencryptedChatWaiting) Setparticipant_id(v int32)   { m.data.participant_id = v }
func (m *TLencryptedChatWaiting) Getparticipant_id() int32    { return m.data.participant_id }
func (m *TLencryptedChatRequested) Setfolder_id(v int32)      { m.data.folder_id = v }
func (m *TLencryptedChatRequested) Getfolder_id() int32       { return m.data.folder_id }
func (m *TLencryptedChatRequested) Setid(v int32)             { m.data.id = v }
func (m *TLencryptedChatRequested) Getid() int32              { return m.data.id }
func (m *TLencryptedChatRequested) Setaccess_hash(v int64)    { m.data.access_hash = v }
func (m *TLencryptedChatRequested) Getaccess_hash() int64     { return m.data.access_hash }
func (m *TLencryptedChatRequested) Setdate(v int32)           { m.data.date = v }
func (m *TLencryptedChatRequested) Getdate() int32            { return m.data.date }
func (m *TLencryptedChatRequested) Setadmin_id(v int32)       { m.data.admin_id = v }
func (m *TLencryptedChatRequested) Getadmin_id() int32        { return m.data.admin_id }
func (m *TLencryptedChatRequested) Setparticipant_id(v int32) { m.data.participant_id = v }
func (m *TLencryptedChatRequested) Getparticipant_id() int32  { return m.data.participant_id }
func (m *TLencryptedChatRequested) Setg_a(v []byte)           { m.data.g_a = v }
func (m *TLencryptedChatRequested) Getg_a() []byte            { return m.data.g_a }
func (m *TLencryptedChat) Setid(v int32)                      { m.data.id = v }
func (m *TLencryptedChat) Getid() int32                       { return m.data.id }
func (m *TLencryptedChat) Setaccess_hash(v int64)             { m.data.access_hash = v }
func (m *TLencryptedChat) Getaccess_hash() int64              { return m.data.access_hash }
func (m *TLencryptedChat) Setdate(v int32)                    { m.data.date = v }
func (m *TLencryptedChat) Getdate() int32                     { return m.data.date }
func (m *TLencryptedChat) Setadmin_id(v int32)                { m.data.admin_id = v }
func (m *TLencryptedChat) Getadmin_id() int32                 { return m.data.admin_id }
func (m *TLencryptedChat) Setparticipant_id(v int32)          { m.data.participant_id = v }
func (m *TLencryptedChat) Getparticipant_id() int32           { return m.data.participant_id }
func (m *TLencryptedChat) Setg_a_or_b(v []byte)               { m.data.g_a_or_b = v }
func (m *TLencryptedChat) Getg_a_or_b() []byte                { return m.data.g_a_or_b }
func (m *TLencryptedChat) Setkey_fingerprint(v int64)         { m.data.key_fingerprint = v }
func (m *TLencryptedChat) Getkey_fingerprint() int64          { return m.data.key_fingerprint }
func (m *TLencryptedChatDiscarded) Setid(v int32)             { m.data.id = v }
func (m *TLencryptedChatDiscarded) Getid() int32              { return m.data.id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:VideoSize
// VideoSize <--
// + TLvideoSize
//
// Constructors:Type:VideoSize
type VideoSize struct {
	constructor int32
	data        *VideoSize_Data
}

// Constructors:Type:Data:VideoSize
type VideoSize_Data struct {
	type_key       string
	location       *FileLocation
	w              int32
	h              int32
	size           int32
	video_start_ts float64
}

// Constructors:Predicate:videoSize
type TLvideoSize struct {
	data *VideoSize_Data
}

// Constructors:New:videoSize
func NewTLvideoSize() *TLvideoSize {
	return &TLvideoSize{data: &VideoSize_Data{}}
}
func (m *TLvideoSize) Settype_key(v string)        { m.data.type_key = v }
func (m *TLvideoSize) Gettype_key() string         { return m.data.type_key }
func (m *TLvideoSize) Setlocation(v *FileLocation) { m.data.location = v }
func (m *TLvideoSize) Getlocation() *FileLocation  { return m.data.location }
func (m *TLvideoSize) Setw(v int32)                { m.data.w = v }
func (m *TLvideoSize) Getw() int32                 { return m.data.w }
func (m *TLvideoSize) Seth(v int32)                { m.data.h = v }
func (m *TLvideoSize) Geth() int32                 { return m.data.h }
func (m *TLvideoSize) Setsize(v int32)             { m.data.size = v }
func (m *TLvideoSize) Getsize() int32              { return m.data.size }
func (m *TLvideoSize) Setvideo_start_ts(v float64) { m.data.video_start_ts = v }
func (m *TLvideoSize) Getvideo_start_ts() float64  { return m.data.video_start_ts }

///////////////////////////////////////////////////////////////////////////////
// Constructors:Updates
// Updates <--
// + TLupdatesTooLong
// + TLupdateShortMessage
// + TLupdateShortChatMessage
// + TLupdateShort
// + TLupdatesCombined
// + TLupdates
// + TLupdateShortSentMessage
//
// Constructors:Type:Updates
type Updates struct {
	constructor int32
	data        *Updates_Data
}

// Constructors:Type:Data:Updates
type Updates_Data struct {
	out          bool
	mentioned    bool
	media_unread bool
	silent       bool
	id           int32
	user_id      int32
	message      string
	pts          int32
	pts_count    int32
	date         int32
	fwd_from     *MessageFwdHeader
	via_bot_id   int32
	reply_to     *MessageReplyHeader
	entities     []*MessageEntity
	from_id      int32
	chat_id      int32
	update       *Update
	updates      []*Update
	users        []*User
	chats        []*Chat
	seq_start    int32
	seq          int32
	media        *MessageMedia
}

// Constructors:Predicate:updatesTooLong
type TLupdatesTooLong struct {
	data *Updates_Data
}

// Constructors:New:updatesTooLong
func NewTLupdatesTooLong() *TLupdatesTooLong {
	return &TLupdatesTooLong{data: &Updates_Data{}}
}

// Constructors:Predicate:updateShortMessage
type TLupdateShortMessage struct {
	data *Updates_Data
}

// Constructors:New:updateShortMessage
func NewTLupdateShortMessage() *TLupdateShortMessage {
	return &TLupdateShortMessage{data: &Updates_Data{}}
}

// Constructors:Predicate:updateShortChatMessage
type TLupdateShortChatMessage struct {
	data *Updates_Data
}

// Constructors:New:updateShortChatMessage
func NewTLupdateShortChatMessage() *TLupdateShortChatMessage {
	return &TLupdateShortChatMessage{data: &Updates_Data{}}
}

// Constructors:Predicate:updateShort
type TLupdateShort struct {
	data *Updates_Data
}

// Constructors:New:updateShort
func NewTLupdateShort() *TLupdateShort {
	return &TLupdateShort{data: &Updates_Data{}}
}

// Constructors:Predicate:updatesCombined
type TLupdatesCombined struct {
	data *Updates_Data
}

// Constructors:New:updatesCombined
func NewTLupdatesCombined() *TLupdatesCombined {
	return &TLupdatesCombined{data: &Updates_Data{}}
}

// Constructors:Predicate:updates
type TLupdates struct {
	data *Updates_Data
}

// Constructors:New:updates
func NewTLupdates() *TLupdates {
	return &TLupdates{data: &Updates_Data{}}
}

// Constructors:Predicate:updateShortSentMessage
type TLupdateShortSentMessage struct {
	data *Updates_Data
}

// Constructors:New:updateShortSentMessage
func NewTLupdateShortSentMessage() *TLupdateShortSentMessage {
	return &TLupdateShortSentMessage{data: &Updates_Data{}}
}
func (m *TLupdateShortMessage) Setout(v bool)                         { m.data.out = v }
func (m *TLupdateShortMessage) Getout() bool                          { return m.data.out }
func (m *TLupdateShortMessage) Setmentioned(v bool)                   { m.data.mentioned = v }
func (m *TLupdateShortMessage) Getmentioned() bool                    { return m.data.mentioned }
func (m *TLupdateShortMessage) Setmedia_unread(v bool)                { m.data.media_unread = v }
func (m *TLupdateShortMessage) Getmedia_unread() bool                 { return m.data.media_unread }
func (m *TLupdateShortMessage) Setsilent(v bool)                      { m.data.silent = v }
func (m *TLupdateShortMessage) Getsilent() bool                       { return m.data.silent }
func (m *TLupdateShortMessage) Setid(v int32)                         { m.data.id = v }
func (m *TLupdateShortMessage) Getid() int32                          { return m.data.id }
func (m *TLupdateShortMessage) Setuser_id(v int32)                    { m.data.user_id = v }
func (m *TLupdateShortMessage) Getuser_id() int32                     { return m.data.user_id }
func (m *TLupdateShortMessage) Setmessage(v string)                   { m.data.message = v }
func (m *TLupdateShortMessage) Getmessage() string                    { return m.data.message }
func (m *TLupdateShortMessage) Setpts(v int32)                        { m.data.pts = v }
func (m *TLupdateShortMessage) Getpts() int32                         { return m.data.pts }
func (m *TLupdateShortMessage) Setpts_count(v int32)                  { m.data.pts_count = v }
func (m *TLupdateShortMessage) Getpts_count() int32                   { return m.data.pts_count }
func (m *TLupdateShortMessage) Setdate(v int32)                       { m.data.date = v }
func (m *TLupdateShortMessage) Getdate() int32                        { return m.data.date }
func (m *TLupdateShortMessage) Setfwd_from(v *MessageFwdHeader)       { m.data.fwd_from = v }
func (m *TLupdateShortMessage) Getfwd_from() *MessageFwdHeader        { return m.data.fwd_from }
func (m *TLupdateShortMessage) Setvia_bot_id(v int32)                 { m.data.via_bot_id = v }
func (m *TLupdateShortMessage) Getvia_bot_id() int32                  { return m.data.via_bot_id }
func (m *TLupdateShortMessage) Setreply_to(v *MessageReplyHeader)     { m.data.reply_to = v }
func (m *TLupdateShortMessage) Getreply_to() *MessageReplyHeader      { return m.data.reply_to }
func (m *TLupdateShortMessage) Setentities(v []*MessageEntity)        { m.data.entities = v }
func (m *TLupdateShortMessage) Getentities() []*MessageEntity         { return m.data.entities }
func (m *TLupdateShortChatMessage) Setout(v bool)                     { m.data.out = v }
func (m *TLupdateShortChatMessage) Getout() bool                      { return m.data.out }
func (m *TLupdateShortChatMessage) Setmentioned(v bool)               { m.data.mentioned = v }
func (m *TLupdateShortChatMessage) Getmentioned() bool                { return m.data.mentioned }
func (m *TLupdateShortChatMessage) Setmedia_unread(v bool)            { m.data.media_unread = v }
func (m *TLupdateShortChatMessage) Getmedia_unread() bool             { return m.data.media_unread }
func (m *TLupdateShortChatMessage) Setsilent(v bool)                  { m.data.silent = v }
func (m *TLupdateShortChatMessage) Getsilent() bool                   { return m.data.silent }
func (m *TLupdateShortChatMessage) Setid(v int32)                     { m.data.id = v }
func (m *TLupdateShortChatMessage) Getid() int32                      { return m.data.id }
func (m *TLupdateShortChatMessage) Setfrom_id(v int32)                { m.data.from_id = v }
func (m *TLupdateShortChatMessage) Getfrom_id() int32                 { return m.data.from_id }
func (m *TLupdateShortChatMessage) Setchat_id(v int32)                { m.data.chat_id = v }
func (m *TLupdateShortChatMessage) Getchat_id() int32                 { return m.data.chat_id }
func (m *TLupdateShortChatMessage) Setmessage(v string)               { m.data.message = v }
func (m *TLupdateShortChatMessage) Getmessage() string                { return m.data.message }
func (m *TLupdateShortChatMessage) Setpts(v int32)                    { m.data.pts = v }
func (m *TLupdateShortChatMessage) Getpts() int32                     { return m.data.pts }
func (m *TLupdateShortChatMessage) Setpts_count(v int32)              { m.data.pts_count = v }
func (m *TLupdateShortChatMessage) Getpts_count() int32               { return m.data.pts_count }
func (m *TLupdateShortChatMessage) Setdate(v int32)                   { m.data.date = v }
func (m *TLupdateShortChatMessage) Getdate() int32                    { return m.data.date }
func (m *TLupdateShortChatMessage) Setfwd_from(v *MessageFwdHeader)   { m.data.fwd_from = v }
func (m *TLupdateShortChatMessage) Getfwd_from() *MessageFwdHeader    { return m.data.fwd_from }
func (m *TLupdateShortChatMessage) Setvia_bot_id(v int32)             { m.data.via_bot_id = v }
func (m *TLupdateShortChatMessage) Getvia_bot_id() int32              { return m.data.via_bot_id }
func (m *TLupdateShortChatMessage) Setreply_to(v *MessageReplyHeader) { m.data.reply_to = v }
func (m *TLupdateShortChatMessage) Getreply_to() *MessageReplyHeader  { return m.data.reply_to }
func (m *TLupdateShortChatMessage) Setentities(v []*MessageEntity)    { m.data.entities = v }
func (m *TLupdateShortChatMessage) Getentities() []*MessageEntity     { return m.data.entities }
func (m *TLupdateShort) Setupdate(v *Update)                          { m.data.update = v }
func (m *TLupdateShort) Getupdate() *Update                           { return m.data.update }
func (m *TLupdateShort) Setdate(v int32)                              { m.data.date = v }
func (m *TLupdateShort) Getdate() int32                               { return m.data.date }
func (m *TLupdatesCombined) Setupdates(v []*Update)                   { m.data.updates = v }
func (m *TLupdatesCombined) Getupdates() []*Update                    { return m.data.updates }
func (m *TLupdatesCombined) Setusers(v []*User)                       { m.data.users = v }
func (m *TLupdatesCombined) Getusers() []*User                        { return m.data.users }
func (m *TLupdatesCombined) Setchats(v []*Chat)                       { m.data.chats = v }
func (m *TLupdatesCombined) Getchats() []*Chat                        { return m.data.chats }
func (m *TLupdatesCombined) Setdate(v int32)                          { m.data.date = v }
func (m *TLupdatesCombined) Getdate() int32                           { return m.data.date }
func (m *TLupdatesCombined) Setseq_start(v int32)                     { m.data.seq_start = v }
func (m *TLupdatesCombined) Getseq_start() int32                      { return m.data.seq_start }
func (m *TLupdatesCombined) Setseq(v int32)                           { m.data.seq = v }
func (m *TLupdatesCombined) Getseq() int32                            { return m.data.seq }
func (m *TLupdates) Setupdates(v []*Update)                           { m.data.updates = v }
func (m *TLupdates) Getupdates() []*Update                            { return m.data.updates }
func (m *TLupdates) Setusers(v []*User)                               { m.data.users = v }
func (m *TLupdates) Getusers() []*User                                { return m.data.users }
func (m *TLupdates) Setchats(v []*Chat)                               { m.data.chats = v }
func (m *TLupdates) Getchats() []*Chat                                { return m.data.chats }
func (m *TLupdates) Setdate(v int32)                                  { m.data.date = v }
func (m *TLupdates) Getdate() int32                                   { return m.data.date }
func (m *TLupdates) Setseq(v int32)                                   { m.data.seq = v }
func (m *TLupdates) Getseq() int32                                    { return m.data.seq }
func (m *TLupdateShortSentMessage) Setout(v bool)                     { m.data.out = v }
func (m *TLupdateShortSentMessage) Getout() bool                      { return m.data.out }
func (m *TLupdateShortSentMessage) Setid(v int32)                     { m.data.id = v }
func (m *TLupdateShortSentMessage) Getid() int32                      { return m.data.id }
func (m *TLupdateShortSentMessage) Setpts(v int32)                    { m.data.pts = v }
func (m *TLupdateShortSentMessage) Getpts() int32                     { return m.data.pts }
func (m *TLupdateShortSentMessage) Setpts_count(v int32)              { m.data.pts_count = v }
func (m *TLupdateShortSentMessage) Getpts_count() int32               { return m.data.pts_count }
func (m *TLupdateShortSentMessage) Setdate(v int32)                   { m.data.date = v }
func (m *TLupdateShortSentMessage) Getdate() int32                    { return m.data.date }
func (m *TLupdateShortSentMessage) Setmedia(v *MessageMedia)          { m.data.media = v }
func (m *TLupdateShortSentMessage) Getmedia() *MessageMedia           { return m.data.media }
func (m *TLupdateShortSentMessage) Setentities(v []*MessageEntity)    { m.data.entities = v }
func (m *TLupdateShortSentMessage) Getentities() []*MessageEntity     { return m.data.entities }

///////////////////////////////////////////////////////////////////////////////
// Constructors:help_PromoData
// help_PromoData <--
// + TLhelp_promoDataEmpty
// + TLhelp_promoData
//
// Constructors:Type:help_PromoData
type help_PromoData struct {
	constructor int32
	data        *help_PromoData_Data
}

// Constructors:Type:Data:help_PromoData
type help_PromoData_Data struct {
	expires     int32
	proxy       bool
	peer        *Peer
	chats       []*Chat
	users       []*User
	psa_type    string
	psa_message string
}

// Constructors:Predicate:help_promoDataEmpty
type TLhelp_promoDataEmpty struct {
	data *help_PromoData_Data
}

// Constructors:New:help_promoDataEmpty
func NewTLhelp_promoDataEmpty() *TLhelp_promoDataEmpty {
	return &TLhelp_promoDataEmpty{data: &help_PromoData_Data{}}
}

// Constructors:Predicate:help_promoData
type TLhelp_promoData struct {
	data *help_PromoData_Data
}

// Constructors:New:help_promoData
func NewTLhelp_promoData() *TLhelp_promoData {
	return &TLhelp_promoData{data: &help_PromoData_Data{}}
}
func (m *TLhelp_promoDataEmpty) Setexpires(v int32) { m.data.expires = v }
func (m *TLhelp_promoDataEmpty) Getexpires() int32  { return m.data.expires }
func (m *TLhelp_promoData) Setproxy(v bool)         { m.data.proxy = v }
func (m *TLhelp_promoData) Getproxy() bool          { return m.data.proxy }
func (m *TLhelp_promoData) Setexpires(v int32)      { m.data.expires = v }
func (m *TLhelp_promoData) Getexpires() int32       { return m.data.expires }
func (m *TLhelp_promoData) Setpeer(v *Peer)         { m.data.peer = v }
func (m *TLhelp_promoData) Getpeer() *Peer          { return m.data.peer }
func (m *TLhelp_promoData) Setchats(v []*Chat)      { m.data.chats = v }
func (m *TLhelp_promoData) Getchats() []*Chat       { return m.data.chats }
func (m *TLhelp_promoData) Setusers(v []*User)      { m.data.users = v }
func (m *TLhelp_promoData) Getusers() []*User       { return m.data.users }
func (m *TLhelp_promoData) Setpsa_type(v string)    { m.data.psa_type = v }
func (m *TLhelp_promoData) Getpsa_type() string     { return m.data.psa_type }
func (m *TLhelp_promoData) Setpsa_message(v string) { m.data.psa_message = v }
func (m *TLhelp_promoData) Getpsa_message() string  { return m.data.psa_message }

///////////////////////////////////////////////////////////////////////////////
// Constructors:help_RecentMeUrls
// help_RecentMeUrls <--
// + TLhelp_recentMeUrls
//
// Constructors:Type:help_RecentMeUrls
type help_RecentMeUrls struct {
	constructor int32
	data        *help_RecentMeUrls_Data
}

// Constructors:Type:Data:help_RecentMeUrls
type help_RecentMeUrls_Data struct {
	urls  []*RecentMeUrl
	chats []*Chat
	users []*User
}

// Constructors:Predicate:help_recentMeUrls
type TLhelp_recentMeUrls struct {
	data *help_RecentMeUrls_Data
}

// Constructors:New:help_recentMeUrls
func NewTLhelp_recentMeUrls() *TLhelp_recentMeUrls {
	return &TLhelp_recentMeUrls{data: &help_RecentMeUrls_Data{}}
}
func (m *TLhelp_recentMeUrls) Seturls(v []*RecentMeUrl) { m.data.urls = v }
func (m *TLhelp_recentMeUrls) Geturls() []*RecentMeUrl  { return m.data.urls }
func (m *TLhelp_recentMeUrls) Setchats(v []*Chat)       { m.data.chats = v }
func (m *TLhelp_recentMeUrls) Getchats() []*Chat        { return m.data.chats }
func (m *TLhelp_recentMeUrls) Setusers(v []*User)       { m.data.users = v }
func (m *TLhelp_recentMeUrls) Getusers() []*User        { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:account_Themes
// account_Themes <--
// + TLaccount_themesNotModified
// + TLaccount_themes
//
// Constructors:Type:account_Themes
type account_Themes struct {
	constructor int32
	data        *account_Themes_Data
}

// Constructors:Type:Data:account_Themes
type account_Themes_Data struct {
	hash   int32
	themes []*Theme
}

// Constructors:Predicate:account_themesNotModified
type TLaccount_themesNotModified struct {
	data *account_Themes_Data
}

// Constructors:New:account_themesNotModified
func NewTLaccount_themesNotModified() *TLaccount_themesNotModified {
	return &TLaccount_themesNotModified{data: &account_Themes_Data{}}
}

// Constructors:Predicate:account_themes
type TLaccount_themes struct {
	data *account_Themes_Data
}

// Constructors:New:account_themes
func NewTLaccount_themes() *TLaccount_themes {
	return &TLaccount_themes{data: &account_Themes_Data{}}
}
func (m *TLaccount_themes) Sethash(v int32)      { m.data.hash = v }
func (m *TLaccount_themes) Gethash() int32       { return m.data.hash }
func (m *TLaccount_themes) Setthemes(v []*Theme) { m.data.themes = v }
func (m *TLaccount_themes) Getthemes() []*Theme  { return m.data.themes }

///////////////////////////////////////////////////////////////////////////////
// Constructors:LabeledPrice
// LabeledPrice <--
// + TLlabeledPrice
//
// Constructors:Type:LabeledPrice
type LabeledPrice struct {
	constructor int32
	data        *LabeledPrice_Data
}

// Constructors:Type:Data:LabeledPrice
type LabeledPrice_Data struct {
	label  string
	amount int64
}

// Constructors:Predicate:labeledPrice
type TLlabeledPrice struct {
	data *LabeledPrice_Data
}

// Constructors:New:labeledPrice
func NewTLlabeledPrice() *TLlabeledPrice {
	return &TLlabeledPrice{data: &LabeledPrice_Data{}}
}
func (m *TLlabeledPrice) Setlabel(v string) { m.data.label = v }
func (m *TLlabeledPrice) Getlabel() string  { return m.data.label }
func (m *TLlabeledPrice) Setamount(v int64) { m.data.amount = v }
func (m *TLlabeledPrice) Getamount() int64  { return m.data.amount }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputGeoPoint
// InputGeoPoint <--
// + TLinputGeoPointEmpty
// + TLinputGeoPoint
//
// Constructors:Type:InputGeoPoint
type InputGeoPoint struct {
	constructor int32
	data        *InputGeoPoint_Data
}

// Constructors:Type:Data:InputGeoPoint
type InputGeoPoint_Data struct {
	lat             float64
	long            float64
	accuracy_radius int32
}

// Constructors:Predicate:inputGeoPointEmpty
type TLinputGeoPointEmpty struct {
	data *InputGeoPoint_Data
}

// Constructors:New:inputGeoPointEmpty
func NewTLinputGeoPointEmpty() *TLinputGeoPointEmpty {
	return &TLinputGeoPointEmpty{data: &InputGeoPoint_Data{}}
}

// Constructors:Predicate:inputGeoPoint
type TLinputGeoPoint struct {
	data *InputGeoPoint_Data
}

// Constructors:New:inputGeoPoint
func NewTLinputGeoPoint() *TLinputGeoPoint {
	return &TLinputGeoPoint{data: &InputGeoPoint_Data{}}
}
func (m *TLinputGeoPoint) Setlat(v float64)           { m.data.lat = v }
func (m *TLinputGeoPoint) Getlat() float64            { return m.data.lat }
func (m *TLinputGeoPoint) Setlong(v float64)          { m.data.long = v }
func (m *TLinputGeoPoint) Getlong() float64           { return m.data.long }
func (m *TLinputGeoPoint) Setaccuracy_radius(v int32) { m.data.accuracy_radius = v }
func (m *TLinputGeoPoint) Getaccuracy_radius() int32  { return m.data.accuracy_radius }

///////////////////////////////////////////////////////////////////////////////
// Constructors:account_PasswordInputSettings
// account_PasswordInputSettings <--
// + TLaccount_passwordInputSettings
//
// Constructors:Type:account_PasswordInputSettings
type account_PasswordInputSettings struct {
	constructor int32
	data        *account_PasswordInputSettings_Data
}

// Constructors:Type:Data:account_PasswordInputSettings
type account_PasswordInputSettings_Data struct {
	new_algo            *PasswordKdfAlgo
	new_password_hash   []byte
	hint                string
	email               string
	new_secure_settings *SecureSecretSettings
}

// Constructors:Predicate:account_passwordInputSettings
type TLaccount_passwordInputSettings struct {
	data *account_PasswordInputSettings_Data
}

// Constructors:New:account_passwordInputSettings
func NewTLaccount_passwordInputSettings() *TLaccount_passwordInputSettings {
	return &TLaccount_passwordInputSettings{data: &account_PasswordInputSettings_Data{}}
}
func (m *TLaccount_passwordInputSettings) Setnew_algo(v *PasswordKdfAlgo) { m.data.new_algo = v }
func (m *TLaccount_passwordInputSettings) Getnew_algo() *PasswordKdfAlgo  { return m.data.new_algo }
func (m *TLaccount_passwordInputSettings) Setnew_password_hash(v []byte) {
	m.data.new_password_hash = v
}
func (m *TLaccount_passwordInputSettings) Getnew_password_hash() []byte {
	return m.data.new_password_hash
}
func (m *TLaccount_passwordInputSettings) Sethint(v string)  { m.data.hint = v }
func (m *TLaccount_passwordInputSettings) Gethint() string   { return m.data.hint }
func (m *TLaccount_passwordInputSettings) Setemail(v string) { m.data.email = v }
func (m *TLaccount_passwordInputSettings) Getemail() string  { return m.data.email }
func (m *TLaccount_passwordInputSettings) Setnew_secure_settings(v *SecureSecretSettings) {
	m.data.new_secure_settings = v
}
func (m *TLaccount_passwordInputSettings) Getnew_secure_settings() *SecureSecretSettings {
	return m.data.new_secure_settings
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:SecureValueError
// SecureValueError <--
// + TLsecureValueErrorData
// + TLsecureValueErrorFrontSide
// + TLsecureValueErrorReverseSide
// + TLsecureValueErrorSelfie
// + TLsecureValueErrorFile
// + TLsecureValueErrorFiles
// + TLsecureValueError
// + TLsecureValueErrorTranslationFile
// + TLsecureValueErrorTranslationFiles
//
// Constructors:Type:SecureValueError
type SecureValueError struct {
	constructor int32
	data        *SecureValueError_Data
}

// Constructors:Type:Data:SecureValueError
type SecureValueError_Data struct {
	type_key    *SecureValueType
	data_hash   []byte
	field       string
	text        string
	file_hash   []byte
	file_hash_6 [][]byte
	hash        []byte
}

// Constructors:Predicate:secureValueErrorData
type TLsecureValueErrorData struct {
	data *SecureValueError_Data
}

// Constructors:New:secureValueErrorData
func NewTLsecureValueErrorData() *TLsecureValueErrorData {
	return &TLsecureValueErrorData{data: &SecureValueError_Data{}}
}

// Constructors:Predicate:secureValueErrorFrontSide
type TLsecureValueErrorFrontSide struct {
	data *SecureValueError_Data
}

// Constructors:New:secureValueErrorFrontSide
func NewTLsecureValueErrorFrontSide() *TLsecureValueErrorFrontSide {
	return &TLsecureValueErrorFrontSide{data: &SecureValueError_Data{}}
}

// Constructors:Predicate:secureValueErrorReverseSide
type TLsecureValueErrorReverseSide struct {
	data *SecureValueError_Data
}

// Constructors:New:secureValueErrorReverseSide
func NewTLsecureValueErrorReverseSide() *TLsecureValueErrorReverseSide {
	return &TLsecureValueErrorReverseSide{data: &SecureValueError_Data{}}
}

// Constructors:Predicate:secureValueErrorSelfie
type TLsecureValueErrorSelfie struct {
	data *SecureValueError_Data
}

// Constructors:New:secureValueErrorSelfie
func NewTLsecureValueErrorSelfie() *TLsecureValueErrorSelfie {
	return &TLsecureValueErrorSelfie{data: &SecureValueError_Data{}}
}

// Constructors:Predicate:secureValueErrorFile
type TLsecureValueErrorFile struct {
	data *SecureValueError_Data
}

// Constructors:New:secureValueErrorFile
func NewTLsecureValueErrorFile() *TLsecureValueErrorFile {
	return &TLsecureValueErrorFile{data: &SecureValueError_Data{}}
}

// Constructors:Predicate:secureValueErrorFiles
type TLsecureValueErrorFiles struct {
	data *SecureValueError_Data
}

// Constructors:New:secureValueErrorFiles
func NewTLsecureValueErrorFiles() *TLsecureValueErrorFiles {
	return &TLsecureValueErrorFiles{data: &SecureValueError_Data{}}
}

// Constructors:Predicate:secureValueError
type TLsecureValueError struct {
	data *SecureValueError_Data
}

// Constructors:New:secureValueError
func NewTLsecureValueError() *TLsecureValueError {
	return &TLsecureValueError{data: &SecureValueError_Data{}}
}

// Constructors:Predicate:secureValueErrorTranslationFile
type TLsecureValueErrorTranslationFile struct {
	data *SecureValueError_Data
}

// Constructors:New:secureValueErrorTranslationFile
func NewTLsecureValueErrorTranslationFile() *TLsecureValueErrorTranslationFile {
	return &TLsecureValueErrorTranslationFile{data: &SecureValueError_Data{}}
}

// Constructors:Predicate:secureValueErrorTranslationFiles
type TLsecureValueErrorTranslationFiles struct {
	data *SecureValueError_Data
}

// Constructors:New:secureValueErrorTranslationFiles
func NewTLsecureValueErrorTranslationFiles() *TLsecureValueErrorTranslationFiles {
	return &TLsecureValueErrorTranslationFiles{data: &SecureValueError_Data{}}
}
func (m *TLsecureValueErrorData) Settype_key(v *SecureValueType)             { m.data.type_key = v }
func (m *TLsecureValueErrorData) Gettype_key() *SecureValueType              { return m.data.type_key }
func (m *TLsecureValueErrorData) Setdata_hash(v []byte)                      { m.data.data_hash = v }
func (m *TLsecureValueErrorData) Getdata_hash() []byte                       { return m.data.data_hash }
func (m *TLsecureValueErrorData) Setfield(v string)                          { m.data.field = v }
func (m *TLsecureValueErrorData) Getfield() string                           { return m.data.field }
func (m *TLsecureValueErrorData) Settext(v string)                           { m.data.text = v }
func (m *TLsecureValueErrorData) Gettext() string                            { return m.data.text }
func (m *TLsecureValueErrorFrontSide) Settype_key(v *SecureValueType)        { m.data.type_key = v }
func (m *TLsecureValueErrorFrontSide) Gettype_key() *SecureValueType         { return m.data.type_key }
func (m *TLsecureValueErrorFrontSide) Setfile_hash(v []byte)                 { m.data.file_hash = v }
func (m *TLsecureValueErrorFrontSide) Getfile_hash() []byte                  { return m.data.file_hash }
func (m *TLsecureValueErrorFrontSide) Settext(v string)                      { m.data.text = v }
func (m *TLsecureValueErrorFrontSide) Gettext() string                       { return m.data.text }
func (m *TLsecureValueErrorReverseSide) Settype_key(v *SecureValueType)      { m.data.type_key = v }
func (m *TLsecureValueErrorReverseSide) Gettype_key() *SecureValueType       { return m.data.type_key }
func (m *TLsecureValueErrorReverseSide) Setfile_hash(v []byte)               { m.data.file_hash = v }
func (m *TLsecureValueErrorReverseSide) Getfile_hash() []byte                { return m.data.file_hash }
func (m *TLsecureValueErrorReverseSide) Settext(v string)                    { m.data.text = v }
func (m *TLsecureValueErrorReverseSide) Gettext() string                     { return m.data.text }
func (m *TLsecureValueErrorSelfie) Settype_key(v *SecureValueType)           { m.data.type_key = v }
func (m *TLsecureValueErrorSelfie) Gettype_key() *SecureValueType            { return m.data.type_key }
func (m *TLsecureValueErrorSelfie) Setfile_hash(v []byte)                    { m.data.file_hash = v }
func (m *TLsecureValueErrorSelfie) Getfile_hash() []byte                     { return m.data.file_hash }
func (m *TLsecureValueErrorSelfie) Settext(v string)                         { m.data.text = v }
func (m *TLsecureValueErrorSelfie) Gettext() string                          { return m.data.text }
func (m *TLsecureValueErrorFile) Settype_key(v *SecureValueType)             { m.data.type_key = v }
func (m *TLsecureValueErrorFile) Gettype_key() *SecureValueType              { return m.data.type_key }
func (m *TLsecureValueErrorFile) Setfile_hash(v []byte)                      { m.data.file_hash = v }
func (m *TLsecureValueErrorFile) Getfile_hash() []byte                       { return m.data.file_hash }
func (m *TLsecureValueErrorFile) Settext(v string)                           { m.data.text = v }
func (m *TLsecureValueErrorFile) Gettext() string                            { return m.data.text }
func (m *TLsecureValueErrorFiles) Settype_key(v *SecureValueType)            { m.data.type_key = v }
func (m *TLsecureValueErrorFiles) Gettype_key() *SecureValueType             { return m.data.type_key }
func (m *TLsecureValueErrorFiles) Setfile_hash_6(v [][]byte)                 { m.data.file_hash_6 = v }
func (m *TLsecureValueErrorFiles) Getfile_hash_6() [][]byte                  { return m.data.file_hash_6 }
func (m *TLsecureValueErrorFiles) Settext(v string)                          { m.data.text = v }
func (m *TLsecureValueErrorFiles) Gettext() string                           { return m.data.text }
func (m *TLsecureValueError) Settype_key(v *SecureValueType)                 { m.data.type_key = v }
func (m *TLsecureValueError) Gettype_key() *SecureValueType                  { return m.data.type_key }
func (m *TLsecureValueError) Sethash(v []byte)                               { m.data.hash = v }
func (m *TLsecureValueError) Gethash() []byte                                { return m.data.hash }
func (m *TLsecureValueError) Settext(v string)                               { m.data.text = v }
func (m *TLsecureValueError) Gettext() string                                { return m.data.text }
func (m *TLsecureValueErrorTranslationFile) Settype_key(v *SecureValueType)  { m.data.type_key = v }
func (m *TLsecureValueErrorTranslationFile) Gettype_key() *SecureValueType   { return m.data.type_key }
func (m *TLsecureValueErrorTranslationFile) Setfile_hash(v []byte)           { m.data.file_hash = v }
func (m *TLsecureValueErrorTranslationFile) Getfile_hash() []byte            { return m.data.file_hash }
func (m *TLsecureValueErrorTranslationFile) Settext(v string)                { m.data.text = v }
func (m *TLsecureValueErrorTranslationFile) Gettext() string                 { return m.data.text }
func (m *TLsecureValueErrorTranslationFiles) Settype_key(v *SecureValueType) { m.data.type_key = v }
func (m *TLsecureValueErrorTranslationFiles) Gettype_key() *SecureValueType  { return m.data.type_key }
func (m *TLsecureValueErrorTranslationFiles) Setfile_hash_6(v [][]byte)      { m.data.file_hash_6 = v }
func (m *TLsecureValueErrorTranslationFiles) Getfile_hash_6() [][]byte       { return m.data.file_hash_6 }
func (m *TLsecureValueErrorTranslationFiles) Settext(v string)               { m.data.text = v }
func (m *TLsecureValueErrorTranslationFiles) Gettext() string                { return m.data.text }

///////////////////////////////////////////////////////////////////////////////
// Constructors:SendMessageAction
// SendMessageAction <--
// + TLsendMessageTypingAction
// + TLsendMessageCancelAction
// + TLsendMessageRecordVideoAction
// + TLsendMessageUploadVideoAction
// + TLsendMessageRecordAudioAction
// + TLsendMessageUploadAudioAction
// + TLsendMessageUploadPhotoAction
// + TLsendMessageUploadDocumentAction
// + TLsendMessageGeoLocationAction
// + TLsendMessageChooseContactAction
// + TLsendMessageGamePlayAction
// + TLsendMessageRecordRoundAction
// + TLsendMessageUploadRoundAction
//
// Constructors:Type:SendMessageAction
type SendMessageAction struct {
	constructor int32
	data        *SendMessageAction_Data
}

// Constructors:Type:Data:SendMessageAction
type SendMessageAction_Data struct {
	progress int32
}

// Constructors:Predicate:sendMessageTypingAction
type TLsendMessageTypingAction struct {
	data *SendMessageAction_Data
}

// Constructors:New:sendMessageTypingAction
func NewTLsendMessageTypingAction() *TLsendMessageTypingAction {
	return &TLsendMessageTypingAction{data: &SendMessageAction_Data{}}
}

// Constructors:Predicate:sendMessageCancelAction
type TLsendMessageCancelAction struct {
	data *SendMessageAction_Data
}

// Constructors:New:sendMessageCancelAction
func NewTLsendMessageCancelAction() *TLsendMessageCancelAction {
	return &TLsendMessageCancelAction{data: &SendMessageAction_Data{}}
}

// Constructors:Predicate:sendMessageRecordVideoAction
type TLsendMessageRecordVideoAction struct {
	data *SendMessageAction_Data
}

// Constructors:New:sendMessageRecordVideoAction
func NewTLsendMessageRecordVideoAction() *TLsendMessageRecordVideoAction {
	return &TLsendMessageRecordVideoAction{data: &SendMessageAction_Data{}}
}

// Constructors:Predicate:sendMessageUploadVideoAction
type TLsendMessageUploadVideoAction struct {
	data *SendMessageAction_Data
}

// Constructors:New:sendMessageUploadVideoAction
func NewTLsendMessageUploadVideoAction() *TLsendMessageUploadVideoAction {
	return &TLsendMessageUploadVideoAction{data: &SendMessageAction_Data{}}
}

// Constructors:Predicate:sendMessageRecordAudioAction
type TLsendMessageRecordAudioAction struct {
	data *SendMessageAction_Data
}

// Constructors:New:sendMessageRecordAudioAction
func NewTLsendMessageRecordAudioAction() *TLsendMessageRecordAudioAction {
	return &TLsendMessageRecordAudioAction{data: &SendMessageAction_Data{}}
}

// Constructors:Predicate:sendMessageUploadAudioAction
type TLsendMessageUploadAudioAction struct {
	data *SendMessageAction_Data
}

// Constructors:New:sendMessageUploadAudioAction
func NewTLsendMessageUploadAudioAction() *TLsendMessageUploadAudioAction {
	return &TLsendMessageUploadAudioAction{data: &SendMessageAction_Data{}}
}

// Constructors:Predicate:sendMessageUploadPhotoAction
type TLsendMessageUploadPhotoAction struct {
	data *SendMessageAction_Data
}

// Constructors:New:sendMessageUploadPhotoAction
func NewTLsendMessageUploadPhotoAction() *TLsendMessageUploadPhotoAction {
	return &TLsendMessageUploadPhotoAction{data: &SendMessageAction_Data{}}
}

// Constructors:Predicate:sendMessageUploadDocumentAction
type TLsendMessageUploadDocumentAction struct {
	data *SendMessageAction_Data
}

// Constructors:New:sendMessageUploadDocumentAction
func NewTLsendMessageUploadDocumentAction() *TLsendMessageUploadDocumentAction {
	return &TLsendMessageUploadDocumentAction{data: &SendMessageAction_Data{}}
}

// Constructors:Predicate:sendMessageGeoLocationAction
type TLsendMessageGeoLocationAction struct {
	data *SendMessageAction_Data
}

// Constructors:New:sendMessageGeoLocationAction
func NewTLsendMessageGeoLocationAction() *TLsendMessageGeoLocationAction {
	return &TLsendMessageGeoLocationAction{data: &SendMessageAction_Data{}}
}

// Constructors:Predicate:sendMessageChooseContactAction
type TLsendMessageChooseContactAction struct {
	data *SendMessageAction_Data
}

// Constructors:New:sendMessageChooseContactAction
func NewTLsendMessageChooseContactAction() *TLsendMessageChooseContactAction {
	return &TLsendMessageChooseContactAction{data: &SendMessageAction_Data{}}
}

// Constructors:Predicate:sendMessageGamePlayAction
type TLsendMessageGamePlayAction struct {
	data *SendMessageAction_Data
}

// Constructors:New:sendMessageGamePlayAction
func NewTLsendMessageGamePlayAction() *TLsendMessageGamePlayAction {
	return &TLsendMessageGamePlayAction{data: &SendMessageAction_Data{}}
}

// Constructors:Predicate:sendMessageRecordRoundAction
type TLsendMessageRecordRoundAction struct {
	data *SendMessageAction_Data
}

// Constructors:New:sendMessageRecordRoundAction
func NewTLsendMessageRecordRoundAction() *TLsendMessageRecordRoundAction {
	return &TLsendMessageRecordRoundAction{data: &SendMessageAction_Data{}}
}

// Constructors:Predicate:sendMessageUploadRoundAction
type TLsendMessageUploadRoundAction struct {
	data *SendMessageAction_Data
}

// Constructors:New:sendMessageUploadRoundAction
func NewTLsendMessageUploadRoundAction() *TLsendMessageUploadRoundAction {
	return &TLsendMessageUploadRoundAction{data: &SendMessageAction_Data{}}
}
func (m *TLsendMessageUploadVideoAction) Setprogress(v int32)    { m.data.progress = v }
func (m *TLsendMessageUploadVideoAction) Getprogress() int32     { return m.data.progress }
func (m *TLsendMessageUploadAudioAction) Setprogress(v int32)    { m.data.progress = v }
func (m *TLsendMessageUploadAudioAction) Getprogress() int32     { return m.data.progress }
func (m *TLsendMessageUploadPhotoAction) Setprogress(v int32)    { m.data.progress = v }
func (m *TLsendMessageUploadPhotoAction) Getprogress() int32     { return m.data.progress }
func (m *TLsendMessageUploadDocumentAction) Setprogress(v int32) { m.data.progress = v }
func (m *TLsendMessageUploadDocumentAction) Getprogress() int32  { return m.data.progress }
func (m *TLsendMessageUploadRoundAction) Setprogress(v int32)    { m.data.progress = v }
func (m *TLsendMessageUploadRoundAction) Getprogress() int32     { return m.data.progress }

///////////////////////////////////////////////////////////////////////////////
// Constructors:payments_PaymentForm
// payments_PaymentForm <--
// + TLpayments_paymentForm
//
// Constructors:Type:payments_PaymentForm
type payments_PaymentForm struct {
	constructor int32
	data        *payments_PaymentForm_Data
}

// Constructors:Type:Data:payments_PaymentForm
type payments_PaymentForm_Data struct {
	can_save_credentials bool
	password_missing     bool
	bot_id               int32
	invoice              *Invoice
	provider_id          int32
	url                  string
	native_provider      string
	native_params        *DataJSON
	saved_info           *PaymentRequestedInfo
	saved_credentials    *PaymentSavedCredentials
	users                []*User
}

// Constructors:Predicate:payments_paymentForm
type TLpayments_paymentForm struct {
	data *payments_PaymentForm_Data
}

// Constructors:New:payments_paymentForm
func NewTLpayments_paymentForm() *TLpayments_paymentForm {
	return &TLpayments_paymentForm{data: &payments_PaymentForm_Data{}}
}
func (m *TLpayments_paymentForm) Setcan_save_credentials(v bool)        { m.data.can_save_credentials = v }
func (m *TLpayments_paymentForm) Getcan_save_credentials() bool         { return m.data.can_save_credentials }
func (m *TLpayments_paymentForm) Setpassword_missing(v bool)            { m.data.password_missing = v }
func (m *TLpayments_paymentForm) Getpassword_missing() bool             { return m.data.password_missing }
func (m *TLpayments_paymentForm) Setbot_id(v int32)                     { m.data.bot_id = v }
func (m *TLpayments_paymentForm) Getbot_id() int32                      { return m.data.bot_id }
func (m *TLpayments_paymentForm) Setinvoice(v *Invoice)                 { m.data.invoice = v }
func (m *TLpayments_paymentForm) Getinvoice() *Invoice                  { return m.data.invoice }
func (m *TLpayments_paymentForm) Setprovider_id(v int32)                { m.data.provider_id = v }
func (m *TLpayments_paymentForm) Getprovider_id() int32                 { return m.data.provider_id }
func (m *TLpayments_paymentForm) Seturl(v string)                       { m.data.url = v }
func (m *TLpayments_paymentForm) Geturl() string                        { return m.data.url }
func (m *TLpayments_paymentForm) Setnative_provider(v string)           { m.data.native_provider = v }
func (m *TLpayments_paymentForm) Getnative_provider() string            { return m.data.native_provider }
func (m *TLpayments_paymentForm) Setnative_params(v *DataJSON)          { m.data.native_params = v }
func (m *TLpayments_paymentForm) Getnative_params() *DataJSON           { return m.data.native_params }
func (m *TLpayments_paymentForm) Setsaved_info(v *PaymentRequestedInfo) { m.data.saved_info = v }
func (m *TLpayments_paymentForm) Getsaved_info() *PaymentRequestedInfo  { return m.data.saved_info }
func (m *TLpayments_paymentForm) Setsaved_credentials(v *PaymentSavedCredentials) {
	m.data.saved_credentials = v
}
func (m *TLpayments_paymentForm) Getsaved_credentials() *PaymentSavedCredentials {
	return m.data.saved_credentials
}
func (m *TLpayments_paymentForm) Setusers(v []*User) { m.data.users = v }
func (m *TLpayments_paymentForm) Getusers() []*User  { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:account_AutoDownloadSettings
// account_AutoDownloadSettings <--
// + TLaccount_autoDownloadSettings
//
// Constructors:Type:account_AutoDownloadSettings
type account_AutoDownloadSettings struct {
	constructor int32
	data        *account_AutoDownloadSettings_Data
}

// Constructors:Type:Data:account_AutoDownloadSettings
type account_AutoDownloadSettings_Data struct {
	low    *AutoDownloadSettings
	medium *AutoDownloadSettings
	high   *AutoDownloadSettings
}

// Constructors:Predicate:account_autoDownloadSettings
type TLaccount_autoDownloadSettings struct {
	data *account_AutoDownloadSettings_Data
}

// Constructors:New:account_autoDownloadSettings
func NewTLaccount_autoDownloadSettings() *TLaccount_autoDownloadSettings {
	return &TLaccount_autoDownloadSettings{data: &account_AutoDownloadSettings_Data{}}
}
func (m *TLaccount_autoDownloadSettings) Setlow(v *AutoDownloadSettings)    { m.data.low = v }
func (m *TLaccount_autoDownloadSettings) Getlow() *AutoDownloadSettings     { return m.data.low }
func (m *TLaccount_autoDownloadSettings) Setmedium(v *AutoDownloadSettings) { m.data.medium = v }
func (m *TLaccount_autoDownloadSettings) Getmedium() *AutoDownloadSettings  { return m.data.medium }
func (m *TLaccount_autoDownloadSettings) Sethigh(v *AutoDownloadSettings)   { m.data.high = v }
func (m *TLaccount_autoDownloadSettings) Gethigh() *AutoDownloadSettings    { return m.data.high }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PeerLocated
// PeerLocated <--
// + TLpeerLocated
// + TLpeerSelfLocated
//
// Constructors:Type:PeerLocated
type PeerLocated struct {
	constructor int32
	data        *PeerLocated_Data
}

// Constructors:Type:Data:PeerLocated
type PeerLocated_Data struct {
	peer     *Peer
	expires  int32
	distance int32
}

// Constructors:Predicate:peerLocated
type TLpeerLocated struct {
	data *PeerLocated_Data
}

// Constructors:New:peerLocated
func NewTLpeerLocated() *TLpeerLocated {
	return &TLpeerLocated{data: &PeerLocated_Data{}}
}

// Constructors:Predicate:peerSelfLocated
type TLpeerSelfLocated struct {
	data *PeerLocated_Data
}

// Constructors:New:peerSelfLocated
func NewTLpeerSelfLocated() *TLpeerSelfLocated {
	return &TLpeerSelfLocated{data: &PeerLocated_Data{}}
}
func (m *TLpeerLocated) Setpeer(v *Peer)        { m.data.peer = v }
func (m *TLpeerLocated) Getpeer() *Peer         { return m.data.peer }
func (m *TLpeerLocated) Setexpires(v int32)     { m.data.expires = v }
func (m *TLpeerLocated) Getexpires() int32      { return m.data.expires }
func (m *TLpeerLocated) Setdistance(v int32)    { m.data.distance = v }
func (m *TLpeerLocated) Getdistance() int32     { return m.data.distance }
func (m *TLpeerSelfLocated) Setexpires(v int32) { m.data.expires = v }
func (m *TLpeerSelfLocated) Getexpires() int32  { return m.data.expires }

///////////////////////////////////////////////////////////////////////////////
// Constructors:SecureData
// SecureData <--
// + TLsecureData
//
// Constructors:Type:SecureData
type SecureData struct {
	constructor int32
	data        *SecureData_Data
}

// Constructors:Type:Data:SecureData
type SecureData_Data struct {
	data      []byte
	data_hash []byte
	secret    []byte
}

// Constructors:Predicate:secureData
type TLsecureData struct {
	data *SecureData_Data
}

// Constructors:New:secureData
func NewTLsecureData() *TLsecureData {
	return &TLsecureData{data: &SecureData_Data{}}
}
func (m *TLsecureData) Setdata(v []byte)      { m.data.data = v }
func (m *TLsecureData) Getdata() []byte       { return m.data.data }
func (m *TLsecureData) Setdata_hash(v []byte) { m.data.data_hash = v }
func (m *TLsecureData) Getdata_hash() []byte  { return m.data.data_hash }
func (m *TLsecureData) Setsecret(v []byte)    { m.data.secret = v }
func (m *TLsecureData) Getsecret() []byte     { return m.data.secret }

///////////////////////////////////////////////////////////////////////////////
// Constructors:DocumentAttribute
// DocumentAttribute <--
// + TLdocumentAttributeImageSize
// + TLdocumentAttributeAnimated
// + TLdocumentAttributeSticker
// + TLdocumentAttributeVideo
// + TLdocumentAttributeAudio
// + TLdocumentAttributeFilename
// + TLdocumentAttributeHasStickers
//
// Constructors:Type:DocumentAttribute
type DocumentAttribute struct {
	constructor int32
	data        *DocumentAttribute_Data
}

// Constructors:Type:Data:DocumentAttribute
type DocumentAttribute_Data struct {
	w                  int32
	h                  int32
	mask               bool
	alt                string
	stickerset         *InputStickerSet
	mask_coords        *MaskCoords
	round_message      bool
	supports_streaming bool
	duration           int32
	voice              bool
	title              string
	performer          string
	waveform           []byte
	file_name          string
}

// Constructors:Predicate:documentAttributeImageSize
type TLdocumentAttributeImageSize struct {
	data *DocumentAttribute_Data
}

// Constructors:New:documentAttributeImageSize
func NewTLdocumentAttributeImageSize() *TLdocumentAttributeImageSize {
	return &TLdocumentAttributeImageSize{data: &DocumentAttribute_Data{}}
}

// Constructors:Predicate:documentAttributeAnimated
type TLdocumentAttributeAnimated struct {
	data *DocumentAttribute_Data
}

// Constructors:New:documentAttributeAnimated
func NewTLdocumentAttributeAnimated() *TLdocumentAttributeAnimated {
	return &TLdocumentAttributeAnimated{data: &DocumentAttribute_Data{}}
}

// Constructors:Predicate:documentAttributeSticker
type TLdocumentAttributeSticker struct {
	data *DocumentAttribute_Data
}

// Constructors:New:documentAttributeSticker
func NewTLdocumentAttributeSticker() *TLdocumentAttributeSticker {
	return &TLdocumentAttributeSticker{data: &DocumentAttribute_Data{}}
}

// Constructors:Predicate:documentAttributeVideo
type TLdocumentAttributeVideo struct {
	data *DocumentAttribute_Data
}

// Constructors:New:documentAttributeVideo
func NewTLdocumentAttributeVideo() *TLdocumentAttributeVideo {
	return &TLdocumentAttributeVideo{data: &DocumentAttribute_Data{}}
}

// Constructors:Predicate:documentAttributeAudio
type TLdocumentAttributeAudio struct {
	data *DocumentAttribute_Data
}

// Constructors:New:documentAttributeAudio
func NewTLdocumentAttributeAudio() *TLdocumentAttributeAudio {
	return &TLdocumentAttributeAudio{data: &DocumentAttribute_Data{}}
}

// Constructors:Predicate:documentAttributeFilename
type TLdocumentAttributeFilename struct {
	data *DocumentAttribute_Data
}

// Constructors:New:documentAttributeFilename
func NewTLdocumentAttributeFilename() *TLdocumentAttributeFilename {
	return &TLdocumentAttributeFilename{data: &DocumentAttribute_Data{}}
}

// Constructors:Predicate:documentAttributeHasStickers
type TLdocumentAttributeHasStickers struct {
	data *DocumentAttribute_Data
}

// Constructors:New:documentAttributeHasStickers
func NewTLdocumentAttributeHasStickers() *TLdocumentAttributeHasStickers {
	return &TLdocumentAttributeHasStickers{data: &DocumentAttribute_Data{}}
}
func (m *TLdocumentAttributeImageSize) Setw(v int32)                   { m.data.w = v }
func (m *TLdocumentAttributeImageSize) Getw() int32                    { return m.data.w }
func (m *TLdocumentAttributeImageSize) Seth(v int32)                   { m.data.h = v }
func (m *TLdocumentAttributeImageSize) Geth() int32                    { return m.data.h }
func (m *TLdocumentAttributeSticker) Setmask(v bool)                   { m.data.mask = v }
func (m *TLdocumentAttributeSticker) Getmask() bool                    { return m.data.mask }
func (m *TLdocumentAttributeSticker) Setalt(v string)                  { m.data.alt = v }
func (m *TLdocumentAttributeSticker) Getalt() string                   { return m.data.alt }
func (m *TLdocumentAttributeSticker) Setstickerset(v *InputStickerSet) { m.data.stickerset = v }
func (m *TLdocumentAttributeSticker) Getstickerset() *InputStickerSet  { return m.data.stickerset }
func (m *TLdocumentAttributeSticker) Setmask_coords(v *MaskCoords)     { m.data.mask_coords = v }
func (m *TLdocumentAttributeSticker) Getmask_coords() *MaskCoords      { return m.data.mask_coords }
func (m *TLdocumentAttributeVideo) Setround_message(v bool)            { m.data.round_message = v }
func (m *TLdocumentAttributeVideo) Getround_message() bool             { return m.data.round_message }
func (m *TLdocumentAttributeVideo) Setsupports_streaming(v bool)       { m.data.supports_streaming = v }
func (m *TLdocumentAttributeVideo) Getsupports_streaming() bool        { return m.data.supports_streaming }
func (m *TLdocumentAttributeVideo) Setduration(v int32)                { m.data.duration = v }
func (m *TLdocumentAttributeVideo) Getduration() int32                 { return m.data.duration }
func (m *TLdocumentAttributeVideo) Setw(v int32)                       { m.data.w = v }
func (m *TLdocumentAttributeVideo) Getw() int32                        { return m.data.w }
func (m *TLdocumentAttributeVideo) Seth(v int32)                       { m.data.h = v }
func (m *TLdocumentAttributeVideo) Geth() int32                        { return m.data.h }
func (m *TLdocumentAttributeAudio) Setvoice(v bool)                    { m.data.voice = v }
func (m *TLdocumentAttributeAudio) Getvoice() bool                     { return m.data.voice }
func (m *TLdocumentAttributeAudio) Setduration(v int32)                { m.data.duration = v }
func (m *TLdocumentAttributeAudio) Getduration() int32                 { return m.data.duration }
func (m *TLdocumentAttributeAudio) Settitle(v string)                  { m.data.title = v }
func (m *TLdocumentAttributeAudio) Gettitle() string                   { return m.data.title }
func (m *TLdocumentAttributeAudio) Setperformer(v string)              { m.data.performer = v }
func (m *TLdocumentAttributeAudio) Getperformer() string               { return m.data.performer }
func (m *TLdocumentAttributeAudio) Setwaveform(v []byte)               { m.data.waveform = v }
func (m *TLdocumentAttributeAudio) Getwaveform() []byte                { return m.data.waveform }
func (m *TLdocumentAttributeFilename) Setfile_name(v string)           { m.data.file_name = v }
func (m *TLdocumentAttributeFilename) Getfile_name() string            { return m.data.file_name }

///////////////////////////////////////////////////////////////////////////////
// Constructors:WallPaper
// WallPaper <--
// + TLwallPaper
// + TLwallPaperNoFile
//
// Constructors:Type:WallPaper
type WallPaper struct {
	constructor int32
	data        *WallPaper_Data
}

// Constructors:Type:Data:WallPaper
type WallPaper_Data struct {
	id          int64
	creator     bool
	default_key bool
	pattern     bool
	dark        bool
	access_hash int64
	slug        string
	document    *Document
	settings    *WallPaperSettings
}

// Constructors:Predicate:wallPaper
type TLwallPaper struct {
	data *WallPaper_Data
}

// Constructors:New:wallPaper
func NewTLwallPaper() *TLwallPaper {
	return &TLwallPaper{data: &WallPaper_Data{}}
}

// Constructors:Predicate:wallPaperNoFile
type TLwallPaperNoFile struct {
	data *WallPaper_Data
}

// Constructors:New:wallPaperNoFile
func NewTLwallPaperNoFile() *TLwallPaperNoFile {
	return &TLwallPaperNoFile{data: &WallPaper_Data{}}
}
func (m *TLwallPaper) Setid(v int64)                          { m.data.id = v }
func (m *TLwallPaper) Getid() int64                           { return m.data.id }
func (m *TLwallPaper) Setcreator(v bool)                      { m.data.creator = v }
func (m *TLwallPaper) Getcreator() bool                       { return m.data.creator }
func (m *TLwallPaper) Setdefault_key(v bool)                  { m.data.default_key = v }
func (m *TLwallPaper) Getdefault_key() bool                   { return m.data.default_key }
func (m *TLwallPaper) Setpattern(v bool)                      { m.data.pattern = v }
func (m *TLwallPaper) Getpattern() bool                       { return m.data.pattern }
func (m *TLwallPaper) Setdark(v bool)                         { m.data.dark = v }
func (m *TLwallPaper) Getdark() bool                          { return m.data.dark }
func (m *TLwallPaper) Setaccess_hash(v int64)                 { m.data.access_hash = v }
func (m *TLwallPaper) Getaccess_hash() int64                  { return m.data.access_hash }
func (m *TLwallPaper) Setslug(v string)                       { m.data.slug = v }
func (m *TLwallPaper) Getslug() string                        { return m.data.slug }
func (m *TLwallPaper) Setdocument(v *Document)                { m.data.document = v }
func (m *TLwallPaper) Getdocument() *Document                 { return m.data.document }
func (m *TLwallPaper) Setsettings(v *WallPaperSettings)       { m.data.settings = v }
func (m *TLwallPaper) Getsettings() *WallPaperSettings        { return m.data.settings }
func (m *TLwallPaperNoFile) Setdefault_key(v bool)            { m.data.default_key = v }
func (m *TLwallPaperNoFile) Getdefault_key() bool             { return m.data.default_key }
func (m *TLwallPaperNoFile) Setdark(v bool)                   { m.data.dark = v }
func (m *TLwallPaperNoFile) Getdark() bool                    { return m.data.dark }
func (m *TLwallPaperNoFile) Setsettings(v *WallPaperSettings) { m.data.settings = v }
func (m *TLwallPaperNoFile) Getsettings() *WallPaperSettings  { return m.data.settings }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputFile
// InputFile <--
// + TLinputFile
// + TLinputFileBig
//
// Constructors:Type:InputFile
type InputFile struct {
	constructor int32
	data        *InputFile_Data
}

// Constructors:Type:Data:InputFile
type InputFile_Data struct {
	id           int64
	parts        int32
	name         string
	md5_checksum string
}

// Constructors:Predicate:inputFile
type TLinputFile struct {
	data *InputFile_Data
}

// Constructors:New:inputFile
func NewTLinputFile() *TLinputFile {
	return &TLinputFile{data: &InputFile_Data{}}
}

// Constructors:Predicate:inputFileBig
type TLinputFileBig struct {
	data *InputFile_Data
}

// Constructors:New:inputFileBig
func NewTLinputFileBig() *TLinputFileBig {
	return &TLinputFileBig{data: &InputFile_Data{}}
}
func (m *TLinputFile) Setid(v int64)            { m.data.id = v }
func (m *TLinputFile) Getid() int64             { return m.data.id }
func (m *TLinputFile) Setparts(v int32)         { m.data.parts = v }
func (m *TLinputFile) Getparts() int32          { return m.data.parts }
func (m *TLinputFile) Setname(v string)         { m.data.name = v }
func (m *TLinputFile) Getname() string          { return m.data.name }
func (m *TLinputFile) Setmd5_checksum(v string) { m.data.md5_checksum = v }
func (m *TLinputFile) Getmd5_checksum() string  { return m.data.md5_checksum }
func (m *TLinputFileBig) Setid(v int64)         { m.data.id = v }
func (m *TLinputFileBig) Getid() int64          { return m.data.id }
func (m *TLinputFileBig) Setparts(v int32)      { m.data.parts = v }
func (m *TLinputFileBig) Getparts() int32       { return m.data.parts }
func (m *TLinputFileBig) Setname(v string)      { m.data.name = v }
func (m *TLinputFileBig) Getname() string       { return m.data.name }

///////////////////////////////////////////////////////////////////////////////
// Constructors:KeyboardButtonRow
// KeyboardButtonRow <--
// + TLkeyboardButtonRow
//
// Constructors:Type:KeyboardButtonRow
type KeyboardButtonRow struct {
	constructor int32
	data        *KeyboardButtonRow_Data
}

// Constructors:Type:Data:KeyboardButtonRow
type KeyboardButtonRow_Data struct {
	buttons []*KeyboardButton
}

// Constructors:Predicate:keyboardButtonRow
type TLkeyboardButtonRow struct {
	data *KeyboardButtonRow_Data
}

// Constructors:New:keyboardButtonRow
func NewTLkeyboardButtonRow() *TLkeyboardButtonRow {
	return &TLkeyboardButtonRow{data: &KeyboardButtonRow_Data{}}
}
func (m *TLkeyboardButtonRow) Setbuttons(v []*KeyboardButton) { m.data.buttons = v }
func (m *TLkeyboardButtonRow) Getbuttons() []*KeyboardButton  { return m.data.buttons }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputDocument
// InputDocument <--
// + TLinputDocumentEmpty
// + TLinputDocument
//
// Constructors:Type:InputDocument
type InputDocument struct {
	constructor int32
	data        *InputDocument_Data
}

// Constructors:Type:Data:InputDocument
type InputDocument_Data struct {
	id             int64
	access_hash    int64
	file_reference []byte
}

// Constructors:Predicate:inputDocumentEmpty
type TLinputDocumentEmpty struct {
	data *InputDocument_Data
}

// Constructors:New:inputDocumentEmpty
func NewTLinputDocumentEmpty() *TLinputDocumentEmpty {
	return &TLinputDocumentEmpty{data: &InputDocument_Data{}}
}

// Constructors:Predicate:inputDocument
type TLinputDocument struct {
	data *InputDocument_Data
}

// Constructors:New:inputDocument
func NewTLinputDocument() *TLinputDocument {
	return &TLinputDocument{data: &InputDocument_Data{}}
}
func (m *TLinputDocument) Setid(v int64)              { m.data.id = v }
func (m *TLinputDocument) Getid() int64               { return m.data.id }
func (m *TLinputDocument) Setaccess_hash(v int64)     { m.data.access_hash = v }
func (m *TLinputDocument) Getaccess_hash() int64      { return m.data.access_hash }
func (m *TLinputDocument) Setfile_reference(v []byte) { m.data.file_reference = v }
func (m *TLinputDocument) Getfile_reference() []byte  { return m.data.file_reference }

///////////////////////////////////////////////////////////////////////////////
// Constructors:SecureSecretSettings
// SecureSecretSettings <--
// + TLsecureSecretSettings
//
// Constructors:Type:SecureSecretSettings
type SecureSecretSettings struct {
	constructor int32
	data        *SecureSecretSettings_Data
}

// Constructors:Type:Data:SecureSecretSettings
type SecureSecretSettings_Data struct {
	secure_algo      *SecurePasswordKdfAlgo
	secure_secret    []byte
	secure_secret_id int64
}

// Constructors:Predicate:secureSecretSettings
type TLsecureSecretSettings struct {
	data *SecureSecretSettings_Data
}

// Constructors:New:secureSecretSettings
func NewTLsecureSecretSettings() *TLsecureSecretSettings {
	return &TLsecureSecretSettings{data: &SecureSecretSettings_Data{}}
}
func (m *TLsecureSecretSettings) Setsecure_algo(v *SecurePasswordKdfAlgo) { m.data.secure_algo = v }
func (m *TLsecureSecretSettings) Getsecure_algo() *SecurePasswordKdfAlgo  { return m.data.secure_algo }
func (m *TLsecureSecretSettings) Setsecure_secret(v []byte)               { m.data.secure_secret = v }
func (m *TLsecureSecretSettings) Getsecure_secret() []byte                { return m.data.secure_secret }
func (m *TLsecureSecretSettings) Setsecure_secret_id(v int64)             { m.data.secure_secret_id = v }
func (m *TLsecureSecretSettings) Getsecure_secret_id() int64              { return m.data.secure_secret_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_BotCallbackAnswer
// messages_BotCallbackAnswer <--
// + TLmessages_botCallbackAnswer
//
// Constructors:Type:messages_BotCallbackAnswer
type messages_BotCallbackAnswer struct {
	constructor int32
	data        *messages_BotCallbackAnswer_Data
}

// Constructors:Type:Data:messages_BotCallbackAnswer
type messages_BotCallbackAnswer_Data struct {
	alert      bool
	has_url    bool
	native_ui  bool
	message    string
	url        string
	cache_time int32
}

// Constructors:Predicate:messages_botCallbackAnswer
type TLmessages_botCallbackAnswer struct {
	data *messages_BotCallbackAnswer_Data
}

// Constructors:New:messages_botCallbackAnswer
func NewTLmessages_botCallbackAnswer() *TLmessages_botCallbackAnswer {
	return &TLmessages_botCallbackAnswer{data: &messages_BotCallbackAnswer_Data{}}
}
func (m *TLmessages_botCallbackAnswer) Setalert(v bool)       { m.data.alert = v }
func (m *TLmessages_botCallbackAnswer) Getalert() bool        { return m.data.alert }
func (m *TLmessages_botCallbackAnswer) Sethas_url(v bool)     { m.data.has_url = v }
func (m *TLmessages_botCallbackAnswer) Gethas_url() bool      { return m.data.has_url }
func (m *TLmessages_botCallbackAnswer) Setnative_ui(v bool)   { m.data.native_ui = v }
func (m *TLmessages_botCallbackAnswer) Getnative_ui() bool    { return m.data.native_ui }
func (m *TLmessages_botCallbackAnswer) Setmessage(v string)   { m.data.message = v }
func (m *TLmessages_botCallbackAnswer) Getmessage() string    { return m.data.message }
func (m *TLmessages_botCallbackAnswer) Seturl(v string)       { m.data.url = v }
func (m *TLmessages_botCallbackAnswer) Geturl() string        { return m.data.url }
func (m *TLmessages_botCallbackAnswer) Setcache_time(v int32) { m.data.cache_time = v }
func (m *TLmessages_botCallbackAnswer) Getcache_time() int32  { return m.data.cache_time }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputWebFileLocation
// InputWebFileLocation <--
// + TLinputWebFileLocation
// + TLinputWebFileGeoPointLocation
//
// Constructors:Type:InputWebFileLocation
type InputWebFileLocation struct {
	constructor int32
	data        *InputWebFileLocation_Data
}

// Constructors:Type:Data:InputWebFileLocation
type InputWebFileLocation_Data struct {
	url         string
	access_hash int64
	geo_point   *InputGeoPoint
	w           int32
	h           int32
	zoom        int32
	scale       int32
}

// Constructors:Predicate:inputWebFileLocation
type TLinputWebFileLocation struct {
	data *InputWebFileLocation_Data
}

// Constructors:New:inputWebFileLocation
func NewTLinputWebFileLocation() *TLinputWebFileLocation {
	return &TLinputWebFileLocation{data: &InputWebFileLocation_Data{}}
}

// Constructors:Predicate:inputWebFileGeoPointLocation
type TLinputWebFileGeoPointLocation struct {
	data *InputWebFileLocation_Data
}

// Constructors:New:inputWebFileGeoPointLocation
func NewTLinputWebFileGeoPointLocation() *TLinputWebFileGeoPointLocation {
	return &TLinputWebFileGeoPointLocation{data: &InputWebFileLocation_Data{}}
}
func (m *TLinputWebFileLocation) Seturl(v string)                       { m.data.url = v }
func (m *TLinputWebFileLocation) Geturl() string                        { return m.data.url }
func (m *TLinputWebFileLocation) Setaccess_hash(v int64)                { m.data.access_hash = v }
func (m *TLinputWebFileLocation) Getaccess_hash() int64                 { return m.data.access_hash }
func (m *TLinputWebFileGeoPointLocation) Setgeo_point(v *InputGeoPoint) { m.data.geo_point = v }
func (m *TLinputWebFileGeoPointLocation) Getgeo_point() *InputGeoPoint  { return m.data.geo_point }
func (m *TLinputWebFileGeoPointLocation) Setaccess_hash(v int64)        { m.data.access_hash = v }
func (m *TLinputWebFileGeoPointLocation) Getaccess_hash() int64         { return m.data.access_hash }
func (m *TLinputWebFileGeoPointLocation) Setw(v int32)                  { m.data.w = v }
func (m *TLinputWebFileGeoPointLocation) Getw() int32                   { return m.data.w }
func (m *TLinputWebFileGeoPointLocation) Seth(v int32)                  { m.data.h = v }
func (m *TLinputWebFileGeoPointLocation) Geth() int32                   { return m.data.h }
func (m *TLinputWebFileGeoPointLocation) Setzoom(v int32)               { m.data.zoom = v }
func (m *TLinputWebFileGeoPointLocation) Getzoom() int32                { return m.data.zoom }
func (m *TLinputWebFileGeoPointLocation) Setscale(v int32)              { m.data.scale = v }
func (m *TLinputWebFileGeoPointLocation) Getscale() int32               { return m.data.scale }

///////////////////////////////////////////////////////////////////////////////
// Constructors:stats_MegagroupStats
// stats_MegagroupStats <--
// + TLstats_megagroupStats
//
// Constructors:Type:stats_MegagroupStats
type stats_MegagroupStats struct {
	constructor int32
	data        *stats_MegagroupStats_Data
}

// Constructors:Type:Data:stats_MegagroupStats
type stats_MegagroupStats_Data struct {
	period                      *StatsDateRangeDays
	members                     *StatsAbsValueAndPrev
	messages                    *StatsAbsValueAndPrev
	viewers                     *StatsAbsValueAndPrev
	posters                     *StatsAbsValueAndPrev
	growth_graph                *StatsGraph
	members_graph               *StatsGraph
	new_members_by_source_graph *StatsGraph
	languages_graph             *StatsGraph
	messages_graph              *StatsGraph
	actions_graph               *StatsGraph
	top_hours_graph             *StatsGraph
	weekdays_graph              *StatsGraph
	top_posters                 []*StatsGroupTopPoster
	top_admins                  []*StatsGroupTopAdmin
	top_inviters                []*StatsGroupTopInviter
	users                       []*User
}

// Constructors:Predicate:stats_megagroupStats
type TLstats_megagroupStats struct {
	data *stats_MegagroupStats_Data
}

// Constructors:New:stats_megagroupStats
func NewTLstats_megagroupStats() *TLstats_megagroupStats {
	return &TLstats_megagroupStats{data: &stats_MegagroupStats_Data{}}
}
func (m *TLstats_megagroupStats) Setperiod(v *StatsDateRangeDays)     { m.data.period = v }
func (m *TLstats_megagroupStats) Getperiod() *StatsDateRangeDays      { return m.data.period }
func (m *TLstats_megagroupStats) Setmembers(v *StatsAbsValueAndPrev)  { m.data.members = v }
func (m *TLstats_megagroupStats) Getmembers() *StatsAbsValueAndPrev   { return m.data.members }
func (m *TLstats_megagroupStats) Setmessages(v *StatsAbsValueAndPrev) { m.data.messages = v }
func (m *TLstats_megagroupStats) Getmessages() *StatsAbsValueAndPrev  { return m.data.messages }
func (m *TLstats_megagroupStats) Setviewers(v *StatsAbsValueAndPrev)  { m.data.viewers = v }
func (m *TLstats_megagroupStats) Getviewers() *StatsAbsValueAndPrev   { return m.data.viewers }
func (m *TLstats_megagroupStats) Setposters(v *StatsAbsValueAndPrev)  { m.data.posters = v }
func (m *TLstats_megagroupStats) Getposters() *StatsAbsValueAndPrev   { return m.data.posters }
func (m *TLstats_megagroupStats) Setgrowth_graph(v *StatsGraph)       { m.data.growth_graph = v }
func (m *TLstats_megagroupStats) Getgrowth_graph() *StatsGraph        { return m.data.growth_graph }
func (m *TLstats_megagroupStats) Setmembers_graph(v *StatsGraph)      { m.data.members_graph = v }
func (m *TLstats_megagroupStats) Getmembers_graph() *StatsGraph       { return m.data.members_graph }
func (m *TLstats_megagroupStats) Setnew_members_by_source_graph(v *StatsGraph) {
	m.data.new_members_by_source_graph = v
}
func (m *TLstats_megagroupStats) Getnew_members_by_source_graph() *StatsGraph {
	return m.data.new_members_by_source_graph
}
func (m *TLstats_megagroupStats) Setlanguages_graph(v *StatsGraph)          { m.data.languages_graph = v }
func (m *TLstats_megagroupStats) Getlanguages_graph() *StatsGraph           { return m.data.languages_graph }
func (m *TLstats_megagroupStats) Setmessages_graph(v *StatsGraph)           { m.data.messages_graph = v }
func (m *TLstats_megagroupStats) Getmessages_graph() *StatsGraph            { return m.data.messages_graph }
func (m *TLstats_megagroupStats) Setactions_graph(v *StatsGraph)            { m.data.actions_graph = v }
func (m *TLstats_megagroupStats) Getactions_graph() *StatsGraph             { return m.data.actions_graph }
func (m *TLstats_megagroupStats) Settop_hours_graph(v *StatsGraph)          { m.data.top_hours_graph = v }
func (m *TLstats_megagroupStats) Gettop_hours_graph() *StatsGraph           { return m.data.top_hours_graph }
func (m *TLstats_megagroupStats) Setweekdays_graph(v *StatsGraph)           { m.data.weekdays_graph = v }
func (m *TLstats_megagroupStats) Getweekdays_graph() *StatsGraph            { return m.data.weekdays_graph }
func (m *TLstats_megagroupStats) Settop_posters(v []*StatsGroupTopPoster)   { m.data.top_posters = v }
func (m *TLstats_megagroupStats) Gettop_posters() []*StatsGroupTopPoster    { return m.data.top_posters }
func (m *TLstats_megagroupStats) Settop_admins(v []*StatsGroupTopAdmin)     { m.data.top_admins = v }
func (m *TLstats_megagroupStats) Gettop_admins() []*StatsGroupTopAdmin      { return m.data.top_admins }
func (m *TLstats_megagroupStats) Settop_inviters(v []*StatsGroupTopInviter) { m.data.top_inviters = v }
func (m *TLstats_megagroupStats) Gettop_inviters() []*StatsGroupTopInviter {
	return m.data.top_inviters
}
func (m *TLstats_megagroupStats) Setusers(v []*User) { m.data.users = v }
func (m *TLstats_megagroupStats) Getusers() []*User  { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ChatBannedRights
// ChatBannedRights <--
// + TLchatBannedRights
//
// Constructors:Type:ChatBannedRights
type ChatBannedRights struct {
	constructor int32
	data        *ChatBannedRights_Data
}

// Constructors:Type:Data:ChatBannedRights
type ChatBannedRights_Data struct {
	view_messages bool
	send_messages bool
	send_media    bool
	send_stickers bool
	send_gifs     bool
	send_games    bool
	send_inline   bool
	embed_links   bool
	send_polls    bool
	change_info   bool
	invite_users  bool
	pin_messages  bool
	until_date    int32
}

// Constructors:Predicate:chatBannedRights
type TLchatBannedRights struct {
	data *ChatBannedRights_Data
}

// Constructors:New:chatBannedRights
func NewTLchatBannedRights() *TLchatBannedRights {
	return &TLchatBannedRights{data: &ChatBannedRights_Data{}}
}
func (m *TLchatBannedRights) Setview_messages(v bool) { m.data.view_messages = v }
func (m *TLchatBannedRights) Getview_messages() bool  { return m.data.view_messages }
func (m *TLchatBannedRights) Setsend_messages(v bool) { m.data.send_messages = v }
func (m *TLchatBannedRights) Getsend_messages() bool  { return m.data.send_messages }
func (m *TLchatBannedRights) Setsend_media(v bool)    { m.data.send_media = v }
func (m *TLchatBannedRights) Getsend_media() bool     { return m.data.send_media }
func (m *TLchatBannedRights) Setsend_stickers(v bool) { m.data.send_stickers = v }
func (m *TLchatBannedRights) Getsend_stickers() bool  { return m.data.send_stickers }
func (m *TLchatBannedRights) Setsend_gifs(v bool)     { m.data.send_gifs = v }
func (m *TLchatBannedRights) Getsend_gifs() bool      { return m.data.send_gifs }
func (m *TLchatBannedRights) Setsend_games(v bool)    { m.data.send_games = v }
func (m *TLchatBannedRights) Getsend_games() bool     { return m.data.send_games }
func (m *TLchatBannedRights) Setsend_inline(v bool)   { m.data.send_inline = v }
func (m *TLchatBannedRights) Getsend_inline() bool    { return m.data.send_inline }
func (m *TLchatBannedRights) Setembed_links(v bool)   { m.data.embed_links = v }
func (m *TLchatBannedRights) Getembed_links() bool    { return m.data.embed_links }
func (m *TLchatBannedRights) Setsend_polls(v bool)    { m.data.send_polls = v }
func (m *TLchatBannedRights) Getsend_polls() bool     { return m.data.send_polls }
func (m *TLchatBannedRights) Setchange_info(v bool)   { m.data.change_info = v }
func (m *TLchatBannedRights) Getchange_info() bool    { return m.data.change_info }
func (m *TLchatBannedRights) Setinvite_users(v bool)  { m.data.invite_users = v }
func (m *TLchatBannedRights) Getinvite_users() bool   { return m.data.invite_users }
func (m *TLchatBannedRights) Setpin_messages(v bool)  { m.data.pin_messages = v }
func (m *TLchatBannedRights) Getpin_messages() bool   { return m.data.pin_messages }
func (m *TLchatBannedRights) Setuntil_date(v int32)   { m.data.until_date = v }
func (m *TLchatBannedRights) Getuntil_date() int32    { return m.data.until_date }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PageBlock
// PageBlock <--
// + TLpageBlockUnsupported
// + TLpageBlockTitle
// + TLpageBlockSubtitle
// + TLpageBlockAuthorDate
// + TLpageBlockHeader
// + TLpageBlockSubheader
// + TLpageBlockParagraph
// + TLpageBlockPreformatted
// + TLpageBlockFooter
// + TLpageBlockDivider
// + TLpageBlockAnchor
// + TLpageBlockList
// + TLpageBlockBlockquote
// + TLpageBlockPullquote
// + TLpageBlockPhoto
// + TLpageBlockVideo
// + TLpageBlockCover
// + TLpageBlockEmbed
// + TLpageBlockEmbedPost
// + TLpageBlockCollage
// + TLpageBlockSlideshow
// + TLpageBlockChannel
// + TLpageBlockAudio
// + TLpageBlockKicker
// + TLpageBlockTable
// + TLpageBlockOrderedList
// + TLpageBlockDetails
// + TLpageBlockRelatedArticles
// + TLpageBlockMap
//
// Constructors:Type:PageBlock
type PageBlock struct {
	constructor int32
	data        *PageBlock_Data
}

// Constructors:Type:Data:PageBlock
type PageBlock_Data struct {
	text            *RichText
	author          *RichText
	published_date  int32
	language        string
	name            string
	items           []*PageListItem
	caption         *RichText
	photo_id        int64
	caption_9       *PageCaption
	url             string
	webpage_id      int64
	autoplay        bool
	loop            bool
	video_id        int64
	cover           *PageBlock
	full_width      bool
	allow_scrolling bool
	html            string
	poster_photo_id int64
	w               int32
	h               int32
	author_photo_id int64
	author_23       string
	date            int32
	blocks          []*PageBlock
	items_26        []*PageBlock
	channel         *Chat
	audio_id        int64
	bordered        bool
	striped         bool
	title           *RichText
	rows            []*PageTableRow
	items_33        []*PageListOrderedItem
	open            bool
	articles        []*PageRelatedArticle
	geo             *GeoPoint
	zoom            int32
}

// Constructors:Predicate:pageBlockUnsupported
type TLpageBlockUnsupported struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockUnsupported
func NewTLpageBlockUnsupported() *TLpageBlockUnsupported {
	return &TLpageBlockUnsupported{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockTitle
type TLpageBlockTitle struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockTitle
func NewTLpageBlockTitle() *TLpageBlockTitle {
	return &TLpageBlockTitle{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockSubtitle
type TLpageBlockSubtitle struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockSubtitle
func NewTLpageBlockSubtitle() *TLpageBlockSubtitle {
	return &TLpageBlockSubtitle{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockAuthorDate
type TLpageBlockAuthorDate struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockAuthorDate
func NewTLpageBlockAuthorDate() *TLpageBlockAuthorDate {
	return &TLpageBlockAuthorDate{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockHeader
type TLpageBlockHeader struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockHeader
func NewTLpageBlockHeader() *TLpageBlockHeader {
	return &TLpageBlockHeader{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockSubheader
type TLpageBlockSubheader struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockSubheader
func NewTLpageBlockSubheader() *TLpageBlockSubheader {
	return &TLpageBlockSubheader{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockParagraph
type TLpageBlockParagraph struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockParagraph
func NewTLpageBlockParagraph() *TLpageBlockParagraph {
	return &TLpageBlockParagraph{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockPreformatted
type TLpageBlockPreformatted struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockPreformatted
func NewTLpageBlockPreformatted() *TLpageBlockPreformatted {
	return &TLpageBlockPreformatted{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockFooter
type TLpageBlockFooter struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockFooter
func NewTLpageBlockFooter() *TLpageBlockFooter {
	return &TLpageBlockFooter{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockDivider
type TLpageBlockDivider struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockDivider
func NewTLpageBlockDivider() *TLpageBlockDivider {
	return &TLpageBlockDivider{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockAnchor
type TLpageBlockAnchor struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockAnchor
func NewTLpageBlockAnchor() *TLpageBlockAnchor {
	return &TLpageBlockAnchor{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockList
type TLpageBlockList struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockList
func NewTLpageBlockList() *TLpageBlockList {
	return &TLpageBlockList{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockBlockquote
type TLpageBlockBlockquote struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockBlockquote
func NewTLpageBlockBlockquote() *TLpageBlockBlockquote {
	return &TLpageBlockBlockquote{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockPullquote
type TLpageBlockPullquote struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockPullquote
func NewTLpageBlockPullquote() *TLpageBlockPullquote {
	return &TLpageBlockPullquote{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockPhoto
type TLpageBlockPhoto struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockPhoto
func NewTLpageBlockPhoto() *TLpageBlockPhoto {
	return &TLpageBlockPhoto{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockVideo
type TLpageBlockVideo struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockVideo
func NewTLpageBlockVideo() *TLpageBlockVideo {
	return &TLpageBlockVideo{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockCover
type TLpageBlockCover struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockCover
func NewTLpageBlockCover() *TLpageBlockCover {
	return &TLpageBlockCover{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockEmbed
type TLpageBlockEmbed struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockEmbed
func NewTLpageBlockEmbed() *TLpageBlockEmbed {
	return &TLpageBlockEmbed{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockEmbedPost
type TLpageBlockEmbedPost struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockEmbedPost
func NewTLpageBlockEmbedPost() *TLpageBlockEmbedPost {
	return &TLpageBlockEmbedPost{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockCollage
type TLpageBlockCollage struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockCollage
func NewTLpageBlockCollage() *TLpageBlockCollage {
	return &TLpageBlockCollage{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockSlideshow
type TLpageBlockSlideshow struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockSlideshow
func NewTLpageBlockSlideshow() *TLpageBlockSlideshow {
	return &TLpageBlockSlideshow{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockChannel
type TLpageBlockChannel struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockChannel
func NewTLpageBlockChannel() *TLpageBlockChannel {
	return &TLpageBlockChannel{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockAudio
type TLpageBlockAudio struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockAudio
func NewTLpageBlockAudio() *TLpageBlockAudio {
	return &TLpageBlockAudio{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockKicker
type TLpageBlockKicker struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockKicker
func NewTLpageBlockKicker() *TLpageBlockKicker {
	return &TLpageBlockKicker{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockTable
type TLpageBlockTable struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockTable
func NewTLpageBlockTable() *TLpageBlockTable {
	return &TLpageBlockTable{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockOrderedList
type TLpageBlockOrderedList struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockOrderedList
func NewTLpageBlockOrderedList() *TLpageBlockOrderedList {
	return &TLpageBlockOrderedList{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockDetails
type TLpageBlockDetails struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockDetails
func NewTLpageBlockDetails() *TLpageBlockDetails {
	return &TLpageBlockDetails{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockRelatedArticles
type TLpageBlockRelatedArticles struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockRelatedArticles
func NewTLpageBlockRelatedArticles() *TLpageBlockRelatedArticles {
	return &TLpageBlockRelatedArticles{data: &PageBlock_Data{}}
}

// Constructors:Predicate:pageBlockMap
type TLpageBlockMap struct {
	data *PageBlock_Data
}

// Constructors:New:pageBlockMap
func NewTLpageBlockMap() *TLpageBlockMap {
	return &TLpageBlockMap{data: &PageBlock_Data{}}
}
func (m *TLpageBlockTitle) Settext(v *RichText)                           { m.data.text = v }
func (m *TLpageBlockTitle) Gettext() *RichText                            { return m.data.text }
func (m *TLpageBlockSubtitle) Settext(v *RichText)                        { m.data.text = v }
func (m *TLpageBlockSubtitle) Gettext() *RichText                         { return m.data.text }
func (m *TLpageBlockAuthorDate) Setauthor(v *RichText)                    { m.data.author = v }
func (m *TLpageBlockAuthorDate) Getauthor() *RichText                     { return m.data.author }
func (m *TLpageBlockAuthorDate) Setpublished_date(v int32)                { m.data.published_date = v }
func (m *TLpageBlockAuthorDate) Getpublished_date() int32                 { return m.data.published_date }
func (m *TLpageBlockHeader) Settext(v *RichText)                          { m.data.text = v }
func (m *TLpageBlockHeader) Gettext() *RichText                           { return m.data.text }
func (m *TLpageBlockSubheader) Settext(v *RichText)                       { m.data.text = v }
func (m *TLpageBlockSubheader) Gettext() *RichText                        { return m.data.text }
func (m *TLpageBlockParagraph) Settext(v *RichText)                       { m.data.text = v }
func (m *TLpageBlockParagraph) Gettext() *RichText                        { return m.data.text }
func (m *TLpageBlockPreformatted) Settext(v *RichText)                    { m.data.text = v }
func (m *TLpageBlockPreformatted) Gettext() *RichText                     { return m.data.text }
func (m *TLpageBlockPreformatted) Setlanguage(v string)                   { m.data.language = v }
func (m *TLpageBlockPreformatted) Getlanguage() string                    { return m.data.language }
func (m *TLpageBlockFooter) Settext(v *RichText)                          { m.data.text = v }
func (m *TLpageBlockFooter) Gettext() *RichText                           { return m.data.text }
func (m *TLpageBlockAnchor) Setname(v string)                             { m.data.name = v }
func (m *TLpageBlockAnchor) Getname() string                              { return m.data.name }
func (m *TLpageBlockList) Setitems(v []*PageListItem)                     { m.data.items = v }
func (m *TLpageBlockList) Getitems() []*PageListItem                      { return m.data.items }
func (m *TLpageBlockBlockquote) Settext(v *RichText)                      { m.data.text = v }
func (m *TLpageBlockBlockquote) Gettext() *RichText                       { return m.data.text }
func (m *TLpageBlockBlockquote) Setcaption(v *RichText)                   { m.data.caption = v }
func (m *TLpageBlockBlockquote) Getcaption() *RichText                    { return m.data.caption }
func (m *TLpageBlockPullquote) Settext(v *RichText)                       { m.data.text = v }
func (m *TLpageBlockPullquote) Gettext() *RichText                        { return m.data.text }
func (m *TLpageBlockPullquote) Setcaption(v *RichText)                    { m.data.caption = v }
func (m *TLpageBlockPullquote) Getcaption() *RichText                     { return m.data.caption }
func (m *TLpageBlockPhoto) Setphoto_id(v int64)                           { m.data.photo_id = v }
func (m *TLpageBlockPhoto) Getphoto_id() int64                            { return m.data.photo_id }
func (m *TLpageBlockPhoto) Setcaption_9(v *PageCaption)                   { m.data.caption_9 = v }
func (m *TLpageBlockPhoto) Getcaption_9() *PageCaption                    { return m.data.caption_9 }
func (m *TLpageBlockPhoto) Seturl(v string)                               { m.data.url = v }
func (m *TLpageBlockPhoto) Geturl() string                                { return m.data.url }
func (m *TLpageBlockPhoto) Setwebpage_id(v int64)                         { m.data.webpage_id = v }
func (m *TLpageBlockPhoto) Getwebpage_id() int64                          { return m.data.webpage_id }
func (m *TLpageBlockVideo) Setautoplay(v bool)                            { m.data.autoplay = v }
func (m *TLpageBlockVideo) Getautoplay() bool                             { return m.data.autoplay }
func (m *TLpageBlockVideo) Setloop(v bool)                                { m.data.loop = v }
func (m *TLpageBlockVideo) Getloop() bool                                 { return m.data.loop }
func (m *TLpageBlockVideo) Setvideo_id(v int64)                           { m.data.video_id = v }
func (m *TLpageBlockVideo) Getvideo_id() int64                            { return m.data.video_id }
func (m *TLpageBlockVideo) Setcaption_9(v *PageCaption)                   { m.data.caption_9 = v }
func (m *TLpageBlockVideo) Getcaption_9() *PageCaption                    { return m.data.caption_9 }
func (m *TLpageBlockCover) Setcover(v *PageBlock)                         { m.data.cover = v }
func (m *TLpageBlockCover) Getcover() *PageBlock                          { return m.data.cover }
func (m *TLpageBlockEmbed) Setfull_width(v bool)                          { m.data.full_width = v }
func (m *TLpageBlockEmbed) Getfull_width() bool                           { return m.data.full_width }
func (m *TLpageBlockEmbed) Setallow_scrolling(v bool)                     { m.data.allow_scrolling = v }
func (m *TLpageBlockEmbed) Getallow_scrolling() bool                      { return m.data.allow_scrolling }
func (m *TLpageBlockEmbed) Seturl(v string)                               { m.data.url = v }
func (m *TLpageBlockEmbed) Geturl() string                                { return m.data.url }
func (m *TLpageBlockEmbed) Sethtml(v string)                              { m.data.html = v }
func (m *TLpageBlockEmbed) Gethtml() string                               { return m.data.html }
func (m *TLpageBlockEmbed) Setposter_photo_id(v int64)                    { m.data.poster_photo_id = v }
func (m *TLpageBlockEmbed) Getposter_photo_id() int64                     { return m.data.poster_photo_id }
func (m *TLpageBlockEmbed) Setw(v int32)                                  { m.data.w = v }
func (m *TLpageBlockEmbed) Getw() int32                                   { return m.data.w }
func (m *TLpageBlockEmbed) Seth(v int32)                                  { m.data.h = v }
func (m *TLpageBlockEmbed) Geth() int32                                   { return m.data.h }
func (m *TLpageBlockEmbed) Setcaption_9(v *PageCaption)                   { m.data.caption_9 = v }
func (m *TLpageBlockEmbed) Getcaption_9() *PageCaption                    { return m.data.caption_9 }
func (m *TLpageBlockEmbedPost) Seturl(v string)                           { m.data.url = v }
func (m *TLpageBlockEmbedPost) Geturl() string                            { return m.data.url }
func (m *TLpageBlockEmbedPost) Setwebpage_id(v int64)                     { m.data.webpage_id = v }
func (m *TLpageBlockEmbedPost) Getwebpage_id() int64                      { return m.data.webpage_id }
func (m *TLpageBlockEmbedPost) Setauthor_photo_id(v int64)                { m.data.author_photo_id = v }
func (m *TLpageBlockEmbedPost) Getauthor_photo_id() int64                 { return m.data.author_photo_id }
func (m *TLpageBlockEmbedPost) Setauthor_23(v string)                     { m.data.author_23 = v }
func (m *TLpageBlockEmbedPost) Getauthor_23() string                      { return m.data.author_23 }
func (m *TLpageBlockEmbedPost) Setdate(v int32)                           { m.data.date = v }
func (m *TLpageBlockEmbedPost) Getdate() int32                            { return m.data.date }
func (m *TLpageBlockEmbedPost) Setblocks(v []*PageBlock)                  { m.data.blocks = v }
func (m *TLpageBlockEmbedPost) Getblocks() []*PageBlock                   { return m.data.blocks }
func (m *TLpageBlockEmbedPost) Setcaption_9(v *PageCaption)               { m.data.caption_9 = v }
func (m *TLpageBlockEmbedPost) Getcaption_9() *PageCaption                { return m.data.caption_9 }
func (m *TLpageBlockCollage) Setitems_26(v []*PageBlock)                  { m.data.items_26 = v }
func (m *TLpageBlockCollage) Getitems_26() []*PageBlock                   { return m.data.items_26 }
func (m *TLpageBlockCollage) Setcaption_9(v *PageCaption)                 { m.data.caption_9 = v }
func (m *TLpageBlockCollage) Getcaption_9() *PageCaption                  { return m.data.caption_9 }
func (m *TLpageBlockSlideshow) Setitems_26(v []*PageBlock)                { m.data.items_26 = v }
func (m *TLpageBlockSlideshow) Getitems_26() []*PageBlock                 { return m.data.items_26 }
func (m *TLpageBlockSlideshow) Setcaption_9(v *PageCaption)               { m.data.caption_9 = v }
func (m *TLpageBlockSlideshow) Getcaption_9() *PageCaption                { return m.data.caption_9 }
func (m *TLpageBlockChannel) Setchannel(v *Chat)                          { m.data.channel = v }
func (m *TLpageBlockChannel) Getchannel() *Chat                           { return m.data.channel }
func (m *TLpageBlockAudio) Setaudio_id(v int64)                           { m.data.audio_id = v }
func (m *TLpageBlockAudio) Getaudio_id() int64                            { return m.data.audio_id }
func (m *TLpageBlockAudio) Setcaption_9(v *PageCaption)                   { m.data.caption_9 = v }
func (m *TLpageBlockAudio) Getcaption_9() *PageCaption                    { return m.data.caption_9 }
func (m *TLpageBlockKicker) Settext(v *RichText)                          { m.data.text = v }
func (m *TLpageBlockKicker) Gettext() *RichText                           { return m.data.text }
func (m *TLpageBlockTable) Setbordered(v bool)                            { m.data.bordered = v }
func (m *TLpageBlockTable) Getbordered() bool                             { return m.data.bordered }
func (m *TLpageBlockTable) Setstriped(v bool)                             { m.data.striped = v }
func (m *TLpageBlockTable) Getstriped() bool                              { return m.data.striped }
func (m *TLpageBlockTable) Settitle(v *RichText)                          { m.data.title = v }
func (m *TLpageBlockTable) Gettitle() *RichText                           { return m.data.title }
func (m *TLpageBlockTable) Setrows(v []*PageTableRow)                     { m.data.rows = v }
func (m *TLpageBlockTable) Getrows() []*PageTableRow                      { return m.data.rows }
func (m *TLpageBlockOrderedList) Setitems_33(v []*PageListOrderedItem)    { m.data.items_33 = v }
func (m *TLpageBlockOrderedList) Getitems_33() []*PageListOrderedItem     { return m.data.items_33 }
func (m *TLpageBlockDetails) Setopen(v bool)                              { m.data.open = v }
func (m *TLpageBlockDetails) Getopen() bool                               { return m.data.open }
func (m *TLpageBlockDetails) Setblocks(v []*PageBlock)                    { m.data.blocks = v }
func (m *TLpageBlockDetails) Getblocks() []*PageBlock                     { return m.data.blocks }
func (m *TLpageBlockDetails) Settitle(v *RichText)                        { m.data.title = v }
func (m *TLpageBlockDetails) Gettitle() *RichText                         { return m.data.title }
func (m *TLpageBlockRelatedArticles) Settitle(v *RichText)                { m.data.title = v }
func (m *TLpageBlockRelatedArticles) Gettitle() *RichText                 { return m.data.title }
func (m *TLpageBlockRelatedArticles) Setarticles(v []*PageRelatedArticle) { m.data.articles = v }
func (m *TLpageBlockRelatedArticles) Getarticles() []*PageRelatedArticle  { return m.data.articles }
func (m *TLpageBlockMap) Setgeo(v *GeoPoint)                              { m.data.geo = v }
func (m *TLpageBlockMap) Getgeo() *GeoPoint                               { return m.data.geo }
func (m *TLpageBlockMap) Setzoom(v int32)                                 { m.data.zoom = v }
func (m *TLpageBlockMap) Getzoom() int32                                  { return m.data.zoom }
func (m *TLpageBlockMap) Setw(v int32)                                    { m.data.w = v }
func (m *TLpageBlockMap) Getw() int32                                     { return m.data.w }
func (m *TLpageBlockMap) Seth(v int32)                                    { m.data.h = v }
func (m *TLpageBlockMap) Geth() int32                                     { return m.data.h }
func (m *TLpageBlockMap) Setcaption_9(v *PageCaption)                     { m.data.caption_9 = v }
func (m *TLpageBlockMap) Getcaption_9() *PageCaption                      { return m.data.caption_9 }

///////////////////////////////////////////////////////////////////////////////
// Constructors:channels_ChannelParticipants
// channels_ChannelParticipants <--
// + TLchannels_channelParticipants
// + TLchannels_channelParticipantsNotModified
//
// Constructors:Type:channels_ChannelParticipants
type channels_ChannelParticipants struct {
	constructor int32
	data        *channels_ChannelParticipants_Data
}

// Constructors:Type:Data:channels_ChannelParticipants
type channels_ChannelParticipants_Data struct {
	count        int32
	participants []*ChannelParticipant
	users        []*User
}

// Constructors:Predicate:channels_channelParticipants
type TLchannels_channelParticipants struct {
	data *channels_ChannelParticipants_Data
}

// Constructors:New:channels_channelParticipants
func NewTLchannels_channelParticipants() *TLchannels_channelParticipants {
	return &TLchannels_channelParticipants{data: &channels_ChannelParticipants_Data{}}
}

// Constructors:Predicate:channels_channelParticipantsNotModified
type TLchannels_channelParticipantsNotModified struct {
	data *channels_ChannelParticipants_Data
}

// Constructors:New:channels_channelParticipantsNotModified
func NewTLchannels_channelParticipantsNotModified() *TLchannels_channelParticipantsNotModified {
	return &TLchannels_channelParticipantsNotModified{data: &channels_ChannelParticipants_Data{}}
}
func (m *TLchannels_channelParticipants) Setcount(v int32) { m.data.count = v }
func (m *TLchannels_channelParticipants) Getcount() int32  { return m.data.count }
func (m *TLchannels_channelParticipants) Setparticipants(v []*ChannelParticipant) {
	m.data.participants = v
}
func (m *TLchannels_channelParticipants) Getparticipants() []*ChannelParticipant {
	return m.data.participants
}
func (m *TLchannels_channelParticipants) Setusers(v []*User) { m.data.users = v }
func (m *TLchannels_channelParticipants) Getusers() []*User  { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputStickerSetItem
// InputStickerSetItem <--
// + TLinputStickerSetItem
//
// Constructors:Type:InputStickerSetItem
type InputStickerSetItem struct {
	constructor int32
	data        *InputStickerSetItem_Data
}

// Constructors:Type:Data:InputStickerSetItem
type InputStickerSetItem_Data struct {
	document    *InputDocument
	emoji       string
	mask_coords *MaskCoords
}

// Constructors:Predicate:inputStickerSetItem
type TLinputStickerSetItem struct {
	data *InputStickerSetItem_Data
}

// Constructors:New:inputStickerSetItem
func NewTLinputStickerSetItem() *TLinputStickerSetItem {
	return &TLinputStickerSetItem{data: &InputStickerSetItem_Data{}}
}
func (m *TLinputStickerSetItem) Setdocument(v *InputDocument) { m.data.document = v }
func (m *TLinputStickerSetItem) Getdocument() *InputDocument  { return m.data.document }
func (m *TLinputStickerSetItem) Setemoji(v string)            { m.data.emoji = v }
func (m *TLinputStickerSetItem) Getemoji() string             { return m.data.emoji }
func (m *TLinputStickerSetItem) Setmask_coords(v *MaskCoords) { m.data.mask_coords = v }
func (m *TLinputStickerSetItem) Getmask_coords() *MaskCoords  { return m.data.mask_coords }

///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageReplies
// MessageReplies <--
// + TLmessageReplies
//
// Constructors:Type:MessageReplies
type MessageReplies struct {
	constructor int32
	data        *MessageReplies_Data
}

// Constructors:Type:Data:MessageReplies
type MessageReplies_Data struct {
	comments        bool
	replies         int32
	replies_pts     int32
	recent_repliers []*Peer
	channel_id      int32
	max_id          int32
	read_max_id     int32
}

// Constructors:Predicate:messageReplies
type TLmessageReplies struct {
	data *MessageReplies_Data
}

// Constructors:New:messageReplies
func NewTLmessageReplies() *TLmessageReplies {
	return &TLmessageReplies{data: &MessageReplies_Data{}}
}
func (m *TLmessageReplies) Setcomments(v bool)           { m.data.comments = v }
func (m *TLmessageReplies) Getcomments() bool            { return m.data.comments }
func (m *TLmessageReplies) Setreplies(v int32)           { m.data.replies = v }
func (m *TLmessageReplies) Getreplies() int32            { return m.data.replies }
func (m *TLmessageReplies) Setreplies_pts(v int32)       { m.data.replies_pts = v }
func (m *TLmessageReplies) Getreplies_pts() int32        { return m.data.replies_pts }
func (m *TLmessageReplies) Setrecent_repliers(v []*Peer) { m.data.recent_repliers = v }
func (m *TLmessageReplies) Getrecent_repliers() []*Peer  { return m.data.recent_repliers }
func (m *TLmessageReplies) Setchannel_id(v int32)        { m.data.channel_id = v }
func (m *TLmessageReplies) Getchannel_id() int32         { return m.data.channel_id }
func (m *TLmessageReplies) Setmax_id(v int32)            { m.data.max_id = v }
func (m *TLmessageReplies) Getmax_id() int32             { return m.data.max_id }
func (m *TLmessageReplies) Setread_max_id(v int32)       { m.data.read_max_id = v }
func (m *TLmessageReplies) Getread_max_id() int32        { return m.data.read_max_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:Config
// Config <--
// + TLconfig
//
// Constructors:Type:Config
type Config struct {
	constructor int32
	data        *Config_Data
}

// Constructors:Type:Data:Config
type Config_Data struct {
	phonecalls_enabled         bool
	default_p2p_contacts       bool
	preload_featured_stickers  bool
	ignore_phone_entities      bool
	revoke_pm_inbox            bool
	blocked_mode               bool
	pfs_enabled                bool
	date                       int32
	expires                    int32
	test_mode                  *Bool
	this_dc                    int32
	dc_options                 []*DcOption
	dc_txt_domain_name         string
	chat_size_max              int32
	megagroup_size_max         int32
	forwarded_count_max        int32
	online_update_period_ms    int32
	offline_blur_timeout_ms    int32
	offline_idle_timeout_ms    int32
	online_cloud_timeout_ms    int32
	notify_cloud_delay_ms      int32
	notify_default_delay_ms    int32
	push_chat_period_ms        int32
	push_chat_limit            int32
	saved_gifs_limit           int32
	edit_time_limit            int32
	revoke_time_limit          int32
	revoke_pm_time_limit       int32
	rating_e_decay             int32
	stickers_recent_limit      int32
	stickers_faved_limit       int32
	channels_read_media_period int32
	tmp_sessions               int32
	pinned_dialogs_count_max   int32
	pinned_infolder_count_max  int32
	call_receive_timeout_ms    int32
	call_ring_timeout_ms       int32
	call_connect_timeout_ms    int32
	call_packet_timeout_ms     int32
	me_url_prefix              string
	autoupdate_url_prefix      string
	gif_search_username        string
	venue_search_username      string
	img_search_username        string
	static_maps_provider       string
	caption_length_max         int32
	message_length_max         int32
	webfile_dc_id              int32
	suggested_lang_code        string
	lang_pack_version          int32
	base_lang_pack_version     int32
}

// Constructors:Predicate:config
type TLconfig struct {
	data *Config_Data
}

// Constructors:New:config
func NewTLconfig() *TLconfig {
	return &TLconfig{data: &Config_Data{}}
}
func (m *TLconfig) Setphonecalls_enabled(v bool)          { m.data.phonecalls_enabled = v }
func (m *TLconfig) Getphonecalls_enabled() bool           { return m.data.phonecalls_enabled }
func (m *TLconfig) Setdefault_p2p_contacts(v bool)        { m.data.default_p2p_contacts = v }
func (m *TLconfig) Getdefault_p2p_contacts() bool         { return m.data.default_p2p_contacts }
func (m *TLconfig) Setpreload_featured_stickers(v bool)   { m.data.preload_featured_stickers = v }
func (m *TLconfig) Getpreload_featured_stickers() bool    { return m.data.preload_featured_stickers }
func (m *TLconfig) Setignore_phone_entities(v bool)       { m.data.ignore_phone_entities = v }
func (m *TLconfig) Getignore_phone_entities() bool        { return m.data.ignore_phone_entities }
func (m *TLconfig) Setrevoke_pm_inbox(v bool)             { m.data.revoke_pm_inbox = v }
func (m *TLconfig) Getrevoke_pm_inbox() bool              { return m.data.revoke_pm_inbox }
func (m *TLconfig) Setblocked_mode(v bool)                { m.data.blocked_mode = v }
func (m *TLconfig) Getblocked_mode() bool                 { return m.data.blocked_mode }
func (m *TLconfig) Setpfs_enabled(v bool)                 { m.data.pfs_enabled = v }
func (m *TLconfig) Getpfs_enabled() bool                  { return m.data.pfs_enabled }
func (m *TLconfig) Setdate(v int32)                       { m.data.date = v }
func (m *TLconfig) Getdate() int32                        { return m.data.date }
func (m *TLconfig) Setexpires(v int32)                    { m.data.expires = v }
func (m *TLconfig) Getexpires() int32                     { return m.data.expires }
func (m *TLconfig) Settest_mode(v *Bool)                  { m.data.test_mode = v }
func (m *TLconfig) Gettest_mode() *Bool                   { return m.data.test_mode }
func (m *TLconfig) Setthis_dc(v int32)                    { m.data.this_dc = v }
func (m *TLconfig) Getthis_dc() int32                     { return m.data.this_dc }
func (m *TLconfig) Setdc_options(v []*DcOption)           { m.data.dc_options = v }
func (m *TLconfig) Getdc_options() []*DcOption            { return m.data.dc_options }
func (m *TLconfig) Setdc_txt_domain_name(v string)        { m.data.dc_txt_domain_name = v }
func (m *TLconfig) Getdc_txt_domain_name() string         { return m.data.dc_txt_domain_name }
func (m *TLconfig) Setchat_size_max(v int32)              { m.data.chat_size_max = v }
func (m *TLconfig) Getchat_size_max() int32               { return m.data.chat_size_max }
func (m *TLconfig) Setmegagroup_size_max(v int32)         { m.data.megagroup_size_max = v }
func (m *TLconfig) Getmegagroup_size_max() int32          { return m.data.megagroup_size_max }
func (m *TLconfig) Setforwarded_count_max(v int32)        { m.data.forwarded_count_max = v }
func (m *TLconfig) Getforwarded_count_max() int32         { return m.data.forwarded_count_max }
func (m *TLconfig) Setonline_update_period_ms(v int32)    { m.data.online_update_period_ms = v }
func (m *TLconfig) Getonline_update_period_ms() int32     { return m.data.online_update_period_ms }
func (m *TLconfig) Setoffline_blur_timeout_ms(v int32)    { m.data.offline_blur_timeout_ms = v }
func (m *TLconfig) Getoffline_blur_timeout_ms() int32     { return m.data.offline_blur_timeout_ms }
func (m *TLconfig) Setoffline_idle_timeout_ms(v int32)    { m.data.offline_idle_timeout_ms = v }
func (m *TLconfig) Getoffline_idle_timeout_ms() int32     { return m.data.offline_idle_timeout_ms }
func (m *TLconfig) Setonline_cloud_timeout_ms(v int32)    { m.data.online_cloud_timeout_ms = v }
func (m *TLconfig) Getonline_cloud_timeout_ms() int32     { return m.data.online_cloud_timeout_ms }
func (m *TLconfig) Setnotify_cloud_delay_ms(v int32)      { m.data.notify_cloud_delay_ms = v }
func (m *TLconfig) Getnotify_cloud_delay_ms() int32       { return m.data.notify_cloud_delay_ms }
func (m *TLconfig) Setnotify_default_delay_ms(v int32)    { m.data.notify_default_delay_ms = v }
func (m *TLconfig) Getnotify_default_delay_ms() int32     { return m.data.notify_default_delay_ms }
func (m *TLconfig) Setpush_chat_period_ms(v int32)        { m.data.push_chat_period_ms = v }
func (m *TLconfig) Getpush_chat_period_ms() int32         { return m.data.push_chat_period_ms }
func (m *TLconfig) Setpush_chat_limit(v int32)            { m.data.push_chat_limit = v }
func (m *TLconfig) Getpush_chat_limit() int32             { return m.data.push_chat_limit }
func (m *TLconfig) Setsaved_gifs_limit(v int32)           { m.data.saved_gifs_limit = v }
func (m *TLconfig) Getsaved_gifs_limit() int32            { return m.data.saved_gifs_limit }
func (m *TLconfig) Setedit_time_limit(v int32)            { m.data.edit_time_limit = v }
func (m *TLconfig) Getedit_time_limit() int32             { return m.data.edit_time_limit }
func (m *TLconfig) Setrevoke_time_limit(v int32)          { m.data.revoke_time_limit = v }
func (m *TLconfig) Getrevoke_time_limit() int32           { return m.data.revoke_time_limit }
func (m *TLconfig) Setrevoke_pm_time_limit(v int32)       { m.data.revoke_pm_time_limit = v }
func (m *TLconfig) Getrevoke_pm_time_limit() int32        { return m.data.revoke_pm_time_limit }
func (m *TLconfig) Setrating_e_decay(v int32)             { m.data.rating_e_decay = v }
func (m *TLconfig) Getrating_e_decay() int32              { return m.data.rating_e_decay }
func (m *TLconfig) Setstickers_recent_limit(v int32)      { m.data.stickers_recent_limit = v }
func (m *TLconfig) Getstickers_recent_limit() int32       { return m.data.stickers_recent_limit }
func (m *TLconfig) Setstickers_faved_limit(v int32)       { m.data.stickers_faved_limit = v }
func (m *TLconfig) Getstickers_faved_limit() int32        { return m.data.stickers_faved_limit }
func (m *TLconfig) Setchannels_read_media_period(v int32) { m.data.channels_read_media_period = v }
func (m *TLconfig) Getchannels_read_media_period() int32  { return m.data.channels_read_media_period }
func (m *TLconfig) Settmp_sessions(v int32)               { m.data.tmp_sessions = v }
func (m *TLconfig) Gettmp_sessions() int32                { return m.data.tmp_sessions }
func (m *TLconfig) Setpinned_dialogs_count_max(v int32)   { m.data.pinned_dialogs_count_max = v }
func (m *TLconfig) Getpinned_dialogs_count_max() int32    { return m.data.pinned_dialogs_count_max }
func (m *TLconfig) Setpinned_infolder_count_max(v int32)  { m.data.pinned_infolder_count_max = v }
func (m *TLconfig) Getpinned_infolder_count_max() int32   { return m.data.pinned_infolder_count_max }
func (m *TLconfig) Setcall_receive_timeout_ms(v int32)    { m.data.call_receive_timeout_ms = v }
func (m *TLconfig) Getcall_receive_timeout_ms() int32     { return m.data.call_receive_timeout_ms }
func (m *TLconfig) Setcall_ring_timeout_ms(v int32)       { m.data.call_ring_timeout_ms = v }
func (m *TLconfig) Getcall_ring_timeout_ms() int32        { return m.data.call_ring_timeout_ms }
func (m *TLconfig) Setcall_connect_timeout_ms(v int32)    { m.data.call_connect_timeout_ms = v }
func (m *TLconfig) Getcall_connect_timeout_ms() int32     { return m.data.call_connect_timeout_ms }
func (m *TLconfig) Setcall_packet_timeout_ms(v int32)     { m.data.call_packet_timeout_ms = v }
func (m *TLconfig) Getcall_packet_timeout_ms() int32      { return m.data.call_packet_timeout_ms }
func (m *TLconfig) Setme_url_prefix(v string)             { m.data.me_url_prefix = v }
func (m *TLconfig) Getme_url_prefix() string              { return m.data.me_url_prefix }
func (m *TLconfig) Setautoupdate_url_prefix(v string)     { m.data.autoupdate_url_prefix = v }
func (m *TLconfig) Getautoupdate_url_prefix() string      { return m.data.autoupdate_url_prefix }
func (m *TLconfig) Setgif_search_username(v string)       { m.data.gif_search_username = v }
func (m *TLconfig) Getgif_search_username() string        { return m.data.gif_search_username }
func (m *TLconfig) Setvenue_search_username(v string)     { m.data.venue_search_username = v }
func (m *TLconfig) Getvenue_search_username() string      { return m.data.venue_search_username }
func (m *TLconfig) Setimg_search_username(v string)       { m.data.img_search_username = v }
func (m *TLconfig) Getimg_search_username() string        { return m.data.img_search_username }
func (m *TLconfig) Setstatic_maps_provider(v string)      { m.data.static_maps_provider = v }
func (m *TLconfig) Getstatic_maps_provider() string       { return m.data.static_maps_provider }
func (m *TLconfig) Setcaption_length_max(v int32)         { m.data.caption_length_max = v }
func (m *TLconfig) Getcaption_length_max() int32          { return m.data.caption_length_max }
func (m *TLconfig) Setmessage_length_max(v int32)         { m.data.message_length_max = v }
func (m *TLconfig) Getmessage_length_max() int32          { return m.data.message_length_max }
func (m *TLconfig) Setwebfile_dc_id(v int32)              { m.data.webfile_dc_id = v }
func (m *TLconfig) Getwebfile_dc_id() int32               { return m.data.webfile_dc_id }
func (m *TLconfig) Setsuggested_lang_code(v string)       { m.data.suggested_lang_code = v }
func (m *TLconfig) Getsuggested_lang_code() string        { return m.data.suggested_lang_code }
func (m *TLconfig) Setlang_pack_version(v int32)          { m.data.lang_pack_version = v }
func (m *TLconfig) Getlang_pack_version() int32           { return m.data.lang_pack_version }
func (m *TLconfig) Setbase_lang_pack_version(v int32)     { m.data.base_lang_pack_version = v }
func (m *TLconfig) Getbase_lang_pack_version() int32      { return m.data.base_lang_pack_version }

///////////////////////////////////////////////////////////////////////////////
// Constructors:phone_PhoneCall
// phone_PhoneCall <--
// + TLphone_phoneCall
//
// Constructors:Type:phone_PhoneCall
type phone_PhoneCall struct {
	constructor int32
	data        *phone_PhoneCall_Data
}

// Constructors:Type:Data:phone_PhoneCall
type phone_PhoneCall_Data struct {
	phone_call *PhoneCall
	users      []*User
}

// Constructors:Predicate:phone_phoneCall
type TLphone_phoneCall struct {
	data *phone_PhoneCall_Data
}

// Constructors:New:phone_phoneCall
func NewTLphone_phoneCall() *TLphone_phoneCall {
	return &TLphone_phoneCall{data: &phone_PhoneCall_Data{}}
}
func (m *TLphone_phoneCall) Setphone_call(v *PhoneCall) { m.data.phone_call = v }
func (m *TLphone_phoneCall) Getphone_call() *PhoneCall  { return m.data.phone_call }
func (m *TLphone_phoneCall) Setusers(v []*User)         { m.data.users = v }
func (m *TLphone_phoneCall) Getusers() []*User          { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_StickerSetInstallResult
// messages_StickerSetInstallResult <--
// + TLmessages_stickerSetInstallResultSuccess
// + TLmessages_stickerSetInstallResultArchive
//
// Constructors:Type:messages_StickerSetInstallResult
type messages_StickerSetInstallResult struct {
	constructor int32
	data        *messages_StickerSetInstallResult_Data
}

// Constructors:Type:Data:messages_StickerSetInstallResult
type messages_StickerSetInstallResult_Data struct {
	sets []*StickerSetCovered
}

// Constructors:Predicate:messages_stickerSetInstallResultSuccess
type TLmessages_stickerSetInstallResultSuccess struct {
	data *messages_StickerSetInstallResult_Data
}

// Constructors:New:messages_stickerSetInstallResultSuccess
func NewTLmessages_stickerSetInstallResultSuccess() *TLmessages_stickerSetInstallResultSuccess {
	return &TLmessages_stickerSetInstallResultSuccess{data: &messages_StickerSetInstallResult_Data{}}
}

// Constructors:Predicate:messages_stickerSetInstallResultArchive
type TLmessages_stickerSetInstallResultArchive struct {
	data *messages_StickerSetInstallResult_Data
}

// Constructors:New:messages_stickerSetInstallResultArchive
func NewTLmessages_stickerSetInstallResultArchive() *TLmessages_stickerSetInstallResultArchive {
	return &TLmessages_stickerSetInstallResultArchive{data: &messages_StickerSetInstallResult_Data{}}
}
func (m *TLmessages_stickerSetInstallResultArchive) Setsets(v []*StickerSetCovered) { m.data.sets = v }
func (m *TLmessages_stickerSetInstallResultArchive) Getsets() []*StickerSetCovered {
	return m.data.sets
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:help_CountryCode
// help_CountryCode <--
// + TLhelp_countryCode
//
// Constructors:Type:help_CountryCode
type help_CountryCode struct {
	constructor int32
	data        *help_CountryCode_Data
}

// Constructors:Type:Data:help_CountryCode
type help_CountryCode_Data struct {
	country_code string
	prefixes     []string
	patterns     []string
}

// Constructors:Predicate:help_countryCode
type TLhelp_countryCode struct {
	data *help_CountryCode_Data
}

// Constructors:New:help_countryCode
func NewTLhelp_countryCode() *TLhelp_countryCode {
	return &TLhelp_countryCode{data: &help_CountryCode_Data{}}
}
func (m *TLhelp_countryCode) Setcountry_code(v string) { m.data.country_code = v }
func (m *TLhelp_countryCode) Getcountry_code() string  { return m.data.country_code }
func (m *TLhelp_countryCode) Setprefixes(v []string)   { m.data.prefixes = v }
func (m *TLhelp_countryCode) Getprefixes() []string    { return m.data.prefixes }
func (m *TLhelp_countryCode) Setpatterns(v []string)   { m.data.patterns = v }
func (m *TLhelp_countryCode) Getpatterns() []string    { return m.data.patterns }

///////////////////////////////////////////////////////////////////////////////
// Constructors:upload_WebFile
// upload_WebFile <--
// + TLupload_webFile
//
// Constructors:Type:upload_WebFile
type upload_WebFile struct {
	constructor int32
	data        *upload_WebFile_Data
}

// Constructors:Type:Data:upload_WebFile
type upload_WebFile_Data struct {
	size      int32
	mime_type string
	file_type *storage_FileType
	mtime     int32
	bytes     []byte
}

// Constructors:Predicate:upload_webFile
type TLupload_webFile struct {
	data *upload_WebFile_Data
}

// Constructors:New:upload_webFile
func NewTLupload_webFile() *TLupload_webFile {
	return &TLupload_webFile{data: &upload_WebFile_Data{}}
}
func (m *TLupload_webFile) Setsize(v int32)                  { m.data.size = v }
func (m *TLupload_webFile) Getsize() int32                   { return m.data.size }
func (m *TLupload_webFile) Setmime_type(v string)            { m.data.mime_type = v }
func (m *TLupload_webFile) Getmime_type() string             { return m.data.mime_type }
func (m *TLupload_webFile) Setfile_type(v *storage_FileType) { m.data.file_type = v }
func (m *TLupload_webFile) Getfile_type() *storage_FileType  { return m.data.file_type }
func (m *TLupload_webFile) Setmtime(v int32)                 { m.data.mtime = v }
func (m *TLupload_webFile) Getmtime() int32                  { return m.data.mtime }
func (m *TLupload_webFile) Setbytes(v []byte)                { m.data.bytes = v }
func (m *TLupload_webFile) Getbytes() []byte                 { return m.data.bytes }

///////////////////////////////////////////////////////////////////////////////
// Constructors:LangPackLanguage
// LangPackLanguage <--
// + TLlangPackLanguage
//
// Constructors:Type:LangPackLanguage
type LangPackLanguage struct {
	constructor int32
	data        *LangPackLanguage_Data
}

// Constructors:Type:Data:LangPackLanguage
type LangPackLanguage_Data struct {
	official         bool
	rtl              bool
	beta             bool
	name             string
	native_name      string
	lang_code        string
	base_lang_code   string
	plural_code      string
	strings_count    int32
	translated_count int32
	translations_url string
}

// Constructors:Predicate:langPackLanguage
type TLlangPackLanguage struct {
	data *LangPackLanguage_Data
}

// Constructors:New:langPackLanguage
func NewTLlangPackLanguage() *TLlangPackLanguage {
	return &TLlangPackLanguage{data: &LangPackLanguage_Data{}}
}
func (m *TLlangPackLanguage) Setofficial(v bool)           { m.data.official = v }
func (m *TLlangPackLanguage) Getofficial() bool            { return m.data.official }
func (m *TLlangPackLanguage) Setrtl(v bool)                { m.data.rtl = v }
func (m *TLlangPackLanguage) Getrtl() bool                 { return m.data.rtl }
func (m *TLlangPackLanguage) Setbeta(v bool)               { m.data.beta = v }
func (m *TLlangPackLanguage) Getbeta() bool                { return m.data.beta }
func (m *TLlangPackLanguage) Setname(v string)             { m.data.name = v }
func (m *TLlangPackLanguage) Getname() string              { return m.data.name }
func (m *TLlangPackLanguage) Setnative_name(v string)      { m.data.native_name = v }
func (m *TLlangPackLanguage) Getnative_name() string       { return m.data.native_name }
func (m *TLlangPackLanguage) Setlang_code(v string)        { m.data.lang_code = v }
func (m *TLlangPackLanguage) Getlang_code() string         { return m.data.lang_code }
func (m *TLlangPackLanguage) Setbase_lang_code(v string)   { m.data.base_lang_code = v }
func (m *TLlangPackLanguage) Getbase_lang_code() string    { return m.data.base_lang_code }
func (m *TLlangPackLanguage) Setplural_code(v string)      { m.data.plural_code = v }
func (m *TLlangPackLanguage) Getplural_code() string       { return m.data.plural_code }
func (m *TLlangPackLanguage) Setstrings_count(v int32)     { m.data.strings_count = v }
func (m *TLlangPackLanguage) Getstrings_count() int32      { return m.data.strings_count }
func (m *TLlangPackLanguage) Settranslated_count(v int32)  { m.data.translated_count = v }
func (m *TLlangPackLanguage) Gettranslated_count() int32   { return m.data.translated_count }
func (m *TLlangPackLanguage) Settranslations_url(v string) { m.data.translations_url = v }
func (m *TLlangPackLanguage) Gettranslations_url() string  { return m.data.translations_url }

///////////////////////////////////////////////////////////////////////////////
// Constructors:AutoDownloadSettings
// AutoDownloadSettings <--
// + TLautoDownloadSettings
//
// Constructors:Type:AutoDownloadSettings
type AutoDownloadSettings struct {
	constructor int32
	data        *AutoDownloadSettings_Data
}

// Constructors:Type:Data:AutoDownloadSettings
type AutoDownloadSettings_Data struct {
	disabled                bool
	video_preload_large     bool
	audio_preload_next      bool
	phonecalls_less_data    bool
	photo_size_max          int32
	video_size_max          int32
	file_size_max           int32
	video_upload_maxbitrate int32
}

// Constructors:Predicate:autoDownloadSettings
type TLautoDownloadSettings struct {
	data *AutoDownloadSettings_Data
}

// Constructors:New:autoDownloadSettings
func NewTLautoDownloadSettings() *TLautoDownloadSettings {
	return &TLautoDownloadSettings{data: &AutoDownloadSettings_Data{}}
}
func (m *TLautoDownloadSettings) Setdisabled(v bool)             { m.data.disabled = v }
func (m *TLautoDownloadSettings) Getdisabled() bool              { return m.data.disabled }
func (m *TLautoDownloadSettings) Setvideo_preload_large(v bool)  { m.data.video_preload_large = v }
func (m *TLautoDownloadSettings) Getvideo_preload_large() bool   { return m.data.video_preload_large }
func (m *TLautoDownloadSettings) Setaudio_preload_next(v bool)   { m.data.audio_preload_next = v }
func (m *TLautoDownloadSettings) Getaudio_preload_next() bool    { return m.data.audio_preload_next }
func (m *TLautoDownloadSettings) Setphonecalls_less_data(v bool) { m.data.phonecalls_less_data = v }
func (m *TLautoDownloadSettings) Getphonecalls_less_data() bool  { return m.data.phonecalls_less_data }
func (m *TLautoDownloadSettings) Setphoto_size_max(v int32)      { m.data.photo_size_max = v }
func (m *TLautoDownloadSettings) Getphoto_size_max() int32       { return m.data.photo_size_max }
func (m *TLautoDownloadSettings) Setvideo_size_max(v int32)      { m.data.video_size_max = v }
func (m *TLautoDownloadSettings) Getvideo_size_max() int32       { return m.data.video_size_max }
func (m *TLautoDownloadSettings) Setfile_size_max(v int32)       { m.data.file_size_max = v }
func (m *TLautoDownloadSettings) Getfile_size_max() int32        { return m.data.file_size_max }
func (m *TLautoDownloadSettings) Setvideo_upload_maxbitrate(v int32) {
	m.data.video_upload_maxbitrate = v
}
func (m *TLautoDownloadSettings) Getvideo_upload_maxbitrate() int32 {
	return m.data.video_upload_maxbitrate
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:PhotoSize
// PhotoSize <--
// + TLphotoSizeEmpty
// + TLphotoSize
// + TLphotoCachedSize
// + TLphotoStrippedSize
// + TLphotoSizeProgressive
// + TLphotoPathSize
//
// Constructors:Type:PhotoSize
type PhotoSize struct {
	constructor int32
	data        *PhotoSize_Data
}

// Constructors:Type:Data:PhotoSize
type PhotoSize_Data struct {
	type_key string
	location *FileLocation
	w        int32
	h        int32
	size     int32
	bytes    []byte
	sizes    []int32
}

// Constructors:Predicate:photoSizeEmpty
type TLphotoSizeEmpty struct {
	data *PhotoSize_Data
}

// Constructors:New:photoSizeEmpty
func NewTLphotoSizeEmpty() *TLphotoSizeEmpty {
	return &TLphotoSizeEmpty{data: &PhotoSize_Data{}}
}

// Constructors:Predicate:photoSize
type TLphotoSize struct {
	data *PhotoSize_Data
}

// Constructors:New:photoSize
func NewTLphotoSize() *TLphotoSize {
	return &TLphotoSize{data: &PhotoSize_Data{}}
}

// Constructors:Predicate:photoCachedSize
type TLphotoCachedSize struct {
	data *PhotoSize_Data
}

// Constructors:New:photoCachedSize
func NewTLphotoCachedSize() *TLphotoCachedSize {
	return &TLphotoCachedSize{data: &PhotoSize_Data{}}
}

// Constructors:Predicate:photoStrippedSize
type TLphotoStrippedSize struct {
	data *PhotoSize_Data
}

// Constructors:New:photoStrippedSize
func NewTLphotoStrippedSize() *TLphotoStrippedSize {
	return &TLphotoStrippedSize{data: &PhotoSize_Data{}}
}

// Constructors:Predicate:photoSizeProgressive
type TLphotoSizeProgressive struct {
	data *PhotoSize_Data
}

// Constructors:New:photoSizeProgressive
func NewTLphotoSizeProgressive() *TLphotoSizeProgressive {
	return &TLphotoSizeProgressive{data: &PhotoSize_Data{}}
}

// Constructors:Predicate:photoPathSize
type TLphotoPathSize struct {
	data *PhotoSize_Data
}

// Constructors:New:photoPathSize
func NewTLphotoPathSize() *TLphotoPathSize {
	return &TLphotoPathSize{data: &PhotoSize_Data{}}
}
func (m *TLphotoSizeEmpty) Settype_key(v string)              { m.data.type_key = v }
func (m *TLphotoSizeEmpty) Gettype_key() string               { return m.data.type_key }
func (m *TLphotoSize) Settype_key(v string)                   { m.data.type_key = v }
func (m *TLphotoSize) Gettype_key() string                    { return m.data.type_key }
func (m *TLphotoSize) Setlocation(v *FileLocation)            { m.data.location = v }
func (m *TLphotoSize) Getlocation() *FileLocation             { return m.data.location }
func (m *TLphotoSize) Setw(v int32)                           { m.data.w = v }
func (m *TLphotoSize) Getw() int32                            { return m.data.w }
func (m *TLphotoSize) Seth(v int32)                           { m.data.h = v }
func (m *TLphotoSize) Geth() int32                            { return m.data.h }
func (m *TLphotoSize) Setsize(v int32)                        { m.data.size = v }
func (m *TLphotoSize) Getsize() int32                         { return m.data.size }
func (m *TLphotoCachedSize) Settype_key(v string)             { m.data.type_key = v }
func (m *TLphotoCachedSize) Gettype_key() string              { return m.data.type_key }
func (m *TLphotoCachedSize) Setlocation(v *FileLocation)      { m.data.location = v }
func (m *TLphotoCachedSize) Getlocation() *FileLocation       { return m.data.location }
func (m *TLphotoCachedSize) Setw(v int32)                     { m.data.w = v }
func (m *TLphotoCachedSize) Getw() int32                      { return m.data.w }
func (m *TLphotoCachedSize) Seth(v int32)                     { m.data.h = v }
func (m *TLphotoCachedSize) Geth() int32                      { return m.data.h }
func (m *TLphotoCachedSize) Setbytes(v []byte)                { m.data.bytes = v }
func (m *TLphotoCachedSize) Getbytes() []byte                 { return m.data.bytes }
func (m *TLphotoStrippedSize) Settype_key(v string)           { m.data.type_key = v }
func (m *TLphotoStrippedSize) Gettype_key() string            { return m.data.type_key }
func (m *TLphotoStrippedSize) Setbytes(v []byte)              { m.data.bytes = v }
func (m *TLphotoStrippedSize) Getbytes() []byte               { return m.data.bytes }
func (m *TLphotoSizeProgressive) Settype_key(v string)        { m.data.type_key = v }
func (m *TLphotoSizeProgressive) Gettype_key() string         { return m.data.type_key }
func (m *TLphotoSizeProgressive) Setlocation(v *FileLocation) { m.data.location = v }
func (m *TLphotoSizeProgressive) Getlocation() *FileLocation  { return m.data.location }
func (m *TLphotoSizeProgressive) Setw(v int32)                { m.data.w = v }
func (m *TLphotoSizeProgressive) Getw() int32                 { return m.data.w }
func (m *TLphotoSizeProgressive) Seth(v int32)                { m.data.h = v }
func (m *TLphotoSizeProgressive) Geth() int32                 { return m.data.h }
func (m *TLphotoSizeProgressive) Setsizes(v []int32)          { m.data.sizes = v }
func (m *TLphotoSizeProgressive) Getsizes() []int32           { return m.data.sizes }
func (m *TLphotoPathSize) Settype_key(v string)               { m.data.type_key = v }
func (m *TLphotoPathSize) Gettype_key() string                { return m.data.type_key }
func (m *TLphotoPathSize) Setbytes(v []byte)                  { m.data.bytes = v }
func (m *TLphotoPathSize) Getbytes() []byte                   { return m.data.bytes }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_Dialogs
// messages_Dialogs <--
// + TLmessages_dialogs
// + TLmessages_dialogsSlice
// + TLmessages_dialogsNotModified
//
// Constructors:Type:messages_Dialogs
type messages_Dialogs struct {
	constructor int32
	data        *messages_Dialogs_Data
}

// Constructors:Type:Data:messages_Dialogs
type messages_Dialogs_Data struct {
	dialogs  []*Dialog
	messages []*Message
	chats    []*Chat
	users    []*User
	count    int32
}

// Constructors:Predicate:messages_dialogs
type TLmessages_dialogs struct {
	data *messages_Dialogs_Data
}

// Constructors:New:messages_dialogs
func NewTLmessages_dialogs() *TLmessages_dialogs {
	return &TLmessages_dialogs{data: &messages_Dialogs_Data{}}
}

// Constructors:Predicate:messages_dialogsSlice
type TLmessages_dialogsSlice struct {
	data *messages_Dialogs_Data
}

// Constructors:New:messages_dialogsSlice
func NewTLmessages_dialogsSlice() *TLmessages_dialogsSlice {
	return &TLmessages_dialogsSlice{data: &messages_Dialogs_Data{}}
}

// Constructors:Predicate:messages_dialogsNotModified
type TLmessages_dialogsNotModified struct {
	data *messages_Dialogs_Data
}

// Constructors:New:messages_dialogsNotModified
func NewTLmessages_dialogsNotModified() *TLmessages_dialogsNotModified {
	return &TLmessages_dialogsNotModified{data: &messages_Dialogs_Data{}}
}
func (m *TLmessages_dialogs) Setdialogs(v []*Dialog)        { m.data.dialogs = v }
func (m *TLmessages_dialogs) Getdialogs() []*Dialog         { return m.data.dialogs }
func (m *TLmessages_dialogs) Setmessages(v []*Message)      { m.data.messages = v }
func (m *TLmessages_dialogs) Getmessages() []*Message       { return m.data.messages }
func (m *TLmessages_dialogs) Setchats(v []*Chat)            { m.data.chats = v }
func (m *TLmessages_dialogs) Getchats() []*Chat             { return m.data.chats }
func (m *TLmessages_dialogs) Setusers(v []*User)            { m.data.users = v }
func (m *TLmessages_dialogs) Getusers() []*User             { return m.data.users }
func (m *TLmessages_dialogsSlice) Setcount(v int32)         { m.data.count = v }
func (m *TLmessages_dialogsSlice) Getcount() int32          { return m.data.count }
func (m *TLmessages_dialogsSlice) Setdialogs(v []*Dialog)   { m.data.dialogs = v }
func (m *TLmessages_dialogsSlice) Getdialogs() []*Dialog    { return m.data.dialogs }
func (m *TLmessages_dialogsSlice) Setmessages(v []*Message) { m.data.messages = v }
func (m *TLmessages_dialogsSlice) Getmessages() []*Message  { return m.data.messages }
func (m *TLmessages_dialogsSlice) Setchats(v []*Chat)       { m.data.chats = v }
func (m *TLmessages_dialogsSlice) Getchats() []*Chat        { return m.data.chats }
func (m *TLmessages_dialogsSlice) Setusers(v []*User)       { m.data.users = v }
func (m *TLmessages_dialogsSlice) Getusers() []*User        { return m.data.users }
func (m *TLmessages_dialogsNotModified) Setcount(v int32)   { m.data.count = v }
func (m *TLmessages_dialogsNotModified) Getcount() int32    { return m.data.count }

///////////////////////////////////////////////////////////////////////////////
// Constructors:SecureFile
// SecureFile <--
// + TLsecureFileEmpty
// + TLsecureFile
//
// Constructors:Type:SecureFile
type SecureFile struct {
	constructor int32
	data        *SecureFile_Data
}

// Constructors:Type:Data:SecureFile
type SecureFile_Data struct {
	id          int64
	access_hash int64
	size        int32
	dc_id       int32
	date        int32
	file_hash   []byte
	secret      []byte
}

// Constructors:Predicate:secureFileEmpty
type TLsecureFileEmpty struct {
	data *SecureFile_Data
}

// Constructors:New:secureFileEmpty
func NewTLsecureFileEmpty() *TLsecureFileEmpty {
	return &TLsecureFileEmpty{data: &SecureFile_Data{}}
}

// Constructors:Predicate:secureFile
type TLsecureFile struct {
	data *SecureFile_Data
}

// Constructors:New:secureFile
func NewTLsecureFile() *TLsecureFile {
	return &TLsecureFile{data: &SecureFile_Data{}}
}
func (m *TLsecureFile) Setid(v int64)          { m.data.id = v }
func (m *TLsecureFile) Getid() int64           { return m.data.id }
func (m *TLsecureFile) Setaccess_hash(v int64) { m.data.access_hash = v }
func (m *TLsecureFile) Getaccess_hash() int64  { return m.data.access_hash }
func (m *TLsecureFile) Setsize(v int32)        { m.data.size = v }
func (m *TLsecureFile) Getsize() int32         { return m.data.size }
func (m *TLsecureFile) Setdc_id(v int32)       { m.data.dc_id = v }
func (m *TLsecureFile) Getdc_id() int32        { return m.data.dc_id }
func (m *TLsecureFile) Setdate(v int32)        { m.data.date = v }
func (m *TLsecureFile) Getdate() int32         { return m.data.date }
func (m *TLsecureFile) Setfile_hash(v []byte)  { m.data.file_hash = v }
func (m *TLsecureFile) Getfile_hash() []byte   { return m.data.file_hash }
func (m *TLsecureFile) Setsecret(v []byte)     { m.data.secret = v }
func (m *TLsecureFile) Getsecret() []byte      { return m.data.secret }

///////////////////////////////////////////////////////////////////////////////
// Constructors:Chat
// Chat <--
// + TLchatEmpty
// + TLchat
// + TLchatForbidden
// + TLchannel
// + TLchannelForbidden
//
// Constructors:Type:Chat
type Chat struct {
	constructor int32
	data        *Chat_Data
}

// Constructors:Type:Data:Chat
type Chat_Data struct {
	id                    int32
	creator               bool
	kicked                bool
	left                  bool
	deactivated           bool
	call_active           bool
	call_not_empty        bool
	title                 string
	photo                 *ChatPhoto
	participants_count    int32
	date                  int32
	version               int32
	migrated_to           *InputChannel
	admin_rights          *ChatAdminRights
	default_banned_rights *ChatBannedRights
	broadcast             bool
	verified              bool
	megagroup             bool
	restricted            bool
	signatures            bool
	min                   bool
	scam                  bool
	has_link              bool
	has_geo               bool
	slowmode_enabled      bool
	access_hash           int64
	username              string
	restriction_reason    []*RestrictionReason
	banned_rights         *ChatBannedRights
	until_date            int32
}

// Constructors:Predicate:chatEmpty
type TLchatEmpty struct {
	data *Chat_Data
}

// Constructors:New:chatEmpty
func NewTLchatEmpty() *TLchatEmpty {
	return &TLchatEmpty{data: &Chat_Data{}}
}

// Constructors:Predicate:chat
type TLchat struct {
	data *Chat_Data
}

// Constructors:New:chat
func NewTLchat() *TLchat {
	return &TLchat{data: &Chat_Data{}}
}

// Constructors:Predicate:chatForbidden
type TLchatForbidden struct {
	data *Chat_Data
}

// Constructors:New:chatForbidden
func NewTLchatForbidden() *TLchatForbidden {
	return &TLchatForbidden{data: &Chat_Data{}}
}

// Constructors:Predicate:channel
type TLchannel struct {
	data *Chat_Data
}

// Constructors:New:channel
func NewTLchannel() *TLchannel {
	return &TLchannel{data: &Chat_Data{}}
}

// Constructors:Predicate:channelForbidden
type TLchannelForbidden struct {
	data *Chat_Data
}

// Constructors:New:channelForbidden
func NewTLchannelForbidden() *TLchannelForbidden {
	return &TLchannelForbidden{data: &Chat_Data{}}
}
func (m *TLchatEmpty) Setid(v int32)                              { m.data.id = v }
func (m *TLchatEmpty) Getid() int32                               { return m.data.id }
func (m *TLchat) Setcreator(v bool)                               { m.data.creator = v }
func (m *TLchat) Getcreator() bool                                { return m.data.creator }
func (m *TLchat) Setkicked(v bool)                                { m.data.kicked = v }
func (m *TLchat) Getkicked() bool                                 { return m.data.kicked }
func (m *TLchat) Setleft(v bool)                                  { m.data.left = v }
func (m *TLchat) Getleft() bool                                   { return m.data.left }
func (m *TLchat) Setdeactivated(v bool)                           { m.data.deactivated = v }
func (m *TLchat) Getdeactivated() bool                            { return m.data.deactivated }
func (m *TLchat) Setcall_active(v bool)                           { m.data.call_active = v }
func (m *TLchat) Getcall_active() bool                            { return m.data.call_active }
func (m *TLchat) Setcall_not_empty(v bool)                        { m.data.call_not_empty = v }
func (m *TLchat) Getcall_not_empty() bool                         { return m.data.call_not_empty }
func (m *TLchat) Setid(v int32)                                   { m.data.id = v }
func (m *TLchat) Getid() int32                                    { return m.data.id }
func (m *TLchat) Settitle(v string)                               { m.data.title = v }
func (m *TLchat) Gettitle() string                                { return m.data.title }
func (m *TLchat) Setphoto(v *ChatPhoto)                           { m.data.photo = v }
func (m *TLchat) Getphoto() *ChatPhoto                            { return m.data.photo }
func (m *TLchat) Setparticipants_count(v int32)                   { m.data.participants_count = v }
func (m *TLchat) Getparticipants_count() int32                    { return m.data.participants_count }
func (m *TLchat) Setdate(v int32)                                 { m.data.date = v }
func (m *TLchat) Getdate() int32                                  { return m.data.date }
func (m *TLchat) Setversion(v int32)                              { m.data.version = v }
func (m *TLchat) Getversion() int32                               { return m.data.version }
func (m *TLchat) Setmigrated_to(v *InputChannel)                  { m.data.migrated_to = v }
func (m *TLchat) Getmigrated_to() *InputChannel                   { return m.data.migrated_to }
func (m *TLchat) Setadmin_rights(v *ChatAdminRights)              { m.data.admin_rights = v }
func (m *TLchat) Getadmin_rights() *ChatAdminRights               { return m.data.admin_rights }
func (m *TLchat) Setdefault_banned_rights(v *ChatBannedRights)    { m.data.default_banned_rights = v }
func (m *TLchat) Getdefault_banned_rights() *ChatBannedRights     { return m.data.default_banned_rights }
func (m *TLchatForbidden) Setid(v int32)                          { m.data.id = v }
func (m *TLchatForbidden) Getid() int32                           { return m.data.id }
func (m *TLchatForbidden) Settitle(v string)                      { m.data.title = v }
func (m *TLchatForbidden) Gettitle() string                       { return m.data.title }
func (m *TLchannel) Setcreator(v bool)                            { m.data.creator = v }
func (m *TLchannel) Getcreator() bool                             { return m.data.creator }
func (m *TLchannel) Setleft(v bool)                               { m.data.left = v }
func (m *TLchannel) Getleft() bool                                { return m.data.left }
func (m *TLchannel) Setbroadcast(v bool)                          { m.data.broadcast = v }
func (m *TLchannel) Getbroadcast() bool                           { return m.data.broadcast }
func (m *TLchannel) Setverified(v bool)                           { m.data.verified = v }
func (m *TLchannel) Getverified() bool                            { return m.data.verified }
func (m *TLchannel) Setmegagroup(v bool)                          { m.data.megagroup = v }
func (m *TLchannel) Getmegagroup() bool                           { return m.data.megagroup }
func (m *TLchannel) Setrestricted(v bool)                         { m.data.restricted = v }
func (m *TLchannel) Getrestricted() bool                          { return m.data.restricted }
func (m *TLchannel) Setsignatures(v bool)                         { m.data.signatures = v }
func (m *TLchannel) Getsignatures() bool                          { return m.data.signatures }
func (m *TLchannel) Setmin(v bool)                                { m.data.min = v }
func (m *TLchannel) Getmin() bool                                 { return m.data.min }
func (m *TLchannel) Setscam(v bool)                               { m.data.scam = v }
func (m *TLchannel) Getscam() bool                                { return m.data.scam }
func (m *TLchannel) Sethas_link(v bool)                           { m.data.has_link = v }
func (m *TLchannel) Gethas_link() bool                            { return m.data.has_link }
func (m *TLchannel) Sethas_geo(v bool)                            { m.data.has_geo = v }
func (m *TLchannel) Gethas_geo() bool                             { return m.data.has_geo }
func (m *TLchannel) Setslowmode_enabled(v bool)                   { m.data.slowmode_enabled = v }
func (m *TLchannel) Getslowmode_enabled() bool                    { return m.data.slowmode_enabled }
func (m *TLchannel) Setcall_active(v bool)                        { m.data.call_active = v }
func (m *TLchannel) Getcall_active() bool                         { return m.data.call_active }
func (m *TLchannel) Setcall_not_empty(v bool)                     { m.data.call_not_empty = v }
func (m *TLchannel) Getcall_not_empty() bool                      { return m.data.call_not_empty }
func (m *TLchannel) Setid(v int32)                                { m.data.id = v }
func (m *TLchannel) Getid() int32                                 { return m.data.id }
func (m *TLchannel) Setaccess_hash(v int64)                       { m.data.access_hash = v }
func (m *TLchannel) Getaccess_hash() int64                        { return m.data.access_hash }
func (m *TLchannel) Settitle(v string)                            { m.data.title = v }
func (m *TLchannel) Gettitle() string                             { return m.data.title }
func (m *TLchannel) Setusername(v string)                         { m.data.username = v }
func (m *TLchannel) Getusername() string                          { return m.data.username }
func (m *TLchannel) Setphoto(v *ChatPhoto)                        { m.data.photo = v }
func (m *TLchannel) Getphoto() *ChatPhoto                         { return m.data.photo }
func (m *TLchannel) Setdate(v int32)                              { m.data.date = v }
func (m *TLchannel) Getdate() int32                               { return m.data.date }
func (m *TLchannel) Setversion(v int32)                           { m.data.version = v }
func (m *TLchannel) Getversion() int32                            { return m.data.version }
func (m *TLchannel) Setrestriction_reason(v []*RestrictionReason) { m.data.restriction_reason = v }
func (m *TLchannel) Getrestriction_reason() []*RestrictionReason  { return m.data.restriction_reason }
func (m *TLchannel) Setadmin_rights(v *ChatAdminRights)           { m.data.admin_rights = v }
func (m *TLchannel) Getadmin_rights() *ChatAdminRights            { return m.data.admin_rights }
func (m *TLchannel) Setbanned_rights(v *ChatBannedRights)         { m.data.banned_rights = v }
func (m *TLchannel) Getbanned_rights() *ChatBannedRights          { return m.data.banned_rights }
func (m *TLchannel) Setdefault_banned_rights(v *ChatBannedRights) { m.data.default_banned_rights = v }
func (m *TLchannel) Getdefault_banned_rights() *ChatBannedRights  { return m.data.default_banned_rights }
func (m *TLchannel) Setparticipants_count(v int32)                { m.data.participants_count = v }
func (m *TLchannel) Getparticipants_count() int32                 { return m.data.participants_count }
func (m *TLchannelForbidden) Setbroadcast(v bool)                 { m.data.broadcast = v }
func (m *TLchannelForbidden) Getbroadcast() bool                  { return m.data.broadcast }
func (m *TLchannelForbidden) Setmegagroup(v bool)                 { m.data.megagroup = v }
func (m *TLchannelForbidden) Getmegagroup() bool                  { return m.data.megagroup }
func (m *TLchannelForbidden) Setid(v int32)                       { m.data.id = v }
func (m *TLchannelForbidden) Getid() int32                        { return m.data.id }
func (m *TLchannelForbidden) Setaccess_hash(v int64)              { m.data.access_hash = v }
func (m *TLchannelForbidden) Getaccess_hash() int64               { return m.data.access_hash }
func (m *TLchannelForbidden) Settitle(v string)                   { m.data.title = v }
func (m *TLchannelForbidden) Gettitle() string                    { return m.data.title }
func (m *TLchannelForbidden) Setuntil_date(v int32)               { m.data.until_date = v }
func (m *TLchannelForbidden) Getuntil_date() int32                { return m.data.until_date }

///////////////////////////////////////////////////////////////////////////////
// Constructors:channels_AdminLogResults
// channels_AdminLogResults <--
// + TLchannels_adminLogResults
//
// Constructors:Type:channels_AdminLogResults
type channels_AdminLogResults struct {
	constructor int32
	data        *channels_AdminLogResults_Data
}

// Constructors:Type:Data:channels_AdminLogResults
type channels_AdminLogResults_Data struct {
	events []*ChannelAdminLogEvent
	chats  []*Chat
	users  []*User
}

// Constructors:Predicate:channels_adminLogResults
type TLchannels_adminLogResults struct {
	data *channels_AdminLogResults_Data
}

// Constructors:New:channels_adminLogResults
func NewTLchannels_adminLogResults() *TLchannels_adminLogResults {
	return &TLchannels_adminLogResults{data: &channels_AdminLogResults_Data{}}
}
func (m *TLchannels_adminLogResults) Setevents(v []*ChannelAdminLogEvent) { m.data.events = v }
func (m *TLchannels_adminLogResults) Getevents() []*ChannelAdminLogEvent  { return m.data.events }
func (m *TLchannels_adminLogResults) Setchats(v []*Chat)                  { m.data.chats = v }
func (m *TLchannels_adminLogResults) Getchats() []*Chat                   { return m.data.chats }
func (m *TLchannels_adminLogResults) Setusers(v []*User)                  { m.data.users = v }
func (m *TLchannels_adminLogResults) Getusers() []*User                   { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputPeerNotifySettings
// InputPeerNotifySettings <--
// + TLinputPeerNotifySettings
//
// Constructors:Type:InputPeerNotifySettings
type InputPeerNotifySettings struct {
	constructor int32
	data        *InputPeerNotifySettings_Data
}

// Constructors:Type:Data:InputPeerNotifySettings
type InputPeerNotifySettings_Data struct {
	show_previews *Bool
	silent        *Bool
	mute_until    int32
	sound         string
}

// Constructors:Predicate:inputPeerNotifySettings
type TLinputPeerNotifySettings struct {
	data *InputPeerNotifySettings_Data
}

// Constructors:New:inputPeerNotifySettings
func NewTLinputPeerNotifySettings() *TLinputPeerNotifySettings {
	return &TLinputPeerNotifySettings{data: &InputPeerNotifySettings_Data{}}
}
func (m *TLinputPeerNotifySettings) Setshow_previews(v *Bool) { m.data.show_previews = v }
func (m *TLinputPeerNotifySettings) Getshow_previews() *Bool  { return m.data.show_previews }
func (m *TLinputPeerNotifySettings) Setsilent(v *Bool)        { m.data.silent = v }
func (m *TLinputPeerNotifySettings) Getsilent() *Bool         { return m.data.silent }
func (m *TLinputPeerNotifySettings) Setmute_until(v int32)    { m.data.mute_until = v }
func (m *TLinputPeerNotifySettings) Getmute_until() int32     { return m.data.mute_until }
func (m *TLinputPeerNotifySettings) Setsound(v string)        { m.data.sound = v }
func (m *TLinputPeerNotifySettings) Getsound() string         { return m.data.sound }

///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageRange
// MessageRange <--
// + TLmessageRange
//
// Constructors:Type:MessageRange
type MessageRange struct {
	constructor int32
	data        *MessageRange_Data
}

// Constructors:Type:Data:MessageRange
type MessageRange_Data struct {
	min_id int32
	max_id int32
}

// Constructors:Predicate:messageRange
type TLmessageRange struct {
	data *MessageRange_Data
}

// Constructors:New:messageRange
func NewTLmessageRange() *TLmessageRange {
	return &TLmessageRange{data: &MessageRange_Data{}}
}
func (m *TLmessageRange) Setmin_id(v int32) { m.data.min_id = v }
func (m *TLmessageRange) Getmin_id() int32  { return m.data.min_id }
func (m *TLmessageRange) Setmax_id(v int32) { m.data.max_id = v }
func (m *TLmessageRange) Getmax_id() int32  { return m.data.max_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PageListItem
// PageListItem <--
// + TLpageListItemText
// + TLpageListItemBlocks
//
// Constructors:Type:PageListItem
type PageListItem struct {
	constructor int32
	data        *PageListItem_Data
}

// Constructors:Type:Data:PageListItem
type PageListItem_Data struct {
	text   *RichText
	blocks []*PageBlock
}

// Constructors:Predicate:pageListItemText
type TLpageListItemText struct {
	data *PageListItem_Data
}

// Constructors:New:pageListItemText
func NewTLpageListItemText() *TLpageListItemText {
	return &TLpageListItemText{data: &PageListItem_Data{}}
}

// Constructors:Predicate:pageListItemBlocks
type TLpageListItemBlocks struct {
	data *PageListItem_Data
}

// Constructors:New:pageListItemBlocks
func NewTLpageListItemBlocks() *TLpageListItemBlocks {
	return &TLpageListItemBlocks{data: &PageListItem_Data{}}
}
func (m *TLpageListItemText) Settext(v *RichText)        { m.data.text = v }
func (m *TLpageListItemText) Gettext() *RichText         { return m.data.text }
func (m *TLpageListItemBlocks) Setblocks(v []*PageBlock) { m.data.blocks = v }
func (m *TLpageListItemBlocks) Getblocks() []*PageBlock  { return m.data.blocks }

///////////////////////////////////////////////////////////////////////////////
// Constructors:DialogFilterSuggested
// DialogFilterSuggested <--
// + TLdialogFilterSuggested
//
// Constructors:Type:DialogFilterSuggested
type DialogFilterSuggested struct {
	constructor int32
	data        *DialogFilterSuggested_Data
}

// Constructors:Type:Data:DialogFilterSuggested
type DialogFilterSuggested_Data struct {
	filter      *DialogFilter
	description string
}

// Constructors:Predicate:dialogFilterSuggested
type TLdialogFilterSuggested struct {
	data *DialogFilterSuggested_Data
}

// Constructors:New:dialogFilterSuggested
func NewTLdialogFilterSuggested() *TLdialogFilterSuggested {
	return &TLdialogFilterSuggested{data: &DialogFilterSuggested_Data{}}
}
func (m *TLdialogFilterSuggested) Setfilter(v *DialogFilter) { m.data.filter = v }
func (m *TLdialogFilterSuggested) Getfilter() *DialogFilter  { return m.data.filter }
func (m *TLdialogFilterSuggested) Setdescription(v string)   { m.data.description = v }
func (m *TLdialogFilterSuggested) Getdescription() string    { return m.data.description }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_StickerSet
// messages_StickerSet <--
// + TLmessages_stickerSet
//
// Constructors:Type:messages_StickerSet
type messages_StickerSet struct {
	constructor int32
	data        *messages_StickerSet_Data
}

// Constructors:Type:Data:messages_StickerSet
type messages_StickerSet_Data struct {
	set       *StickerSet
	packs     []*StickerPack
	documents []*Document
}

// Constructors:Predicate:messages_stickerSet
type TLmessages_stickerSet struct {
	data *messages_StickerSet_Data
}

// Constructors:New:messages_stickerSet
func NewTLmessages_stickerSet() *TLmessages_stickerSet {
	return &TLmessages_stickerSet{data: &messages_StickerSet_Data{}}
}
func (m *TLmessages_stickerSet) Setset(v *StickerSet)       { m.data.set = v }
func (m *TLmessages_stickerSet) Getset() *StickerSet        { return m.data.set }
func (m *TLmessages_stickerSet) Setpacks(v []*StickerPack)  { m.data.packs = v }
func (m *TLmessages_stickerSet) Getpacks() []*StickerPack   { return m.data.packs }
func (m *TLmessages_stickerSet) Setdocuments(v []*Document) { m.data.documents = v }
func (m *TLmessages_stickerSet) Getdocuments() []*Document  { return m.data.documents }

///////////////////////////////////////////////////////////////////////////////
// Constructors:Null
// Null <--
// + TLnull
//
// Constructors:Type:Null
type Null struct {
	constructor int32
	data        *Null_Data
}

// Constructors:Type:Data:Null
type Null_Data struct {
}

// Constructors:Predicate:null
type TLnull struct {
	data *Null_Data
}

// Constructors:New:null
func NewTLnull() *TLnull {
	return &TLnull{data: &Null_Data{}}
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:JSONValue
// JSONValue <--
// + TLjsonNull
// + TLjsonBool
// + TLjsonNumber
// + TLjsonString
// + TLjsonArray
// + TLjsonObject
//
// Constructors:Type:JSONValue
type JSONValue struct {
	constructor int32
	data        *JSONValue_Data
}

// Constructors:Type:Data:JSONValue
type JSONValue_Data struct {
	value   *Bool
	value_2 float64
	value_3 string
	value_4 []*JSONValue
	value_5 []*JSONObjectValue
}

// Constructors:Predicate:jsonNull
type TLjsonNull struct {
	data *JSONValue_Data
}

// Constructors:New:jsonNull
func NewTLjsonNull() *TLjsonNull {
	return &TLjsonNull{data: &JSONValue_Data{}}
}

// Constructors:Predicate:jsonBool
type TLjsonBool struct {
	data *JSONValue_Data
}

// Constructors:New:jsonBool
func NewTLjsonBool() *TLjsonBool {
	return &TLjsonBool{data: &JSONValue_Data{}}
}

// Constructors:Predicate:jsonNumber
type TLjsonNumber struct {
	data *JSONValue_Data
}

// Constructors:New:jsonNumber
func NewTLjsonNumber() *TLjsonNumber {
	return &TLjsonNumber{data: &JSONValue_Data{}}
}

// Constructors:Predicate:jsonString
type TLjsonString struct {
	data *JSONValue_Data
}

// Constructors:New:jsonString
func NewTLjsonString() *TLjsonString {
	return &TLjsonString{data: &JSONValue_Data{}}
}

// Constructors:Predicate:jsonArray
type TLjsonArray struct {
	data *JSONValue_Data
}

// Constructors:New:jsonArray
func NewTLjsonArray() *TLjsonArray {
	return &TLjsonArray{data: &JSONValue_Data{}}
}

// Constructors:Predicate:jsonObject
type TLjsonObject struct {
	data *JSONValue_Data
}

// Constructors:New:jsonObject
func NewTLjsonObject() *TLjsonObject {
	return &TLjsonObject{data: &JSONValue_Data{}}
}
func (m *TLjsonBool) Setvalue(v *Bool)                  { m.data.value = v }
func (m *TLjsonBool) Getvalue() *Bool                   { return m.data.value }
func (m *TLjsonNumber) Setvalue_2(v float64)            { m.data.value_2 = v }
func (m *TLjsonNumber) Getvalue_2() float64             { return m.data.value_2 }
func (m *TLjsonString) Setvalue_3(v string)             { m.data.value_3 = v }
func (m *TLjsonString) Getvalue_3() string              { return m.data.value_3 }
func (m *TLjsonArray) Setvalue_4(v []*JSONValue)        { m.data.value_4 = v }
func (m *TLjsonArray) Getvalue_4() []*JSONValue         { return m.data.value_4 }
func (m *TLjsonObject) Setvalue_5(v []*JSONObjectValue) { m.data.value_5 = v }
func (m *TLjsonObject) Getvalue_5() []*JSONObjectValue  { return m.data.value_5 }

///////////////////////////////////////////////////////////////////////////////
// Constructors:payments_ValidatedRequestedInfo
// payments_ValidatedRequestedInfo <--
// + TLpayments_validatedRequestedInfo
//
// Constructors:Type:payments_ValidatedRequestedInfo
type payments_ValidatedRequestedInfo struct {
	constructor int32
	data        *payments_ValidatedRequestedInfo_Data
}

// Constructors:Type:Data:payments_ValidatedRequestedInfo
type payments_ValidatedRequestedInfo_Data struct {
	id               string
	shipping_options []*ShippingOption
}

// Constructors:Predicate:payments_validatedRequestedInfo
type TLpayments_validatedRequestedInfo struct {
	data *payments_ValidatedRequestedInfo_Data
}

// Constructors:New:payments_validatedRequestedInfo
func NewTLpayments_validatedRequestedInfo() *TLpayments_validatedRequestedInfo {
	return &TLpayments_validatedRequestedInfo{data: &payments_ValidatedRequestedInfo_Data{}}
}
func (m *TLpayments_validatedRequestedInfo) Setid(v string) { m.data.id = v }
func (m *TLpayments_validatedRequestedInfo) Getid() string  { return m.data.id }
func (m *TLpayments_validatedRequestedInfo) Setshipping_options(v []*ShippingOption) {
	m.data.shipping_options = v
}
func (m *TLpayments_validatedRequestedInfo) Getshipping_options() []*ShippingOption {
	return m.data.shipping_options
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_FeaturedStickers
// messages_FeaturedStickers <--
// + TLmessages_featuredStickersNotModified
// + TLmessages_featuredStickers
//
// Constructors:Type:messages_FeaturedStickers
type messages_FeaturedStickers struct {
	constructor int32
	data        *messages_FeaturedStickers_Data
}

// Constructors:Type:Data:messages_FeaturedStickers
type messages_FeaturedStickers_Data struct {
	count  int32
	hash   int32
	sets   []*StickerSetCovered
	unread []int64
}

// Constructors:Predicate:messages_featuredStickersNotModified
type TLmessages_featuredStickersNotModified struct {
	data *messages_FeaturedStickers_Data
}

// Constructors:New:messages_featuredStickersNotModified
func NewTLmessages_featuredStickersNotModified() *TLmessages_featuredStickersNotModified {
	return &TLmessages_featuredStickersNotModified{data: &messages_FeaturedStickers_Data{}}
}

// Constructors:Predicate:messages_featuredStickers
type TLmessages_featuredStickers struct {
	data *messages_FeaturedStickers_Data
}

// Constructors:New:messages_featuredStickers
func NewTLmessages_featuredStickers() *TLmessages_featuredStickers {
	return &TLmessages_featuredStickers{data: &messages_FeaturedStickers_Data{}}
}
func (m *TLmessages_featuredStickersNotModified) Setcount(v int32)    { m.data.count = v }
func (m *TLmessages_featuredStickersNotModified) Getcount() int32     { return m.data.count }
func (m *TLmessages_featuredStickers) Sethash(v int32)                { m.data.hash = v }
func (m *TLmessages_featuredStickers) Gethash() int32                 { return m.data.hash }
func (m *TLmessages_featuredStickers) Setcount(v int32)               { m.data.count = v }
func (m *TLmessages_featuredStickers) Getcount() int32                { return m.data.count }
func (m *TLmessages_featuredStickers) Setsets(v []*StickerSetCovered) { m.data.sets = v }
func (m *TLmessages_featuredStickers) Getsets() []*StickerSetCovered  { return m.data.sets }
func (m *TLmessages_featuredStickers) Setunread(v []int64)            { m.data.unread = v }
func (m *TLmessages_featuredStickers) Getunread() []int64             { return m.data.unread }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputBotInlineResult
// InputBotInlineResult <--
// + TLinputBotInlineResult
// + TLinputBotInlineResultPhoto
// + TLinputBotInlineResultDocument
// + TLinputBotInlineResultGame
//
// Constructors:Type:InputBotInlineResult
type InputBotInlineResult struct {
	constructor int32
	data        *InputBotInlineResult_Data
}

// Constructors:Type:Data:InputBotInlineResult
type InputBotInlineResult_Data struct {
	id           string
	type_key     string
	title        string
	description  string
	url          string
	thumb        *InputWebDocument
	content      *InputWebDocument
	send_message *InputBotInlineMessage
	photo        *InputPhoto
	document     *InputDocument
	short_name   string
}

// Constructors:Predicate:inputBotInlineResult
type TLinputBotInlineResult struct {
	data *InputBotInlineResult_Data
}

// Constructors:New:inputBotInlineResult
func NewTLinputBotInlineResult() *TLinputBotInlineResult {
	return &TLinputBotInlineResult{data: &InputBotInlineResult_Data{}}
}

// Constructors:Predicate:inputBotInlineResultPhoto
type TLinputBotInlineResultPhoto struct {
	data *InputBotInlineResult_Data
}

// Constructors:New:inputBotInlineResultPhoto
func NewTLinputBotInlineResultPhoto() *TLinputBotInlineResultPhoto {
	return &TLinputBotInlineResultPhoto{data: &InputBotInlineResult_Data{}}
}

// Constructors:Predicate:inputBotInlineResultDocument
type TLinputBotInlineResultDocument struct {
	data *InputBotInlineResult_Data
}

// Constructors:New:inputBotInlineResultDocument
func NewTLinputBotInlineResultDocument() *TLinputBotInlineResultDocument {
	return &TLinputBotInlineResultDocument{data: &InputBotInlineResult_Data{}}
}

// Constructors:Predicate:inputBotInlineResultGame
type TLinputBotInlineResultGame struct {
	data *InputBotInlineResult_Data
}

// Constructors:New:inputBotInlineResultGame
func NewTLinputBotInlineResultGame() *TLinputBotInlineResultGame {
	return &TLinputBotInlineResultGame{data: &InputBotInlineResult_Data{}}
}
func (m *TLinputBotInlineResult) Setid(v string)                           { m.data.id = v }
func (m *TLinputBotInlineResult) Getid() string                            { return m.data.id }
func (m *TLinputBotInlineResult) Settype_key(v string)                     { m.data.type_key = v }
func (m *TLinputBotInlineResult) Gettype_key() string                      { return m.data.type_key }
func (m *TLinputBotInlineResult) Settitle(v string)                        { m.data.title = v }
func (m *TLinputBotInlineResult) Gettitle() string                         { return m.data.title }
func (m *TLinputBotInlineResult) Setdescription(v string)                  { m.data.description = v }
func (m *TLinputBotInlineResult) Getdescription() string                   { return m.data.description }
func (m *TLinputBotInlineResult) Seturl(v string)                          { m.data.url = v }
func (m *TLinputBotInlineResult) Geturl() string                           { return m.data.url }
func (m *TLinputBotInlineResult) Setthumb(v *InputWebDocument)             { m.data.thumb = v }
func (m *TLinputBotInlineResult) Getthumb() *InputWebDocument              { return m.data.thumb }
func (m *TLinputBotInlineResult) Setcontent(v *InputWebDocument)           { m.data.content = v }
func (m *TLinputBotInlineResult) Getcontent() *InputWebDocument            { return m.data.content }
func (m *TLinputBotInlineResult) Setsend_message(v *InputBotInlineMessage) { m.data.send_message = v }
func (m *TLinputBotInlineResult) Getsend_message() *InputBotInlineMessage  { return m.data.send_message }
func (m *TLinputBotInlineResultPhoto) Setid(v string)                      { m.data.id = v }
func (m *TLinputBotInlineResultPhoto) Getid() string                       { return m.data.id }
func (m *TLinputBotInlineResultPhoto) Settype_key(v string)                { m.data.type_key = v }
func (m *TLinputBotInlineResultPhoto) Gettype_key() string                 { return m.data.type_key }
func (m *TLinputBotInlineResultPhoto) Setphoto(v *InputPhoto)              { m.data.photo = v }
func (m *TLinputBotInlineResultPhoto) Getphoto() *InputPhoto               { return m.data.photo }
func (m *TLinputBotInlineResultPhoto) Setsend_message(v *InputBotInlineMessage) {
	m.data.send_message = v
}
func (m *TLinputBotInlineResultPhoto) Getsend_message() *InputBotInlineMessage {
	return m.data.send_message
}
func (m *TLinputBotInlineResultDocument) Setid(v string)               { m.data.id = v }
func (m *TLinputBotInlineResultDocument) Getid() string                { return m.data.id }
func (m *TLinputBotInlineResultDocument) Settype_key(v string)         { m.data.type_key = v }
func (m *TLinputBotInlineResultDocument) Gettype_key() string          { return m.data.type_key }
func (m *TLinputBotInlineResultDocument) Settitle(v string)            { m.data.title = v }
func (m *TLinputBotInlineResultDocument) Gettitle() string             { return m.data.title }
func (m *TLinputBotInlineResultDocument) Setdescription(v string)      { m.data.description = v }
func (m *TLinputBotInlineResultDocument) Getdescription() string       { return m.data.description }
func (m *TLinputBotInlineResultDocument) Setdocument(v *InputDocument) { m.data.document = v }
func (m *TLinputBotInlineResultDocument) Getdocument() *InputDocument  { return m.data.document }
func (m *TLinputBotInlineResultDocument) Setsend_message(v *InputBotInlineMessage) {
	m.data.send_message = v
}
func (m *TLinputBotInlineResultDocument) Getsend_message() *InputBotInlineMessage {
	return m.data.send_message
}
func (m *TLinputBotInlineResultGame) Setid(v string)         { m.data.id = v }
func (m *TLinputBotInlineResultGame) Getid() string          { return m.data.id }
func (m *TLinputBotInlineResultGame) Setshort_name(v string) { m.data.short_name = v }
func (m *TLinputBotInlineResultGame) Getshort_name() string  { return m.data.short_name }
func (m *TLinputBotInlineResultGame) Setsend_message(v *InputBotInlineMessage) {
	m.data.send_message = v
}
func (m *TLinputBotInlineResultGame) Getsend_message() *InputBotInlineMessage {
	return m.data.send_message
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_ChatFull
// messages_ChatFull <--
// + TLmessages_chatFull
//
// Constructors:Type:messages_ChatFull
type messages_ChatFull struct {
	constructor int32
	data        *messages_ChatFull_Data
}

// Constructors:Type:Data:messages_ChatFull
type messages_ChatFull_Data struct {
	full_chat *ChatFull
	chats     []*Chat
	users     []*User
}

// Constructors:Predicate:messages_chatFull
type TLmessages_chatFull struct {
	data *messages_ChatFull_Data
}

// Constructors:New:messages_chatFull
func NewTLmessages_chatFull() *TLmessages_chatFull {
	return &TLmessages_chatFull{data: &messages_ChatFull_Data{}}
}
func (m *TLmessages_chatFull) Setfull_chat(v *ChatFull) { m.data.full_chat = v }
func (m *TLmessages_chatFull) Getfull_chat() *ChatFull  { return m.data.full_chat }
func (m *TLmessages_chatFull) Setchats(v []*Chat)       { m.data.chats = v }
func (m *TLmessages_chatFull) Getchats() []*Chat        { return m.data.chats }
func (m *TLmessages_chatFull) Setusers(v []*User)       { m.data.users = v }
func (m *TLmessages_chatFull) Getusers() []*User        { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ExportedMessageLink
// ExportedMessageLink <--
// + TLexportedMessageLink
//
// Constructors:Type:ExportedMessageLink
type ExportedMessageLink struct {
	constructor int32
	data        *ExportedMessageLink_Data
}

// Constructors:Type:Data:ExportedMessageLink
type ExportedMessageLink_Data struct {
	link string
	html string
}

// Constructors:Predicate:exportedMessageLink
type TLexportedMessageLink struct {
	data *ExportedMessageLink_Data
}

// Constructors:New:exportedMessageLink
func NewTLexportedMessageLink() *TLexportedMessageLink {
	return &TLexportedMessageLink{data: &ExportedMessageLink_Data{}}
}
func (m *TLexportedMessageLink) Setlink(v string) { m.data.link = v }
func (m *TLexportedMessageLink) Getlink() string  { return m.data.link }
func (m *TLexportedMessageLink) Sethtml(v string) { m.data.html = v }
func (m *TLexportedMessageLink) Gethtml() string  { return m.data.html }

///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageMedia
// MessageMedia <--
// + TLmessageMediaEmpty
// + TLmessageMediaPhoto
// + TLmessageMediaGeo
// + TLmessageMediaContact
// + TLmessageMediaUnsupported
// + TLmessageMediaDocument
// + TLmessageMediaWebPage
// + TLmessageMediaVenue
// + TLmessageMediaGame
// + TLmessageMediaInvoice
// + TLmessageMediaGeoLive
// + TLmessageMediaPoll
// + TLmessageMediaDice
//
// Constructors:Type:MessageMedia
type MessageMedia struct {
	constructor int32
	data        *MessageMedia_Data
}

// Constructors:Type:Data:MessageMedia
type MessageMedia_Data struct {
	photo                         *Photo
	ttl_seconds                   int32
	geo                           *GeoPoint
	phone_number                  string
	first_name                    string
	last_name                     string
	vcard                         string
	user_id                       int32
	document                      *Document
	webpage                       *WebPage
	title                         string
	address                       string
	provider                      string
	venue_id                      string
	venue_type                    string
	game                          *Game
	shipping_address_requested    bool
	test                          bool
	description                   string
	photo_20                      *WebDocument
	receipt_msg_id                int32
	currency                      string
	total_amount                  int64
	start_param                   string
	heading                       int32
	period                        int32
	proximity_notification_radius int32
	poll                          *Poll
	results                       *PollResults
	value                         int32
	emoticon                      string
}

// Constructors:Predicate:messageMediaEmpty
type TLmessageMediaEmpty struct {
	data *MessageMedia_Data
}

// Constructors:New:messageMediaEmpty
func NewTLmessageMediaEmpty() *TLmessageMediaEmpty {
	return &TLmessageMediaEmpty{data: &MessageMedia_Data{}}
}

// Constructors:Predicate:messageMediaPhoto
type TLmessageMediaPhoto struct {
	data *MessageMedia_Data
}

// Constructors:New:messageMediaPhoto
func NewTLmessageMediaPhoto() *TLmessageMediaPhoto {
	return &TLmessageMediaPhoto{data: &MessageMedia_Data{}}
}

// Constructors:Predicate:messageMediaGeo
type TLmessageMediaGeo struct {
	data *MessageMedia_Data
}

// Constructors:New:messageMediaGeo
func NewTLmessageMediaGeo() *TLmessageMediaGeo {
	return &TLmessageMediaGeo{data: &MessageMedia_Data{}}
}

// Constructors:Predicate:messageMediaContact
type TLmessageMediaContact struct {
	data *MessageMedia_Data
}

// Constructors:New:messageMediaContact
func NewTLmessageMediaContact() *TLmessageMediaContact {
	return &TLmessageMediaContact{data: &MessageMedia_Data{}}
}

// Constructors:Predicate:messageMediaUnsupported
type TLmessageMediaUnsupported struct {
	data *MessageMedia_Data
}

// Constructors:New:messageMediaUnsupported
func NewTLmessageMediaUnsupported() *TLmessageMediaUnsupported {
	return &TLmessageMediaUnsupported{data: &MessageMedia_Data{}}
}

// Constructors:Predicate:messageMediaDocument
type TLmessageMediaDocument struct {
	data *MessageMedia_Data
}

// Constructors:New:messageMediaDocument
func NewTLmessageMediaDocument() *TLmessageMediaDocument {
	return &TLmessageMediaDocument{data: &MessageMedia_Data{}}
}

// Constructors:Predicate:messageMediaWebPage
type TLmessageMediaWebPage struct {
	data *MessageMedia_Data
}

// Constructors:New:messageMediaWebPage
func NewTLmessageMediaWebPage() *TLmessageMediaWebPage {
	return &TLmessageMediaWebPage{data: &MessageMedia_Data{}}
}

// Constructors:Predicate:messageMediaVenue
type TLmessageMediaVenue struct {
	data *MessageMedia_Data
}

// Constructors:New:messageMediaVenue
func NewTLmessageMediaVenue() *TLmessageMediaVenue {
	return &TLmessageMediaVenue{data: &MessageMedia_Data{}}
}

// Constructors:Predicate:messageMediaGame
type TLmessageMediaGame struct {
	data *MessageMedia_Data
}

// Constructors:New:messageMediaGame
func NewTLmessageMediaGame() *TLmessageMediaGame {
	return &TLmessageMediaGame{data: &MessageMedia_Data{}}
}

// Constructors:Predicate:messageMediaInvoice
type TLmessageMediaInvoice struct {
	data *MessageMedia_Data
}

// Constructors:New:messageMediaInvoice
func NewTLmessageMediaInvoice() *TLmessageMediaInvoice {
	return &TLmessageMediaInvoice{data: &MessageMedia_Data{}}
}

// Constructors:Predicate:messageMediaGeoLive
type TLmessageMediaGeoLive struct {
	data *MessageMedia_Data
}

// Constructors:New:messageMediaGeoLive
func NewTLmessageMediaGeoLive() *TLmessageMediaGeoLive {
	return &TLmessageMediaGeoLive{data: &MessageMedia_Data{}}
}

// Constructors:Predicate:messageMediaPoll
type TLmessageMediaPoll struct {
	data *MessageMedia_Data
}

// Constructors:New:messageMediaPoll
func NewTLmessageMediaPoll() *TLmessageMediaPoll {
	return &TLmessageMediaPoll{data: &MessageMedia_Data{}}
}

// Constructors:Predicate:messageMediaDice
type TLmessageMediaDice struct {
	data *MessageMedia_Data
}

// Constructors:New:messageMediaDice
func NewTLmessageMediaDice() *TLmessageMediaDice {
	return &TLmessageMediaDice{data: &MessageMedia_Data{}}
}
func (m *TLmessageMediaPhoto) Setphoto(v *Photo)          { m.data.photo = v }
func (m *TLmessageMediaPhoto) Getphoto() *Photo           { return m.data.photo }
func (m *TLmessageMediaPhoto) Setttl_seconds(v int32)     { m.data.ttl_seconds = v }
func (m *TLmessageMediaPhoto) Getttl_seconds() int32      { return m.data.ttl_seconds }
func (m *TLmessageMediaGeo) Setgeo(v *GeoPoint)           { m.data.geo = v }
func (m *TLmessageMediaGeo) Getgeo() *GeoPoint            { return m.data.geo }
func (m *TLmessageMediaContact) Setphone_number(v string) { m.data.phone_number = v }
func (m *TLmessageMediaContact) Getphone_number() string  { return m.data.phone_number }
func (m *TLmessageMediaContact) Setfirst_name(v string)   { m.data.first_name = v }
func (m *TLmessageMediaContact) Getfirst_name() string    { return m.data.first_name }
func (m *TLmessageMediaContact) Setlast_name(v string)    { m.data.last_name = v }
func (m *TLmessageMediaContact) Getlast_name() string     { return m.data.last_name }
func (m *TLmessageMediaContact) Setvcard(v string)        { m.data.vcard = v }
func (m *TLmessageMediaContact) Getvcard() string         { return m.data.vcard }
func (m *TLmessageMediaContact) Setuser_id(v int32)       { m.data.user_id = v }
func (m *TLmessageMediaContact) Getuser_id() int32        { return m.data.user_id }
func (m *TLmessageMediaDocument) Setdocument(v *Document) { m.data.document = v }
func (m *TLmessageMediaDocument) Getdocument() *Document  { return m.data.document }
func (m *TLmessageMediaDocument) Setttl_seconds(v int32)  { m.data.ttl_seconds = v }
func (m *TLmessageMediaDocument) Getttl_seconds() int32   { return m.data.ttl_seconds }
func (m *TLmessageMediaWebPage) Setwebpage(v *WebPage)    { m.data.webpage = v }
func (m *TLmessageMediaWebPage) Getwebpage() *WebPage     { return m.data.webpage }
func (m *TLmessageMediaVenue) Setgeo(v *GeoPoint)         { m.data.geo = v }
func (m *TLmessageMediaVenue) Getgeo() *GeoPoint          { return m.data.geo }
func (m *TLmessageMediaVenue) Settitle(v string)          { m.data.title = v }
func (m *TLmessageMediaVenue) Gettitle() string           { return m.data.title }
func (m *TLmessageMediaVenue) Setaddress(v string)        { m.data.address = v }
func (m *TLmessageMediaVenue) Getaddress() string         { return m.data.address }
func (m *TLmessageMediaVenue) Setprovider(v string)       { m.data.provider = v }
func (m *TLmessageMediaVenue) Getprovider() string        { return m.data.provider }
func (m *TLmessageMediaVenue) Setvenue_id(v string)       { m.data.venue_id = v }
func (m *TLmessageMediaVenue) Getvenue_id() string        { return m.data.venue_id }
func (m *TLmessageMediaVenue) Setvenue_type(v string)     { m.data.venue_type = v }
func (m *TLmessageMediaVenue) Getvenue_type() string      { return m.data.venue_type }
func (m *TLmessageMediaGame) Setgame(v *Game)             { m.data.game = v }
func (m *TLmessageMediaGame) Getgame() *Game              { return m.data.game }
func (m *TLmessageMediaInvoice) Setshipping_address_requested(v bool) {
	m.data.shipping_address_requested = v
}
func (m *TLmessageMediaInvoice) Getshipping_address_requested() bool {
	return m.data.shipping_address_requested
}
func (m *TLmessageMediaInvoice) Settest(v bool)             { m.data.test = v }
func (m *TLmessageMediaInvoice) Gettest() bool              { return m.data.test }
func (m *TLmessageMediaInvoice) Settitle(v string)          { m.data.title = v }
func (m *TLmessageMediaInvoice) Gettitle() string           { return m.data.title }
func (m *TLmessageMediaInvoice) Setdescription(v string)    { m.data.description = v }
func (m *TLmessageMediaInvoice) Getdescription() string     { return m.data.description }
func (m *TLmessageMediaInvoice) Setphoto_20(v *WebDocument) { m.data.photo_20 = v }
func (m *TLmessageMediaInvoice) Getphoto_20() *WebDocument  { return m.data.photo_20 }
func (m *TLmessageMediaInvoice) Setreceipt_msg_id(v int32)  { m.data.receipt_msg_id = v }
func (m *TLmessageMediaInvoice) Getreceipt_msg_id() int32   { return m.data.receipt_msg_id }
func (m *TLmessageMediaInvoice) Setcurrency(v string)       { m.data.currency = v }
func (m *TLmessageMediaInvoice) Getcurrency() string        { return m.data.currency }
func (m *TLmessageMediaInvoice) Settotal_amount(v int64)    { m.data.total_amount = v }
func (m *TLmessageMediaInvoice) Gettotal_amount() int64     { return m.data.total_amount }
func (m *TLmessageMediaInvoice) Setstart_param(v string)    { m.data.start_param = v }
func (m *TLmessageMediaInvoice) Getstart_param() string     { return m.data.start_param }
func (m *TLmessageMediaGeoLive) Setgeo(v *GeoPoint)         { m.data.geo = v }
func (m *TLmessageMediaGeoLive) Getgeo() *GeoPoint          { return m.data.geo }
func (m *TLmessageMediaGeoLive) Setheading(v int32)         { m.data.heading = v }
func (m *TLmessageMediaGeoLive) Getheading() int32          { return m.data.heading }
func (m *TLmessageMediaGeoLive) Setperiod(v int32)          { m.data.period = v }
func (m *TLmessageMediaGeoLive) Getperiod() int32           { return m.data.period }
func (m *TLmessageMediaGeoLive) Setproximity_notification_radius(v int32) {
	m.data.proximity_notification_radius = v
}
func (m *TLmessageMediaGeoLive) Getproximity_notification_radius() int32 {
	return m.data.proximity_notification_radius
}
func (m *TLmessageMediaPoll) Setpoll(v *Poll)           { m.data.poll = v }
func (m *TLmessageMediaPoll) Getpoll() *Poll            { return m.data.poll }
func (m *TLmessageMediaPoll) Setresults(v *PollResults) { m.data.results = v }
func (m *TLmessageMediaPoll) Getresults() *PollResults  { return m.data.results }
func (m *TLmessageMediaDice) Setvalue(v int32)          { m.data.value = v }
func (m *TLmessageMediaDice) Getvalue() int32           { return m.data.value }
func (m *TLmessageMediaDice) Setemoticon(v string)      { m.data.emoticon = v }
func (m *TLmessageMediaDice) Getemoticon() string       { return m.data.emoticon }

///////////////////////////////////////////////////////////////////////////////
// Constructors:help_TermsOfService
// help_TermsOfService <--
// + TLhelp_termsOfService
//
// Constructors:Type:help_TermsOfService
type help_TermsOfService struct {
	constructor int32
	data        *help_TermsOfService_Data
}

// Constructors:Type:Data:help_TermsOfService
type help_TermsOfService_Data struct {
	popup           bool
	id              *DataJSON
	text            string
	entities        []*MessageEntity
	min_age_confirm int32
}

// Constructors:Predicate:help_termsOfService
type TLhelp_termsOfService struct {
	data *help_TermsOfService_Data
}

// Constructors:New:help_termsOfService
func NewTLhelp_termsOfService() *TLhelp_termsOfService {
	return &TLhelp_termsOfService{data: &help_TermsOfService_Data{}}
}
func (m *TLhelp_termsOfService) Setpopup(v bool)                { m.data.popup = v }
func (m *TLhelp_termsOfService) Getpopup() bool                 { return m.data.popup }
func (m *TLhelp_termsOfService) Setid(v *DataJSON)              { m.data.id = v }
func (m *TLhelp_termsOfService) Getid() *DataJSON               { return m.data.id }
func (m *TLhelp_termsOfService) Settext(v string)               { m.data.text = v }
func (m *TLhelp_termsOfService) Gettext() string                { return m.data.text }
func (m *TLhelp_termsOfService) Setentities(v []*MessageEntity) { m.data.entities = v }
func (m *TLhelp_termsOfService) Getentities() []*MessageEntity  { return m.data.entities }
func (m *TLhelp_termsOfService) Setmin_age_confirm(v int32)     { m.data.min_age_confirm = v }
func (m *TLhelp_termsOfService) Getmin_age_confirm() int32      { return m.data.min_age_confirm }

///////////////////////////////////////////////////////////////////////////////
// Constructors:help_PassportConfig
// help_PassportConfig <--
// + TLhelp_passportConfigNotModified
// + TLhelp_passportConfig
//
// Constructors:Type:help_PassportConfig
type help_PassportConfig struct {
	constructor int32
	data        *help_PassportConfig_Data
}

// Constructors:Type:Data:help_PassportConfig
type help_PassportConfig_Data struct {
	hash            int32
	countries_langs *DataJSON
}

// Constructors:Predicate:help_passportConfigNotModified
type TLhelp_passportConfigNotModified struct {
	data *help_PassportConfig_Data
}

// Constructors:New:help_passportConfigNotModified
func NewTLhelp_passportConfigNotModified() *TLhelp_passportConfigNotModified {
	return &TLhelp_passportConfigNotModified{data: &help_PassportConfig_Data{}}
}

// Constructors:Predicate:help_passportConfig
type TLhelp_passportConfig struct {
	data *help_PassportConfig_Data
}

// Constructors:New:help_passportConfig
func NewTLhelp_passportConfig() *TLhelp_passportConfig {
	return &TLhelp_passportConfig{data: &help_PassportConfig_Data{}}
}
func (m *TLhelp_passportConfig) Sethash(v int32)                { m.data.hash = v }
func (m *TLhelp_passportConfig) Gethash() int32                 { return m.data.hash }
func (m *TLhelp_passportConfig) Setcountries_langs(v *DataJSON) { m.data.countries_langs = v }
func (m *TLhelp_passportConfig) Getcountries_langs() *DataJSON  { return m.data.countries_langs }

///////////////////////////////////////////////////////////////////////////////
// Constructors:StatsGroupTopInviter
// StatsGroupTopInviter <--
// + TLstatsGroupTopInviter
//
// Constructors:Type:StatsGroupTopInviter
type StatsGroupTopInviter struct {
	constructor int32
	data        *StatsGroupTopInviter_Data
}

// Constructors:Type:Data:StatsGroupTopInviter
type StatsGroupTopInviter_Data struct {
	user_id     int32
	invitations int32
}

// Constructors:Predicate:statsGroupTopInviter
type TLstatsGroupTopInviter struct {
	data *StatsGroupTopInviter_Data
}

// Constructors:New:statsGroupTopInviter
func NewTLstatsGroupTopInviter() *TLstatsGroupTopInviter {
	return &TLstatsGroupTopInviter{data: &StatsGroupTopInviter_Data{}}
}
func (m *TLstatsGroupTopInviter) Setuser_id(v int32)     { m.data.user_id = v }
func (m *TLstatsGroupTopInviter) Getuser_id() int32      { return m.data.user_id }
func (m *TLstatsGroupTopInviter) Setinvitations(v int32) { m.data.invitations = v }
func (m *TLstatsGroupTopInviter) Getinvitations() int32  { return m.data.invitations }

///////////////////////////////////////////////////////////////////////////////
// Constructors:EmojiLanguage
// EmojiLanguage <--
// + TLemojiLanguage
//
// Constructors:Type:EmojiLanguage
type EmojiLanguage struct {
	constructor int32
	data        *EmojiLanguage_Data
}

// Constructors:Type:Data:EmojiLanguage
type EmojiLanguage_Data struct {
	lang_code string
}

// Constructors:Predicate:emojiLanguage
type TLemojiLanguage struct {
	data *EmojiLanguage_Data
}

// Constructors:New:emojiLanguage
func NewTLemojiLanguage() *TLemojiLanguage {
	return &TLemojiLanguage{data: &EmojiLanguage_Data{}}
}
func (m *TLemojiLanguage) Setlang_code(v string) { m.data.lang_code = v }
func (m *TLemojiLanguage) Getlang_code() string  { return m.data.lang_code }

///////////////////////////////////////////////////////////////////////////////
// Constructors:EmojiURL
// EmojiURL <--
// + TLemojiURL
//
// Constructors:Type:EmojiURL
type EmojiURL struct {
	constructor int32
	data        *EmojiURL_Data
}

// Constructors:Type:Data:EmojiURL
type EmojiURL_Data struct {
	url string
}

// Constructors:Predicate:emojiURL
type TLemojiURL struct {
	data *EmojiURL_Data
}

// Constructors:New:emojiURL
func NewTLemojiURL() *TLemojiURL {
	return &TLemojiURL{data: &EmojiURL_Data{}}
}
func (m *TLemojiURL) Seturl(v string) { m.data.url = v }
func (m *TLemojiURL) Geturl() string  { return m.data.url }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_DiscussionMessage
// messages_DiscussionMessage <--
// + TLmessages_discussionMessage
//
// Constructors:Type:messages_DiscussionMessage
type messages_DiscussionMessage struct {
	constructor int32
	data        *messages_DiscussionMessage_Data
}

// Constructors:Type:Data:messages_DiscussionMessage
type messages_DiscussionMessage_Data struct {
	messages           []*Message
	max_id             int32
	read_inbox_max_id  int32
	read_outbox_max_id int32
	chats              []*Chat
	users              []*User
}

// Constructors:Predicate:messages_discussionMessage
type TLmessages_discussionMessage struct {
	data *messages_DiscussionMessage_Data
}

// Constructors:New:messages_discussionMessage
func NewTLmessages_discussionMessage() *TLmessages_discussionMessage {
	return &TLmessages_discussionMessage{data: &messages_DiscussionMessage_Data{}}
}
func (m *TLmessages_discussionMessage) Setmessages(v []*Message)      { m.data.messages = v }
func (m *TLmessages_discussionMessage) Getmessages() []*Message       { return m.data.messages }
func (m *TLmessages_discussionMessage) Setmax_id(v int32)             { m.data.max_id = v }
func (m *TLmessages_discussionMessage) Getmax_id() int32              { return m.data.max_id }
func (m *TLmessages_discussionMessage) Setread_inbox_max_id(v int32)  { m.data.read_inbox_max_id = v }
func (m *TLmessages_discussionMessage) Getread_inbox_max_id() int32   { return m.data.read_inbox_max_id }
func (m *TLmessages_discussionMessage) Setread_outbox_max_id(v int32) { m.data.read_outbox_max_id = v }
func (m *TLmessages_discussionMessage) Getread_outbox_max_id() int32 {
	return m.data.read_outbox_max_id
}
func (m *TLmessages_discussionMessage) Setchats(v []*Chat) { m.data.chats = v }
func (m *TLmessages_discussionMessage) Getchats() []*Chat  { return m.data.chats }
func (m *TLmessages_discussionMessage) Setusers(v []*User) { m.data.users = v }
func (m *TLmessages_discussionMessage) Getusers() []*User  { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputCheckPasswordSRP
// InputCheckPasswordSRP <--
// + TLinputCheckPasswordEmpty
// + TLinputCheckPasswordSRP
//
// Constructors:Type:InputCheckPasswordSRP
type InputCheckPasswordSRP struct {
	constructor int32
	data        *InputCheckPasswordSRP_Data
}

// Constructors:Type:Data:InputCheckPasswordSRP
type InputCheckPasswordSRP_Data struct {
	srp_id int64
	A      []byte
	M1     []byte
}

// Constructors:Predicate:inputCheckPasswordEmpty
type TLinputCheckPasswordEmpty struct {
	data *InputCheckPasswordSRP_Data
}

// Constructors:New:inputCheckPasswordEmpty
func NewTLinputCheckPasswordEmpty() *TLinputCheckPasswordEmpty {
	return &TLinputCheckPasswordEmpty{data: &InputCheckPasswordSRP_Data{}}
}

// Constructors:Predicate:inputCheckPasswordSRP
type TLinputCheckPasswordSRP struct {
	data *InputCheckPasswordSRP_Data
}

// Constructors:New:inputCheckPasswordSRP
func NewTLinputCheckPasswordSRP() *TLinputCheckPasswordSRP {
	return &TLinputCheckPasswordSRP{data: &InputCheckPasswordSRP_Data{}}
}
func (m *TLinputCheckPasswordSRP) Setsrp_id(v int64) { m.data.srp_id = v }
func (m *TLinputCheckPasswordSRP) Getsrp_id() int64  { return m.data.srp_id }
func (m *TLinputCheckPasswordSRP) SetA(v []byte)     { m.data.A = v }
func (m *TLinputCheckPasswordSRP) GetA() []byte      { return m.data.A }
func (m *TLinputCheckPasswordSRP) SetM1(v []byte)    { m.data.M1 = v }
func (m *TLinputCheckPasswordSRP) GetM1() []byte     { return m.data.M1 }

///////////////////////////////////////////////////////////////////////////////
// Constructors:upload_File
// upload_File <--
// + TLupload_file
// + TLupload_fileCdnRedirect
//
// Constructors:Type:upload_File
type upload_File struct {
	constructor int32
	data        *upload_File_Data
}

// Constructors:Type:Data:upload_File
type upload_File_Data struct {
	type_key       *storage_FileType
	mtime          int32
	bytes          []byte
	dc_id          int32
	file_token     []byte
	encryption_key []byte
	encryption_iv  []byte
	file_hashes    []*FileHash
}

// Constructors:Predicate:upload_file
type TLupload_file struct {
	data *upload_File_Data
}

// Constructors:New:upload_file
func NewTLupload_file() *TLupload_file {
	return &TLupload_file{data: &upload_File_Data{}}
}

// Constructors:Predicate:upload_fileCdnRedirect
type TLupload_fileCdnRedirect struct {
	data *upload_File_Data
}

// Constructors:New:upload_fileCdnRedirect
func NewTLupload_fileCdnRedirect() *TLupload_fileCdnRedirect {
	return &TLupload_fileCdnRedirect{data: &upload_File_Data{}}
}
func (m *TLupload_file) Settype_key(v *storage_FileType)         { m.data.type_key = v }
func (m *TLupload_file) Gettype_key() *storage_FileType          { return m.data.type_key }
func (m *TLupload_file) Setmtime(v int32)                        { m.data.mtime = v }
func (m *TLupload_file) Getmtime() int32                         { return m.data.mtime }
func (m *TLupload_file) Setbytes(v []byte)                       { m.data.bytes = v }
func (m *TLupload_file) Getbytes() []byte                        { return m.data.bytes }
func (m *TLupload_fileCdnRedirect) Setdc_id(v int32)             { m.data.dc_id = v }
func (m *TLupload_fileCdnRedirect) Getdc_id() int32              { return m.data.dc_id }
func (m *TLupload_fileCdnRedirect) Setfile_token(v []byte)       { m.data.file_token = v }
func (m *TLupload_fileCdnRedirect) Getfile_token() []byte        { return m.data.file_token }
func (m *TLupload_fileCdnRedirect) Setencryption_key(v []byte)   { m.data.encryption_key = v }
func (m *TLupload_fileCdnRedirect) Getencryption_key() []byte    { return m.data.encryption_key }
func (m *TLupload_fileCdnRedirect) Setencryption_iv(v []byte)    { m.data.encryption_iv = v }
func (m *TLupload_fileCdnRedirect) Getencryption_iv() []byte     { return m.data.encryption_iv }
func (m *TLupload_fileCdnRedirect) Setfile_hashes(v []*FileHash) { m.data.file_hashes = v }
func (m *TLupload_fileCdnRedirect) Getfile_hashes() []*FileHash  { return m.data.file_hashes }

///////////////////////////////////////////////////////////////////////////////
// Constructors:Folder
// Folder <--
// + TLfolder
//
// Constructors:Type:Folder
type Folder struct {
	constructor int32
	data        *Folder_Data
}

// Constructors:Type:Data:Folder
type Folder_Data struct {
	autofill_new_broadcasts     bool
	autofill_public_groups      bool
	autofill_new_correspondents bool
	id                          int32
	title                       string
	photo                       *ChatPhoto
}

// Constructors:Predicate:folder
type TLfolder struct {
	data *Folder_Data
}

// Constructors:New:folder
func NewTLfolder() *TLfolder {
	return &TLfolder{data: &Folder_Data{}}
}
func (m *TLfolder) Setautofill_new_broadcasts(v bool)     { m.data.autofill_new_broadcasts = v }
func (m *TLfolder) Getautofill_new_broadcasts() bool      { return m.data.autofill_new_broadcasts }
func (m *TLfolder) Setautofill_public_groups(v bool)      { m.data.autofill_public_groups = v }
func (m *TLfolder) Getautofill_public_groups() bool       { return m.data.autofill_public_groups }
func (m *TLfolder) Setautofill_new_correspondents(v bool) { m.data.autofill_new_correspondents = v }
func (m *TLfolder) Getautofill_new_correspondents() bool  { return m.data.autofill_new_correspondents }
func (m *TLfolder) Setid(v int32)                         { m.data.id = v }
func (m *TLfolder) Getid() int32                          { return m.data.id }
func (m *TLfolder) Settitle(v string)                     { m.data.title = v }
func (m *TLfolder) Gettitle() string                      { return m.data.title }
func (m *TLfolder) Setphoto(v *ChatPhoto)                 { m.data.photo = v }
func (m *TLfolder) Getphoto() *ChatPhoto                  { return m.data.photo }

///////////////////////////////////////////////////////////////////////////////
// Constructors:help_SupportName
// help_SupportName <--
// + TLhelp_supportName
//
// Constructors:Type:help_SupportName
type help_SupportName struct {
	constructor int32
	data        *help_SupportName_Data
}

// Constructors:Type:Data:help_SupportName
type help_SupportName_Data struct {
	name string
}

// Constructors:Predicate:help_supportName
type TLhelp_supportName struct {
	data *help_SupportName_Data
}

// Constructors:New:help_supportName
func NewTLhelp_supportName() *TLhelp_supportName {
	return &TLhelp_supportName{data: &help_SupportName_Data{}}
}
func (m *TLhelp_supportName) Setname(v string) { m.data.name = v }
func (m *TLhelp_supportName) Getname() string  { return m.data.name }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputEncryptedChat
// InputEncryptedChat <--
// + TLinputEncryptedChat
//
// Constructors:Type:InputEncryptedChat
type InputEncryptedChat struct {
	constructor int32
	data        *InputEncryptedChat_Data
}

// Constructors:Type:Data:InputEncryptedChat
type InputEncryptedChat_Data struct {
	chat_id     int32
	access_hash int64
}

// Constructors:Predicate:inputEncryptedChat
type TLinputEncryptedChat struct {
	data *InputEncryptedChat_Data
}

// Constructors:New:inputEncryptedChat
func NewTLinputEncryptedChat() *TLinputEncryptedChat {
	return &TLinputEncryptedChat{data: &InputEncryptedChat_Data{}}
}
func (m *TLinputEncryptedChat) Setchat_id(v int32)     { m.data.chat_id = v }
func (m *TLinputEncryptedChat) Getchat_id() int32      { return m.data.chat_id }
func (m *TLinputEncryptedChat) Setaccess_hash(v int64) { m.data.access_hash = v }
func (m *TLinputEncryptedChat) Getaccess_hash() int64  { return m.data.access_hash }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputBotInlineMessage
// InputBotInlineMessage <--
// + TLinputBotInlineMessageMediaAuto
// + TLinputBotInlineMessageText
// + TLinputBotInlineMessageMediaGeo
// + TLinputBotInlineMessageMediaVenue
// + TLinputBotInlineMessageMediaContact
// + TLinputBotInlineMessageGame
//
// Constructors:Type:InputBotInlineMessage
type InputBotInlineMessage struct {
	constructor int32
	data        *InputBotInlineMessage_Data
}

// Constructors:Type:Data:InputBotInlineMessage
type InputBotInlineMessage_Data struct {
	message                       string
	entities                      []*MessageEntity
	reply_markup                  *ReplyMarkup
	no_webpage                    bool
	geo_point                     *InputGeoPoint
	heading                       int32
	period                        int32
	proximity_notification_radius int32
	title                         string
	address                       string
	provider                      string
	venue_id                      string
	venue_type                    string
	phone_number                  string
	first_name                    string
	last_name                     string
	vcard                         string
}

// Constructors:Predicate:inputBotInlineMessageMediaAuto
type TLinputBotInlineMessageMediaAuto struct {
	data *InputBotInlineMessage_Data
}

// Constructors:New:inputBotInlineMessageMediaAuto
func NewTLinputBotInlineMessageMediaAuto() *TLinputBotInlineMessageMediaAuto {
	return &TLinputBotInlineMessageMediaAuto{data: &InputBotInlineMessage_Data{}}
}

// Constructors:Predicate:inputBotInlineMessageText
type TLinputBotInlineMessageText struct {
	data *InputBotInlineMessage_Data
}

// Constructors:New:inputBotInlineMessageText
func NewTLinputBotInlineMessageText() *TLinputBotInlineMessageText {
	return &TLinputBotInlineMessageText{data: &InputBotInlineMessage_Data{}}
}

// Constructors:Predicate:inputBotInlineMessageMediaGeo
type TLinputBotInlineMessageMediaGeo struct {
	data *InputBotInlineMessage_Data
}

// Constructors:New:inputBotInlineMessageMediaGeo
func NewTLinputBotInlineMessageMediaGeo() *TLinputBotInlineMessageMediaGeo {
	return &TLinputBotInlineMessageMediaGeo{data: &InputBotInlineMessage_Data{}}
}

// Constructors:Predicate:inputBotInlineMessageMediaVenue
type TLinputBotInlineMessageMediaVenue struct {
	data *InputBotInlineMessage_Data
}

// Constructors:New:inputBotInlineMessageMediaVenue
func NewTLinputBotInlineMessageMediaVenue() *TLinputBotInlineMessageMediaVenue {
	return &TLinputBotInlineMessageMediaVenue{data: &InputBotInlineMessage_Data{}}
}

// Constructors:Predicate:inputBotInlineMessageMediaContact
type TLinputBotInlineMessageMediaContact struct {
	data *InputBotInlineMessage_Data
}

// Constructors:New:inputBotInlineMessageMediaContact
func NewTLinputBotInlineMessageMediaContact() *TLinputBotInlineMessageMediaContact {
	return &TLinputBotInlineMessageMediaContact{data: &InputBotInlineMessage_Data{}}
}

// Constructors:Predicate:inputBotInlineMessageGame
type TLinputBotInlineMessageGame struct {
	data *InputBotInlineMessage_Data
}

// Constructors:New:inputBotInlineMessageGame
func NewTLinputBotInlineMessageGame() *TLinputBotInlineMessageGame {
	return &TLinputBotInlineMessageGame{data: &InputBotInlineMessage_Data{}}
}
func (m *TLinputBotInlineMessageMediaAuto) Setmessage(v string)            { m.data.message = v }
func (m *TLinputBotInlineMessageMediaAuto) Getmessage() string             { return m.data.message }
func (m *TLinputBotInlineMessageMediaAuto) Setentities(v []*MessageEntity) { m.data.entities = v }
func (m *TLinputBotInlineMessageMediaAuto) Getentities() []*MessageEntity  { return m.data.entities }
func (m *TLinputBotInlineMessageMediaAuto) Setreply_markup(v *ReplyMarkup) { m.data.reply_markup = v }
func (m *TLinputBotInlineMessageMediaAuto) Getreply_markup() *ReplyMarkup  { return m.data.reply_markup }
func (m *TLinputBotInlineMessageText) Setno_webpage(v bool)                { m.data.no_webpage = v }
func (m *TLinputBotInlineMessageText) Getno_webpage() bool                 { return m.data.no_webpage }
func (m *TLinputBotInlineMessageText) Setmessage(v string)                 { m.data.message = v }
func (m *TLinputBotInlineMessageText) Getmessage() string                  { return m.data.message }
func (m *TLinputBotInlineMessageText) Setentities(v []*MessageEntity)      { m.data.entities = v }
func (m *TLinputBotInlineMessageText) Getentities() []*MessageEntity       { return m.data.entities }
func (m *TLinputBotInlineMessageText) Setreply_markup(v *ReplyMarkup)      { m.data.reply_markup = v }
func (m *TLinputBotInlineMessageText) Getreply_markup() *ReplyMarkup       { return m.data.reply_markup }
func (m *TLinputBotInlineMessageMediaGeo) Setgeo_point(v *InputGeoPoint)   { m.data.geo_point = v }
func (m *TLinputBotInlineMessageMediaGeo) Getgeo_point() *InputGeoPoint    { return m.data.geo_point }
func (m *TLinputBotInlineMessageMediaGeo) Setheading(v int32)              { m.data.heading = v }
func (m *TLinputBotInlineMessageMediaGeo) Getheading() int32               { return m.data.heading }
func (m *TLinputBotInlineMessageMediaGeo) Setperiod(v int32)               { m.data.period = v }
func (m *TLinputBotInlineMessageMediaGeo) Getperiod() int32                { return m.data.period }
func (m *TLinputBotInlineMessageMediaGeo) Setproximity_notification_radius(v int32) {
	m.data.proximity_notification_radius = v
}
func (m *TLinputBotInlineMessageMediaGeo) Getproximity_notification_radius() int32 {
	return m.data.proximity_notification_radius
}
func (m *TLinputBotInlineMessageMediaGeo) Setreply_markup(v *ReplyMarkup)   { m.data.reply_markup = v }
func (m *TLinputBotInlineMessageMediaGeo) Getreply_markup() *ReplyMarkup    { return m.data.reply_markup }
func (m *TLinputBotInlineMessageMediaVenue) Setgeo_point(v *InputGeoPoint)  { m.data.geo_point = v }
func (m *TLinputBotInlineMessageMediaVenue) Getgeo_point() *InputGeoPoint   { return m.data.geo_point }
func (m *TLinputBotInlineMessageMediaVenue) Settitle(v string)              { m.data.title = v }
func (m *TLinputBotInlineMessageMediaVenue) Gettitle() string               { return m.data.title }
func (m *TLinputBotInlineMessageMediaVenue) Setaddress(v string)            { m.data.address = v }
func (m *TLinputBotInlineMessageMediaVenue) Getaddress() string             { return m.data.address }
func (m *TLinputBotInlineMessageMediaVenue) Setprovider(v string)           { m.data.provider = v }
func (m *TLinputBotInlineMessageMediaVenue) Getprovider() string            { return m.data.provider }
func (m *TLinputBotInlineMessageMediaVenue) Setvenue_id(v string)           { m.data.venue_id = v }
func (m *TLinputBotInlineMessageMediaVenue) Getvenue_id() string            { return m.data.venue_id }
func (m *TLinputBotInlineMessageMediaVenue) Setvenue_type(v string)         { m.data.venue_type = v }
func (m *TLinputBotInlineMessageMediaVenue) Getvenue_type() string          { return m.data.venue_type }
func (m *TLinputBotInlineMessageMediaVenue) Setreply_markup(v *ReplyMarkup) { m.data.reply_markup = v }
func (m *TLinputBotInlineMessageMediaVenue) Getreply_markup() *ReplyMarkup {
	return m.data.reply_markup
}
func (m *TLinputBotInlineMessageMediaContact) Setphone_number(v string) { m.data.phone_number = v }
func (m *TLinputBotInlineMessageMediaContact) Getphone_number() string  { return m.data.phone_number }
func (m *TLinputBotInlineMessageMediaContact) Setfirst_name(v string)   { m.data.first_name = v }
func (m *TLinputBotInlineMessageMediaContact) Getfirst_name() string    { return m.data.first_name }
func (m *TLinputBotInlineMessageMediaContact) Setlast_name(v string)    { m.data.last_name = v }
func (m *TLinputBotInlineMessageMediaContact) Getlast_name() string     { return m.data.last_name }
func (m *TLinputBotInlineMessageMediaContact) Setvcard(v string)        { m.data.vcard = v }
func (m *TLinputBotInlineMessageMediaContact) Getvcard() string         { return m.data.vcard }
func (m *TLinputBotInlineMessageMediaContact) Setreply_markup(v *ReplyMarkup) {
	m.data.reply_markup = v
}
func (m *TLinputBotInlineMessageMediaContact) Getreply_markup() *ReplyMarkup {
	return m.data.reply_markup
}
func (m *TLinputBotInlineMessageGame) Setreply_markup(v *ReplyMarkup) { m.data.reply_markup = v }
func (m *TLinputBotInlineMessageGame) Getreply_markup() *ReplyMarkup  { return m.data.reply_markup }

///////////////////////////////////////////////////////////////////////////////
// Constructors:SecurePlainData
// SecurePlainData <--
// + TLsecurePlainPhone
// + TLsecurePlainEmail
//
// Constructors:Type:SecurePlainData
type SecurePlainData struct {
	constructor int32
	data        *SecurePlainData_Data
}

// Constructors:Type:Data:SecurePlainData
type SecurePlainData_Data struct {
	phone string
	email string
}

// Constructors:Predicate:securePlainPhone
type TLsecurePlainPhone struct {
	data *SecurePlainData_Data
}

// Constructors:New:securePlainPhone
func NewTLsecurePlainPhone() *TLsecurePlainPhone {
	return &TLsecurePlainPhone{data: &SecurePlainData_Data{}}
}

// Constructors:Predicate:securePlainEmail
type TLsecurePlainEmail struct {
	data *SecurePlainData_Data
}

// Constructors:New:securePlainEmail
func NewTLsecurePlainEmail() *TLsecurePlainEmail {
	return &TLsecurePlainEmail{data: &SecurePlainData_Data{}}
}
func (m *TLsecurePlainPhone) Setphone(v string) { m.data.phone = v }
func (m *TLsecurePlainPhone) Getphone() string  { return m.data.phone }
func (m *TLsecurePlainEmail) Setemail(v string) { m.data.email = v }
func (m *TLsecurePlainEmail) Getemail() string  { return m.data.email }

///////////////////////////////////////////////////////////////////////////////
// Constructors:TopPeerCategory
// TopPeerCategory <--
// + TLtopPeerCategoryBotsPM
// + TLtopPeerCategoryBotsInline
// + TLtopPeerCategoryCorrespondents
// + TLtopPeerCategoryGroups
// + TLtopPeerCategoryChannels
// + TLtopPeerCategoryPhoneCalls
// + TLtopPeerCategoryForwardUsers
// + TLtopPeerCategoryForwardChats
//
// Constructors:Type:TopPeerCategory
type TopPeerCategory struct {
	constructor int32
	data        *TopPeerCategory_Data
}

// Constructors:Type:Data:TopPeerCategory
type TopPeerCategory_Data struct {
}

// Constructors:Predicate:topPeerCategoryBotsPM
type TLtopPeerCategoryBotsPM struct {
	data *TopPeerCategory_Data
}

// Constructors:New:topPeerCategoryBotsPM
func NewTLtopPeerCategoryBotsPM() *TLtopPeerCategoryBotsPM {
	return &TLtopPeerCategoryBotsPM{data: &TopPeerCategory_Data{}}
}

// Constructors:Predicate:topPeerCategoryBotsInline
type TLtopPeerCategoryBotsInline struct {
	data *TopPeerCategory_Data
}

// Constructors:New:topPeerCategoryBotsInline
func NewTLtopPeerCategoryBotsInline() *TLtopPeerCategoryBotsInline {
	return &TLtopPeerCategoryBotsInline{data: &TopPeerCategory_Data{}}
}

// Constructors:Predicate:topPeerCategoryCorrespondents
type TLtopPeerCategoryCorrespondents struct {
	data *TopPeerCategory_Data
}

// Constructors:New:topPeerCategoryCorrespondents
func NewTLtopPeerCategoryCorrespondents() *TLtopPeerCategoryCorrespondents {
	return &TLtopPeerCategoryCorrespondents{data: &TopPeerCategory_Data{}}
}

// Constructors:Predicate:topPeerCategoryGroups
type TLtopPeerCategoryGroups struct {
	data *TopPeerCategory_Data
}

// Constructors:New:topPeerCategoryGroups
func NewTLtopPeerCategoryGroups() *TLtopPeerCategoryGroups {
	return &TLtopPeerCategoryGroups{data: &TopPeerCategory_Data{}}
}

// Constructors:Predicate:topPeerCategoryChannels
type TLtopPeerCategoryChannels struct {
	data *TopPeerCategory_Data
}

// Constructors:New:topPeerCategoryChannels
func NewTLtopPeerCategoryChannels() *TLtopPeerCategoryChannels {
	return &TLtopPeerCategoryChannels{data: &TopPeerCategory_Data{}}
}

// Constructors:Predicate:topPeerCategoryPhoneCalls
type TLtopPeerCategoryPhoneCalls struct {
	data *TopPeerCategory_Data
}

// Constructors:New:topPeerCategoryPhoneCalls
func NewTLtopPeerCategoryPhoneCalls() *TLtopPeerCategoryPhoneCalls {
	return &TLtopPeerCategoryPhoneCalls{data: &TopPeerCategory_Data{}}
}

// Constructors:Predicate:topPeerCategoryForwardUsers
type TLtopPeerCategoryForwardUsers struct {
	data *TopPeerCategory_Data
}

// Constructors:New:topPeerCategoryForwardUsers
func NewTLtopPeerCategoryForwardUsers() *TLtopPeerCategoryForwardUsers {
	return &TLtopPeerCategoryForwardUsers{data: &TopPeerCategory_Data{}}
}

// Constructors:Predicate:topPeerCategoryForwardChats
type TLtopPeerCategoryForwardChats struct {
	data *TopPeerCategory_Data
}

// Constructors:New:topPeerCategoryForwardChats
func NewTLtopPeerCategoryForwardChats() *TLtopPeerCategoryForwardChats {
	return &TLtopPeerCategoryForwardChats{data: &TopPeerCategory_Data{}}
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:WebPageAttribute
// WebPageAttribute <--
// + TLwebPageAttributeTheme
//
// Constructors:Type:WebPageAttribute
type WebPageAttribute struct {
	constructor int32
	data        *WebPageAttribute_Data
}

// Constructors:Type:Data:WebPageAttribute
type WebPageAttribute_Data struct {
	documents []*Document
	settings  *ThemeSettings
}

// Constructors:Predicate:webPageAttributeTheme
type TLwebPageAttributeTheme struct {
	data *WebPageAttribute_Data
}

// Constructors:New:webPageAttributeTheme
func NewTLwebPageAttributeTheme() *TLwebPageAttributeTheme {
	return &TLwebPageAttributeTheme{data: &WebPageAttribute_Data{}}
}
func (m *TLwebPageAttributeTheme) Setdocuments(v []*Document)   { m.data.documents = v }
func (m *TLwebPageAttributeTheme) Getdocuments() []*Document    { return m.data.documents }
func (m *TLwebPageAttributeTheme) Setsettings(v *ThemeSettings) { m.data.settings = v }
func (m *TLwebPageAttributeTheme) Getsettings() *ThemeSettings  { return m.data.settings }

///////////////////////////////////////////////////////////////////////////////
// Constructors:CdnConfig
// CdnConfig <--
// + TLcdnConfig
//
// Constructors:Type:CdnConfig
type CdnConfig struct {
	constructor int32
	data        *CdnConfig_Data
}

// Constructors:Type:Data:CdnConfig
type CdnConfig_Data struct {
	public_keys []*CdnPublicKey
}

// Constructors:Predicate:cdnConfig
type TLcdnConfig struct {
	data *CdnConfig_Data
}

// Constructors:New:cdnConfig
func NewTLcdnConfig() *TLcdnConfig {
	return &TLcdnConfig{data: &CdnConfig_Data{}}
}
func (m *TLcdnConfig) Setpublic_keys(v []*CdnPublicKey) { m.data.public_keys = v }
func (m *TLcdnConfig) Getpublic_keys() []*CdnPublicKey  { return m.data.public_keys }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputContact
// InputContact <--
// + TLinputPhoneContact
//
// Constructors:Type:InputContact
type InputContact struct {
	constructor int32
	data        *InputContact_Data
}

// Constructors:Type:Data:InputContact
type InputContact_Data struct {
	client_id  int64
	phone      string
	first_name string
	last_name  string
}

// Constructors:Predicate:inputPhoneContact
type TLinputPhoneContact struct {
	data *InputContact_Data
}

// Constructors:New:inputPhoneContact
func NewTLinputPhoneContact() *TLinputPhoneContact {
	return &TLinputPhoneContact{data: &InputContact_Data{}}
}
func (m *TLinputPhoneContact) Setclient_id(v int64)   { m.data.client_id = v }
func (m *TLinputPhoneContact) Getclient_id() int64    { return m.data.client_id }
func (m *TLinputPhoneContact) Setphone(v string)      { m.data.phone = v }
func (m *TLinputPhoneContact) Getphone() string       { return m.data.phone }
func (m *TLinputPhoneContact) Setfirst_name(v string) { m.data.first_name = v }
func (m *TLinputPhoneContact) Getfirst_name() string  { return m.data.first_name }
func (m *TLinputPhoneContact) Setlast_name(v string)  { m.data.last_name = v }
func (m *TLinputPhoneContact) Getlast_name() string   { return m.data.last_name }

///////////////////////////////////////////////////////////////////////////////
// Constructors:KeyboardButton
// KeyboardButton <--
// + TLkeyboardButton
// + TLkeyboardButtonUrl
// + TLkeyboardButtonCallback
// + TLkeyboardButtonRequestPhone
// + TLkeyboardButtonRequestGeoLocation
// + TLkeyboardButtonSwitchInline
// + TLkeyboardButtonGame
// + TLkeyboardButtonBuy
// + TLkeyboardButtonUrlAuth
// + TLinputKeyboardButtonUrlAuth
// + TLkeyboardButtonRequestPoll
//
// Constructors:Type:KeyboardButton
type KeyboardButton struct {
	constructor int32
	data        *KeyboardButton_Data
}

// Constructors:Type:Data:KeyboardButton
type KeyboardButton_Data struct {
	text                 string
	url                  string
	requires_password    bool
	data                 []byte
	same_peer            bool
	query                string
	fwd_text             string
	button_id            int32
	request_write_access bool
	bot                  *InputUser
	quiz                 *Bool
}

// Constructors:Predicate:keyboardButton
type TLkeyboardButton struct {
	data *KeyboardButton_Data
}

// Constructors:New:keyboardButton
func NewTLkeyboardButton() *TLkeyboardButton {
	return &TLkeyboardButton{data: &KeyboardButton_Data{}}
}

// Constructors:Predicate:keyboardButtonUrl
type TLkeyboardButtonUrl struct {
	data *KeyboardButton_Data
}

// Constructors:New:keyboardButtonUrl
func NewTLkeyboardButtonUrl() *TLkeyboardButtonUrl {
	return &TLkeyboardButtonUrl{data: &KeyboardButton_Data{}}
}

// Constructors:Predicate:keyboardButtonCallback
type TLkeyboardButtonCallback struct {
	data *KeyboardButton_Data
}

// Constructors:New:keyboardButtonCallback
func NewTLkeyboardButtonCallback() *TLkeyboardButtonCallback {
	return &TLkeyboardButtonCallback{data: &KeyboardButton_Data{}}
}

// Constructors:Predicate:keyboardButtonRequestPhone
type TLkeyboardButtonRequestPhone struct {
	data *KeyboardButton_Data
}

// Constructors:New:keyboardButtonRequestPhone
func NewTLkeyboardButtonRequestPhone() *TLkeyboardButtonRequestPhone {
	return &TLkeyboardButtonRequestPhone{data: &KeyboardButton_Data{}}
}

// Constructors:Predicate:keyboardButtonRequestGeoLocation
type TLkeyboardButtonRequestGeoLocation struct {
	data *KeyboardButton_Data
}

// Constructors:New:keyboardButtonRequestGeoLocation
func NewTLkeyboardButtonRequestGeoLocation() *TLkeyboardButtonRequestGeoLocation {
	return &TLkeyboardButtonRequestGeoLocation{data: &KeyboardButton_Data{}}
}

// Constructors:Predicate:keyboardButtonSwitchInline
type TLkeyboardButtonSwitchInline struct {
	data *KeyboardButton_Data
}

// Constructors:New:keyboardButtonSwitchInline
func NewTLkeyboardButtonSwitchInline() *TLkeyboardButtonSwitchInline {
	return &TLkeyboardButtonSwitchInline{data: &KeyboardButton_Data{}}
}

// Constructors:Predicate:keyboardButtonGame
type TLkeyboardButtonGame struct {
	data *KeyboardButton_Data
}

// Constructors:New:keyboardButtonGame
func NewTLkeyboardButtonGame() *TLkeyboardButtonGame {
	return &TLkeyboardButtonGame{data: &KeyboardButton_Data{}}
}

// Constructors:Predicate:keyboardButtonBuy
type TLkeyboardButtonBuy struct {
	data *KeyboardButton_Data
}

// Constructors:New:keyboardButtonBuy
func NewTLkeyboardButtonBuy() *TLkeyboardButtonBuy {
	return &TLkeyboardButtonBuy{data: &KeyboardButton_Data{}}
}

// Constructors:Predicate:keyboardButtonUrlAuth
type TLkeyboardButtonUrlAuth struct {
	data *KeyboardButton_Data
}

// Constructors:New:keyboardButtonUrlAuth
func NewTLkeyboardButtonUrlAuth() *TLkeyboardButtonUrlAuth {
	return &TLkeyboardButtonUrlAuth{data: &KeyboardButton_Data{}}
}

// Constructors:Predicate:inputKeyboardButtonUrlAuth
type TLinputKeyboardButtonUrlAuth struct {
	data *KeyboardButton_Data
}

// Constructors:New:inputKeyboardButtonUrlAuth
func NewTLinputKeyboardButtonUrlAuth() *TLinputKeyboardButtonUrlAuth {
	return &TLinputKeyboardButtonUrlAuth{data: &KeyboardButton_Data{}}
}

// Constructors:Predicate:keyboardButtonRequestPoll
type TLkeyboardButtonRequestPoll struct {
	data *KeyboardButton_Data
}

// Constructors:New:keyboardButtonRequestPoll
func NewTLkeyboardButtonRequestPoll() *TLkeyboardButtonRequestPoll {
	return &TLkeyboardButtonRequestPoll{data: &KeyboardButton_Data{}}
}
func (m *TLkeyboardButton) Settext(v string)                    { m.data.text = v }
func (m *TLkeyboardButton) Gettext() string                     { return m.data.text }
func (m *TLkeyboardButtonUrl) Settext(v string)                 { m.data.text = v }
func (m *TLkeyboardButtonUrl) Gettext() string                  { return m.data.text }
func (m *TLkeyboardButtonUrl) Seturl(v string)                  { m.data.url = v }
func (m *TLkeyboardButtonUrl) Geturl() string                   { return m.data.url }
func (m *TLkeyboardButtonCallback) Setrequires_password(v bool) { m.data.requires_password = v }
func (m *TLkeyboardButtonCallback) Getrequires_password() bool  { return m.data.requires_password }
func (m *TLkeyboardButtonCallback) Settext(v string)            { m.data.text = v }
func (m *TLkeyboardButtonCallback) Gettext() string             { return m.data.text }
func (m *TLkeyboardButtonCallback) Setdata(v []byte)            { m.data.data = v }
func (m *TLkeyboardButtonCallback) Getdata() []byte             { return m.data.data }
func (m *TLkeyboardButtonRequestPhone) Settext(v string)        { m.data.text = v }
func (m *TLkeyboardButtonRequestPhone) Gettext() string         { return m.data.text }
func (m *TLkeyboardButtonRequestGeoLocation) Settext(v string)  { m.data.text = v }
func (m *TLkeyboardButtonRequestGeoLocation) Gettext() string   { return m.data.text }
func (m *TLkeyboardButtonSwitchInline) Setsame_peer(v bool)     { m.data.same_peer = v }
func (m *TLkeyboardButtonSwitchInline) Getsame_peer() bool      { return m.data.same_peer }
func (m *TLkeyboardButtonSwitchInline) Settext(v string)        { m.data.text = v }
func (m *TLkeyboardButtonSwitchInline) Gettext() string         { return m.data.text }
func (m *TLkeyboardButtonSwitchInline) Setquery(v string)       { m.data.query = v }
func (m *TLkeyboardButtonSwitchInline) Getquery() string        { return m.data.query }
func (m *TLkeyboardButtonGame) Settext(v string)                { m.data.text = v }
func (m *TLkeyboardButtonGame) Gettext() string                 { return m.data.text }
func (m *TLkeyboardButtonBuy) Settext(v string)                 { m.data.text = v }
func (m *TLkeyboardButtonBuy) Gettext() string                  { return m.data.text }
func (m *TLkeyboardButtonUrlAuth) Settext(v string)             { m.data.text = v }
func (m *TLkeyboardButtonUrlAuth) Gettext() string              { return m.data.text }
func (m *TLkeyboardButtonUrlAuth) Setfwd_text(v string)         { m.data.fwd_text = v }
func (m *TLkeyboardButtonUrlAuth) Getfwd_text() string          { return m.data.fwd_text }
func (m *TLkeyboardButtonUrlAuth) Seturl(v string)              { m.data.url = v }
func (m *TLkeyboardButtonUrlAuth) Geturl() string               { return m.data.url }
func (m *TLkeyboardButtonUrlAuth) Setbutton_id(v int32)         { m.data.button_id = v }
func (m *TLkeyboardButtonUrlAuth) Getbutton_id() int32          { return m.data.button_id }
func (m *TLinputKeyboardButtonUrlAuth) Setrequest_write_access(v bool) {
	m.data.request_write_access = v
}
func (m *TLinputKeyboardButtonUrlAuth) Getrequest_write_access() bool {
	return m.data.request_write_access
}
func (m *TLinputKeyboardButtonUrlAuth) Settext(v string)     { m.data.text = v }
func (m *TLinputKeyboardButtonUrlAuth) Gettext() string      { return m.data.text }
func (m *TLinputKeyboardButtonUrlAuth) Setfwd_text(v string) { m.data.fwd_text = v }
func (m *TLinputKeyboardButtonUrlAuth) Getfwd_text() string  { return m.data.fwd_text }
func (m *TLinputKeyboardButtonUrlAuth) Seturl(v string)      { m.data.url = v }
func (m *TLinputKeyboardButtonUrlAuth) Geturl() string       { return m.data.url }
func (m *TLinputKeyboardButtonUrlAuth) Setbot(v *InputUser)  { m.data.bot = v }
func (m *TLinputKeyboardButtonUrlAuth) Getbot() *InputUser   { return m.data.bot }
func (m *TLkeyboardButtonRequestPoll) Setquiz(v *Bool)       { m.data.quiz = v }
func (m *TLkeyboardButtonRequestPoll) Getquiz() *Bool        { return m.data.quiz }
func (m *TLkeyboardButtonRequestPoll) Settext(v string)      { m.data.text = v }
func (m *TLkeyboardButtonRequestPoll) Gettext() string       { return m.data.text }

///////////////////////////////////////////////////////////////////////////////
// Constructors:account_ContentSettings
// account_ContentSettings <--
// + TLaccount_contentSettings
//
// Constructors:Type:account_ContentSettings
type account_ContentSettings struct {
	constructor int32
	data        *account_ContentSettings_Data
}

// Constructors:Type:Data:account_ContentSettings
type account_ContentSettings_Data struct {
	sensitive_enabled    bool
	sensitive_can_change bool
}

// Constructors:Predicate:account_contentSettings
type TLaccount_contentSettings struct {
	data *account_ContentSettings_Data
}

// Constructors:New:account_contentSettings
func NewTLaccount_contentSettings() *TLaccount_contentSettings {
	return &TLaccount_contentSettings{data: &account_ContentSettings_Data{}}
}
func (m *TLaccount_contentSettings) Setsensitive_enabled(v bool)    { m.data.sensitive_enabled = v }
func (m *TLaccount_contentSettings) Getsensitive_enabled() bool     { return m.data.sensitive_enabled }
func (m *TLaccount_contentSettings) Setsensitive_can_change(v bool) { m.data.sensitive_can_change = v }
func (m *TLaccount_contentSettings) Getsensitive_can_change() bool {
	return m.data.sensitive_can_change
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:RichText
// RichText <--
// + TLtextEmpty
// + TLtextPlain
// + TLtextBold
// + TLtextItalic
// + TLtextUnderline
// + TLtextStrike
// + TLtextFixed
// + TLtextUrl
// + TLtextEmail
// + TLtextConcat
// + TLtextSubscript
// + TLtextSuperscript
// + TLtextMarked
// + TLtextPhone
// + TLtextImage
// + TLtextAnchor
//
// Constructors:Type:RichText
type RichText struct {
	constructor int32
	data        *RichText_Data
}

// Constructors:Type:Data:RichText
type RichText_Data struct {
	text        string
	text_2      *RichText
	url         string
	webpage_id  int64
	email       string
	texts       []*RichText
	phone       string
	document_id int64
	w           int32
	h           int32
	name        string
}

// Constructors:Predicate:textEmpty
type TLtextEmpty struct {
	data *RichText_Data
}

// Constructors:New:textEmpty
func NewTLtextEmpty() *TLtextEmpty {
	return &TLtextEmpty{data: &RichText_Data{}}
}

// Constructors:Predicate:textPlain
type TLtextPlain struct {
	data *RichText_Data
}

// Constructors:New:textPlain
func NewTLtextPlain() *TLtextPlain {
	return &TLtextPlain{data: &RichText_Data{}}
}

// Constructors:Predicate:textBold
type TLtextBold struct {
	data *RichText_Data
}

// Constructors:New:textBold
func NewTLtextBold() *TLtextBold {
	return &TLtextBold{data: &RichText_Data{}}
}

// Constructors:Predicate:textItalic
type TLtextItalic struct {
	data *RichText_Data
}

// Constructors:New:textItalic
func NewTLtextItalic() *TLtextItalic {
	return &TLtextItalic{data: &RichText_Data{}}
}

// Constructors:Predicate:textUnderline
type TLtextUnderline struct {
	data *RichText_Data
}

// Constructors:New:textUnderline
func NewTLtextUnderline() *TLtextUnderline {
	return &TLtextUnderline{data: &RichText_Data{}}
}

// Constructors:Predicate:textStrike
type TLtextStrike struct {
	data *RichText_Data
}

// Constructors:New:textStrike
func NewTLtextStrike() *TLtextStrike {
	return &TLtextStrike{data: &RichText_Data{}}
}

// Constructors:Predicate:textFixed
type TLtextFixed struct {
	data *RichText_Data
}

// Constructors:New:textFixed
func NewTLtextFixed() *TLtextFixed {
	return &TLtextFixed{data: &RichText_Data{}}
}

// Constructors:Predicate:textUrl
type TLtextUrl struct {
	data *RichText_Data
}

// Constructors:New:textUrl
func NewTLtextUrl() *TLtextUrl {
	return &TLtextUrl{data: &RichText_Data{}}
}

// Constructors:Predicate:textEmail
type TLtextEmail struct {
	data *RichText_Data
}

// Constructors:New:textEmail
func NewTLtextEmail() *TLtextEmail {
	return &TLtextEmail{data: &RichText_Data{}}
}

// Constructors:Predicate:textConcat
type TLtextConcat struct {
	data *RichText_Data
}

// Constructors:New:textConcat
func NewTLtextConcat() *TLtextConcat {
	return &TLtextConcat{data: &RichText_Data{}}
}

// Constructors:Predicate:textSubscript
type TLtextSubscript struct {
	data *RichText_Data
}

// Constructors:New:textSubscript
func NewTLtextSubscript() *TLtextSubscript {
	return &TLtextSubscript{data: &RichText_Data{}}
}

// Constructors:Predicate:textSuperscript
type TLtextSuperscript struct {
	data *RichText_Data
}

// Constructors:New:textSuperscript
func NewTLtextSuperscript() *TLtextSuperscript {
	return &TLtextSuperscript{data: &RichText_Data{}}
}

// Constructors:Predicate:textMarked
type TLtextMarked struct {
	data *RichText_Data
}

// Constructors:New:textMarked
func NewTLtextMarked() *TLtextMarked {
	return &TLtextMarked{data: &RichText_Data{}}
}

// Constructors:Predicate:textPhone
type TLtextPhone struct {
	data *RichText_Data
}

// Constructors:New:textPhone
func NewTLtextPhone() *TLtextPhone {
	return &TLtextPhone{data: &RichText_Data{}}
}

// Constructors:Predicate:textImage
type TLtextImage struct {
	data *RichText_Data
}

// Constructors:New:textImage
func NewTLtextImage() *TLtextImage {
	return &TLtextImage{data: &RichText_Data{}}
}

// Constructors:Predicate:textAnchor
type TLtextAnchor struct {
	data *RichText_Data
}

// Constructors:New:textAnchor
func NewTLtextAnchor() *TLtextAnchor {
	return &TLtextAnchor{data: &RichText_Data{}}
}
func (m *TLtextPlain) Settext(v string)            { m.data.text = v }
func (m *TLtextPlain) Gettext() string             { return m.data.text }
func (m *TLtextBold) Settext_2(v *RichText)        { m.data.text_2 = v }
func (m *TLtextBold) Gettext_2() *RichText         { return m.data.text_2 }
func (m *TLtextItalic) Settext_2(v *RichText)      { m.data.text_2 = v }
func (m *TLtextItalic) Gettext_2() *RichText       { return m.data.text_2 }
func (m *TLtextUnderline) Settext_2(v *RichText)   { m.data.text_2 = v }
func (m *TLtextUnderline) Gettext_2() *RichText    { return m.data.text_2 }
func (m *TLtextStrike) Settext_2(v *RichText)      { m.data.text_2 = v }
func (m *TLtextStrike) Gettext_2() *RichText       { return m.data.text_2 }
func (m *TLtextFixed) Settext_2(v *RichText)       { m.data.text_2 = v }
func (m *TLtextFixed) Gettext_2() *RichText        { return m.data.text_2 }
func (m *TLtextUrl) Settext_2(v *RichText)         { m.data.text_2 = v }
func (m *TLtextUrl) Gettext_2() *RichText          { return m.data.text_2 }
func (m *TLtextUrl) Seturl(v string)               { m.data.url = v }
func (m *TLtextUrl) Geturl() string                { return m.data.url }
func (m *TLtextUrl) Setwebpage_id(v int64)         { m.data.webpage_id = v }
func (m *TLtextUrl) Getwebpage_id() int64          { return m.data.webpage_id }
func (m *TLtextEmail) Settext_2(v *RichText)       { m.data.text_2 = v }
func (m *TLtextEmail) Gettext_2() *RichText        { return m.data.text_2 }
func (m *TLtextEmail) Setemail(v string)           { m.data.email = v }
func (m *TLtextEmail) Getemail() string            { return m.data.email }
func (m *TLtextConcat) Settexts(v []*RichText)     { m.data.texts = v }
func (m *TLtextConcat) Gettexts() []*RichText      { return m.data.texts }
func (m *TLtextSubscript) Settext_2(v *RichText)   { m.data.text_2 = v }
func (m *TLtextSubscript) Gettext_2() *RichText    { return m.data.text_2 }
func (m *TLtextSuperscript) Settext_2(v *RichText) { m.data.text_2 = v }
func (m *TLtextSuperscript) Gettext_2() *RichText  { return m.data.text_2 }
func (m *TLtextMarked) Settext_2(v *RichText)      { m.data.text_2 = v }
func (m *TLtextMarked) Gettext_2() *RichText       { return m.data.text_2 }
func (m *TLtextPhone) Settext_2(v *RichText)       { m.data.text_2 = v }
func (m *TLtextPhone) Gettext_2() *RichText        { return m.data.text_2 }
func (m *TLtextPhone) Setphone(v string)           { m.data.phone = v }
func (m *TLtextPhone) Getphone() string            { return m.data.phone }
func (m *TLtextImage) Setdocument_id(v int64)      { m.data.document_id = v }
func (m *TLtextImage) Getdocument_id() int64       { return m.data.document_id }
func (m *TLtextImage) Setw(v int32)                { m.data.w = v }
func (m *TLtextImage) Getw() int32                 { return m.data.w }
func (m *TLtextImage) Seth(v int32)                { m.data.h = v }
func (m *TLtextImage) Geth() int32                 { return m.data.h }
func (m *TLtextAnchor) Settext_2(v *RichText)      { m.data.text_2 = v }
func (m *TLtextAnchor) Gettext_2() *RichText       { return m.data.text_2 }
func (m *TLtextAnchor) Setname(v string)           { m.data.name = v }
func (m *TLtextAnchor) Getname() string            { return m.data.name }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputFolderPeer
// InputFolderPeer <--
// + TLinputFolderPeer
//
// Constructors:Type:InputFolderPeer
type InputFolderPeer struct {
	constructor int32
	data        *InputFolderPeer_Data
}

// Constructors:Type:Data:InputFolderPeer
type InputFolderPeer_Data struct {
	peer      *InputPeer
	folder_id int32
}

// Constructors:Predicate:inputFolderPeer
type TLinputFolderPeer struct {
	data *InputFolderPeer_Data
}

// Constructors:New:inputFolderPeer
func NewTLinputFolderPeer() *TLinputFolderPeer {
	return &TLinputFolderPeer{data: &InputFolderPeer_Data{}}
}
func (m *TLinputFolderPeer) Setpeer(v *InputPeer) { m.data.peer = v }
func (m *TLinputFolderPeer) Getpeer() *InputPeer  { return m.data.peer }
func (m *TLinputFolderPeer) Setfolder_id(v int32) { m.data.folder_id = v }
func (m *TLinputFolderPeer) Getfolder_id() int32  { return m.data.folder_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageFwdHeader
// MessageFwdHeader <--
// + TLmessageFwdHeader
//
// Constructors:Type:MessageFwdHeader
type MessageFwdHeader struct {
	constructor int32
	data        *MessageFwdHeader_Data
}

// Constructors:Type:Data:MessageFwdHeader
type MessageFwdHeader_Data struct {
	from_id           *Peer
	from_name         string
	date              int32
	channel_post      int32
	post_author       string
	saved_from_peer   *Peer
	saved_from_msg_id int32
	psa_type          string
}

// Constructors:Predicate:messageFwdHeader
type TLmessageFwdHeader struct {
	data *MessageFwdHeader_Data
}

// Constructors:New:messageFwdHeader
func NewTLmessageFwdHeader() *TLmessageFwdHeader {
	return &TLmessageFwdHeader{data: &MessageFwdHeader_Data{}}
}
func (m *TLmessageFwdHeader) Setfrom_id(v *Peer)           { m.data.from_id = v }
func (m *TLmessageFwdHeader) Getfrom_id() *Peer            { return m.data.from_id }
func (m *TLmessageFwdHeader) Setfrom_name(v string)        { m.data.from_name = v }
func (m *TLmessageFwdHeader) Getfrom_name() string         { return m.data.from_name }
func (m *TLmessageFwdHeader) Setdate(v int32)              { m.data.date = v }
func (m *TLmessageFwdHeader) Getdate() int32               { return m.data.date }
func (m *TLmessageFwdHeader) Setchannel_post(v int32)      { m.data.channel_post = v }
func (m *TLmessageFwdHeader) Getchannel_post() int32       { return m.data.channel_post }
func (m *TLmessageFwdHeader) Setpost_author(v string)      { m.data.post_author = v }
func (m *TLmessageFwdHeader) Getpost_author() string       { return m.data.post_author }
func (m *TLmessageFwdHeader) Setsaved_from_peer(v *Peer)   { m.data.saved_from_peer = v }
func (m *TLmessageFwdHeader) Getsaved_from_peer() *Peer    { return m.data.saved_from_peer }
func (m *TLmessageFwdHeader) Setsaved_from_msg_id(v int32) { m.data.saved_from_msg_id = v }
func (m *TLmessageFwdHeader) Getsaved_from_msg_id() int32  { return m.data.saved_from_msg_id }
func (m *TLmessageFwdHeader) Setpsa_type(v string)         { m.data.psa_type = v }
func (m *TLmessageFwdHeader) Getpsa_type() string          { return m.data.psa_type }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PrivacyKey
// PrivacyKey <--
// + TLprivacyKeyStatusTimestamp
// + TLprivacyKeyChatInvite
// + TLprivacyKeyPhoneCall
// + TLprivacyKeyPhoneP2P
// + TLprivacyKeyForwards
// + TLprivacyKeyProfilePhoto
// + TLprivacyKeyPhoneNumber
// + TLprivacyKeyAddedByPhone
//
// Constructors:Type:PrivacyKey
type PrivacyKey struct {
	constructor int32
	data        *PrivacyKey_Data
}

// Constructors:Type:Data:PrivacyKey
type PrivacyKey_Data struct {
}

// Constructors:Predicate:privacyKeyStatusTimestamp
type TLprivacyKeyStatusTimestamp struct {
	data *PrivacyKey_Data
}

// Constructors:New:privacyKeyStatusTimestamp
func NewTLprivacyKeyStatusTimestamp() *TLprivacyKeyStatusTimestamp {
	return &TLprivacyKeyStatusTimestamp{data: &PrivacyKey_Data{}}
}

// Constructors:Predicate:privacyKeyChatInvite
type TLprivacyKeyChatInvite struct {
	data *PrivacyKey_Data
}

// Constructors:New:privacyKeyChatInvite
func NewTLprivacyKeyChatInvite() *TLprivacyKeyChatInvite {
	return &TLprivacyKeyChatInvite{data: &PrivacyKey_Data{}}
}

// Constructors:Predicate:privacyKeyPhoneCall
type TLprivacyKeyPhoneCall struct {
	data *PrivacyKey_Data
}

// Constructors:New:privacyKeyPhoneCall
func NewTLprivacyKeyPhoneCall() *TLprivacyKeyPhoneCall {
	return &TLprivacyKeyPhoneCall{data: &PrivacyKey_Data{}}
}

// Constructors:Predicate:privacyKeyPhoneP2P
type TLprivacyKeyPhoneP2P struct {
	data *PrivacyKey_Data
}

// Constructors:New:privacyKeyPhoneP2P
func NewTLprivacyKeyPhoneP2P() *TLprivacyKeyPhoneP2P {
	return &TLprivacyKeyPhoneP2P{data: &PrivacyKey_Data{}}
}

// Constructors:Predicate:privacyKeyForwards
type TLprivacyKeyForwards struct {
	data *PrivacyKey_Data
}

// Constructors:New:privacyKeyForwards
func NewTLprivacyKeyForwards() *TLprivacyKeyForwards {
	return &TLprivacyKeyForwards{data: &PrivacyKey_Data{}}
}

// Constructors:Predicate:privacyKeyProfilePhoto
type TLprivacyKeyProfilePhoto struct {
	data *PrivacyKey_Data
}

// Constructors:New:privacyKeyProfilePhoto
func NewTLprivacyKeyProfilePhoto() *TLprivacyKeyProfilePhoto {
	return &TLprivacyKeyProfilePhoto{data: &PrivacyKey_Data{}}
}

// Constructors:Predicate:privacyKeyPhoneNumber
type TLprivacyKeyPhoneNumber struct {
	data *PrivacyKey_Data
}

// Constructors:New:privacyKeyPhoneNumber
func NewTLprivacyKeyPhoneNumber() *TLprivacyKeyPhoneNumber {
	return &TLprivacyKeyPhoneNumber{data: &PrivacyKey_Data{}}
}

// Constructors:Predicate:privacyKeyAddedByPhone
type TLprivacyKeyAddedByPhone struct {
	data *PrivacyKey_Data
}

// Constructors:New:privacyKeyAddedByPhone
func NewTLprivacyKeyAddedByPhone() *TLprivacyKeyAddedByPhone {
	return &TLprivacyKeyAddedByPhone{data: &PrivacyKey_Data{}}
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:help_UserInfo
// help_UserInfo <--
// + TLhelp_userInfoEmpty
// + TLhelp_userInfo
//
// Constructors:Type:help_UserInfo
type help_UserInfo struct {
	constructor int32
	data        *help_UserInfo_Data
}

// Constructors:Type:Data:help_UserInfo
type help_UserInfo_Data struct {
	message  string
	entities []*MessageEntity
	author   string
	date     int32
}

// Constructors:Predicate:help_userInfoEmpty
type TLhelp_userInfoEmpty struct {
	data *help_UserInfo_Data
}

// Constructors:New:help_userInfoEmpty
func NewTLhelp_userInfoEmpty() *TLhelp_userInfoEmpty {
	return &TLhelp_userInfoEmpty{data: &help_UserInfo_Data{}}
}

// Constructors:Predicate:help_userInfo
type TLhelp_userInfo struct {
	data *help_UserInfo_Data
}

// Constructors:New:help_userInfo
func NewTLhelp_userInfo() *TLhelp_userInfo {
	return &TLhelp_userInfo{data: &help_UserInfo_Data{}}
}
func (m *TLhelp_userInfo) Setmessage(v string)            { m.data.message = v }
func (m *TLhelp_userInfo) Getmessage() string             { return m.data.message }
func (m *TLhelp_userInfo) Setentities(v []*MessageEntity) { m.data.entities = v }
func (m *TLhelp_userInfo) Getentities() []*MessageEntity  { return m.data.entities }
func (m *TLhelp_userInfo) Setauthor(v string)             { m.data.author = v }
func (m *TLhelp_userInfo) Getauthor() string              { return m.data.author }
func (m *TLhelp_userInfo) Setdate(v int32)                { m.data.date = v }
func (m *TLhelp_userInfo) Getdate() int32                 { return m.data.date }

///////////////////////////////////////////////////////////////////////////////
// Constructors:RecentMeUrl
// RecentMeUrl <--
// + TLrecentMeUrlUnknown
// + TLrecentMeUrlUser
// + TLrecentMeUrlChat
// + TLrecentMeUrlChatInvite
// + TLrecentMeUrlStickerSet
//
// Constructors:Type:RecentMeUrl
type RecentMeUrl struct {
	constructor int32
	data        *RecentMeUrl_Data
}

// Constructors:Type:Data:RecentMeUrl
type RecentMeUrl_Data struct {
	url         string
	user_id     int32
	chat_id     int32
	chat_invite *ChatInvite
	set         *StickerSetCovered
}

// Constructors:Predicate:recentMeUrlUnknown
type TLrecentMeUrlUnknown struct {
	data *RecentMeUrl_Data
}

// Constructors:New:recentMeUrlUnknown
func NewTLrecentMeUrlUnknown() *TLrecentMeUrlUnknown {
	return &TLrecentMeUrlUnknown{data: &RecentMeUrl_Data{}}
}

// Constructors:Predicate:recentMeUrlUser
type TLrecentMeUrlUser struct {
	data *RecentMeUrl_Data
}

// Constructors:New:recentMeUrlUser
func NewTLrecentMeUrlUser() *TLrecentMeUrlUser {
	return &TLrecentMeUrlUser{data: &RecentMeUrl_Data{}}
}

// Constructors:Predicate:recentMeUrlChat
type TLrecentMeUrlChat struct {
	data *RecentMeUrl_Data
}

// Constructors:New:recentMeUrlChat
func NewTLrecentMeUrlChat() *TLrecentMeUrlChat {
	return &TLrecentMeUrlChat{data: &RecentMeUrl_Data{}}
}

// Constructors:Predicate:recentMeUrlChatInvite
type TLrecentMeUrlChatInvite struct {
	data *RecentMeUrl_Data
}

// Constructors:New:recentMeUrlChatInvite
func NewTLrecentMeUrlChatInvite() *TLrecentMeUrlChatInvite {
	return &TLrecentMeUrlChatInvite{data: &RecentMeUrl_Data{}}
}

// Constructors:Predicate:recentMeUrlStickerSet
type TLrecentMeUrlStickerSet struct {
	data *RecentMeUrl_Data
}

// Constructors:New:recentMeUrlStickerSet
func NewTLrecentMeUrlStickerSet() *TLrecentMeUrlStickerSet {
	return &TLrecentMeUrlStickerSet{data: &RecentMeUrl_Data{}}
}
func (m *TLrecentMeUrlUnknown) Seturl(v string)                 { m.data.url = v }
func (m *TLrecentMeUrlUnknown) Geturl() string                  { return m.data.url }
func (m *TLrecentMeUrlUser) Seturl(v string)                    { m.data.url = v }
func (m *TLrecentMeUrlUser) Geturl() string                     { return m.data.url }
func (m *TLrecentMeUrlUser) Setuser_id(v int32)                 { m.data.user_id = v }
func (m *TLrecentMeUrlUser) Getuser_id() int32                  { return m.data.user_id }
func (m *TLrecentMeUrlChat) Seturl(v string)                    { m.data.url = v }
func (m *TLrecentMeUrlChat) Geturl() string                     { return m.data.url }
func (m *TLrecentMeUrlChat) Setchat_id(v int32)                 { m.data.chat_id = v }
func (m *TLrecentMeUrlChat) Getchat_id() int32                  { return m.data.chat_id }
func (m *TLrecentMeUrlChatInvite) Seturl(v string)              { m.data.url = v }
func (m *TLrecentMeUrlChatInvite) Geturl() string               { return m.data.url }
func (m *TLrecentMeUrlChatInvite) Setchat_invite(v *ChatInvite) { m.data.chat_invite = v }
func (m *TLrecentMeUrlChatInvite) Getchat_invite() *ChatInvite  { return m.data.chat_invite }
func (m *TLrecentMeUrlStickerSet) Seturl(v string)              { m.data.url = v }
func (m *TLrecentMeUrlStickerSet) Geturl() string               { return m.data.url }
func (m *TLrecentMeUrlStickerSet) Setset(v *StickerSetCovered)  { m.data.set = v }
func (m *TLrecentMeUrlStickerSet) Getset() *StickerSetCovered   { return m.data.set }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_DhConfig
// messages_DhConfig <--
// + TLmessages_dhConfigNotModified
// + TLmessages_dhConfig
//
// Constructors:Type:messages_DhConfig
type messages_DhConfig struct {
	constructor int32
	data        *messages_DhConfig_Data
}

// Constructors:Type:Data:messages_DhConfig
type messages_DhConfig_Data struct {
	random  []byte
	g       int32
	p       []byte
	version int32
}

// Constructors:Predicate:messages_dhConfigNotModified
type TLmessages_dhConfigNotModified struct {
	data *messages_DhConfig_Data
}

// Constructors:New:messages_dhConfigNotModified
func NewTLmessages_dhConfigNotModified() *TLmessages_dhConfigNotModified {
	return &TLmessages_dhConfigNotModified{data: &messages_DhConfig_Data{}}
}

// Constructors:Predicate:messages_dhConfig
type TLmessages_dhConfig struct {
	data *messages_DhConfig_Data
}

// Constructors:New:messages_dhConfig
func NewTLmessages_dhConfig() *TLmessages_dhConfig {
	return &TLmessages_dhConfig{data: &messages_DhConfig_Data{}}
}
func (m *TLmessages_dhConfigNotModified) Setrandom(v []byte) { m.data.random = v }
func (m *TLmessages_dhConfigNotModified) Getrandom() []byte  { return m.data.random }
func (m *TLmessages_dhConfig) Setg(v int32)                  { m.data.g = v }
func (m *TLmessages_dhConfig) Getg() int32                   { return m.data.g }
func (m *TLmessages_dhConfig) Setp(v []byte)                 { m.data.p = v }
func (m *TLmessages_dhConfig) Getp() []byte                  { return m.data.p }
func (m *TLmessages_dhConfig) Setversion(v int32)            { m.data.version = v }
func (m *TLmessages_dhConfig) Getversion() int32             { return m.data.version }
func (m *TLmessages_dhConfig) Setrandom(v []byte)            { m.data.random = v }
func (m *TLmessages_dhConfig) Getrandom() []byte             { return m.data.random }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ChatOnlines
// ChatOnlines <--
// + TLchatOnlines
//
// Constructors:Type:ChatOnlines
type ChatOnlines struct {
	constructor int32
	data        *ChatOnlines_Data
}

// Constructors:Type:Data:ChatOnlines
type ChatOnlines_Data struct {
	onlines int32
}

// Constructors:Predicate:chatOnlines
type TLchatOnlines struct {
	data *ChatOnlines_Data
}

// Constructors:New:chatOnlines
func NewTLchatOnlines() *TLchatOnlines {
	return &TLchatOnlines{data: &ChatOnlines_Data{}}
}
func (m *TLchatOnlines) Setonlines(v int32) { m.data.onlines = v }
func (m *TLchatOnlines) Getonlines() int32  { return m.data.onlines }

///////////////////////////////////////////////////////////////////////////////
// Constructors:UrlAuthResult
// UrlAuthResult <--
// + TLurlAuthResultRequest
// + TLurlAuthResultAccepted
// + TLurlAuthResultDefault
//
// Constructors:Type:UrlAuthResult
type UrlAuthResult struct {
	constructor int32
	data        *UrlAuthResult_Data
}

// Constructors:Type:Data:UrlAuthResult
type UrlAuthResult_Data struct {
	request_write_access bool
	bot                  *User
	domain               string
	url                  string
}

// Constructors:Predicate:urlAuthResultRequest
type TLurlAuthResultRequest struct {
	data *UrlAuthResult_Data
}

// Constructors:New:urlAuthResultRequest
func NewTLurlAuthResultRequest() *TLurlAuthResultRequest {
	return &TLurlAuthResultRequest{data: &UrlAuthResult_Data{}}
}

// Constructors:Predicate:urlAuthResultAccepted
type TLurlAuthResultAccepted struct {
	data *UrlAuthResult_Data
}

// Constructors:New:urlAuthResultAccepted
func NewTLurlAuthResultAccepted() *TLurlAuthResultAccepted {
	return &TLurlAuthResultAccepted{data: &UrlAuthResult_Data{}}
}

// Constructors:Predicate:urlAuthResultDefault
type TLurlAuthResultDefault struct {
	data *UrlAuthResult_Data
}

// Constructors:New:urlAuthResultDefault
func NewTLurlAuthResultDefault() *TLurlAuthResultDefault {
	return &TLurlAuthResultDefault{data: &UrlAuthResult_Data{}}
}
func (m *TLurlAuthResultRequest) Setrequest_write_access(v bool) { m.data.request_write_access = v }
func (m *TLurlAuthResultRequest) Getrequest_write_access() bool  { return m.data.request_write_access }
func (m *TLurlAuthResultRequest) Setbot(v *User)                 { m.data.bot = v }
func (m *TLurlAuthResultRequest) Getbot() *User                  { return m.data.bot }
func (m *TLurlAuthResultRequest) Setdomain(v string)             { m.data.domain = v }
func (m *TLurlAuthResultRequest) Getdomain() string              { return m.data.domain }
func (m *TLurlAuthResultAccepted) Seturl(v string)               { m.data.url = v }
func (m *TLurlAuthResultAccepted) Geturl() string                { return m.data.url }

///////////////////////////////////////////////////////////////////////////////
// Constructors:account_PasswordSettings
// account_PasswordSettings <--
// + TLaccount_passwordSettings
//
// Constructors:Type:account_PasswordSettings
type account_PasswordSettings struct {
	constructor int32
	data        *account_PasswordSettings_Data
}

// Constructors:Type:Data:account_PasswordSettings
type account_PasswordSettings_Data struct {
	email           string
	secure_settings *SecureSecretSettings
}

// Constructors:Predicate:account_passwordSettings
type TLaccount_passwordSettings struct {
	data *account_PasswordSettings_Data
}

// Constructors:New:account_passwordSettings
func NewTLaccount_passwordSettings() *TLaccount_passwordSettings {
	return &TLaccount_passwordSettings{data: &account_PasswordSettings_Data{}}
}
func (m *TLaccount_passwordSettings) Setemail(v string) { m.data.email = v }
func (m *TLaccount_passwordSettings) Getemail() string  { return m.data.email }
func (m *TLaccount_passwordSettings) Setsecure_settings(v *SecureSecretSettings) {
	m.data.secure_settings = v
}
func (m *TLaccount_passwordSettings) Getsecure_settings() *SecureSecretSettings {
	return m.data.secure_settings
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:ChannelAdminLogEventsFilter
// ChannelAdminLogEventsFilter <--
// + TLchannelAdminLogEventsFilter
//
// Constructors:Type:ChannelAdminLogEventsFilter
type ChannelAdminLogEventsFilter struct {
	constructor int32
	data        *ChannelAdminLogEventsFilter_Data
}

// Constructors:Type:Data:ChannelAdminLogEventsFilter
type ChannelAdminLogEventsFilter_Data struct {
	join       bool
	leave      bool
	invite     bool
	ban        bool
	unban      bool
	kick       bool
	unkick     bool
	promote    bool
	demote     bool
	info       bool
	settings   bool
	pinned     bool
	edit       bool
	delete     bool
	group_call bool
}

// Constructors:Predicate:channelAdminLogEventsFilter
type TLchannelAdminLogEventsFilter struct {
	data *ChannelAdminLogEventsFilter_Data
}

// Constructors:New:channelAdminLogEventsFilter
func NewTLchannelAdminLogEventsFilter() *TLchannelAdminLogEventsFilter {
	return &TLchannelAdminLogEventsFilter{data: &ChannelAdminLogEventsFilter_Data{}}
}
func (m *TLchannelAdminLogEventsFilter) Setjoin(v bool)       { m.data.join = v }
func (m *TLchannelAdminLogEventsFilter) Getjoin() bool        { return m.data.join }
func (m *TLchannelAdminLogEventsFilter) Setleave(v bool)      { m.data.leave = v }
func (m *TLchannelAdminLogEventsFilter) Getleave() bool       { return m.data.leave }
func (m *TLchannelAdminLogEventsFilter) Setinvite(v bool)     { m.data.invite = v }
func (m *TLchannelAdminLogEventsFilter) Getinvite() bool      { return m.data.invite }
func (m *TLchannelAdminLogEventsFilter) Setban(v bool)        { m.data.ban = v }
func (m *TLchannelAdminLogEventsFilter) Getban() bool         { return m.data.ban }
func (m *TLchannelAdminLogEventsFilter) Setunban(v bool)      { m.data.unban = v }
func (m *TLchannelAdminLogEventsFilter) Getunban() bool       { return m.data.unban }
func (m *TLchannelAdminLogEventsFilter) Setkick(v bool)       { m.data.kick = v }
func (m *TLchannelAdminLogEventsFilter) Getkick() bool        { return m.data.kick }
func (m *TLchannelAdminLogEventsFilter) Setunkick(v bool)     { m.data.unkick = v }
func (m *TLchannelAdminLogEventsFilter) Getunkick() bool      { return m.data.unkick }
func (m *TLchannelAdminLogEventsFilter) Setpromote(v bool)    { m.data.promote = v }
func (m *TLchannelAdminLogEventsFilter) Getpromote() bool     { return m.data.promote }
func (m *TLchannelAdminLogEventsFilter) Setdemote(v bool)     { m.data.demote = v }
func (m *TLchannelAdminLogEventsFilter) Getdemote() bool      { return m.data.demote }
func (m *TLchannelAdminLogEventsFilter) Setinfo(v bool)       { m.data.info = v }
func (m *TLchannelAdminLogEventsFilter) Getinfo() bool        { return m.data.info }
func (m *TLchannelAdminLogEventsFilter) Setsettings(v bool)   { m.data.settings = v }
func (m *TLchannelAdminLogEventsFilter) Getsettings() bool    { return m.data.settings }
func (m *TLchannelAdminLogEventsFilter) Setpinned(v bool)     { m.data.pinned = v }
func (m *TLchannelAdminLogEventsFilter) Getpinned() bool      { return m.data.pinned }
func (m *TLchannelAdminLogEventsFilter) Setedit(v bool)       { m.data.edit = v }
func (m *TLchannelAdminLogEventsFilter) Getedit() bool        { return m.data.edit }
func (m *TLchannelAdminLogEventsFilter) Setdelete(v bool)     { m.data.delete = v }
func (m *TLchannelAdminLogEventsFilter) Getdelete() bool      { return m.data.delete }
func (m *TLchannelAdminLogEventsFilter) Setgroup_call(v bool) { m.data.group_call = v }
func (m *TLchannelAdminLogEventsFilter) Getgroup_call() bool  { return m.data.group_call }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_FavedStickers
// messages_FavedStickers <--
// + TLmessages_favedStickersNotModified
// + TLmessages_favedStickers
//
// Constructors:Type:messages_FavedStickers
type messages_FavedStickers struct {
	constructor int32
	data        *messages_FavedStickers_Data
}

// Constructors:Type:Data:messages_FavedStickers
type messages_FavedStickers_Data struct {
	hash     int32
	packs    []*StickerPack
	stickers []*Document
}

// Constructors:Predicate:messages_favedStickersNotModified
type TLmessages_favedStickersNotModified struct {
	data *messages_FavedStickers_Data
}

// Constructors:New:messages_favedStickersNotModified
func NewTLmessages_favedStickersNotModified() *TLmessages_favedStickersNotModified {
	return &TLmessages_favedStickersNotModified{data: &messages_FavedStickers_Data{}}
}

// Constructors:Predicate:messages_favedStickers
type TLmessages_favedStickers struct {
	data *messages_FavedStickers_Data
}

// Constructors:New:messages_favedStickers
func NewTLmessages_favedStickers() *TLmessages_favedStickers {
	return &TLmessages_favedStickers{data: &messages_FavedStickers_Data{}}
}
func (m *TLmessages_favedStickers) Sethash(v int32)           { m.data.hash = v }
func (m *TLmessages_favedStickers) Gethash() int32            { return m.data.hash }
func (m *TLmessages_favedStickers) Setpacks(v []*StickerPack) { m.data.packs = v }
func (m *TLmessages_favedStickers) Getpacks() []*StickerPack  { return m.data.packs }
func (m *TLmessages_favedStickers) Setstickers(v []*Document) { m.data.stickers = v }
func (m *TLmessages_favedStickers) Getstickers() []*Document  { return m.data.stickers }

///////////////////////////////////////////////////////////////////////////////
// Constructors:Error
// Error <--
// + TLerror
//
// Constructors:Type:Error
type Error struct {
	constructor int32
	data        *Error_Data
}

// Constructors:Type:Data:Error
type Error_Data struct {
	code int32
	text string
}

// Constructors:Predicate:error
type TLerror struct {
	data *Error_Data
}

// Constructors:New:error
func NewTLerror() *TLerror {
	return &TLerror{data: &Error_Data{}}
}
func (m *TLerror) Setcode(v int32)  { m.data.code = v }
func (m *TLerror) Getcode() int32   { return m.data.code }
func (m *TLerror) Settext(v string) { m.data.text = v }
func (m *TLerror) Gettext() string  { return m.data.text }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PollAnswer
// PollAnswer <--
// + TLpollAnswer
//
// Constructors:Type:PollAnswer
type PollAnswer struct {
	constructor int32
	data        *PollAnswer_Data
}

// Constructors:Type:Data:PollAnswer
type PollAnswer_Data struct {
	text   string
	option []byte
}

// Constructors:Predicate:pollAnswer
type TLpollAnswer struct {
	data *PollAnswer_Data
}

// Constructors:New:pollAnswer
func NewTLpollAnswer() *TLpollAnswer {
	return &TLpollAnswer{data: &PollAnswer_Data{}}
}
func (m *TLpollAnswer) Settext(v string)   { m.data.text = v }
func (m *TLpollAnswer) Gettext() string    { return m.data.text }
func (m *TLpollAnswer) Setoption(v []byte) { m.data.option = v }
func (m *TLpollAnswer) Getoption() []byte  { return m.data.option }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ChannelLocation
// ChannelLocation <--
// + TLchannelLocationEmpty
// + TLchannelLocation
//
// Constructors:Type:ChannelLocation
type ChannelLocation struct {
	constructor int32
	data        *ChannelLocation_Data
}

// Constructors:Type:Data:ChannelLocation
type ChannelLocation_Data struct {
	geo_point *GeoPoint
	address   string
}

// Constructors:Predicate:channelLocationEmpty
type TLchannelLocationEmpty struct {
	data *ChannelLocation_Data
}

// Constructors:New:channelLocationEmpty
func NewTLchannelLocationEmpty() *TLchannelLocationEmpty {
	return &TLchannelLocationEmpty{data: &ChannelLocation_Data{}}
}

// Constructors:Predicate:channelLocation
type TLchannelLocation struct {
	data *ChannelLocation_Data
}

// Constructors:New:channelLocation
func NewTLchannelLocation() *TLchannelLocation {
	return &TLchannelLocation{data: &ChannelLocation_Data{}}
}
func (m *TLchannelLocation) Setgeo_point(v *GeoPoint) { m.data.geo_point = v }
func (m *TLchannelLocation) Getgeo_point() *GeoPoint  { return m.data.geo_point }
func (m *TLchannelLocation) Setaddress(v string)      { m.data.address = v }
func (m *TLchannelLocation) Getaddress() string       { return m.data.address }

///////////////////////////////////////////////////////////////////////////////
// Constructors:help_CountriesList
// help_CountriesList <--
// + TLhelp_countriesListNotModified
// + TLhelp_countriesList
//
// Constructors:Type:help_CountriesList
type help_CountriesList struct {
	constructor int32
	data        *help_CountriesList_Data
}

// Constructors:Type:Data:help_CountriesList
type help_CountriesList_Data struct {
	countries []*help_Country
	hash      int32
}

// Constructors:Predicate:help_countriesListNotModified
type TLhelp_countriesListNotModified struct {
	data *help_CountriesList_Data
}

// Constructors:New:help_countriesListNotModified
func NewTLhelp_countriesListNotModified() *TLhelp_countriesListNotModified {
	return &TLhelp_countriesListNotModified{data: &help_CountriesList_Data{}}
}

// Constructors:Predicate:help_countriesList
type TLhelp_countriesList struct {
	data *help_CountriesList_Data
}

// Constructors:New:help_countriesList
func NewTLhelp_countriesList() *TLhelp_countriesList {
	return &TLhelp_countriesList{data: &help_CountriesList_Data{}}
}
func (m *TLhelp_countriesList) Setcountries(v []*help_Country) { m.data.countries = v }
func (m *TLhelp_countriesList) Getcountries() []*help_Country  { return m.data.countries }
func (m *TLhelp_countriesList) Sethash(v int32)                { m.data.hash = v }
func (m *TLhelp_countriesList) Gethash() int32                 { return m.data.hash }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_FoundStickerSets
// messages_FoundStickerSets <--
// + TLmessages_foundStickerSetsNotModified
// + TLmessages_foundStickerSets
//
// Constructors:Type:messages_FoundStickerSets
type messages_FoundStickerSets struct {
	constructor int32
	data        *messages_FoundStickerSets_Data
}

// Constructors:Type:Data:messages_FoundStickerSets
type messages_FoundStickerSets_Data struct {
	hash int32
	sets []*StickerSetCovered
}

// Constructors:Predicate:messages_foundStickerSetsNotModified
type TLmessages_foundStickerSetsNotModified struct {
	data *messages_FoundStickerSets_Data
}

// Constructors:New:messages_foundStickerSetsNotModified
func NewTLmessages_foundStickerSetsNotModified() *TLmessages_foundStickerSetsNotModified {
	return &TLmessages_foundStickerSetsNotModified{data: &messages_FoundStickerSets_Data{}}
}

// Constructors:Predicate:messages_foundStickerSets
type TLmessages_foundStickerSets struct {
	data *messages_FoundStickerSets_Data
}

// Constructors:New:messages_foundStickerSets
func NewTLmessages_foundStickerSets() *TLmessages_foundStickerSets {
	return &TLmessages_foundStickerSets{data: &messages_FoundStickerSets_Data{}}
}
func (m *TLmessages_foundStickerSets) Sethash(v int32)                { m.data.hash = v }
func (m *TLmessages_foundStickerSets) Gethash() int32                 { return m.data.hash }
func (m *TLmessages_foundStickerSets) Setsets(v []*StickerSetCovered) { m.data.sets = v }
func (m *TLmessages_foundStickerSets) Getsets() []*StickerSetCovered  { return m.data.sets }

///////////////////////////////////////////////////////////////////////////////
// Constructors:account_Takeout
// account_Takeout <--
// + TLaccount_takeout
//
// Constructors:Type:account_Takeout
type account_Takeout struct {
	constructor int32
	data        *account_Takeout_Data
}

// Constructors:Type:Data:account_Takeout
type account_Takeout_Data struct {
	id int64
}

// Constructors:Predicate:account_takeout
type TLaccount_takeout struct {
	data *account_Takeout_Data
}

// Constructors:New:account_takeout
func NewTLaccount_takeout() *TLaccount_takeout {
	return &TLaccount_takeout{data: &account_Takeout_Data{}}
}
func (m *TLaccount_takeout) Setid(v int64) { m.data.id = v }
func (m *TLaccount_takeout) Getid() int64  { return m.data.id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:Dialog
// Dialog <--
// + TLdialog
// + TLdialogFolder
//
// Constructors:Type:Dialog
type Dialog struct {
	constructor int32
	data        *Dialog_Data
}

// Constructors:Type:Data:Dialog
type Dialog_Data struct {
	pinned                        bool
	unread_mark                   bool
	peer                          *Peer
	top_message                   int32
	read_inbox_max_id             int32
	read_outbox_max_id            int32
	unread_count                  int32
	unread_mentions_count         int32
	notify_settings               *PeerNotifySettings
	pts                           int32
	draft                         *DraftMessage
	folder_id                     int32
	folder                        *Folder
	unread_muted_peers_count      int32
	unread_unmuted_peers_count    int32
	unread_muted_messages_count   int32
	unread_unmuted_messages_count int32
}

// Constructors:Predicate:dialog
type TLdialog struct {
	data *Dialog_Data
}

// Constructors:New:dialog
func NewTLdialog() *TLdialog {
	return &TLdialog{data: &Dialog_Data{}}
}

// Constructors:Predicate:dialogFolder
type TLdialogFolder struct {
	data *Dialog_Data
}

// Constructors:New:dialogFolder
func NewTLdialogFolder() *TLdialogFolder {
	return &TLdialogFolder{data: &Dialog_Data{}}
}
func (m *TLdialog) Setpinned(v bool)                          { m.data.pinned = v }
func (m *TLdialog) Getpinned() bool                           { return m.data.pinned }
func (m *TLdialog) Setunread_mark(v bool)                     { m.data.unread_mark = v }
func (m *TLdialog) Getunread_mark() bool                      { return m.data.unread_mark }
func (m *TLdialog) Setpeer(v *Peer)                           { m.data.peer = v }
func (m *TLdialog) Getpeer() *Peer                            { return m.data.peer }
func (m *TLdialog) Settop_message(v int32)                    { m.data.top_message = v }
func (m *TLdialog) Gettop_message() int32                     { return m.data.top_message }
func (m *TLdialog) Setread_inbox_max_id(v int32)              { m.data.read_inbox_max_id = v }
func (m *TLdialog) Getread_inbox_max_id() int32               { return m.data.read_inbox_max_id }
func (m *TLdialog) Setread_outbox_max_id(v int32)             { m.data.read_outbox_max_id = v }
func (m *TLdialog) Getread_outbox_max_id() int32              { return m.data.read_outbox_max_id }
func (m *TLdialog) Setunread_count(v int32)                   { m.data.unread_count = v }
func (m *TLdialog) Getunread_count() int32                    { return m.data.unread_count }
func (m *TLdialog) Setunread_mentions_count(v int32)          { m.data.unread_mentions_count = v }
func (m *TLdialog) Getunread_mentions_count() int32           { return m.data.unread_mentions_count }
func (m *TLdialog) Setnotify_settings(v *PeerNotifySettings)  { m.data.notify_settings = v }
func (m *TLdialog) Getnotify_settings() *PeerNotifySettings   { return m.data.notify_settings }
func (m *TLdialog) Setpts(v int32)                            { m.data.pts = v }
func (m *TLdialog) Getpts() int32                             { return m.data.pts }
func (m *TLdialog) Setdraft(v *DraftMessage)                  { m.data.draft = v }
func (m *TLdialog) Getdraft() *DraftMessage                   { return m.data.draft }
func (m *TLdialog) Setfolder_id(v int32)                      { m.data.folder_id = v }
func (m *TLdialog) Getfolder_id() int32                       { return m.data.folder_id }
func (m *TLdialogFolder) Setpinned(v bool)                    { m.data.pinned = v }
func (m *TLdialogFolder) Getpinned() bool                     { return m.data.pinned }
func (m *TLdialogFolder) Setfolder(v *Folder)                 { m.data.folder = v }
func (m *TLdialogFolder) Getfolder() *Folder                  { return m.data.folder }
func (m *TLdialogFolder) Setpeer(v *Peer)                     { m.data.peer = v }
func (m *TLdialogFolder) Getpeer() *Peer                      { return m.data.peer }
func (m *TLdialogFolder) Settop_message(v int32)              { m.data.top_message = v }
func (m *TLdialogFolder) Gettop_message() int32               { return m.data.top_message }
func (m *TLdialogFolder) Setunread_muted_peers_count(v int32) { m.data.unread_muted_peers_count = v }
func (m *TLdialogFolder) Getunread_muted_peers_count() int32  { return m.data.unread_muted_peers_count }
func (m *TLdialogFolder) Setunread_unmuted_peers_count(v int32) {
	m.data.unread_unmuted_peers_count = v
}
func (m *TLdialogFolder) Getunread_unmuted_peers_count() int32 {
	return m.data.unread_unmuted_peers_count
}
func (m *TLdialogFolder) Setunread_muted_messages_count(v int32) {
	m.data.unread_muted_messages_count = v
}
func (m *TLdialogFolder) Getunread_muted_messages_count() int32 {
	return m.data.unread_muted_messages_count
}
func (m *TLdialogFolder) Setunread_unmuted_messages_count(v int32) {
	m.data.unread_unmuted_messages_count = v
}
func (m *TLdialogFolder) Getunread_unmuted_messages_count() int32 {
	return m.data.unread_unmuted_messages_count
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:PollResults
// PollResults <--
// + TLpollResults
//
// Constructors:Type:PollResults
type PollResults struct {
	constructor int32
	data        *PollResults_Data
}

// Constructors:Type:Data:PollResults
type PollResults_Data struct {
	min               bool
	results           []*PollAnswerVoters
	total_voters      int32
	recent_voters     []int32
	solution          string
	solution_entities []*MessageEntity
}

// Constructors:Predicate:pollResults
type TLpollResults struct {
	data *PollResults_Data
}

// Constructors:New:pollResults
func NewTLpollResults() *TLpollResults {
	return &TLpollResults{data: &PollResults_Data{}}
}
func (m *TLpollResults) Setmin(v bool)                           { m.data.min = v }
func (m *TLpollResults) Getmin() bool                            { return m.data.min }
func (m *TLpollResults) Setresults(v []*PollAnswerVoters)        { m.data.results = v }
func (m *TLpollResults) Getresults() []*PollAnswerVoters         { return m.data.results }
func (m *TLpollResults) Settotal_voters(v int32)                 { m.data.total_voters = v }
func (m *TLpollResults) Gettotal_voters() int32                  { return m.data.total_voters }
func (m *TLpollResults) Setrecent_voters(v []int32)              { m.data.recent_voters = v }
func (m *TLpollResults) Getrecent_voters() []int32               { return m.data.recent_voters }
func (m *TLpollResults) Setsolution(v string)                    { m.data.solution = v }
func (m *TLpollResults) Getsolution() string                     { return m.data.solution }
func (m *TLpollResults) Setsolution_entities(v []*MessageEntity) { m.data.solution_entities = v }
func (m *TLpollResults) Getsolution_entities() []*MessageEntity  { return m.data.solution_entities }

///////////////////////////////////////////////////////////////////////////////
// Constructors:help_Support
// help_Support <--
// + TLhelp_support
//
// Constructors:Type:help_Support
type help_Support struct {
	constructor int32
	data        *help_Support_Data
}

// Constructors:Type:Data:help_Support
type help_Support_Data struct {
	phone_number string
	user         *User
}

// Constructors:Predicate:help_support
type TLhelp_support struct {
	data *help_Support_Data
}

// Constructors:New:help_support
func NewTLhelp_support() *TLhelp_support {
	return &TLhelp_support{data: &help_Support_Data{}}
}
func (m *TLhelp_support) Setphone_number(v string) { m.data.phone_number = v }
func (m *TLhelp_support) Getphone_number() string  { return m.data.phone_number }
func (m *TLhelp_support) Setuser(v *User)          { m.data.user = v }
func (m *TLhelp_support) Getuser() *User           { return m.data.user }

///////////////////////////////////////////////////////////////////////////////
// Constructors:account_TmpPassword
// account_TmpPassword <--
// + TLaccount_tmpPassword
//
// Constructors:Type:account_TmpPassword
type account_TmpPassword struct {
	constructor int32
	data        *account_TmpPassword_Data
}

// Constructors:Type:Data:account_TmpPassword
type account_TmpPassword_Data struct {
	tmp_password []byte
	valid_until  int32
}

// Constructors:Predicate:account_tmpPassword
type TLaccount_tmpPassword struct {
	data *account_TmpPassword_Data
}

// Constructors:New:account_tmpPassword
func NewTLaccount_tmpPassword() *TLaccount_tmpPassword {
	return &TLaccount_tmpPassword{data: &account_TmpPassword_Data{}}
}
func (m *TLaccount_tmpPassword) Settmp_password(v []byte) { m.data.tmp_password = v }
func (m *TLaccount_tmpPassword) Gettmp_password() []byte  { return m.data.tmp_password }
func (m *TLaccount_tmpPassword) Setvalid_until(v int32)   { m.data.valid_until = v }
func (m *TLaccount_tmpPassword) Getvalid_until() int32    { return m.data.valid_until }

///////////////////////////////////////////////////////////////////////////////
// Constructors:SecureValueHash
// SecureValueHash <--
// + TLsecureValueHash
//
// Constructors:Type:SecureValueHash
type SecureValueHash struct {
	constructor int32
	data        *SecureValueHash_Data
}

// Constructors:Type:Data:SecureValueHash
type SecureValueHash_Data struct {
	type_key *SecureValueType
	hash     []byte
}

// Constructors:Predicate:secureValueHash
type TLsecureValueHash struct {
	data *SecureValueHash_Data
}

// Constructors:New:secureValueHash
func NewTLsecureValueHash() *TLsecureValueHash {
	return &TLsecureValueHash{data: &SecureValueHash_Data{}}
}
func (m *TLsecureValueHash) Settype_key(v *SecureValueType) { m.data.type_key = v }
func (m *TLsecureValueHash) Gettype_key() *SecureValueType  { return m.data.type_key }
func (m *TLsecureValueHash) Sethash(v []byte)               { m.data.hash = v }
func (m *TLsecureValueHash) Gethash() []byte                { return m.data.hash }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ReplyMarkup
// ReplyMarkup <--
// + TLreplyKeyboardHide
// + TLreplyKeyboardForceReply
// + TLreplyKeyboardMarkup
// + TLreplyInlineMarkup
//
// Constructors:Type:ReplyMarkup
type ReplyMarkup struct {
	constructor int32
	data        *ReplyMarkup_Data
}

// Constructors:Type:Data:ReplyMarkup
type ReplyMarkup_Data struct {
	selective  bool
	single_use bool
	resize     bool
	rows       []*KeyboardButtonRow
}

// Constructors:Predicate:replyKeyboardHide
type TLreplyKeyboardHide struct {
	data *ReplyMarkup_Data
}

// Constructors:New:replyKeyboardHide
func NewTLreplyKeyboardHide() *TLreplyKeyboardHide {
	return &TLreplyKeyboardHide{data: &ReplyMarkup_Data{}}
}

// Constructors:Predicate:replyKeyboardForceReply
type TLreplyKeyboardForceReply struct {
	data *ReplyMarkup_Data
}

// Constructors:New:replyKeyboardForceReply
func NewTLreplyKeyboardForceReply() *TLreplyKeyboardForceReply {
	return &TLreplyKeyboardForceReply{data: &ReplyMarkup_Data{}}
}

// Constructors:Predicate:replyKeyboardMarkup
type TLreplyKeyboardMarkup struct {
	data *ReplyMarkup_Data
}

// Constructors:New:replyKeyboardMarkup
func NewTLreplyKeyboardMarkup() *TLreplyKeyboardMarkup {
	return &TLreplyKeyboardMarkup{data: &ReplyMarkup_Data{}}
}

// Constructors:Predicate:replyInlineMarkup
type TLreplyInlineMarkup struct {
	data *ReplyMarkup_Data
}

// Constructors:New:replyInlineMarkup
func NewTLreplyInlineMarkup() *TLreplyInlineMarkup {
	return &TLreplyInlineMarkup{data: &ReplyMarkup_Data{}}
}
func (m *TLreplyKeyboardHide) Setselective(v bool)              { m.data.selective = v }
func (m *TLreplyKeyboardHide) Getselective() bool               { return m.data.selective }
func (m *TLreplyKeyboardForceReply) Setsingle_use(v bool)       { m.data.single_use = v }
func (m *TLreplyKeyboardForceReply) Getsingle_use() bool        { return m.data.single_use }
func (m *TLreplyKeyboardForceReply) Setselective(v bool)        { m.data.selective = v }
func (m *TLreplyKeyboardForceReply) Getselective() bool         { return m.data.selective }
func (m *TLreplyKeyboardMarkup) Setresize(v bool)               { m.data.resize = v }
func (m *TLreplyKeyboardMarkup) Getresize() bool                { return m.data.resize }
func (m *TLreplyKeyboardMarkup) Setsingle_use(v bool)           { m.data.single_use = v }
func (m *TLreplyKeyboardMarkup) Getsingle_use() bool            { return m.data.single_use }
func (m *TLreplyKeyboardMarkup) Setselective(v bool)            { m.data.selective = v }
func (m *TLreplyKeyboardMarkup) Getselective() bool             { return m.data.selective }
func (m *TLreplyKeyboardMarkup) Setrows(v []*KeyboardButtonRow) { m.data.rows = v }
func (m *TLreplyKeyboardMarkup) Getrows() []*KeyboardButtonRow  { return m.data.rows }
func (m *TLreplyInlineMarkup) Setrows(v []*KeyboardButtonRow)   { m.data.rows = v }
func (m *TLreplyInlineMarkup) Getrows() []*KeyboardButtonRow    { return m.data.rows }

///////////////////////////////////////////////////////////////////////////////
// Constructors:photos_Photo
// photos_Photo <--
// + TLphotos_photo
//
// Constructors:Type:photos_Photo
type photos_Photo struct {
	constructor int32
	data        *photos_Photo_Data
}

// Constructors:Type:Data:photos_Photo
type photos_Photo_Data struct {
	photo *Photo
	users []*User
}

// Constructors:Predicate:photos_photo
type TLphotos_photo struct {
	data *photos_Photo_Data
}

// Constructors:New:photos_photo
func NewTLphotos_photo() *TLphotos_photo {
	return &TLphotos_photo{data: &photos_Photo_Data{}}
}
func (m *TLphotos_photo) Setphoto(v *Photo)  { m.data.photo = v }
func (m *TLphotos_photo) Getphoto() *Photo   { return m.data.photo }
func (m *TLphotos_photo) Setusers(v []*User) { m.data.users = v }
func (m *TLphotos_photo) Getusers() []*User  { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:SavedContact
// SavedContact <--
// + TLsavedPhoneContact
//
// Constructors:Type:SavedContact
type SavedContact struct {
	constructor int32
	data        *SavedContact_Data
}

// Constructors:Type:Data:SavedContact
type SavedContact_Data struct {
	phone      string
	first_name string
	last_name  string
	date       int32
}

// Constructors:Predicate:savedPhoneContact
type TLsavedPhoneContact struct {
	data *SavedContact_Data
}

// Constructors:New:savedPhoneContact
func NewTLsavedPhoneContact() *TLsavedPhoneContact {
	return &TLsavedPhoneContact{data: &SavedContact_Data{}}
}
func (m *TLsavedPhoneContact) Setphone(v string)      { m.data.phone = v }
func (m *TLsavedPhoneContact) Getphone() string       { return m.data.phone }
func (m *TLsavedPhoneContact) Setfirst_name(v string) { m.data.first_name = v }
func (m *TLsavedPhoneContact) Getfirst_name() string  { return m.data.first_name }
func (m *TLsavedPhoneContact) Setlast_name(v string)  { m.data.last_name = v }
func (m *TLsavedPhoneContact) Getlast_name() string   { return m.data.last_name }
func (m *TLsavedPhoneContact) Setdate(v int32)        { m.data.date = v }
func (m *TLsavedPhoneContact) Getdate() int32         { return m.data.date }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PaymentSavedCredentials
// PaymentSavedCredentials <--
// + TLpaymentSavedCredentialsCard
//
// Constructors:Type:PaymentSavedCredentials
type PaymentSavedCredentials struct {
	constructor int32
	data        *PaymentSavedCredentials_Data
}

// Constructors:Type:Data:PaymentSavedCredentials
type PaymentSavedCredentials_Data struct {
	id    string
	title string
}

// Constructors:Predicate:paymentSavedCredentialsCard
type TLpaymentSavedCredentialsCard struct {
	data *PaymentSavedCredentials_Data
}

// Constructors:New:paymentSavedCredentialsCard
func NewTLpaymentSavedCredentialsCard() *TLpaymentSavedCredentialsCard {
	return &TLpaymentSavedCredentialsCard{data: &PaymentSavedCredentials_Data{}}
}
func (m *TLpaymentSavedCredentialsCard) Setid(v string)    { m.data.id = v }
func (m *TLpaymentSavedCredentialsCard) Getid() string     { return m.data.id }
func (m *TLpaymentSavedCredentialsCard) Settitle(v string) { m.data.title = v }
func (m *TLpaymentSavedCredentialsCard) Gettitle() string  { return m.data.title }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ShippingOption
// ShippingOption <--
// + TLshippingOption
//
// Constructors:Type:ShippingOption
type ShippingOption struct {
	constructor int32
	data        *ShippingOption_Data
}

// Constructors:Type:Data:ShippingOption
type ShippingOption_Data struct {
	id     string
	title  string
	prices []*LabeledPrice
}

// Constructors:Predicate:shippingOption
type TLshippingOption struct {
	data *ShippingOption_Data
}

// Constructors:New:shippingOption
func NewTLshippingOption() *TLshippingOption {
	return &TLshippingOption{data: &ShippingOption_Data{}}
}
func (m *TLshippingOption) Setid(v string)              { m.data.id = v }
func (m *TLshippingOption) Getid() string               { return m.data.id }
func (m *TLshippingOption) Settitle(v string)           { m.data.title = v }
func (m *TLshippingOption) Gettitle() string            { return m.data.title }
func (m *TLshippingOption) Setprices(v []*LabeledPrice) { m.data.prices = v }
func (m *TLshippingOption) Getprices() []*LabeledPrice  { return m.data.prices }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_SearchCounter
// messages_SearchCounter <--
// + TLmessages_searchCounter
//
// Constructors:Type:messages_SearchCounter
type messages_SearchCounter struct {
	constructor int32
	data        *messages_SearchCounter_Data
}

// Constructors:Type:Data:messages_SearchCounter
type messages_SearchCounter_Data struct {
	inexact bool
	filter  *MessagesFilter
	count   int32
}

// Constructors:Predicate:messages_searchCounter
type TLmessages_searchCounter struct {
	data *messages_SearchCounter_Data
}

// Constructors:New:messages_searchCounter
func NewTLmessages_searchCounter() *TLmessages_searchCounter {
	return &TLmessages_searchCounter{data: &messages_SearchCounter_Data{}}
}
func (m *TLmessages_searchCounter) Setinexact(v bool)           { m.data.inexact = v }
func (m *TLmessages_searchCounter) Getinexact() bool            { return m.data.inexact }
func (m *TLmessages_searchCounter) Setfilter(v *MessagesFilter) { m.data.filter = v }
func (m *TLmessages_searchCounter) Getfilter() *MessagesFilter  { return m.data.filter }
func (m *TLmessages_searchCounter) Setcount(v int32)            { m.data.count = v }
func (m *TLmessages_searchCounter) Getcount() int32             { return m.data.count }

///////////////////////////////////////////////////////////////////////////////
// Constructors:account_AuthorizationForm
// account_AuthorizationForm <--
// + TLaccount_authorizationForm
//
// Constructors:Type:account_AuthorizationForm
type account_AuthorizationForm struct {
	constructor int32
	data        *account_AuthorizationForm_Data
}

// Constructors:Type:Data:account_AuthorizationForm
type account_AuthorizationForm_Data struct {
	required_types     []*SecureRequiredType
	values             []*SecureValue
	errors             []*SecureValueError
	users              []*User
	privacy_policy_url string
}

// Constructors:Predicate:account_authorizationForm
type TLaccount_authorizationForm struct {
	data *account_AuthorizationForm_Data
}

// Constructors:New:account_authorizationForm
func NewTLaccount_authorizationForm() *TLaccount_authorizationForm {
	return &TLaccount_authorizationForm{data: &account_AuthorizationForm_Data{}}
}
func (m *TLaccount_authorizationForm) Setrequired_types(v []*SecureRequiredType) {
	m.data.required_types = v
}
func (m *TLaccount_authorizationForm) Getrequired_types() []*SecureRequiredType {
	return m.data.required_types
}
func (m *TLaccount_authorizationForm) Setvalues(v []*SecureValue)      { m.data.values = v }
func (m *TLaccount_authorizationForm) Getvalues() []*SecureValue       { return m.data.values }
func (m *TLaccount_authorizationForm) Seterrors(v []*SecureValueError) { m.data.errors = v }
func (m *TLaccount_authorizationForm) Geterrors() []*SecureValueError  { return m.data.errors }
func (m *TLaccount_authorizationForm) Setusers(v []*User)              { m.data.users = v }
func (m *TLaccount_authorizationForm) Getusers() []*User               { return m.data.users }
func (m *TLaccount_authorizationForm) Setprivacy_policy_url(v string)  { m.data.privacy_policy_url = v }
func (m *TLaccount_authorizationForm) Getprivacy_policy_url() string {
	return m.data.privacy_policy_url
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:PasswordKdfAlgo
// PasswordKdfAlgo <--
// + TLpasswordKdfAlgoUnknown
// + TLpasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow
//
// Constructors:Type:PasswordKdfAlgo
type PasswordKdfAlgo struct {
	constructor int32
	data        *PasswordKdfAlgo_Data
}

// Constructors:Type:Data:PasswordKdfAlgo
type PasswordKdfAlgo_Data struct {
	salt1 []byte
	salt2 []byte
	g     int32
	p     []byte
}

// Constructors:Predicate:passwordKdfAlgoUnknown
type TLpasswordKdfAlgoUnknown struct {
	data *PasswordKdfAlgo_Data
}

// Constructors:New:passwordKdfAlgoUnknown
func NewTLpasswordKdfAlgoUnknown() *TLpasswordKdfAlgoUnknown {
	return &TLpasswordKdfAlgoUnknown{data: &PasswordKdfAlgo_Data{}}
}

// Constructors:Predicate:passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow
type TLpasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow struct {
	data *PasswordKdfAlgo_Data
}

// Constructors:New:passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow
func NewTLpasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow() *TLpasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow {
	return &TLpasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow{data: &PasswordKdfAlgo_Data{}}
}
func (m *TLpasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) Setsalt1(v []byte) {
	m.data.salt1 = v
}
func (m *TLpasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) Getsalt1() []byte {
	return m.data.salt1
}
func (m *TLpasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) Setsalt2(v []byte) {
	m.data.salt2 = v
}
func (m *TLpasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) Getsalt2() []byte {
	return m.data.salt2
}
func (m *TLpasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) Setg(v int32) {
	m.data.g = v
}
func (m *TLpasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) Getg() int32 {
	return m.data.g
}
func (m *TLpasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) Setp(v []byte) {
	m.data.p = v
}
func (m *TLpasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) Getp() []byte {
	return m.data.p
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:ContactStatus
// ContactStatus <--
// + TLcontactStatus
//
// Constructors:Type:ContactStatus
type ContactStatus struct {
	constructor int32
	data        *ContactStatus_Data
}

// Constructors:Type:Data:ContactStatus
type ContactStatus_Data struct {
	user_id int32
	status  *UserStatus
}

// Constructors:Predicate:contactStatus
type TLcontactStatus struct {
	data *ContactStatus_Data
}

// Constructors:New:contactStatus
func NewTLcontactStatus() *TLcontactStatus {
	return &TLcontactStatus{data: &ContactStatus_Data{}}
}
func (m *TLcontactStatus) Setuser_id(v int32)      { m.data.user_id = v }
func (m *TLcontactStatus) Getuser_id() int32       { return m.data.user_id }
func (m *TLcontactStatus) Setstatus(v *UserStatus) { m.data.status = v }
func (m *TLcontactStatus) Getstatus() *UserStatus  { return m.data.status }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ChatAdminRights
// ChatAdminRights <--
// + TLchatAdminRights
//
// Constructors:Type:ChatAdminRights
type ChatAdminRights struct {
	constructor int32
	data        *ChatAdminRights_Data
}

// Constructors:Type:Data:ChatAdminRights
type ChatAdminRights_Data struct {
	change_info     bool
	post_messages   bool
	edit_messages   bool
	delete_messages bool
	ban_users       bool
	invite_users    bool
	pin_messages    bool
	add_admins      bool
	anonymous       bool
	manage_call     bool
}

// Constructors:Predicate:chatAdminRights
type TLchatAdminRights struct {
	data *ChatAdminRights_Data
}

// Constructors:New:chatAdminRights
func NewTLchatAdminRights() *TLchatAdminRights {
	return &TLchatAdminRights{data: &ChatAdminRights_Data{}}
}
func (m *TLchatAdminRights) Setchange_info(v bool)     { m.data.change_info = v }
func (m *TLchatAdminRights) Getchange_info() bool      { return m.data.change_info }
func (m *TLchatAdminRights) Setpost_messages(v bool)   { m.data.post_messages = v }
func (m *TLchatAdminRights) Getpost_messages() bool    { return m.data.post_messages }
func (m *TLchatAdminRights) Setedit_messages(v bool)   { m.data.edit_messages = v }
func (m *TLchatAdminRights) Getedit_messages() bool    { return m.data.edit_messages }
func (m *TLchatAdminRights) Setdelete_messages(v bool) { m.data.delete_messages = v }
func (m *TLchatAdminRights) Getdelete_messages() bool  { return m.data.delete_messages }
func (m *TLchatAdminRights) Setban_users(v bool)       { m.data.ban_users = v }
func (m *TLchatAdminRights) Getban_users() bool        { return m.data.ban_users }
func (m *TLchatAdminRights) Setinvite_users(v bool)    { m.data.invite_users = v }
func (m *TLchatAdminRights) Getinvite_users() bool     { return m.data.invite_users }
func (m *TLchatAdminRights) Setpin_messages(v bool)    { m.data.pin_messages = v }
func (m *TLchatAdminRights) Getpin_messages() bool     { return m.data.pin_messages }
func (m *TLchatAdminRights) Setadd_admins(v bool)      { m.data.add_admins = v }
func (m *TLchatAdminRights) Getadd_admins() bool       { return m.data.add_admins }
func (m *TLchatAdminRights) Setanonymous(v bool)       { m.data.anonymous = v }
func (m *TLchatAdminRights) Getanonymous() bool        { return m.data.anonymous }
func (m *TLchatAdminRights) Setmanage_call(v bool)     { m.data.manage_call = v }
func (m *TLchatAdminRights) Getmanage_call() bool      { return m.data.manage_call }

///////////////////////////////////////////////////////////////////////////////
// Constructors:contacts_Blocked
// contacts_Blocked <--
// + TLcontacts_blocked
// + TLcontacts_blockedSlice
//
// Constructors:Type:contacts_Blocked
type contacts_Blocked struct {
	constructor int32
	data        *contacts_Blocked_Data
}

// Constructors:Type:Data:contacts_Blocked
type contacts_Blocked_Data struct {
	blocked []*PeerBlocked
	chats   []*Chat
	users   []*User
	count   int32
}

// Constructors:Predicate:contacts_blocked
type TLcontacts_blocked struct {
	data *contacts_Blocked_Data
}

// Constructors:New:contacts_blocked
func NewTLcontacts_blocked() *TLcontacts_blocked {
	return &TLcontacts_blocked{data: &contacts_Blocked_Data{}}
}

// Constructors:Predicate:contacts_blockedSlice
type TLcontacts_blockedSlice struct {
	data *contacts_Blocked_Data
}

// Constructors:New:contacts_blockedSlice
func NewTLcontacts_blockedSlice() *TLcontacts_blockedSlice {
	return &TLcontacts_blockedSlice{data: &contacts_Blocked_Data{}}
}
func (m *TLcontacts_blocked) Setblocked(v []*PeerBlocked)      { m.data.blocked = v }
func (m *TLcontacts_blocked) Getblocked() []*PeerBlocked       { return m.data.blocked }
func (m *TLcontacts_blocked) Setchats(v []*Chat)               { m.data.chats = v }
func (m *TLcontacts_blocked) Getchats() []*Chat                { return m.data.chats }
func (m *TLcontacts_blocked) Setusers(v []*User)               { m.data.users = v }
func (m *TLcontacts_blocked) Getusers() []*User                { return m.data.users }
func (m *TLcontacts_blockedSlice) Setcount(v int32)            { m.data.count = v }
func (m *TLcontacts_blockedSlice) Getcount() int32             { return m.data.count }
func (m *TLcontacts_blockedSlice) Setblocked(v []*PeerBlocked) { m.data.blocked = v }
func (m *TLcontacts_blockedSlice) Getblocked() []*PeerBlocked  { return m.data.blocked }
func (m *TLcontacts_blockedSlice) Setchats(v []*Chat)          { m.data.chats = v }
func (m *TLcontacts_blockedSlice) Getchats() []*Chat           { return m.data.chats }
func (m *TLcontacts_blockedSlice) Setusers(v []*User)          { m.data.users = v }
func (m *TLcontacts_blockedSlice) Getusers() []*User           { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:contacts_ImportedContacts
// contacts_ImportedContacts <--
// + TLcontacts_importedContacts
//
// Constructors:Type:contacts_ImportedContacts
type contacts_ImportedContacts struct {
	constructor int32
	data        *contacts_ImportedContacts_Data
}

// Constructors:Type:Data:contacts_ImportedContacts
type contacts_ImportedContacts_Data struct {
	imported        []*ImportedContact
	popular_invites []*PopularContact
	retry_contacts  []int64
	users           []*User
}

// Constructors:Predicate:contacts_importedContacts
type TLcontacts_importedContacts struct {
	data *contacts_ImportedContacts_Data
}

// Constructors:New:contacts_importedContacts
func NewTLcontacts_importedContacts() *TLcontacts_importedContacts {
	return &TLcontacts_importedContacts{data: &contacts_ImportedContacts_Data{}}
}
func (m *TLcontacts_importedContacts) Setimported(v []*ImportedContact) { m.data.imported = v }
func (m *TLcontacts_importedContacts) Getimported() []*ImportedContact  { return m.data.imported }
func (m *TLcontacts_importedContacts) Setpopular_invites(v []*PopularContact) {
	m.data.popular_invites = v
}
func (m *TLcontacts_importedContacts) Getpopular_invites() []*PopularContact {
	return m.data.popular_invites
}
func (m *TLcontacts_importedContacts) Setretry_contacts(v []int64) { m.data.retry_contacts = v }
func (m *TLcontacts_importedContacts) Getretry_contacts() []int64  { return m.data.retry_contacts }
func (m *TLcontacts_importedContacts) Setusers(v []*User)          { m.data.users = v }
func (m *TLcontacts_importedContacts) Getusers() []*User           { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:NearestDc
// NearestDc <--
// + TLnearestDc
//
// Constructors:Type:NearestDc
type NearestDc struct {
	constructor int32
	data        *NearestDc_Data
}

// Constructors:Type:Data:NearestDc
type NearestDc_Data struct {
	country    string
	this_dc    int32
	nearest_dc int32
}

// Constructors:Predicate:nearestDc
type TLnearestDc struct {
	data *NearestDc_Data
}

// Constructors:New:nearestDc
func NewTLnearestDc() *TLnearestDc {
	return &TLnearestDc{data: &NearestDc_Data{}}
}
func (m *TLnearestDc) Setcountry(v string)   { m.data.country = v }
func (m *TLnearestDc) Getcountry() string    { return m.data.country }
func (m *TLnearestDc) Setthis_dc(v int32)    { m.data.this_dc = v }
func (m *TLnearestDc) Getthis_dc() int32     { return m.data.this_dc }
func (m *TLnearestDc) Setnearest_dc(v int32) { m.data.nearest_dc = v }
func (m *TLnearestDc) Getnearest_dc() int32  { return m.data.nearest_dc }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputPaymentCredentials
// InputPaymentCredentials <--
// + TLinputPaymentCredentialsSaved
// + TLinputPaymentCredentials
// + TLinputPaymentCredentialsApplePay
// + TLinputPaymentCredentialsAndroidPay
//
// Constructors:Type:InputPaymentCredentials
type InputPaymentCredentials struct {
	constructor int32
	data        *InputPaymentCredentials_Data
}

// Constructors:Type:Data:InputPaymentCredentials
type InputPaymentCredentials_Data struct {
	id                    string
	tmp_password          []byte
	save                  bool
	data                  *DataJSON
	payment_data          *DataJSON
	payment_token         *DataJSON
	google_transaction_id string
}

// Constructors:Predicate:inputPaymentCredentialsSaved
type TLinputPaymentCredentialsSaved struct {
	data *InputPaymentCredentials_Data
}

// Constructors:New:inputPaymentCredentialsSaved
func NewTLinputPaymentCredentialsSaved() *TLinputPaymentCredentialsSaved {
	return &TLinputPaymentCredentialsSaved{data: &InputPaymentCredentials_Data{}}
}

// Constructors:Predicate:inputPaymentCredentials
type TLinputPaymentCredentials struct {
	data *InputPaymentCredentials_Data
}

// Constructors:New:inputPaymentCredentials
func NewTLinputPaymentCredentials() *TLinputPaymentCredentials {
	return &TLinputPaymentCredentials{data: &InputPaymentCredentials_Data{}}
}

// Constructors:Predicate:inputPaymentCredentialsApplePay
type TLinputPaymentCredentialsApplePay struct {
	data *InputPaymentCredentials_Data
}

// Constructors:New:inputPaymentCredentialsApplePay
func NewTLinputPaymentCredentialsApplePay() *TLinputPaymentCredentialsApplePay {
	return &TLinputPaymentCredentialsApplePay{data: &InputPaymentCredentials_Data{}}
}

// Constructors:Predicate:inputPaymentCredentialsAndroidPay
type TLinputPaymentCredentialsAndroidPay struct {
	data *InputPaymentCredentials_Data
}

// Constructors:New:inputPaymentCredentialsAndroidPay
func NewTLinputPaymentCredentialsAndroidPay() *TLinputPaymentCredentialsAndroidPay {
	return &TLinputPaymentCredentialsAndroidPay{data: &InputPaymentCredentials_Data{}}
}
func (m *TLinputPaymentCredentialsSaved) Setid(v string)                    { m.data.id = v }
func (m *TLinputPaymentCredentialsSaved) Getid() string                     { return m.data.id }
func (m *TLinputPaymentCredentialsSaved) Settmp_password(v []byte)          { m.data.tmp_password = v }
func (m *TLinputPaymentCredentialsSaved) Gettmp_password() []byte           { return m.data.tmp_password }
func (m *TLinputPaymentCredentials) Setsave(v bool)                         { m.data.save = v }
func (m *TLinputPaymentCredentials) Getsave() bool                          { return m.data.save }
func (m *TLinputPaymentCredentials) Setdata(v *DataJSON)                    { m.data.data = v }
func (m *TLinputPaymentCredentials) Getdata() *DataJSON                     { return m.data.data }
func (m *TLinputPaymentCredentialsApplePay) Setpayment_data(v *DataJSON)    { m.data.payment_data = v }
func (m *TLinputPaymentCredentialsApplePay) Getpayment_data() *DataJSON     { return m.data.payment_data }
func (m *TLinputPaymentCredentialsAndroidPay) Setpayment_token(v *DataJSON) { m.data.payment_token = v }
func (m *TLinputPaymentCredentialsAndroidPay) Getpayment_token() *DataJSON {
	return m.data.payment_token
}
func (m *TLinputPaymentCredentialsAndroidPay) Setgoogle_transaction_id(v string) {
	m.data.google_transaction_id = v
}
func (m *TLinputPaymentCredentialsAndroidPay) Getgoogle_transaction_id() string {
	return m.data.google_transaction_id
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputAppEvent
// InputAppEvent <--
// + TLinputAppEvent
//
// Constructors:Type:InputAppEvent
type InputAppEvent struct {
	constructor int32
	data        *InputAppEvent_Data
}

// Constructors:Type:Data:InputAppEvent
type InputAppEvent_Data struct {
	time     float64
	type_key string
	peer     int64
	data     *JSONValue
}

// Constructors:Predicate:inputAppEvent
type TLinputAppEvent struct {
	data *InputAppEvent_Data
}

// Constructors:New:inputAppEvent
func NewTLinputAppEvent() *TLinputAppEvent {
	return &TLinputAppEvent{data: &InputAppEvent_Data{}}
}
func (m *TLinputAppEvent) Settime(v float64)    { m.data.time = v }
func (m *TLinputAppEvent) Gettime() float64     { return m.data.time }
func (m *TLinputAppEvent) Settype_key(v string) { m.data.type_key = v }
func (m *TLinputAppEvent) Gettype_key() string  { return m.data.type_key }
func (m *TLinputAppEvent) Setpeer(v int64)      { m.data.peer = v }
func (m *TLinputAppEvent) Getpeer() int64       { return m.data.peer }
func (m *TLinputAppEvent) Setdata(v *JSONValue) { m.data.data = v }
func (m *TLinputAppEvent) Getdata() *JSONValue  { return m.data.data }

///////////////////////////////////////////////////////////////////////////////
// Constructors:StatsURL
// StatsURL <--
// + TLstatsURL
//
// Constructors:Type:StatsURL
type StatsURL struct {
	constructor int32
	data        *StatsURL_Data
}

// Constructors:Type:Data:StatsURL
type StatsURL_Data struct {
	url string
}

// Constructors:Predicate:statsURL
type TLstatsURL struct {
	data *StatsURL_Data
}

// Constructors:New:statsURL
func NewTLstatsURL() *TLstatsURL {
	return &TLstatsURL{data: &StatsURL_Data{}}
}
func (m *TLstatsURL) Seturl(v string) { m.data.url = v }
func (m *TLstatsURL) Geturl() string  { return m.data.url }

///////////////////////////////////////////////////////////////////////////////
// Constructors:help_TermsOfServiceUpdate
// help_TermsOfServiceUpdate <--
// + TLhelp_termsOfServiceUpdateEmpty
// + TLhelp_termsOfServiceUpdate
//
// Constructors:Type:help_TermsOfServiceUpdate
type help_TermsOfServiceUpdate struct {
	constructor int32
	data        *help_TermsOfServiceUpdate_Data
}

// Constructors:Type:Data:help_TermsOfServiceUpdate
type help_TermsOfServiceUpdate_Data struct {
	expires          int32
	terms_of_service *help_TermsOfService
}

// Constructors:Predicate:help_termsOfServiceUpdateEmpty
type TLhelp_termsOfServiceUpdateEmpty struct {
	data *help_TermsOfServiceUpdate_Data
}

// Constructors:New:help_termsOfServiceUpdateEmpty
func NewTLhelp_termsOfServiceUpdateEmpty() *TLhelp_termsOfServiceUpdateEmpty {
	return &TLhelp_termsOfServiceUpdateEmpty{data: &help_TermsOfServiceUpdate_Data{}}
}

// Constructors:Predicate:help_termsOfServiceUpdate
type TLhelp_termsOfServiceUpdate struct {
	data *help_TermsOfServiceUpdate_Data
}

// Constructors:New:help_termsOfServiceUpdate
func NewTLhelp_termsOfServiceUpdate() *TLhelp_termsOfServiceUpdate {
	return &TLhelp_termsOfServiceUpdate{data: &help_TermsOfServiceUpdate_Data{}}
}
func (m *TLhelp_termsOfServiceUpdateEmpty) Setexpires(v int32) { m.data.expires = v }
func (m *TLhelp_termsOfServiceUpdateEmpty) Getexpires() int32  { return m.data.expires }
func (m *TLhelp_termsOfServiceUpdate) Setexpires(v int32)      { m.data.expires = v }
func (m *TLhelp_termsOfServiceUpdate) Getexpires() int32       { return m.data.expires }
func (m *TLhelp_termsOfServiceUpdate) Setterms_of_service(v *help_TermsOfService) {
	m.data.terms_of_service = v
}
func (m *TLhelp_termsOfServiceUpdate) Getterms_of_service() *help_TermsOfService {
	return m.data.terms_of_service
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_AffectedMessages
// messages_AffectedMessages <--
// + TLmessages_affectedMessages
//
// Constructors:Type:messages_AffectedMessages
type messages_AffectedMessages struct {
	constructor int32
	data        *messages_AffectedMessages_Data
}

// Constructors:Type:Data:messages_AffectedMessages
type messages_AffectedMessages_Data struct {
	pts       int32
	pts_count int32
}

// Constructors:Predicate:messages_affectedMessages
type TLmessages_affectedMessages struct {
	data *messages_AffectedMessages_Data
}

// Constructors:New:messages_affectedMessages
func NewTLmessages_affectedMessages() *TLmessages_affectedMessages {
	return &TLmessages_affectedMessages{data: &messages_AffectedMessages_Data{}}
}
func (m *TLmessages_affectedMessages) Setpts(v int32)       { m.data.pts = v }
func (m *TLmessages_affectedMessages) Getpts() int32        { return m.data.pts }
func (m *TLmessages_affectedMessages) Setpts_count(v int32) { m.data.pts_count = v }
func (m *TLmessages_affectedMessages) Getpts_count() int32  { return m.data.pts_count }

///////////////////////////////////////////////////////////////////////////////
// Constructors:account_SentEmailCode
// account_SentEmailCode <--
// + TLaccount_sentEmailCode
//
// Constructors:Type:account_SentEmailCode
type account_SentEmailCode struct {
	constructor int32
	data        *account_SentEmailCode_Data
}

// Constructors:Type:Data:account_SentEmailCode
type account_SentEmailCode_Data struct {
	email_pattern string
	length        int32
}

// Constructors:Predicate:account_sentEmailCode
type TLaccount_sentEmailCode struct {
	data *account_SentEmailCode_Data
}

// Constructors:New:account_sentEmailCode
func NewTLaccount_sentEmailCode() *TLaccount_sentEmailCode {
	return &TLaccount_sentEmailCode{data: &account_SentEmailCode_Data{}}
}
func (m *TLaccount_sentEmailCode) Setemail_pattern(v string) { m.data.email_pattern = v }
func (m *TLaccount_sentEmailCode) Getemail_pattern() string  { return m.data.email_pattern }
func (m *TLaccount_sentEmailCode) Setlength(v int32)         { m.data.length = v }
func (m *TLaccount_sentEmailCode) Getlength() int32          { return m.data.length }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputBotInlineMessageID
// InputBotInlineMessageID <--
// + TLinputBotInlineMessageID
//
// Constructors:Type:InputBotInlineMessageID
type InputBotInlineMessageID struct {
	constructor int32
	data        *InputBotInlineMessageID_Data
}

// Constructors:Type:Data:InputBotInlineMessageID
type InputBotInlineMessageID_Data struct {
	dc_id       int32
	id          int64
	access_hash int64
}

// Constructors:Predicate:inputBotInlineMessageID
type TLinputBotInlineMessageID struct {
	data *InputBotInlineMessageID_Data
}

// Constructors:New:inputBotInlineMessageID
func NewTLinputBotInlineMessageID() *TLinputBotInlineMessageID {
	return &TLinputBotInlineMessageID{data: &InputBotInlineMessageID_Data{}}
}
func (m *TLinputBotInlineMessageID) Setdc_id(v int32)       { m.data.dc_id = v }
func (m *TLinputBotInlineMessageID) Getdc_id() int32        { return m.data.dc_id }
func (m *TLinputBotInlineMessageID) Setid(v int64)          { m.data.id = v }
func (m *TLinputBotInlineMessageID) Getid() int64           { return m.data.id }
func (m *TLinputBotInlineMessageID) Setaccess_hash(v int64) { m.data.access_hash = v }
func (m *TLinputBotInlineMessageID) Getaccess_hash() int64  { return m.data.access_hash }

///////////////////////////////////////////////////////////////////////////////
// Constructors:storage_FileType
// storage_FileType <--
// + TLstorage_fileUnknown
// + TLstorage_filePartial
// + TLstorage_fileJpeg
// + TLstorage_fileGif
// + TLstorage_filePng
// + TLstorage_filePdf
// + TLstorage_fileMp3
// + TLstorage_fileMov
// + TLstorage_fileMp4
// + TLstorage_fileWebp
//
// Constructors:Type:storage_FileType
type storage_FileType struct {
	constructor int32
	data        *storage_FileType_Data
}

// Constructors:Type:Data:storage_FileType
type storage_FileType_Data struct {
}

// Constructors:Predicate:storage_fileUnknown
type TLstorage_fileUnknown struct {
	data *storage_FileType_Data
}

// Constructors:New:storage_fileUnknown
func NewTLstorage_fileUnknown() *TLstorage_fileUnknown {
	return &TLstorage_fileUnknown{data: &storage_FileType_Data{}}
}

// Constructors:Predicate:storage_filePartial
type TLstorage_filePartial struct {
	data *storage_FileType_Data
}

// Constructors:New:storage_filePartial
func NewTLstorage_filePartial() *TLstorage_filePartial {
	return &TLstorage_filePartial{data: &storage_FileType_Data{}}
}

// Constructors:Predicate:storage_fileJpeg
type TLstorage_fileJpeg struct {
	data *storage_FileType_Data
}

// Constructors:New:storage_fileJpeg
func NewTLstorage_fileJpeg() *TLstorage_fileJpeg {
	return &TLstorage_fileJpeg{data: &storage_FileType_Data{}}
}

// Constructors:Predicate:storage_fileGif
type TLstorage_fileGif struct {
	data *storage_FileType_Data
}

// Constructors:New:storage_fileGif
func NewTLstorage_fileGif() *TLstorage_fileGif {
	return &TLstorage_fileGif{data: &storage_FileType_Data{}}
}

// Constructors:Predicate:storage_filePng
type TLstorage_filePng struct {
	data *storage_FileType_Data
}

// Constructors:New:storage_filePng
func NewTLstorage_filePng() *TLstorage_filePng {
	return &TLstorage_filePng{data: &storage_FileType_Data{}}
}

// Constructors:Predicate:storage_filePdf
type TLstorage_filePdf struct {
	data *storage_FileType_Data
}

// Constructors:New:storage_filePdf
func NewTLstorage_filePdf() *TLstorage_filePdf {
	return &TLstorage_filePdf{data: &storage_FileType_Data{}}
}

// Constructors:Predicate:storage_fileMp3
type TLstorage_fileMp3 struct {
	data *storage_FileType_Data
}

// Constructors:New:storage_fileMp3
func NewTLstorage_fileMp3() *TLstorage_fileMp3 {
	return &TLstorage_fileMp3{data: &storage_FileType_Data{}}
}

// Constructors:Predicate:storage_fileMov
type TLstorage_fileMov struct {
	data *storage_FileType_Data
}

// Constructors:New:storage_fileMov
func NewTLstorage_fileMov() *TLstorage_fileMov {
	return &TLstorage_fileMov{data: &storage_FileType_Data{}}
}

// Constructors:Predicate:storage_fileMp4
type TLstorage_fileMp4 struct {
	data *storage_FileType_Data
}

// Constructors:New:storage_fileMp4
func NewTLstorage_fileMp4() *TLstorage_fileMp4 {
	return &TLstorage_fileMp4{data: &storage_FileType_Data{}}
}

// Constructors:Predicate:storage_fileWebp
type TLstorage_fileWebp struct {
	data *storage_FileType_Data
}

// Constructors:New:storage_fileWebp
func NewTLstorage_fileWebp() *TLstorage_fileWebp {
	return &TLstorage_fileWebp{data: &storage_FileType_Data{}}
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:PopularContact
// PopularContact <--
// + TLpopularContact
//
// Constructors:Type:PopularContact
type PopularContact struct {
	constructor int32
	data        *PopularContact_Data
}

// Constructors:Type:Data:PopularContact
type PopularContact_Data struct {
	client_id int64
	importers int32
}

// Constructors:Predicate:popularContact
type TLpopularContact struct {
	data *PopularContact_Data
}

// Constructors:New:popularContact
func NewTLpopularContact() *TLpopularContact {
	return &TLpopularContact{data: &PopularContact_Data{}}
}
func (m *TLpopularContact) Setclient_id(v int64) { m.data.client_id = v }
func (m *TLpopularContact) Getclient_id() int64  { return m.data.client_id }
func (m *TLpopularContact) Setimporters(v int32) { m.data.importers = v }
func (m *TLpopularContact) Getimporters() int32  { return m.data.importers }

///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageEntity
// MessageEntity <--
// + TLmessageEntityUnknown
// + TLmessageEntityMention
// + TLmessageEntityHashtag
// + TLmessageEntityBotCommand
// + TLmessageEntityUrl
// + TLmessageEntityEmail
// + TLmessageEntityBold
// + TLmessageEntityItalic
// + TLmessageEntityCode
// + TLmessageEntityPre
// + TLmessageEntityTextUrl
// + TLmessageEntityMentionName
// + TLinputMessageEntityMentionName
// + TLmessageEntityPhone
// + TLmessageEntityCashtag
// + TLmessageEntityUnderline
// + TLmessageEntityStrike
// + TLmessageEntityBlockquote
// + TLmessageEntityBankCard
//
// Constructors:Type:MessageEntity
type MessageEntity struct {
	constructor int32
	data        *MessageEntity_Data
}

// Constructors:Type:Data:MessageEntity
type MessageEntity_Data struct {
	offset    int32
	length    int32
	language  string
	url       string
	user_id   int32
	user_id_6 *InputUser
}

// Constructors:Predicate:messageEntityUnknown
type TLmessageEntityUnknown struct {
	data *MessageEntity_Data
}

// Constructors:New:messageEntityUnknown
func NewTLmessageEntityUnknown() *TLmessageEntityUnknown {
	return &TLmessageEntityUnknown{data: &MessageEntity_Data{}}
}

// Constructors:Predicate:messageEntityMention
type TLmessageEntityMention struct {
	data *MessageEntity_Data
}

// Constructors:New:messageEntityMention
func NewTLmessageEntityMention() *TLmessageEntityMention {
	return &TLmessageEntityMention{data: &MessageEntity_Data{}}
}

// Constructors:Predicate:messageEntityHashtag
type TLmessageEntityHashtag struct {
	data *MessageEntity_Data
}

// Constructors:New:messageEntityHashtag
func NewTLmessageEntityHashtag() *TLmessageEntityHashtag {
	return &TLmessageEntityHashtag{data: &MessageEntity_Data{}}
}

// Constructors:Predicate:messageEntityBotCommand
type TLmessageEntityBotCommand struct {
	data *MessageEntity_Data
}

// Constructors:New:messageEntityBotCommand
func NewTLmessageEntityBotCommand() *TLmessageEntityBotCommand {
	return &TLmessageEntityBotCommand{data: &MessageEntity_Data{}}
}

// Constructors:Predicate:messageEntityUrl
type TLmessageEntityUrl struct {
	data *MessageEntity_Data
}

// Constructors:New:messageEntityUrl
func NewTLmessageEntityUrl() *TLmessageEntityUrl {
	return &TLmessageEntityUrl{data: &MessageEntity_Data{}}
}

// Constructors:Predicate:messageEntityEmail
type TLmessageEntityEmail struct {
	data *MessageEntity_Data
}

// Constructors:New:messageEntityEmail
func NewTLmessageEntityEmail() *TLmessageEntityEmail {
	return &TLmessageEntityEmail{data: &MessageEntity_Data{}}
}

// Constructors:Predicate:messageEntityBold
type TLmessageEntityBold struct {
	data *MessageEntity_Data
}

// Constructors:New:messageEntityBold
func NewTLmessageEntityBold() *TLmessageEntityBold {
	return &TLmessageEntityBold{data: &MessageEntity_Data{}}
}

// Constructors:Predicate:messageEntityItalic
type TLmessageEntityItalic struct {
	data *MessageEntity_Data
}

// Constructors:New:messageEntityItalic
func NewTLmessageEntityItalic() *TLmessageEntityItalic {
	return &TLmessageEntityItalic{data: &MessageEntity_Data{}}
}

// Constructors:Predicate:messageEntityCode
type TLmessageEntityCode struct {
	data *MessageEntity_Data
}

// Constructors:New:messageEntityCode
func NewTLmessageEntityCode() *TLmessageEntityCode {
	return &TLmessageEntityCode{data: &MessageEntity_Data{}}
}

// Constructors:Predicate:messageEntityPre
type TLmessageEntityPre struct {
	data *MessageEntity_Data
}

// Constructors:New:messageEntityPre
func NewTLmessageEntityPre() *TLmessageEntityPre {
	return &TLmessageEntityPre{data: &MessageEntity_Data{}}
}

// Constructors:Predicate:messageEntityTextUrl
type TLmessageEntityTextUrl struct {
	data *MessageEntity_Data
}

// Constructors:New:messageEntityTextUrl
func NewTLmessageEntityTextUrl() *TLmessageEntityTextUrl {
	return &TLmessageEntityTextUrl{data: &MessageEntity_Data{}}
}

// Constructors:Predicate:messageEntityMentionName
type TLmessageEntityMentionName struct {
	data *MessageEntity_Data
}

// Constructors:New:messageEntityMentionName
func NewTLmessageEntityMentionName() *TLmessageEntityMentionName {
	return &TLmessageEntityMentionName{data: &MessageEntity_Data{}}
}

// Constructors:Predicate:inputMessageEntityMentionName
type TLinputMessageEntityMentionName struct {
	data *MessageEntity_Data
}

// Constructors:New:inputMessageEntityMentionName
func NewTLinputMessageEntityMentionName() *TLinputMessageEntityMentionName {
	return &TLinputMessageEntityMentionName{data: &MessageEntity_Data{}}
}

// Constructors:Predicate:messageEntityPhone
type TLmessageEntityPhone struct {
	data *MessageEntity_Data
}

// Constructors:New:messageEntityPhone
func NewTLmessageEntityPhone() *TLmessageEntityPhone {
	return &TLmessageEntityPhone{data: &MessageEntity_Data{}}
}

// Constructors:Predicate:messageEntityCashtag
type TLmessageEntityCashtag struct {
	data *MessageEntity_Data
}

// Constructors:New:messageEntityCashtag
func NewTLmessageEntityCashtag() *TLmessageEntityCashtag {
	return &TLmessageEntityCashtag{data: &MessageEntity_Data{}}
}

// Constructors:Predicate:messageEntityUnderline
type TLmessageEntityUnderline struct {
	data *MessageEntity_Data
}

// Constructors:New:messageEntityUnderline
func NewTLmessageEntityUnderline() *TLmessageEntityUnderline {
	return &TLmessageEntityUnderline{data: &MessageEntity_Data{}}
}

// Constructors:Predicate:messageEntityStrike
type TLmessageEntityStrike struct {
	data *MessageEntity_Data
}

// Constructors:New:messageEntityStrike
func NewTLmessageEntityStrike() *TLmessageEntityStrike {
	return &TLmessageEntityStrike{data: &MessageEntity_Data{}}
}

// Constructors:Predicate:messageEntityBlockquote
type TLmessageEntityBlockquote struct {
	data *MessageEntity_Data
}

// Constructors:New:messageEntityBlockquote
func NewTLmessageEntityBlockquote() *TLmessageEntityBlockquote {
	return &TLmessageEntityBlockquote{data: &MessageEntity_Data{}}
}

// Constructors:Predicate:messageEntityBankCard
type TLmessageEntityBankCard struct {
	data *MessageEntity_Data
}

// Constructors:New:messageEntityBankCard
func NewTLmessageEntityBankCard() *TLmessageEntityBankCard {
	return &TLmessageEntityBankCard{data: &MessageEntity_Data{}}
}
func (m *TLmessageEntityUnknown) Setoffset(v int32)                  { m.data.offset = v }
func (m *TLmessageEntityUnknown) Getoffset() int32                   { return m.data.offset }
func (m *TLmessageEntityUnknown) Setlength(v int32)                  { m.data.length = v }
func (m *TLmessageEntityUnknown) Getlength() int32                   { return m.data.length }
func (m *TLmessageEntityMention) Setoffset(v int32)                  { m.data.offset = v }
func (m *TLmessageEntityMention) Getoffset() int32                   { return m.data.offset }
func (m *TLmessageEntityMention) Setlength(v int32)                  { m.data.length = v }
func (m *TLmessageEntityMention) Getlength() int32                   { return m.data.length }
func (m *TLmessageEntityHashtag) Setoffset(v int32)                  { m.data.offset = v }
func (m *TLmessageEntityHashtag) Getoffset() int32                   { return m.data.offset }
func (m *TLmessageEntityHashtag) Setlength(v int32)                  { m.data.length = v }
func (m *TLmessageEntityHashtag) Getlength() int32                   { return m.data.length }
func (m *TLmessageEntityBotCommand) Setoffset(v int32)               { m.data.offset = v }
func (m *TLmessageEntityBotCommand) Getoffset() int32                { return m.data.offset }
func (m *TLmessageEntityBotCommand) Setlength(v int32)               { m.data.length = v }
func (m *TLmessageEntityBotCommand) Getlength() int32                { return m.data.length }
func (m *TLmessageEntityUrl) Setoffset(v int32)                      { m.data.offset = v }
func (m *TLmessageEntityUrl) Getoffset() int32                       { return m.data.offset }
func (m *TLmessageEntityUrl) Setlength(v int32)                      { m.data.length = v }
func (m *TLmessageEntityUrl) Getlength() int32                       { return m.data.length }
func (m *TLmessageEntityEmail) Setoffset(v int32)                    { m.data.offset = v }
func (m *TLmessageEntityEmail) Getoffset() int32                     { return m.data.offset }
func (m *TLmessageEntityEmail) Setlength(v int32)                    { m.data.length = v }
func (m *TLmessageEntityEmail) Getlength() int32                     { return m.data.length }
func (m *TLmessageEntityBold) Setoffset(v int32)                     { m.data.offset = v }
func (m *TLmessageEntityBold) Getoffset() int32                      { return m.data.offset }
func (m *TLmessageEntityBold) Setlength(v int32)                     { m.data.length = v }
func (m *TLmessageEntityBold) Getlength() int32                      { return m.data.length }
func (m *TLmessageEntityItalic) Setoffset(v int32)                   { m.data.offset = v }
func (m *TLmessageEntityItalic) Getoffset() int32                    { return m.data.offset }
func (m *TLmessageEntityItalic) Setlength(v int32)                   { m.data.length = v }
func (m *TLmessageEntityItalic) Getlength() int32                    { return m.data.length }
func (m *TLmessageEntityCode) Setoffset(v int32)                     { m.data.offset = v }
func (m *TLmessageEntityCode) Getoffset() int32                      { return m.data.offset }
func (m *TLmessageEntityCode) Setlength(v int32)                     { m.data.length = v }
func (m *TLmessageEntityCode) Getlength() int32                      { return m.data.length }
func (m *TLmessageEntityPre) Setoffset(v int32)                      { m.data.offset = v }
func (m *TLmessageEntityPre) Getoffset() int32                       { return m.data.offset }
func (m *TLmessageEntityPre) Setlength(v int32)                      { m.data.length = v }
func (m *TLmessageEntityPre) Getlength() int32                       { return m.data.length }
func (m *TLmessageEntityPre) Setlanguage(v string)                   { m.data.language = v }
func (m *TLmessageEntityPre) Getlanguage() string                    { return m.data.language }
func (m *TLmessageEntityTextUrl) Setoffset(v int32)                  { m.data.offset = v }
func (m *TLmessageEntityTextUrl) Getoffset() int32                   { return m.data.offset }
func (m *TLmessageEntityTextUrl) Setlength(v int32)                  { m.data.length = v }
func (m *TLmessageEntityTextUrl) Getlength() int32                   { return m.data.length }
func (m *TLmessageEntityTextUrl) Seturl(v string)                    { m.data.url = v }
func (m *TLmessageEntityTextUrl) Geturl() string                     { return m.data.url }
func (m *TLmessageEntityMentionName) Setoffset(v int32)              { m.data.offset = v }
func (m *TLmessageEntityMentionName) Getoffset() int32               { return m.data.offset }
func (m *TLmessageEntityMentionName) Setlength(v int32)              { m.data.length = v }
func (m *TLmessageEntityMentionName) Getlength() int32               { return m.data.length }
func (m *TLmessageEntityMentionName) Setuser_id(v int32)             { m.data.user_id = v }
func (m *TLmessageEntityMentionName) Getuser_id() int32              { return m.data.user_id }
func (m *TLinputMessageEntityMentionName) Setoffset(v int32)         { m.data.offset = v }
func (m *TLinputMessageEntityMentionName) Getoffset() int32          { return m.data.offset }
func (m *TLinputMessageEntityMentionName) Setlength(v int32)         { m.data.length = v }
func (m *TLinputMessageEntityMentionName) Getlength() int32          { return m.data.length }
func (m *TLinputMessageEntityMentionName) Setuser_id_6(v *InputUser) { m.data.user_id_6 = v }
func (m *TLinputMessageEntityMentionName) Getuser_id_6() *InputUser  { return m.data.user_id_6 }
func (m *TLmessageEntityPhone) Setoffset(v int32)                    { m.data.offset = v }
func (m *TLmessageEntityPhone) Getoffset() int32                     { return m.data.offset }
func (m *TLmessageEntityPhone) Setlength(v int32)                    { m.data.length = v }
func (m *TLmessageEntityPhone) Getlength() int32                     { return m.data.length }
func (m *TLmessageEntityCashtag) Setoffset(v int32)                  { m.data.offset = v }
func (m *TLmessageEntityCashtag) Getoffset() int32                   { return m.data.offset }
func (m *TLmessageEntityCashtag) Setlength(v int32)                  { m.data.length = v }
func (m *TLmessageEntityCashtag) Getlength() int32                   { return m.data.length }
func (m *TLmessageEntityUnderline) Setoffset(v int32)                { m.data.offset = v }
func (m *TLmessageEntityUnderline) Getoffset() int32                 { return m.data.offset }
func (m *TLmessageEntityUnderline) Setlength(v int32)                { m.data.length = v }
func (m *TLmessageEntityUnderline) Getlength() int32                 { return m.data.length }
func (m *TLmessageEntityStrike) Setoffset(v int32)                   { m.data.offset = v }
func (m *TLmessageEntityStrike) Getoffset() int32                    { return m.data.offset }
func (m *TLmessageEntityStrike) Setlength(v int32)                   { m.data.length = v }
func (m *TLmessageEntityStrike) Getlength() int32                    { return m.data.length }
func (m *TLmessageEntityBlockquote) Setoffset(v int32)               { m.data.offset = v }
func (m *TLmessageEntityBlockquote) Getoffset() int32                { return m.data.offset }
func (m *TLmessageEntityBlockquote) Setlength(v int32)               { m.data.length = v }
func (m *TLmessageEntityBlockquote) Getlength() int32                { return m.data.length }
func (m *TLmessageEntityBankCard) Setoffset(v int32)                 { m.data.offset = v }
func (m *TLmessageEntityBankCard) Getoffset() int32                  { return m.data.offset }
func (m *TLmessageEntityBankCard) Setlength(v int32)                 { m.data.length = v }
func (m *TLmessageEntityBankCard) Getlength() int32                  { return m.data.length }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_BotResults
// messages_BotResults <--
// + TLmessages_botResults
//
// Constructors:Type:messages_BotResults
type messages_BotResults struct {
	constructor int32
	data        *messages_BotResults_Data
}

// Constructors:Type:Data:messages_BotResults
type messages_BotResults_Data struct {
	gallery     bool
	query_id    int64
	next_offset string
	switch_pm   *InlineBotSwitchPM
	results     []*BotInlineResult
	cache_time  int32
	users       []*User
}

// Constructors:Predicate:messages_botResults
type TLmessages_botResults struct {
	data *messages_BotResults_Data
}

// Constructors:New:messages_botResults
func NewTLmessages_botResults() *TLmessages_botResults {
	return &TLmessages_botResults{data: &messages_BotResults_Data{}}
}
func (m *TLmessages_botResults) Setgallery(v bool)                 { m.data.gallery = v }
func (m *TLmessages_botResults) Getgallery() bool                  { return m.data.gallery }
func (m *TLmessages_botResults) Setquery_id(v int64)               { m.data.query_id = v }
func (m *TLmessages_botResults) Getquery_id() int64                { return m.data.query_id }
func (m *TLmessages_botResults) Setnext_offset(v string)           { m.data.next_offset = v }
func (m *TLmessages_botResults) Getnext_offset() string            { return m.data.next_offset }
func (m *TLmessages_botResults) Setswitch_pm(v *InlineBotSwitchPM) { m.data.switch_pm = v }
func (m *TLmessages_botResults) Getswitch_pm() *InlineBotSwitchPM  { return m.data.switch_pm }
func (m *TLmessages_botResults) Setresults(v []*BotInlineResult)   { m.data.results = v }
func (m *TLmessages_botResults) Getresults() []*BotInlineResult    { return m.data.results }
func (m *TLmessages_botResults) Setcache_time(v int32)             { m.data.cache_time = v }
func (m *TLmessages_botResults) Getcache_time() int32              { return m.data.cache_time }
func (m *TLmessages_botResults) Setusers(v []*User)                { m.data.users = v }
func (m *TLmessages_botResults) Getusers() []*User                 { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:StatsGroupTopPoster
// StatsGroupTopPoster <--
// + TLstatsGroupTopPoster
//
// Constructors:Type:StatsGroupTopPoster
type StatsGroupTopPoster struct {
	constructor int32
	data        *StatsGroupTopPoster_Data
}

// Constructors:Type:Data:StatsGroupTopPoster
type StatsGroupTopPoster_Data struct {
	user_id   int32
	messages  int32
	avg_chars int32
}

// Constructors:Predicate:statsGroupTopPoster
type TLstatsGroupTopPoster struct {
	data *StatsGroupTopPoster_Data
}

// Constructors:New:statsGroupTopPoster
func NewTLstatsGroupTopPoster() *TLstatsGroupTopPoster {
	return &TLstatsGroupTopPoster{data: &StatsGroupTopPoster_Data{}}
}
func (m *TLstatsGroupTopPoster) Setuser_id(v int32)   { m.data.user_id = v }
func (m *TLstatsGroupTopPoster) Getuser_id() int32    { return m.data.user_id }
func (m *TLstatsGroupTopPoster) Setmessages(v int32)  { m.data.messages = v }
func (m *TLstatsGroupTopPoster) Getmessages() int32   { return m.data.messages }
func (m *TLstatsGroupTopPoster) Setavg_chars(v int32) { m.data.avg_chars = v }
func (m *TLstatsGroupTopPoster) Getavg_chars() int32  { return m.data.avg_chars }

///////////////////////////////////////////////////////////////////////////////
// Constructors:StickerSet
// StickerSet <--
// + TLstickerSet
//
// Constructors:Type:StickerSet
type StickerSet struct {
	constructor int32
	data        *StickerSet_Data
}

// Constructors:Type:Data:StickerSet
type StickerSet_Data struct {
	archived       bool
	official       bool
	masks          bool
	animated       bool
	installed_date int32
	id             int64
	access_hash    int64
	title          string
	short_name     string
	thumb          *PhotoSize
	thumb_dc_id    int32
	count          int32
	hash           int32
}

// Constructors:Predicate:stickerSet
type TLstickerSet struct {
	data *StickerSet_Data
}

// Constructors:New:stickerSet
func NewTLstickerSet() *TLstickerSet {
	return &TLstickerSet{data: &StickerSet_Data{}}
}
func (m *TLstickerSet) Setarchived(v bool)        { m.data.archived = v }
func (m *TLstickerSet) Getarchived() bool         { return m.data.archived }
func (m *TLstickerSet) Setofficial(v bool)        { m.data.official = v }
func (m *TLstickerSet) Getofficial() bool         { return m.data.official }
func (m *TLstickerSet) Setmasks(v bool)           { m.data.masks = v }
func (m *TLstickerSet) Getmasks() bool            { return m.data.masks }
func (m *TLstickerSet) Setanimated(v bool)        { m.data.animated = v }
func (m *TLstickerSet) Getanimated() bool         { return m.data.animated }
func (m *TLstickerSet) Setinstalled_date(v int32) { m.data.installed_date = v }
func (m *TLstickerSet) Getinstalled_date() int32  { return m.data.installed_date }
func (m *TLstickerSet) Setid(v int64)             { m.data.id = v }
func (m *TLstickerSet) Getid() int64              { return m.data.id }
func (m *TLstickerSet) Setaccess_hash(v int64)    { m.data.access_hash = v }
func (m *TLstickerSet) Getaccess_hash() int64     { return m.data.access_hash }
func (m *TLstickerSet) Settitle(v string)         { m.data.title = v }
func (m *TLstickerSet) Gettitle() string          { return m.data.title }
func (m *TLstickerSet) Setshort_name(v string)    { m.data.short_name = v }
func (m *TLstickerSet) Getshort_name() string     { return m.data.short_name }
func (m *TLstickerSet) Setthumb(v *PhotoSize)     { m.data.thumb = v }
func (m *TLstickerSet) Getthumb() *PhotoSize      { return m.data.thumb }
func (m *TLstickerSet) Setthumb_dc_id(v int32)    { m.data.thumb_dc_id = v }
func (m *TLstickerSet) Getthumb_dc_id() int32     { return m.data.thumb_dc_id }
func (m *TLstickerSet) Setcount(v int32)          { m.data.count = v }
func (m *TLstickerSet) Getcount() int32           { return m.data.count }
func (m *TLstickerSet) Sethash(v int32)           { m.data.hash = v }
func (m *TLstickerSet) Gethash() int32            { return m.data.hash }

///////////////////////////////////////////////////////////////////////////////
// Constructors:BotInlineResult
// BotInlineResult <--
// + TLbotInlineResult
// + TLbotInlineMediaResult
//
// Constructors:Type:BotInlineResult
type BotInlineResult struct {
	constructor int32
	data        *BotInlineResult_Data
}

// Constructors:Type:Data:BotInlineResult
type BotInlineResult_Data struct {
	id           string
	type_key     string
	title        string
	description  string
	url          string
	thumb        *WebDocument
	content      *WebDocument
	send_message *BotInlineMessage
	photo        *Photo
	document     *Document
}

// Constructors:Predicate:botInlineResult
type TLbotInlineResult struct {
	data *BotInlineResult_Data
}

// Constructors:New:botInlineResult
func NewTLbotInlineResult() *TLbotInlineResult {
	return &TLbotInlineResult{data: &BotInlineResult_Data{}}
}

// Constructors:Predicate:botInlineMediaResult
type TLbotInlineMediaResult struct {
	data *BotInlineResult_Data
}

// Constructors:New:botInlineMediaResult
func NewTLbotInlineMediaResult() *TLbotInlineMediaResult {
	return &TLbotInlineMediaResult{data: &BotInlineResult_Data{}}
}
func (m *TLbotInlineResult) Setid(v string)                           { m.data.id = v }
func (m *TLbotInlineResult) Getid() string                            { return m.data.id }
func (m *TLbotInlineResult) Settype_key(v string)                     { m.data.type_key = v }
func (m *TLbotInlineResult) Gettype_key() string                      { return m.data.type_key }
func (m *TLbotInlineResult) Settitle(v string)                        { m.data.title = v }
func (m *TLbotInlineResult) Gettitle() string                         { return m.data.title }
func (m *TLbotInlineResult) Setdescription(v string)                  { m.data.description = v }
func (m *TLbotInlineResult) Getdescription() string                   { return m.data.description }
func (m *TLbotInlineResult) Seturl(v string)                          { m.data.url = v }
func (m *TLbotInlineResult) Geturl() string                           { return m.data.url }
func (m *TLbotInlineResult) Setthumb(v *WebDocument)                  { m.data.thumb = v }
func (m *TLbotInlineResult) Getthumb() *WebDocument                   { return m.data.thumb }
func (m *TLbotInlineResult) Setcontent(v *WebDocument)                { m.data.content = v }
func (m *TLbotInlineResult) Getcontent() *WebDocument                 { return m.data.content }
func (m *TLbotInlineResult) Setsend_message(v *BotInlineMessage)      { m.data.send_message = v }
func (m *TLbotInlineResult) Getsend_message() *BotInlineMessage       { return m.data.send_message }
func (m *TLbotInlineMediaResult) Setid(v string)                      { m.data.id = v }
func (m *TLbotInlineMediaResult) Getid() string                       { return m.data.id }
func (m *TLbotInlineMediaResult) Settype_key(v string)                { m.data.type_key = v }
func (m *TLbotInlineMediaResult) Gettype_key() string                 { return m.data.type_key }
func (m *TLbotInlineMediaResult) Setphoto(v *Photo)                   { m.data.photo = v }
func (m *TLbotInlineMediaResult) Getphoto() *Photo                    { return m.data.photo }
func (m *TLbotInlineMediaResult) Setdocument(v *Document)             { m.data.document = v }
func (m *TLbotInlineMediaResult) Getdocument() *Document              { return m.data.document }
func (m *TLbotInlineMediaResult) Settitle(v string)                   { m.data.title = v }
func (m *TLbotInlineMediaResult) Gettitle() string                    { return m.data.title }
func (m *TLbotInlineMediaResult) Setdescription(v string)             { m.data.description = v }
func (m *TLbotInlineMediaResult) Getdescription() string              { return m.data.description }
func (m *TLbotInlineMediaResult) Setsend_message(v *BotInlineMessage) { m.data.send_message = v }
func (m *TLbotInlineMediaResult) Getsend_message() *BotInlineMessage  { return m.data.send_message }

///////////////////////////////////////////////////////////////////////////////
// Constructors:BaseTheme
// BaseTheme <--
// + TLbaseThemeClassic
// + TLbaseThemeDay
// + TLbaseThemeNight
// + TLbaseThemeTinted
// + TLbaseThemeArctic
//
// Constructors:Type:BaseTheme
type BaseTheme struct {
	constructor int32
	data        *BaseTheme_Data
}

// Constructors:Type:Data:BaseTheme
type BaseTheme_Data struct {
}

// Constructors:Predicate:baseThemeClassic
type TLbaseThemeClassic struct {
	data *BaseTheme_Data
}

// Constructors:New:baseThemeClassic
func NewTLbaseThemeClassic() *TLbaseThemeClassic {
	return &TLbaseThemeClassic{data: &BaseTheme_Data{}}
}

// Constructors:Predicate:baseThemeDay
type TLbaseThemeDay struct {
	data *BaseTheme_Data
}

// Constructors:New:baseThemeDay
func NewTLbaseThemeDay() *TLbaseThemeDay {
	return &TLbaseThemeDay{data: &BaseTheme_Data{}}
}

// Constructors:Predicate:baseThemeNight
type TLbaseThemeNight struct {
	data *BaseTheme_Data
}

// Constructors:New:baseThemeNight
func NewTLbaseThemeNight() *TLbaseThemeNight {
	return &TLbaseThemeNight{data: &BaseTheme_Data{}}
}

// Constructors:Predicate:baseThemeTinted
type TLbaseThemeTinted struct {
	data *BaseTheme_Data
}

// Constructors:New:baseThemeTinted
func NewTLbaseThemeTinted() *TLbaseThemeTinted {
	return &TLbaseThemeTinted{data: &BaseTheme_Data{}}
}

// Constructors:Predicate:baseThemeArctic
type TLbaseThemeArctic struct {
	data *BaseTheme_Data
}

// Constructors:New:baseThemeArctic
func NewTLbaseThemeArctic() *TLbaseThemeArctic {
	return &TLbaseThemeArctic{data: &BaseTheme_Data{}}
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:TopPeerCategoryPeers
// TopPeerCategoryPeers <--
// + TLtopPeerCategoryPeers
//
// Constructors:Type:TopPeerCategoryPeers
type TopPeerCategoryPeers struct {
	constructor int32
	data        *TopPeerCategoryPeers_Data
}

// Constructors:Type:Data:TopPeerCategoryPeers
type TopPeerCategoryPeers_Data struct {
	category *TopPeerCategory
	count    int32
	peers    []*TopPeer
}

// Constructors:Predicate:topPeerCategoryPeers
type TLtopPeerCategoryPeers struct {
	data *TopPeerCategoryPeers_Data
}

// Constructors:New:topPeerCategoryPeers
func NewTLtopPeerCategoryPeers() *TLtopPeerCategoryPeers {
	return &TLtopPeerCategoryPeers{data: &TopPeerCategoryPeers_Data{}}
}
func (m *TLtopPeerCategoryPeers) Setcategory(v *TopPeerCategory) { m.data.category = v }
func (m *TLtopPeerCategoryPeers) Getcategory() *TopPeerCategory  { return m.data.category }
func (m *TLtopPeerCategoryPeers) Setcount(v int32)               { m.data.count = v }
func (m *TLtopPeerCategoryPeers) Getcount() int32                { return m.data.count }
func (m *TLtopPeerCategoryPeers) Setpeers(v []*TopPeer)          { m.data.peers = v }
func (m *TLtopPeerCategoryPeers) Getpeers() []*TopPeer           { return m.data.peers }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_VotesList
// messages_VotesList <--
// + TLmessages_votesList
//
// Constructors:Type:messages_VotesList
type messages_VotesList struct {
	constructor int32
	data        *messages_VotesList_Data
}

// Constructors:Type:Data:messages_VotesList
type messages_VotesList_Data struct {
	count       int32
	votes       []*MessageUserVote
	users       []*User
	next_offset string
}

// Constructors:Predicate:messages_votesList
type TLmessages_votesList struct {
	data *messages_VotesList_Data
}

// Constructors:New:messages_votesList
func NewTLmessages_votesList() *TLmessages_votesList {
	return &TLmessages_votesList{data: &messages_VotesList_Data{}}
}
func (m *TLmessages_votesList) Setcount(v int32)              { m.data.count = v }
func (m *TLmessages_votesList) Getcount() int32               { return m.data.count }
func (m *TLmessages_votesList) Setvotes(v []*MessageUserVote) { m.data.votes = v }
func (m *TLmessages_votesList) Getvotes() []*MessageUserVote  { return m.data.votes }
func (m *TLmessages_votesList) Setusers(v []*User)            { m.data.users = v }
func (m *TLmessages_votesList) Getusers() []*User             { return m.data.users }
func (m *TLmessages_votesList) Setnext_offset(v string)       { m.data.next_offset = v }
func (m *TLmessages_votesList) Getnext_offset() string        { return m.data.next_offset }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PageTableRow
// PageTableRow <--
// + TLpageTableRow
//
// Constructors:Type:PageTableRow
type PageTableRow struct {
	constructor int32
	data        *PageTableRow_Data
}

// Constructors:Type:Data:PageTableRow
type PageTableRow_Data struct {
	cells []*PageTableCell
}

// Constructors:Predicate:pageTableRow
type TLpageTableRow struct {
	data *PageTableRow_Data
}

// Constructors:New:pageTableRow
func NewTLpageTableRow() *TLpageTableRow {
	return &TLpageTableRow{data: &PageTableRow_Data{}}
}
func (m *TLpageTableRow) Setcells(v []*PageTableCell) { m.data.cells = v }
func (m *TLpageTableRow) Getcells() []*PageTableCell  { return m.data.cells }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PollAnswerVoters
// PollAnswerVoters <--
// + TLpollAnswerVoters
//
// Constructors:Type:PollAnswerVoters
type PollAnswerVoters struct {
	constructor int32
	data        *PollAnswerVoters_Data
}

// Constructors:Type:Data:PollAnswerVoters
type PollAnswerVoters_Data struct {
	chosen  bool
	correct bool
	option  []byte
	voters  int32
}

// Constructors:Predicate:pollAnswerVoters
type TLpollAnswerVoters struct {
	data *PollAnswerVoters_Data
}

// Constructors:New:pollAnswerVoters
func NewTLpollAnswerVoters() *TLpollAnswerVoters {
	return &TLpollAnswerVoters{data: &PollAnswerVoters_Data{}}
}
func (m *TLpollAnswerVoters) Setchosen(v bool)   { m.data.chosen = v }
func (m *TLpollAnswerVoters) Getchosen() bool    { return m.data.chosen }
func (m *TLpollAnswerVoters) Setcorrect(v bool)  { m.data.correct = v }
func (m *TLpollAnswerVoters) Getcorrect() bool   { return m.data.correct }
func (m *TLpollAnswerVoters) Setoption(v []byte) { m.data.option = v }
func (m *TLpollAnswerVoters) Getoption() []byte  { return m.data.option }
func (m *TLpollAnswerVoters) Setvoters(v int32)  { m.data.voters = v }
func (m *TLpollAnswerVoters) Getvoters() int32   { return m.data.voters }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_SentEncryptedMessage
// messages_SentEncryptedMessage <--
// + TLmessages_sentEncryptedMessage
// + TLmessages_sentEncryptedFile
//
// Constructors:Type:messages_SentEncryptedMessage
type messages_SentEncryptedMessage struct {
	constructor int32
	data        *messages_SentEncryptedMessage_Data
}

// Constructors:Type:Data:messages_SentEncryptedMessage
type messages_SentEncryptedMessage_Data struct {
	date int32
	file *EncryptedFile
}

// Constructors:Predicate:messages_sentEncryptedMessage
type TLmessages_sentEncryptedMessage struct {
	data *messages_SentEncryptedMessage_Data
}

// Constructors:New:messages_sentEncryptedMessage
func NewTLmessages_sentEncryptedMessage() *TLmessages_sentEncryptedMessage {
	return &TLmessages_sentEncryptedMessage{data: &messages_SentEncryptedMessage_Data{}}
}

// Constructors:Predicate:messages_sentEncryptedFile
type TLmessages_sentEncryptedFile struct {
	data *messages_SentEncryptedMessage_Data
}

// Constructors:New:messages_sentEncryptedFile
func NewTLmessages_sentEncryptedFile() *TLmessages_sentEncryptedFile {
	return &TLmessages_sentEncryptedFile{data: &messages_SentEncryptedMessage_Data{}}
}
func (m *TLmessages_sentEncryptedMessage) Setdate(v int32)       { m.data.date = v }
func (m *TLmessages_sentEncryptedMessage) Getdate() int32        { return m.data.date }
func (m *TLmessages_sentEncryptedFile) Setdate(v int32)          { m.data.date = v }
func (m *TLmessages_sentEncryptedFile) Getdate() int32           { return m.data.date }
func (m *TLmessages_sentEncryptedFile) Setfile(v *EncryptedFile) { m.data.file = v }
func (m *TLmessages_sentEncryptedFile) Getfile() *EncryptedFile  { return m.data.file }

///////////////////////////////////////////////////////////////////////////////
// Constructors:Peer
// Peer <--
// + TLpeerUser
// + TLpeerChat
// + TLpeerChannel
//
// Constructors:Type:Peer
type Peer struct {
	constructor int32
	data        *Peer_Data
}

// Constructors:Type:Data:Peer
type Peer_Data struct {
	user_id    int32
	chat_id    int32
	channel_id int32
}

// Constructors:Predicate:peerUser
type TLpeerUser struct {
	data *Peer_Data
}

// Constructors:New:peerUser
func NewTLpeerUser() *TLpeerUser {
	return &TLpeerUser{data: &Peer_Data{}}
}

// Constructors:Predicate:peerChat
type TLpeerChat struct {
	data *Peer_Data
}

// Constructors:New:peerChat
func NewTLpeerChat() *TLpeerChat {
	return &TLpeerChat{data: &Peer_Data{}}
}

// Constructors:Predicate:peerChannel
type TLpeerChannel struct {
	data *Peer_Data
}

// Constructors:New:peerChannel
func NewTLpeerChannel() *TLpeerChannel {
	return &TLpeerChannel{data: &Peer_Data{}}
}
func (m *TLpeerUser) Setuser_id(v int32)       { m.data.user_id = v }
func (m *TLpeerUser) Getuser_id() int32        { return m.data.user_id }
func (m *TLpeerChat) Setchat_id(v int32)       { m.data.chat_id = v }
func (m *TLpeerChat) Getchat_id() int32        { return m.data.chat_id }
func (m *TLpeerChannel) Setchannel_id(v int32) { m.data.channel_id = v }
func (m *TLpeerChannel) Getchannel_id() int32  { return m.data.channel_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:SecureValue
// SecureValue <--
// + TLsecureValue
//
// Constructors:Type:SecureValue
type SecureValue struct {
	constructor int32
	data        *SecureValue_Data
}

// Constructors:Type:Data:SecureValue
type SecureValue_Data struct {
	type_key     *SecureValueType
	data         *SecureData
	front_side   *SecureFile
	reverse_side *SecureFile
	selfie       *SecureFile
	translation  []*SecureFile
	files        []*SecureFile
	plain_data   *SecurePlainData
	hash         []byte
}

// Constructors:Predicate:secureValue
type TLsecureValue struct {
	data *SecureValue_Data
}

// Constructors:New:secureValue
func NewTLsecureValue() *TLsecureValue {
	return &TLsecureValue{data: &SecureValue_Data{}}
}
func (m *TLsecureValue) Settype_key(v *SecureValueType)   { m.data.type_key = v }
func (m *TLsecureValue) Gettype_key() *SecureValueType    { return m.data.type_key }
func (m *TLsecureValue) Setdata(v *SecureData)            { m.data.data = v }
func (m *TLsecureValue) Getdata() *SecureData             { return m.data.data }
func (m *TLsecureValue) Setfront_side(v *SecureFile)      { m.data.front_side = v }
func (m *TLsecureValue) Getfront_side() *SecureFile       { return m.data.front_side }
func (m *TLsecureValue) Setreverse_side(v *SecureFile)    { m.data.reverse_side = v }
func (m *TLsecureValue) Getreverse_side() *SecureFile     { return m.data.reverse_side }
func (m *TLsecureValue) Setselfie(v *SecureFile)          { m.data.selfie = v }
func (m *TLsecureValue) Getselfie() *SecureFile           { return m.data.selfie }
func (m *TLsecureValue) Settranslation(v []*SecureFile)   { m.data.translation = v }
func (m *TLsecureValue) Gettranslation() []*SecureFile    { return m.data.translation }
func (m *TLsecureValue) Setfiles(v []*SecureFile)         { m.data.files = v }
func (m *TLsecureValue) Getfiles() []*SecureFile          { return m.data.files }
func (m *TLsecureValue) Setplain_data(v *SecurePlainData) { m.data.plain_data = v }
func (m *TLsecureValue) Getplain_data() *SecurePlainData  { return m.data.plain_data }
func (m *TLsecureValue) Sethash(v []byte)                 { m.data.hash = v }
func (m *TLsecureValue) Gethash() []byte                  { return m.data.hash }

///////////////////////////////////////////////////////////////////////////////
// Constructors:contacts_Found
// contacts_Found <--
// + TLcontacts_found
//
// Constructors:Type:contacts_Found
type contacts_Found struct {
	constructor int32
	data        *contacts_Found_Data
}

// Constructors:Type:Data:contacts_Found
type contacts_Found_Data struct {
	my_results []*Peer
	results    []*Peer
	chats      []*Chat
	users      []*User
}

// Constructors:Predicate:contacts_found
type TLcontacts_found struct {
	data *contacts_Found_Data
}

// Constructors:New:contacts_found
func NewTLcontacts_found() *TLcontacts_found {
	return &TLcontacts_found{data: &contacts_Found_Data{}}
}
func (m *TLcontacts_found) Setmy_results(v []*Peer) { m.data.my_results = v }
func (m *TLcontacts_found) Getmy_results() []*Peer  { return m.data.my_results }
func (m *TLcontacts_found) Setresults(v []*Peer)    { m.data.results = v }
func (m *TLcontacts_found) Getresults() []*Peer     { return m.data.results }
func (m *TLcontacts_found) Setchats(v []*Chat)      { m.data.chats = v }
func (m *TLcontacts_found) Getchats() []*Chat       { return m.data.chats }
func (m *TLcontacts_found) Setusers(v []*User)      { m.data.users = v }
func (m *TLcontacts_found) Getusers() []*User       { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:upload_CdnFile
// upload_CdnFile <--
// + TLupload_cdnFileReuploadNeeded
// + TLupload_cdnFile
//
// Constructors:Type:upload_CdnFile
type upload_CdnFile struct {
	constructor int32
	data        *upload_CdnFile_Data
}

// Constructors:Type:Data:upload_CdnFile
type upload_CdnFile_Data struct {
	request_token []byte
	bytes         []byte
}

// Constructors:Predicate:upload_cdnFileReuploadNeeded
type TLupload_cdnFileReuploadNeeded struct {
	data *upload_CdnFile_Data
}

// Constructors:New:upload_cdnFileReuploadNeeded
func NewTLupload_cdnFileReuploadNeeded() *TLupload_cdnFileReuploadNeeded {
	return &TLupload_cdnFileReuploadNeeded{data: &upload_CdnFile_Data{}}
}

// Constructors:Predicate:upload_cdnFile
type TLupload_cdnFile struct {
	data *upload_CdnFile_Data
}

// Constructors:New:upload_cdnFile
func NewTLupload_cdnFile() *TLupload_cdnFile {
	return &TLupload_cdnFile{data: &upload_CdnFile_Data{}}
}
func (m *TLupload_cdnFileReuploadNeeded) Setrequest_token(v []byte) { m.data.request_token = v }
func (m *TLupload_cdnFileReuploadNeeded) Getrequest_token() []byte  { return m.data.request_token }
func (m *TLupload_cdnFile) Setbytes(v []byte)                       { m.data.bytes = v }
func (m *TLupload_cdnFile) Getbytes() []byte                        { return m.data.bytes }

///////////////////////////////////////////////////////////////////////////////
// Constructors:CodeSettings
// CodeSettings <--
// + TLcodeSettings
//
// Constructors:Type:CodeSettings
type CodeSettings struct {
	constructor int32
	data        *CodeSettings_Data
}

// Constructors:Type:Data:CodeSettings
type CodeSettings_Data struct {
	allow_flashcall bool
	current_number  bool
	allow_app_hash  bool
}

// Constructors:Predicate:codeSettings
type TLcodeSettings struct {
	data *CodeSettings_Data
}

// Constructors:New:codeSettings
func NewTLcodeSettings() *TLcodeSettings {
	return &TLcodeSettings{data: &CodeSettings_Data{}}
}
func (m *TLcodeSettings) Setallow_flashcall(v bool) { m.data.allow_flashcall = v }
func (m *TLcodeSettings) Getallow_flashcall() bool  { return m.data.allow_flashcall }
func (m *TLcodeSettings) Setcurrent_number(v bool)  { m.data.current_number = v }
func (m *TLcodeSettings) Getcurrent_number() bool   { return m.data.current_number }
func (m *TLcodeSettings) Setallow_app_hash(v bool)  { m.data.allow_app_hash = v }
func (m *TLcodeSettings) Getallow_app_hash() bool   { return m.data.allow_app_hash }

///////////////////////////////////////////////////////////////////////////////
// Constructors:auth_ExportedAuthorization
// auth_ExportedAuthorization <--
// + TLauth_exportedAuthorization
//
// Constructors:Type:auth_ExportedAuthorization
type auth_ExportedAuthorization struct {
	constructor int32
	data        *auth_ExportedAuthorization_Data
}

// Constructors:Type:Data:auth_ExportedAuthorization
type auth_ExportedAuthorization_Data struct {
	id    int32
	bytes []byte
}

// Constructors:Predicate:auth_exportedAuthorization
type TLauth_exportedAuthorization struct {
	data *auth_ExportedAuthorization_Data
}

// Constructors:New:auth_exportedAuthorization
func NewTLauth_exportedAuthorization() *TLauth_exportedAuthorization {
	return &TLauth_exportedAuthorization{data: &auth_ExportedAuthorization_Data{}}
}
func (m *TLauth_exportedAuthorization) Setid(v int32)     { m.data.id = v }
func (m *TLauth_exportedAuthorization) Getid() int32      { return m.data.id }
func (m *TLauth_exportedAuthorization) Setbytes(v []byte) { m.data.bytes = v }
func (m *TLauth_exportedAuthorization) Getbytes() []byte  { return m.data.bytes }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PaymentCharge
// PaymentCharge <--
// + TLpaymentCharge
//
// Constructors:Type:PaymentCharge
type PaymentCharge struct {
	constructor int32
	data        *PaymentCharge_Data
}

// Constructors:Type:Data:PaymentCharge
type PaymentCharge_Data struct {
	id                 string
	provider_charge_id string
}

// Constructors:Predicate:paymentCharge
type TLpaymentCharge struct {
	data *PaymentCharge_Data
}

// Constructors:New:paymentCharge
func NewTLpaymentCharge() *TLpaymentCharge {
	return &TLpaymentCharge{data: &PaymentCharge_Data{}}
}
func (m *TLpaymentCharge) Setid(v string)                 { m.data.id = v }
func (m *TLpaymentCharge) Getid() string                  { return m.data.id }
func (m *TLpaymentCharge) Setprovider_charge_id(v string) { m.data.provider_charge_id = v }
func (m *TLpaymentCharge) Getprovider_charge_id() string  { return m.data.provider_charge_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputPrivacyRule
// InputPrivacyRule <--
// + TLinputPrivacyValueAllowContacts
// + TLinputPrivacyValueAllowAll
// + TLinputPrivacyValueAllowUsers
// + TLinputPrivacyValueDisallowContacts
// + TLinputPrivacyValueDisallowAll
// + TLinputPrivacyValueDisallowUsers
// + TLinputPrivacyValueAllowChatParticipants
// + TLinputPrivacyValueDisallowChatParticipants
//
// Constructors:Type:InputPrivacyRule
type InputPrivacyRule struct {
	constructor int32
	data        *InputPrivacyRule_Data
}

// Constructors:Type:Data:InputPrivacyRule
type InputPrivacyRule_Data struct {
	users []*InputUser
	chats []int32
}

// Constructors:Predicate:inputPrivacyValueAllowContacts
type TLinputPrivacyValueAllowContacts struct {
	data *InputPrivacyRule_Data
}

// Constructors:New:inputPrivacyValueAllowContacts
func NewTLinputPrivacyValueAllowContacts() *TLinputPrivacyValueAllowContacts {
	return &TLinputPrivacyValueAllowContacts{data: &InputPrivacyRule_Data{}}
}

// Constructors:Predicate:inputPrivacyValueAllowAll
type TLinputPrivacyValueAllowAll struct {
	data *InputPrivacyRule_Data
}

// Constructors:New:inputPrivacyValueAllowAll
func NewTLinputPrivacyValueAllowAll() *TLinputPrivacyValueAllowAll {
	return &TLinputPrivacyValueAllowAll{data: &InputPrivacyRule_Data{}}
}

// Constructors:Predicate:inputPrivacyValueAllowUsers
type TLinputPrivacyValueAllowUsers struct {
	data *InputPrivacyRule_Data
}

// Constructors:New:inputPrivacyValueAllowUsers
func NewTLinputPrivacyValueAllowUsers() *TLinputPrivacyValueAllowUsers {
	return &TLinputPrivacyValueAllowUsers{data: &InputPrivacyRule_Data{}}
}

// Constructors:Predicate:inputPrivacyValueDisallowContacts
type TLinputPrivacyValueDisallowContacts struct {
	data *InputPrivacyRule_Data
}

// Constructors:New:inputPrivacyValueDisallowContacts
func NewTLinputPrivacyValueDisallowContacts() *TLinputPrivacyValueDisallowContacts {
	return &TLinputPrivacyValueDisallowContacts{data: &InputPrivacyRule_Data{}}
}

// Constructors:Predicate:inputPrivacyValueDisallowAll
type TLinputPrivacyValueDisallowAll struct {
	data *InputPrivacyRule_Data
}

// Constructors:New:inputPrivacyValueDisallowAll
func NewTLinputPrivacyValueDisallowAll() *TLinputPrivacyValueDisallowAll {
	return &TLinputPrivacyValueDisallowAll{data: &InputPrivacyRule_Data{}}
}

// Constructors:Predicate:inputPrivacyValueDisallowUsers
type TLinputPrivacyValueDisallowUsers struct {
	data *InputPrivacyRule_Data
}

// Constructors:New:inputPrivacyValueDisallowUsers
func NewTLinputPrivacyValueDisallowUsers() *TLinputPrivacyValueDisallowUsers {
	return &TLinputPrivacyValueDisallowUsers{data: &InputPrivacyRule_Data{}}
}

// Constructors:Predicate:inputPrivacyValueAllowChatParticipants
type TLinputPrivacyValueAllowChatParticipants struct {
	data *InputPrivacyRule_Data
}

// Constructors:New:inputPrivacyValueAllowChatParticipants
func NewTLinputPrivacyValueAllowChatParticipants() *TLinputPrivacyValueAllowChatParticipants {
	return &TLinputPrivacyValueAllowChatParticipants{data: &InputPrivacyRule_Data{}}
}

// Constructors:Predicate:inputPrivacyValueDisallowChatParticipants
type TLinputPrivacyValueDisallowChatParticipants struct {
	data *InputPrivacyRule_Data
}

// Constructors:New:inputPrivacyValueDisallowChatParticipants
func NewTLinputPrivacyValueDisallowChatParticipants() *TLinputPrivacyValueDisallowChatParticipants {
	return &TLinputPrivacyValueDisallowChatParticipants{data: &InputPrivacyRule_Data{}}
}
func (m *TLinputPrivacyValueAllowUsers) Setusers(v []*InputUser)          { m.data.users = v }
func (m *TLinputPrivacyValueAllowUsers) Getusers() []*InputUser           { return m.data.users }
func (m *TLinputPrivacyValueDisallowUsers) Setusers(v []*InputUser)       { m.data.users = v }
func (m *TLinputPrivacyValueDisallowUsers) Getusers() []*InputUser        { return m.data.users }
func (m *TLinputPrivacyValueAllowChatParticipants) Setchats(v []int32)    { m.data.chats = v }
func (m *TLinputPrivacyValueAllowChatParticipants) Getchats() []int32     { return m.data.chats }
func (m *TLinputPrivacyValueDisallowChatParticipants) Setchats(v []int32) { m.data.chats = v }
func (m *TLinputPrivacyValueDisallowChatParticipants) Getchats() []int32  { return m.data.chats }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ChatInvite
// ChatInvite <--
// + TLchatInviteAlready
// + TLchatInvite
// + TLchatInvitePeek
//
// Constructors:Type:ChatInvite
type ChatInvite struct {
	constructor int32
	data        *ChatInvite_Data
}

// Constructors:Type:Data:ChatInvite
type ChatInvite_Data struct {
	chat               *Chat
	channel            bool
	broadcast          bool
	public             bool
	megagroup          bool
	title              string
	photo              *Photo
	participants_count int32
	participants       []*User
	expires            int32
}

// Constructors:Predicate:chatInviteAlready
type TLchatInviteAlready struct {
	data *ChatInvite_Data
}

// Constructors:New:chatInviteAlready
func NewTLchatInviteAlready() *TLchatInviteAlready {
	return &TLchatInviteAlready{data: &ChatInvite_Data{}}
}

// Constructors:Predicate:chatInvite
type TLchatInvite struct {
	data *ChatInvite_Data
}

// Constructors:New:chatInvite
func NewTLchatInvite() *TLchatInvite {
	return &TLchatInvite{data: &ChatInvite_Data{}}
}

// Constructors:Predicate:chatInvitePeek
type TLchatInvitePeek struct {
	data *ChatInvite_Data
}

// Constructors:New:chatInvitePeek
func NewTLchatInvitePeek() *TLchatInvitePeek {
	return &TLchatInvitePeek{data: &ChatInvite_Data{}}
}
func (m *TLchatInviteAlready) Setchat(v *Chat)        { m.data.chat = v }
func (m *TLchatInviteAlready) Getchat() *Chat         { return m.data.chat }
func (m *TLchatInvite) Setchannel(v bool)             { m.data.channel = v }
func (m *TLchatInvite) Getchannel() bool              { return m.data.channel }
func (m *TLchatInvite) Setbroadcast(v bool)           { m.data.broadcast = v }
func (m *TLchatInvite) Getbroadcast() bool            { return m.data.broadcast }
func (m *TLchatInvite) Setpublic(v bool)              { m.data.public = v }
func (m *TLchatInvite) Getpublic() bool               { return m.data.public }
func (m *TLchatInvite) Setmegagroup(v bool)           { m.data.megagroup = v }
func (m *TLchatInvite) Getmegagroup() bool            { return m.data.megagroup }
func (m *TLchatInvite) Settitle(v string)             { m.data.title = v }
func (m *TLchatInvite) Gettitle() string              { return m.data.title }
func (m *TLchatInvite) Setphoto(v *Photo)             { m.data.photo = v }
func (m *TLchatInvite) Getphoto() *Photo              { return m.data.photo }
func (m *TLchatInvite) Setparticipants_count(v int32) { m.data.participants_count = v }
func (m *TLchatInvite) Getparticipants_count() int32  { return m.data.participants_count }
func (m *TLchatInvite) Setparticipants(v []*User)     { m.data.participants = v }
func (m *TLchatInvite) Getparticipants() []*User      { return m.data.participants }
func (m *TLchatInvitePeek) Setchat(v *Chat)           { m.data.chat = v }
func (m *TLchatInvitePeek) Getchat() *Chat            { return m.data.chat }
func (m *TLchatInvitePeek) Setexpires(v int32)        { m.data.expires = v }
func (m *TLchatInvitePeek) Getexpires() int32         { return m.data.expires }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputPeer
// InputPeer <--
// + TLinputPeerEmpty
// + TLinputPeerSelf
// + TLinputPeerChat
// + TLinputPeerUser
// + TLinputPeerChannel
// + TLinputPeerUserFromMessage
// + TLinputPeerChannelFromMessage
//
// Constructors:Type:InputPeer
type InputPeer struct {
	constructor int32
	data        *InputPeer_Data
}

// Constructors:Type:Data:InputPeer
type InputPeer_Data struct {
	chat_id     int32
	user_id     int32
	access_hash int64
	channel_id  int32
	peer        *InputPeer
	msg_id      int32
}

// Constructors:Predicate:inputPeerEmpty
type TLinputPeerEmpty struct {
	data *InputPeer_Data
}

// Constructors:New:inputPeerEmpty
func NewTLinputPeerEmpty() *TLinputPeerEmpty {
	return &TLinputPeerEmpty{data: &InputPeer_Data{}}
}

// Constructors:Predicate:inputPeerSelf
type TLinputPeerSelf struct {
	data *InputPeer_Data
}

// Constructors:New:inputPeerSelf
func NewTLinputPeerSelf() *TLinputPeerSelf {
	return &TLinputPeerSelf{data: &InputPeer_Data{}}
}

// Constructors:Predicate:inputPeerChat
type TLinputPeerChat struct {
	data *InputPeer_Data
}

// Constructors:New:inputPeerChat
func NewTLinputPeerChat() *TLinputPeerChat {
	return &TLinputPeerChat{data: &InputPeer_Data{}}
}

// Constructors:Predicate:inputPeerUser
type TLinputPeerUser struct {
	data *InputPeer_Data
}

// Constructors:New:inputPeerUser
func NewTLinputPeerUser() *TLinputPeerUser {
	return &TLinputPeerUser{data: &InputPeer_Data{}}
}

// Constructors:Predicate:inputPeerChannel
type TLinputPeerChannel struct {
	data *InputPeer_Data
}

// Constructors:New:inputPeerChannel
func NewTLinputPeerChannel() *TLinputPeerChannel {
	return &TLinputPeerChannel{data: &InputPeer_Data{}}
}

// Constructors:Predicate:inputPeerUserFromMessage
type TLinputPeerUserFromMessage struct {
	data *InputPeer_Data
}

// Constructors:New:inputPeerUserFromMessage
func NewTLinputPeerUserFromMessage() *TLinputPeerUserFromMessage {
	return &TLinputPeerUserFromMessage{data: &InputPeer_Data{}}
}

// Constructors:Predicate:inputPeerChannelFromMessage
type TLinputPeerChannelFromMessage struct {
	data *InputPeer_Data
}

// Constructors:New:inputPeerChannelFromMessage
func NewTLinputPeerChannelFromMessage() *TLinputPeerChannelFromMessage {
	return &TLinputPeerChannelFromMessage{data: &InputPeer_Data{}}
}
func (m *TLinputPeerChat) Setchat_id(v int32)                  { m.data.chat_id = v }
func (m *TLinputPeerChat) Getchat_id() int32                   { return m.data.chat_id }
func (m *TLinputPeerUser) Setuser_id(v int32)                  { m.data.user_id = v }
func (m *TLinputPeerUser) Getuser_id() int32                   { return m.data.user_id }
func (m *TLinputPeerUser) Setaccess_hash(v int64)              { m.data.access_hash = v }
func (m *TLinputPeerUser) Getaccess_hash() int64               { return m.data.access_hash }
func (m *TLinputPeerChannel) Setchannel_id(v int32)            { m.data.channel_id = v }
func (m *TLinputPeerChannel) Getchannel_id() int32             { return m.data.channel_id }
func (m *TLinputPeerChannel) Setaccess_hash(v int64)           { m.data.access_hash = v }
func (m *TLinputPeerChannel) Getaccess_hash() int64            { return m.data.access_hash }
func (m *TLinputPeerUserFromMessage) Setpeer(v *InputPeer)     { m.data.peer = v }
func (m *TLinputPeerUserFromMessage) Getpeer() *InputPeer      { return m.data.peer }
func (m *TLinputPeerUserFromMessage) Setmsg_id(v int32)        { m.data.msg_id = v }
func (m *TLinputPeerUserFromMessage) Getmsg_id() int32         { return m.data.msg_id }
func (m *TLinputPeerUserFromMessage) Setuser_id(v int32)       { m.data.user_id = v }
func (m *TLinputPeerUserFromMessage) Getuser_id() int32        { return m.data.user_id }
func (m *TLinputPeerChannelFromMessage) Setpeer(v *InputPeer)  { m.data.peer = v }
func (m *TLinputPeerChannelFromMessage) Getpeer() *InputPeer   { return m.data.peer }
func (m *TLinputPeerChannelFromMessage) Setmsg_id(v int32)     { m.data.msg_id = v }
func (m *TLinputPeerChannelFromMessage) Getmsg_id() int32      { return m.data.msg_id }
func (m *TLinputPeerChannelFromMessage) Setchannel_id(v int32) { m.data.channel_id = v }
func (m *TLinputPeerChannelFromMessage) Getchannel_id() int32  { return m.data.channel_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:Update
// Update <--
// + TLupdateNewMessage
// + TLupdateMessageID
// + TLupdateDeleteMessages
// + TLupdateUserTyping
// + TLupdateChatUserTyping
// + TLupdateChatParticipants
// + TLupdateUserStatus
// + TLupdateUserName
// + TLupdateUserPhoto
// + TLupdateNewEncryptedMessage
// + TLupdateEncryptedChatTyping
// + TLupdateEncryption
// + TLupdateEncryptedMessagesRead
// + TLupdateChatParticipantAdd
// + TLupdateChatParticipantDelete
// + TLupdateDcOptions
// + TLupdateNotifySettings
// + TLupdateServiceNotification
// + TLupdatePrivacy
// + TLupdateUserPhone
// + TLupdateReadHistoryInbox
// + TLupdateReadHistoryOutbox
// + TLupdateWebPage
// + TLupdateReadMessagesContents
// + TLupdateChannelTooLong
// + TLupdateChannel
// + TLupdateNewChannelMessage
// + TLupdateReadChannelInbox
// + TLupdateDeleteChannelMessages
// + TLupdateChannelMessageViews
// + TLupdateChatParticipantAdmin
// + TLupdateNewStickerSet
// + TLupdateStickerSetsOrder
// + TLupdateStickerSets
// + TLupdateSavedGifs
// + TLupdateBotInlineQuery
// + TLupdateBotInlineSend
// + TLupdateEditChannelMessage
// + TLupdateBotCallbackQuery
// + TLupdateEditMessage
// + TLupdateInlineBotCallbackQuery
// + TLupdateReadChannelOutbox
// + TLupdateDraftMessage
// + TLupdateReadFeaturedStickers
// + TLupdateRecentStickers
// + TLupdateConfig
// + TLupdatePtsChanged
// + TLupdateChannelWebPage
// + TLupdateDialogPinned
// + TLupdatePinnedDialogs
// + TLupdateBotWebhookJSON
// + TLupdateBotWebhookJSONQuery
// + TLupdateBotShippingQuery
// + TLupdateBotPrecheckoutQuery
// + TLupdatePhoneCall
// + TLupdateLangPackTooLong
// + TLupdateLangPack
// + TLupdateFavedStickers
// + TLupdateChannelReadMessagesContents
// + TLupdateContactsReset
// + TLupdateChannelAvailableMessages
// + TLupdateDialogUnreadMark
// + TLupdateMessagePoll
// + TLupdateChatDefaultBannedRights
// + TLupdateFolderPeers
// + TLupdatePeerSettings
// + TLupdatePeerLocated
// + TLupdateNewScheduledMessage
// + TLupdateDeleteScheduledMessages
// + TLupdateTheme
// + TLupdateGeoLiveViewed
// + TLupdateLoginToken
// + TLupdateMessagePollVote
// + TLupdateDialogFilter
// + TLupdateDialogFilterOrder
// + TLupdateDialogFilters
// + TLupdatePhoneCallSignalingData
// + TLupdateChannelParticipant
// + TLupdateChannelMessageForwards
// + TLupdateReadChannelDiscussionInbox
// + TLupdateReadChannelDiscussionOutbox
// + TLupdatePeerBlocked
// + TLupdateChannelUserTyping
// + TLupdatePinnedMessages
// + TLupdatePinnedChannelMessages
//
// Constructors:Type:Update
type Update struct {
	constructor int32
	data        *Update_Data
}

// Constructors:Type:Data:Update
type Update_Data struct {
	message               *Message
	pts                   int32
	pts_count             int32
	id                    int32
	random_id             int64
	messages              []int32
	user_id               int32
	action                *SendMessageAction
	chat_id               int32
	participants          *ChatParticipants
	status                *UserStatus
	first_name            string
	last_name             string
	username              string
	date                  int32
	photo                 *UserProfilePhoto
	previous              *Bool
	message_18            *EncryptedMessage
	qts                   int32
	chat                  *EncryptedChat
	max_date              int32
	inviter_id            int32
	version               int32
	dc_options            []*DcOption
	peer                  *NotifyPeer
	notify_settings       *PeerNotifySettings
	popup                 bool
	inbox_date            int32
	type_key              string
	message_30            string
	media                 *MessageMedia
	entities              []*MessageEntity
	key                   *PrivacyKey
	rules                 []*PrivacyRule
	phone                 string
	folder_id             int32
	peer_37               *Peer
	max_id                int32
	still_unread_count    int32
	webpage               *WebPage
	channel_id            int32
	views                 int32
	is_admin              *Bool
	stickerset            *messages_StickerSet
	masks                 bool
	order                 []int64
	query_id              int64
	query                 string
	geo                   *GeoPoint
	offset                string
	id_51                 string
	msg_id                *InputBotInlineMessageID
	msg_id_53             int32
	chat_instance         int64
	data                  []byte
	game_short_name       string
	draft                 *DraftMessage
	pinned                bool
	peer_59               *DialogPeer
	order_60              []*DialogPeer
	data_61               *DataJSON
	timeout               int32
	payload               []byte
	shipping_address      *PostAddress
	info                  *PaymentRequestedInfo
	shipping_option_id    string
	currency              string
	total_amount          int64
	phone_call            *PhoneCall
	lang_code             string
	difference            *LangPackDifference
	available_min_id      int32
	unread                bool
	poll_id               int64
	poll                  *Poll
	results               *PollResults
	default_banned_rights *ChatBannedRights
	folder_peers          []*FolderPeer
	settings              *PeerSettings
	peers                 []*PeerLocated
	theme                 *Theme
	options               [][]byte
	filter                *DialogFilter
	order_84              []int32
	phone_call_id         int64
	prev_participant      *ChannelParticipant
	new_participant       *ChannelParticipant
	forwards              int32
	top_msg_id            int32
	read_max_id           int32
	broadcast_id          int32
	broadcast_post        int32
	peer_id               *Peer
	blocked               *Bool
}

// Constructors:Predicate:updateNewMessage
type TLupdateNewMessage struct {
	data *Update_Data
}

// Constructors:New:updateNewMessage
func NewTLupdateNewMessage() *TLupdateNewMessage {
	return &TLupdateNewMessage{data: &Update_Data{}}
}

// Constructors:Predicate:updateMessageID
type TLupdateMessageID struct {
	data *Update_Data
}

// Constructors:New:updateMessageID
func NewTLupdateMessageID() *TLupdateMessageID {
	return &TLupdateMessageID{data: &Update_Data{}}
}

// Constructors:Predicate:updateDeleteMessages
type TLupdateDeleteMessages struct {
	data *Update_Data
}

// Constructors:New:updateDeleteMessages
func NewTLupdateDeleteMessages() *TLupdateDeleteMessages {
	return &TLupdateDeleteMessages{data: &Update_Data{}}
}

// Constructors:Predicate:updateUserTyping
type TLupdateUserTyping struct {
	data *Update_Data
}

// Constructors:New:updateUserTyping
func NewTLupdateUserTyping() *TLupdateUserTyping {
	return &TLupdateUserTyping{data: &Update_Data{}}
}

// Constructors:Predicate:updateChatUserTyping
type TLupdateChatUserTyping struct {
	data *Update_Data
}

// Constructors:New:updateChatUserTyping
func NewTLupdateChatUserTyping() *TLupdateChatUserTyping {
	return &TLupdateChatUserTyping{data: &Update_Data{}}
}

// Constructors:Predicate:updateChatParticipants
type TLupdateChatParticipants struct {
	data *Update_Data
}

// Constructors:New:updateChatParticipants
func NewTLupdateChatParticipants() *TLupdateChatParticipants {
	return &TLupdateChatParticipants{data: &Update_Data{}}
}

// Constructors:Predicate:updateUserStatus
type TLupdateUserStatus struct {
	data *Update_Data
}

// Constructors:New:updateUserStatus
func NewTLupdateUserStatus() *TLupdateUserStatus {
	return &TLupdateUserStatus{data: &Update_Data{}}
}

// Constructors:Predicate:updateUserName
type TLupdateUserName struct {
	data *Update_Data
}

// Constructors:New:updateUserName
func NewTLupdateUserName() *TLupdateUserName {
	return &TLupdateUserName{data: &Update_Data{}}
}

// Constructors:Predicate:updateUserPhoto
type TLupdateUserPhoto struct {
	data *Update_Data
}

// Constructors:New:updateUserPhoto
func NewTLupdateUserPhoto() *TLupdateUserPhoto {
	return &TLupdateUserPhoto{data: &Update_Data{}}
}

// Constructors:Predicate:updateNewEncryptedMessage
type TLupdateNewEncryptedMessage struct {
	data *Update_Data
}

// Constructors:New:updateNewEncryptedMessage
func NewTLupdateNewEncryptedMessage() *TLupdateNewEncryptedMessage {
	return &TLupdateNewEncryptedMessage{data: &Update_Data{}}
}

// Constructors:Predicate:updateEncryptedChatTyping
type TLupdateEncryptedChatTyping struct {
	data *Update_Data
}

// Constructors:New:updateEncryptedChatTyping
func NewTLupdateEncryptedChatTyping() *TLupdateEncryptedChatTyping {
	return &TLupdateEncryptedChatTyping{data: &Update_Data{}}
}

// Constructors:Predicate:updateEncryption
type TLupdateEncryption struct {
	data *Update_Data
}

// Constructors:New:updateEncryption
func NewTLupdateEncryption() *TLupdateEncryption {
	return &TLupdateEncryption{data: &Update_Data{}}
}

// Constructors:Predicate:updateEncryptedMessagesRead
type TLupdateEncryptedMessagesRead struct {
	data *Update_Data
}

// Constructors:New:updateEncryptedMessagesRead
func NewTLupdateEncryptedMessagesRead() *TLupdateEncryptedMessagesRead {
	return &TLupdateEncryptedMessagesRead{data: &Update_Data{}}
}

// Constructors:Predicate:updateChatParticipantAdd
type TLupdateChatParticipantAdd struct {
	data *Update_Data
}

// Constructors:New:updateChatParticipantAdd
func NewTLupdateChatParticipantAdd() *TLupdateChatParticipantAdd {
	return &TLupdateChatParticipantAdd{data: &Update_Data{}}
}

// Constructors:Predicate:updateChatParticipantDelete
type TLupdateChatParticipantDelete struct {
	data *Update_Data
}

// Constructors:New:updateChatParticipantDelete
func NewTLupdateChatParticipantDelete() *TLupdateChatParticipantDelete {
	return &TLupdateChatParticipantDelete{data: &Update_Data{}}
}

// Constructors:Predicate:updateDcOptions
type TLupdateDcOptions struct {
	data *Update_Data
}

// Constructors:New:updateDcOptions
func NewTLupdateDcOptions() *TLupdateDcOptions {
	return &TLupdateDcOptions{data: &Update_Data{}}
}

// Constructors:Predicate:updateNotifySettings
type TLupdateNotifySettings struct {
	data *Update_Data
}

// Constructors:New:updateNotifySettings
func NewTLupdateNotifySettings() *TLupdateNotifySettings {
	return &TLupdateNotifySettings{data: &Update_Data{}}
}

// Constructors:Predicate:updateServiceNotification
type TLupdateServiceNotification struct {
	data *Update_Data
}

// Constructors:New:updateServiceNotification
func NewTLupdateServiceNotification() *TLupdateServiceNotification {
	return &TLupdateServiceNotification{data: &Update_Data{}}
}

// Constructors:Predicate:updatePrivacy
type TLupdatePrivacy struct {
	data *Update_Data
}

// Constructors:New:updatePrivacy
func NewTLupdatePrivacy() *TLupdatePrivacy {
	return &TLupdatePrivacy{data: &Update_Data{}}
}

// Constructors:Predicate:updateUserPhone
type TLupdateUserPhone struct {
	data *Update_Data
}

// Constructors:New:updateUserPhone
func NewTLupdateUserPhone() *TLupdateUserPhone {
	return &TLupdateUserPhone{data: &Update_Data{}}
}

// Constructors:Predicate:updateReadHistoryInbox
type TLupdateReadHistoryInbox struct {
	data *Update_Data
}

// Constructors:New:updateReadHistoryInbox
func NewTLupdateReadHistoryInbox() *TLupdateReadHistoryInbox {
	return &TLupdateReadHistoryInbox{data: &Update_Data{}}
}

// Constructors:Predicate:updateReadHistoryOutbox
type TLupdateReadHistoryOutbox struct {
	data *Update_Data
}

// Constructors:New:updateReadHistoryOutbox
func NewTLupdateReadHistoryOutbox() *TLupdateReadHistoryOutbox {
	return &TLupdateReadHistoryOutbox{data: &Update_Data{}}
}

// Constructors:Predicate:updateWebPage
type TLupdateWebPage struct {
	data *Update_Data
}

// Constructors:New:updateWebPage
func NewTLupdateWebPage() *TLupdateWebPage {
	return &TLupdateWebPage{data: &Update_Data{}}
}

// Constructors:Predicate:updateReadMessagesContents
type TLupdateReadMessagesContents struct {
	data *Update_Data
}

// Constructors:New:updateReadMessagesContents
func NewTLupdateReadMessagesContents() *TLupdateReadMessagesContents {
	return &TLupdateReadMessagesContents{data: &Update_Data{}}
}

// Constructors:Predicate:updateChannelTooLong
type TLupdateChannelTooLong struct {
	data *Update_Data
}

// Constructors:New:updateChannelTooLong
func NewTLupdateChannelTooLong() *TLupdateChannelTooLong {
	return &TLupdateChannelTooLong{data: &Update_Data{}}
}

// Constructors:Predicate:updateChannel
type TLupdateChannel struct {
	data *Update_Data
}

// Constructors:New:updateChannel
func NewTLupdateChannel() *TLupdateChannel {
	return &TLupdateChannel{data: &Update_Data{}}
}

// Constructors:Predicate:updateNewChannelMessage
type TLupdateNewChannelMessage struct {
	data *Update_Data
}

// Constructors:New:updateNewChannelMessage
func NewTLupdateNewChannelMessage() *TLupdateNewChannelMessage {
	return &TLupdateNewChannelMessage{data: &Update_Data{}}
}

// Constructors:Predicate:updateReadChannelInbox
type TLupdateReadChannelInbox struct {
	data *Update_Data
}

// Constructors:New:updateReadChannelInbox
func NewTLupdateReadChannelInbox() *TLupdateReadChannelInbox {
	return &TLupdateReadChannelInbox{data: &Update_Data{}}
}

// Constructors:Predicate:updateDeleteChannelMessages
type TLupdateDeleteChannelMessages struct {
	data *Update_Data
}

// Constructors:New:updateDeleteChannelMessages
func NewTLupdateDeleteChannelMessages() *TLupdateDeleteChannelMessages {
	return &TLupdateDeleteChannelMessages{data: &Update_Data{}}
}

// Constructors:Predicate:updateChannelMessageViews
type TLupdateChannelMessageViews struct {
	data *Update_Data
}

// Constructors:New:updateChannelMessageViews
func NewTLupdateChannelMessageViews() *TLupdateChannelMessageViews {
	return &TLupdateChannelMessageViews{data: &Update_Data{}}
}

// Constructors:Predicate:updateChatParticipantAdmin
type TLupdateChatParticipantAdmin struct {
	data *Update_Data
}

// Constructors:New:updateChatParticipantAdmin
func NewTLupdateChatParticipantAdmin() *TLupdateChatParticipantAdmin {
	return &TLupdateChatParticipantAdmin{data: &Update_Data{}}
}

// Constructors:Predicate:updateNewStickerSet
type TLupdateNewStickerSet struct {
	data *Update_Data
}

// Constructors:New:updateNewStickerSet
func NewTLupdateNewStickerSet() *TLupdateNewStickerSet {
	return &TLupdateNewStickerSet{data: &Update_Data{}}
}

// Constructors:Predicate:updateStickerSetsOrder
type TLupdateStickerSetsOrder struct {
	data *Update_Data
}

// Constructors:New:updateStickerSetsOrder
func NewTLupdateStickerSetsOrder() *TLupdateStickerSetsOrder {
	return &TLupdateStickerSetsOrder{data: &Update_Data{}}
}

// Constructors:Predicate:updateStickerSets
type TLupdateStickerSets struct {
	data *Update_Data
}

// Constructors:New:updateStickerSets
func NewTLupdateStickerSets() *TLupdateStickerSets {
	return &TLupdateStickerSets{data: &Update_Data{}}
}

// Constructors:Predicate:updateSavedGifs
type TLupdateSavedGifs struct {
	data *Update_Data
}

// Constructors:New:updateSavedGifs
func NewTLupdateSavedGifs() *TLupdateSavedGifs {
	return &TLupdateSavedGifs{data: &Update_Data{}}
}

// Constructors:Predicate:updateBotInlineQuery
type TLupdateBotInlineQuery struct {
	data *Update_Data
}

// Constructors:New:updateBotInlineQuery
func NewTLupdateBotInlineQuery() *TLupdateBotInlineQuery {
	return &TLupdateBotInlineQuery{data: &Update_Data{}}
}

// Constructors:Predicate:updateBotInlineSend
type TLupdateBotInlineSend struct {
	data *Update_Data
}

// Constructors:New:updateBotInlineSend
func NewTLupdateBotInlineSend() *TLupdateBotInlineSend {
	return &TLupdateBotInlineSend{data: &Update_Data{}}
}

// Constructors:Predicate:updateEditChannelMessage
type TLupdateEditChannelMessage struct {
	data *Update_Data
}

// Constructors:New:updateEditChannelMessage
func NewTLupdateEditChannelMessage() *TLupdateEditChannelMessage {
	return &TLupdateEditChannelMessage{data: &Update_Data{}}
}

// Constructors:Predicate:updateBotCallbackQuery
type TLupdateBotCallbackQuery struct {
	data *Update_Data
}

// Constructors:New:updateBotCallbackQuery
func NewTLupdateBotCallbackQuery() *TLupdateBotCallbackQuery {
	return &TLupdateBotCallbackQuery{data: &Update_Data{}}
}

// Constructors:Predicate:updateEditMessage
type TLupdateEditMessage struct {
	data *Update_Data
}

// Constructors:New:updateEditMessage
func NewTLupdateEditMessage() *TLupdateEditMessage {
	return &TLupdateEditMessage{data: &Update_Data{}}
}

// Constructors:Predicate:updateInlineBotCallbackQuery
type TLupdateInlineBotCallbackQuery struct {
	data *Update_Data
}

// Constructors:New:updateInlineBotCallbackQuery
func NewTLupdateInlineBotCallbackQuery() *TLupdateInlineBotCallbackQuery {
	return &TLupdateInlineBotCallbackQuery{data: &Update_Data{}}
}

// Constructors:Predicate:updateReadChannelOutbox
type TLupdateReadChannelOutbox struct {
	data *Update_Data
}

// Constructors:New:updateReadChannelOutbox
func NewTLupdateReadChannelOutbox() *TLupdateReadChannelOutbox {
	return &TLupdateReadChannelOutbox{data: &Update_Data{}}
}

// Constructors:Predicate:updateDraftMessage
type TLupdateDraftMessage struct {
	data *Update_Data
}

// Constructors:New:updateDraftMessage
func NewTLupdateDraftMessage() *TLupdateDraftMessage {
	return &TLupdateDraftMessage{data: &Update_Data{}}
}

// Constructors:Predicate:updateReadFeaturedStickers
type TLupdateReadFeaturedStickers struct {
	data *Update_Data
}

// Constructors:New:updateReadFeaturedStickers
func NewTLupdateReadFeaturedStickers() *TLupdateReadFeaturedStickers {
	return &TLupdateReadFeaturedStickers{data: &Update_Data{}}
}

// Constructors:Predicate:updateRecentStickers
type TLupdateRecentStickers struct {
	data *Update_Data
}

// Constructors:New:updateRecentStickers
func NewTLupdateRecentStickers() *TLupdateRecentStickers {
	return &TLupdateRecentStickers{data: &Update_Data{}}
}

// Constructors:Predicate:updateConfig
type TLupdateConfig struct {
	data *Update_Data
}

// Constructors:New:updateConfig
func NewTLupdateConfig() *TLupdateConfig {
	return &TLupdateConfig{data: &Update_Data{}}
}

// Constructors:Predicate:updatePtsChanged
type TLupdatePtsChanged struct {
	data *Update_Data
}

// Constructors:New:updatePtsChanged
func NewTLupdatePtsChanged() *TLupdatePtsChanged {
	return &TLupdatePtsChanged{data: &Update_Data{}}
}

// Constructors:Predicate:updateChannelWebPage
type TLupdateChannelWebPage struct {
	data *Update_Data
}

// Constructors:New:updateChannelWebPage
func NewTLupdateChannelWebPage() *TLupdateChannelWebPage {
	return &TLupdateChannelWebPage{data: &Update_Data{}}
}

// Constructors:Predicate:updateDialogPinned
type TLupdateDialogPinned struct {
	data *Update_Data
}

// Constructors:New:updateDialogPinned
func NewTLupdateDialogPinned() *TLupdateDialogPinned {
	return &TLupdateDialogPinned{data: &Update_Data{}}
}

// Constructors:Predicate:updatePinnedDialogs
type TLupdatePinnedDialogs struct {
	data *Update_Data
}

// Constructors:New:updatePinnedDialogs
func NewTLupdatePinnedDialogs() *TLupdatePinnedDialogs {
	return &TLupdatePinnedDialogs{data: &Update_Data{}}
}

// Constructors:Predicate:updateBotWebhookJSON
type TLupdateBotWebhookJSON struct {
	data *Update_Data
}

// Constructors:New:updateBotWebhookJSON
func NewTLupdateBotWebhookJSON() *TLupdateBotWebhookJSON {
	return &TLupdateBotWebhookJSON{data: &Update_Data{}}
}

// Constructors:Predicate:updateBotWebhookJSONQuery
type TLupdateBotWebhookJSONQuery struct {
	data *Update_Data
}

// Constructors:New:updateBotWebhookJSONQuery
func NewTLupdateBotWebhookJSONQuery() *TLupdateBotWebhookJSONQuery {
	return &TLupdateBotWebhookJSONQuery{data: &Update_Data{}}
}

// Constructors:Predicate:updateBotShippingQuery
type TLupdateBotShippingQuery struct {
	data *Update_Data
}

// Constructors:New:updateBotShippingQuery
func NewTLupdateBotShippingQuery() *TLupdateBotShippingQuery {
	return &TLupdateBotShippingQuery{data: &Update_Data{}}
}

// Constructors:Predicate:updateBotPrecheckoutQuery
type TLupdateBotPrecheckoutQuery struct {
	data *Update_Data
}

// Constructors:New:updateBotPrecheckoutQuery
func NewTLupdateBotPrecheckoutQuery() *TLupdateBotPrecheckoutQuery {
	return &TLupdateBotPrecheckoutQuery{data: &Update_Data{}}
}

// Constructors:Predicate:updatePhoneCall
type TLupdatePhoneCall struct {
	data *Update_Data
}

// Constructors:New:updatePhoneCall
func NewTLupdatePhoneCall() *TLupdatePhoneCall {
	return &TLupdatePhoneCall{data: &Update_Data{}}
}

// Constructors:Predicate:updateLangPackTooLong
type TLupdateLangPackTooLong struct {
	data *Update_Data
}

// Constructors:New:updateLangPackTooLong
func NewTLupdateLangPackTooLong() *TLupdateLangPackTooLong {
	return &TLupdateLangPackTooLong{data: &Update_Data{}}
}

// Constructors:Predicate:updateLangPack
type TLupdateLangPack struct {
	data *Update_Data
}

// Constructors:New:updateLangPack
func NewTLupdateLangPack() *TLupdateLangPack {
	return &TLupdateLangPack{data: &Update_Data{}}
}

// Constructors:Predicate:updateFavedStickers
type TLupdateFavedStickers struct {
	data *Update_Data
}

// Constructors:New:updateFavedStickers
func NewTLupdateFavedStickers() *TLupdateFavedStickers {
	return &TLupdateFavedStickers{data: &Update_Data{}}
}

// Constructors:Predicate:updateChannelReadMessagesContents
type TLupdateChannelReadMessagesContents struct {
	data *Update_Data
}

// Constructors:New:updateChannelReadMessagesContents
func NewTLupdateChannelReadMessagesContents() *TLupdateChannelReadMessagesContents {
	return &TLupdateChannelReadMessagesContents{data: &Update_Data{}}
}

// Constructors:Predicate:updateContactsReset
type TLupdateContactsReset struct {
	data *Update_Data
}

// Constructors:New:updateContactsReset
func NewTLupdateContactsReset() *TLupdateContactsReset {
	return &TLupdateContactsReset{data: &Update_Data{}}
}

// Constructors:Predicate:updateChannelAvailableMessages
type TLupdateChannelAvailableMessages struct {
	data *Update_Data
}

// Constructors:New:updateChannelAvailableMessages
func NewTLupdateChannelAvailableMessages() *TLupdateChannelAvailableMessages {
	return &TLupdateChannelAvailableMessages{data: &Update_Data{}}
}

// Constructors:Predicate:updateDialogUnreadMark
type TLupdateDialogUnreadMark struct {
	data *Update_Data
}

// Constructors:New:updateDialogUnreadMark
func NewTLupdateDialogUnreadMark() *TLupdateDialogUnreadMark {
	return &TLupdateDialogUnreadMark{data: &Update_Data{}}
}

// Constructors:Predicate:updateMessagePoll
type TLupdateMessagePoll struct {
	data *Update_Data
}

// Constructors:New:updateMessagePoll
func NewTLupdateMessagePoll() *TLupdateMessagePoll {
	return &TLupdateMessagePoll{data: &Update_Data{}}
}

// Constructors:Predicate:updateChatDefaultBannedRights
type TLupdateChatDefaultBannedRights struct {
	data *Update_Data
}

// Constructors:New:updateChatDefaultBannedRights
func NewTLupdateChatDefaultBannedRights() *TLupdateChatDefaultBannedRights {
	return &TLupdateChatDefaultBannedRights{data: &Update_Data{}}
}

// Constructors:Predicate:updateFolderPeers
type TLupdateFolderPeers struct {
	data *Update_Data
}

// Constructors:New:updateFolderPeers
func NewTLupdateFolderPeers() *TLupdateFolderPeers {
	return &TLupdateFolderPeers{data: &Update_Data{}}
}

// Constructors:Predicate:updatePeerSettings
type TLupdatePeerSettings struct {
	data *Update_Data
}

// Constructors:New:updatePeerSettings
func NewTLupdatePeerSettings() *TLupdatePeerSettings {
	return &TLupdatePeerSettings{data: &Update_Data{}}
}

// Constructors:Predicate:updatePeerLocated
type TLupdatePeerLocated struct {
	data *Update_Data
}

// Constructors:New:updatePeerLocated
func NewTLupdatePeerLocated() *TLupdatePeerLocated {
	return &TLupdatePeerLocated{data: &Update_Data{}}
}

// Constructors:Predicate:updateNewScheduledMessage
type TLupdateNewScheduledMessage struct {
	data *Update_Data
}

// Constructors:New:updateNewScheduledMessage
func NewTLupdateNewScheduledMessage() *TLupdateNewScheduledMessage {
	return &TLupdateNewScheduledMessage{data: &Update_Data{}}
}

// Constructors:Predicate:updateDeleteScheduledMessages
type TLupdateDeleteScheduledMessages struct {
	data *Update_Data
}

// Constructors:New:updateDeleteScheduledMessages
func NewTLupdateDeleteScheduledMessages() *TLupdateDeleteScheduledMessages {
	return &TLupdateDeleteScheduledMessages{data: &Update_Data{}}
}

// Constructors:Predicate:updateTheme
type TLupdateTheme struct {
	data *Update_Data
}

// Constructors:New:updateTheme
func NewTLupdateTheme() *TLupdateTheme {
	return &TLupdateTheme{data: &Update_Data{}}
}

// Constructors:Predicate:updateGeoLiveViewed
type TLupdateGeoLiveViewed struct {
	data *Update_Data
}

// Constructors:New:updateGeoLiveViewed
func NewTLupdateGeoLiveViewed() *TLupdateGeoLiveViewed {
	return &TLupdateGeoLiveViewed{data: &Update_Data{}}
}

// Constructors:Predicate:updateLoginToken
type TLupdateLoginToken struct {
	data *Update_Data
}

// Constructors:New:updateLoginToken
func NewTLupdateLoginToken() *TLupdateLoginToken {
	return &TLupdateLoginToken{data: &Update_Data{}}
}

// Constructors:Predicate:updateMessagePollVote
type TLupdateMessagePollVote struct {
	data *Update_Data
}

// Constructors:New:updateMessagePollVote
func NewTLupdateMessagePollVote() *TLupdateMessagePollVote {
	return &TLupdateMessagePollVote{data: &Update_Data{}}
}

// Constructors:Predicate:updateDialogFilter
type TLupdateDialogFilter struct {
	data *Update_Data
}

// Constructors:New:updateDialogFilter
func NewTLupdateDialogFilter() *TLupdateDialogFilter {
	return &TLupdateDialogFilter{data: &Update_Data{}}
}

// Constructors:Predicate:updateDialogFilterOrder
type TLupdateDialogFilterOrder struct {
	data *Update_Data
}

// Constructors:New:updateDialogFilterOrder
func NewTLupdateDialogFilterOrder() *TLupdateDialogFilterOrder {
	return &TLupdateDialogFilterOrder{data: &Update_Data{}}
}

// Constructors:Predicate:updateDialogFilters
type TLupdateDialogFilters struct {
	data *Update_Data
}

// Constructors:New:updateDialogFilters
func NewTLupdateDialogFilters() *TLupdateDialogFilters {
	return &TLupdateDialogFilters{data: &Update_Data{}}
}

// Constructors:Predicate:updatePhoneCallSignalingData
type TLupdatePhoneCallSignalingData struct {
	data *Update_Data
}

// Constructors:New:updatePhoneCallSignalingData
func NewTLupdatePhoneCallSignalingData() *TLupdatePhoneCallSignalingData {
	return &TLupdatePhoneCallSignalingData{data: &Update_Data{}}
}

// Constructors:Predicate:updateChannelParticipant
type TLupdateChannelParticipant struct {
	data *Update_Data
}

// Constructors:New:updateChannelParticipant
func NewTLupdateChannelParticipant() *TLupdateChannelParticipant {
	return &TLupdateChannelParticipant{data: &Update_Data{}}
}

// Constructors:Predicate:updateChannelMessageForwards
type TLupdateChannelMessageForwards struct {
	data *Update_Data
}

// Constructors:New:updateChannelMessageForwards
func NewTLupdateChannelMessageForwards() *TLupdateChannelMessageForwards {
	return &TLupdateChannelMessageForwards{data: &Update_Data{}}
}

// Constructors:Predicate:updateReadChannelDiscussionInbox
type TLupdateReadChannelDiscussionInbox struct {
	data *Update_Data
}

// Constructors:New:updateReadChannelDiscussionInbox
func NewTLupdateReadChannelDiscussionInbox() *TLupdateReadChannelDiscussionInbox {
	return &TLupdateReadChannelDiscussionInbox{data: &Update_Data{}}
}

// Constructors:Predicate:updateReadChannelDiscussionOutbox
type TLupdateReadChannelDiscussionOutbox struct {
	data *Update_Data
}

// Constructors:New:updateReadChannelDiscussionOutbox
func NewTLupdateReadChannelDiscussionOutbox() *TLupdateReadChannelDiscussionOutbox {
	return &TLupdateReadChannelDiscussionOutbox{data: &Update_Data{}}
}

// Constructors:Predicate:updatePeerBlocked
type TLupdatePeerBlocked struct {
	data *Update_Data
}

// Constructors:New:updatePeerBlocked
func NewTLupdatePeerBlocked() *TLupdatePeerBlocked {
	return &TLupdatePeerBlocked{data: &Update_Data{}}
}

// Constructors:Predicate:updateChannelUserTyping
type TLupdateChannelUserTyping struct {
	data *Update_Data
}

// Constructors:New:updateChannelUserTyping
func NewTLupdateChannelUserTyping() *TLupdateChannelUserTyping {
	return &TLupdateChannelUserTyping{data: &Update_Data{}}
}

// Constructors:Predicate:updatePinnedMessages
type TLupdatePinnedMessages struct {
	data *Update_Data
}

// Constructors:New:updatePinnedMessages
func NewTLupdatePinnedMessages() *TLupdatePinnedMessages {
	return &TLupdatePinnedMessages{data: &Update_Data{}}
}

// Constructors:Predicate:updatePinnedChannelMessages
type TLupdatePinnedChannelMessages struct {
	data *Update_Data
}

// Constructors:New:updatePinnedChannelMessages
func NewTLupdatePinnedChannelMessages() *TLupdatePinnedChannelMessages {
	return &TLupdatePinnedChannelMessages{data: &Update_Data{}}
}
func (m *TLupdateNewMessage) Setmessage(v *Message)                      { m.data.message = v }
func (m *TLupdateNewMessage) Getmessage() *Message                       { return m.data.message }
func (m *TLupdateNewMessage) Setpts(v int32)                             { m.data.pts = v }
func (m *TLupdateNewMessage) Getpts() int32                              { return m.data.pts }
func (m *TLupdateNewMessage) Setpts_count(v int32)                       { m.data.pts_count = v }
func (m *TLupdateNewMessage) Getpts_count() int32                        { return m.data.pts_count }
func (m *TLupdateMessageID) Setid(v int32)                               { m.data.id = v }
func (m *TLupdateMessageID) Getid() int32                                { return m.data.id }
func (m *TLupdateMessageID) Setrandom_id(v int64)                        { m.data.random_id = v }
func (m *TLupdateMessageID) Getrandom_id() int64                         { return m.data.random_id }
func (m *TLupdateDeleteMessages) Setmessages(v []int32)                  { m.data.messages = v }
func (m *TLupdateDeleteMessages) Getmessages() []int32                   { return m.data.messages }
func (m *TLupdateDeleteMessages) Setpts(v int32)                         { m.data.pts = v }
func (m *TLupdateDeleteMessages) Getpts() int32                          { return m.data.pts }
func (m *TLupdateDeleteMessages) Setpts_count(v int32)                   { m.data.pts_count = v }
func (m *TLupdateDeleteMessages) Getpts_count() int32                    { return m.data.pts_count }
func (m *TLupdateUserTyping) Setuser_id(v int32)                         { m.data.user_id = v }
func (m *TLupdateUserTyping) Getuser_id() int32                          { return m.data.user_id }
func (m *TLupdateUserTyping) Setaction(v *SendMessageAction)             { m.data.action = v }
func (m *TLupdateUserTyping) Getaction() *SendMessageAction              { return m.data.action }
func (m *TLupdateChatUserTyping) Setchat_id(v int32)                     { m.data.chat_id = v }
func (m *TLupdateChatUserTyping) Getchat_id() int32                      { return m.data.chat_id }
func (m *TLupdateChatUserTyping) Setuser_id(v int32)                     { m.data.user_id = v }
func (m *TLupdateChatUserTyping) Getuser_id() int32                      { return m.data.user_id }
func (m *TLupdateChatUserTyping) Setaction(v *SendMessageAction)         { m.data.action = v }
func (m *TLupdateChatUserTyping) Getaction() *SendMessageAction          { return m.data.action }
func (m *TLupdateChatParticipants) Setparticipants(v *ChatParticipants)  { m.data.participants = v }
func (m *TLupdateChatParticipants) Getparticipants() *ChatParticipants   { return m.data.participants }
func (m *TLupdateUserStatus) Setuser_id(v int32)                         { m.data.user_id = v }
func (m *TLupdateUserStatus) Getuser_id() int32                          { return m.data.user_id }
func (m *TLupdateUserStatus) Setstatus(v *UserStatus)                    { m.data.status = v }
func (m *TLupdateUserStatus) Getstatus() *UserStatus                     { return m.data.status }
func (m *TLupdateUserName) Setuser_id(v int32)                           { m.data.user_id = v }
func (m *TLupdateUserName) Getuser_id() int32                            { return m.data.user_id }
func (m *TLupdateUserName) Setfirst_name(v string)                       { m.data.first_name = v }
func (m *TLupdateUserName) Getfirst_name() string                        { return m.data.first_name }
func (m *TLupdateUserName) Setlast_name(v string)                        { m.data.last_name = v }
func (m *TLupdateUserName) Getlast_name() string                         { return m.data.last_name }
func (m *TLupdateUserName) Setusername(v string)                         { m.data.username = v }
func (m *TLupdateUserName) Getusername() string                          { return m.data.username }
func (m *TLupdateUserPhoto) Setuser_id(v int32)                          { m.data.user_id = v }
func (m *TLupdateUserPhoto) Getuser_id() int32                           { return m.data.user_id }
func (m *TLupdateUserPhoto) Setdate(v int32)                             { m.data.date = v }
func (m *TLupdateUserPhoto) Getdate() int32                              { return m.data.date }
func (m *TLupdateUserPhoto) Setphoto(v *UserProfilePhoto)                { m.data.photo = v }
func (m *TLupdateUserPhoto) Getphoto() *UserProfilePhoto                 { return m.data.photo }
func (m *TLupdateUserPhoto) Setprevious(v *Bool)                         { m.data.previous = v }
func (m *TLupdateUserPhoto) Getprevious() *Bool                          { return m.data.previous }
func (m *TLupdateNewEncryptedMessage) Setmessage_18(v *EncryptedMessage) { m.data.message_18 = v }
func (m *TLupdateNewEncryptedMessage) Getmessage_18() *EncryptedMessage  { return m.data.message_18 }
func (m *TLupdateNewEncryptedMessage) Setqts(v int32)                    { m.data.qts = v }
func (m *TLupdateNewEncryptedMessage) Getqts() int32                     { return m.data.qts }
func (m *TLupdateEncryptedChatTyping) Setchat_id(v int32)                { m.data.chat_id = v }
func (m *TLupdateEncryptedChatTyping) Getchat_id() int32                 { return m.data.chat_id }
func (m *TLupdateEncryption) Setchat(v *EncryptedChat)                   { m.data.chat = v }
func (m *TLupdateEncryption) Getchat() *EncryptedChat                    { return m.data.chat }
func (m *TLupdateEncryption) Setdate(v int32)                            { m.data.date = v }
func (m *TLupdateEncryption) Getdate() int32                             { return m.data.date }
func (m *TLupdateEncryptedMessagesRead) Setchat_id(v int32)              { m.data.chat_id = v }
func (m *TLupdateEncryptedMessagesRead) Getchat_id() int32               { return m.data.chat_id }
func (m *TLupdateEncryptedMessagesRead) Setmax_date(v int32)             { m.data.max_date = v }
func (m *TLupdateEncryptedMessagesRead) Getmax_date() int32              { return m.data.max_date }
func (m *TLupdateEncryptedMessagesRead) Setdate(v int32)                 { m.data.date = v }
func (m *TLupdateEncryptedMessagesRead) Getdate() int32                  { return m.data.date }
func (m *TLupdateChatParticipantAdd) Setchat_id(v int32)                 { m.data.chat_id = v }
func (m *TLupdateChatParticipantAdd) Getchat_id() int32                  { return m.data.chat_id }
func (m *TLupdateChatParticipantAdd) Setuser_id(v int32)                 { m.data.user_id = v }
func (m *TLupdateChatParticipantAdd) Getuser_id() int32                  { return m.data.user_id }
func (m *TLupdateChatParticipantAdd) Setinviter_id(v int32)              { m.data.inviter_id = v }
func (m *TLupdateChatParticipantAdd) Getinviter_id() int32               { return m.data.inviter_id }
func (m *TLupdateChatParticipantAdd) Setdate(v int32)                    { m.data.date = v }
func (m *TLupdateChatParticipantAdd) Getdate() int32                     { return m.data.date }
func (m *TLupdateChatParticipantAdd) Setversion(v int32)                 { m.data.version = v }
func (m *TLupdateChatParticipantAdd) Getversion() int32                  { return m.data.version }
func (m *TLupdateChatParticipantDelete) Setchat_id(v int32)              { m.data.chat_id = v }
func (m *TLupdateChatParticipantDelete) Getchat_id() int32               { return m.data.chat_id }
func (m *TLupdateChatParticipantDelete) Setuser_id(v int32)              { m.data.user_id = v }
func (m *TLupdateChatParticipantDelete) Getuser_id() int32               { return m.data.user_id }
func (m *TLupdateChatParticipantDelete) Setversion(v int32)              { m.data.version = v }
func (m *TLupdateChatParticipantDelete) Getversion() int32               { return m.data.version }
func (m *TLupdateDcOptions) Setdc_options(v []*DcOption)                 { m.data.dc_options = v }
func (m *TLupdateDcOptions) Getdc_options() []*DcOption                  { return m.data.dc_options }
func (m *TLupdateNotifySettings) Setpeer(v *NotifyPeer)                  { m.data.peer = v }
func (m *TLupdateNotifySettings) Getpeer() *NotifyPeer                   { return m.data.peer }
func (m *TLupdateNotifySettings) Setnotify_settings(v *PeerNotifySettings) {
	m.data.notify_settings = v
}
func (m *TLupdateNotifySettings) Getnotify_settings() *PeerNotifySettings {
	return m.data.notify_settings
}
func (m *TLupdateServiceNotification) Setpopup(v bool)                         { m.data.popup = v }
func (m *TLupdateServiceNotification) Getpopup() bool                          { return m.data.popup }
func (m *TLupdateServiceNotification) Setinbox_date(v int32)                   { m.data.inbox_date = v }
func (m *TLupdateServiceNotification) Getinbox_date() int32                    { return m.data.inbox_date }
func (m *TLupdateServiceNotification) Settype_key(v string)                    { m.data.type_key = v }
func (m *TLupdateServiceNotification) Gettype_key() string                     { return m.data.type_key }
func (m *TLupdateServiceNotification) Setmessage_30(v string)                  { m.data.message_30 = v }
func (m *TLupdateServiceNotification) Getmessage_30() string                   { return m.data.message_30 }
func (m *TLupdateServiceNotification) Setmedia(v *MessageMedia)                { m.data.media = v }
func (m *TLupdateServiceNotification) Getmedia() *MessageMedia                 { return m.data.media }
func (m *TLupdateServiceNotification) Setentities(v []*MessageEntity)          { m.data.entities = v }
func (m *TLupdateServiceNotification) Getentities() []*MessageEntity           { return m.data.entities }
func (m *TLupdatePrivacy) Setkey(v *PrivacyKey)                                { m.data.key = v }
func (m *TLupdatePrivacy) Getkey() *PrivacyKey                                 { return m.data.key }
func (m *TLupdatePrivacy) Setrules(v []*PrivacyRule)                           { m.data.rules = v }
func (m *TLupdatePrivacy) Getrules() []*PrivacyRule                            { return m.data.rules }
func (m *TLupdateUserPhone) Setuser_id(v int32)                                { m.data.user_id = v }
func (m *TLupdateUserPhone) Getuser_id() int32                                 { return m.data.user_id }
func (m *TLupdateUserPhone) Setphone(v string)                                 { m.data.phone = v }
func (m *TLupdateUserPhone) Getphone() string                                  { return m.data.phone }
func (m *TLupdateReadHistoryInbox) Setfolder_id(v int32)                       { m.data.folder_id = v }
func (m *TLupdateReadHistoryInbox) Getfolder_id() int32                        { return m.data.folder_id }
func (m *TLupdateReadHistoryInbox) Setpeer_37(v *Peer)                         { m.data.peer_37 = v }
func (m *TLupdateReadHistoryInbox) Getpeer_37() *Peer                          { return m.data.peer_37 }
func (m *TLupdateReadHistoryInbox) Setmax_id(v int32)                          { m.data.max_id = v }
func (m *TLupdateReadHistoryInbox) Getmax_id() int32                           { return m.data.max_id }
func (m *TLupdateReadHistoryInbox) Setstill_unread_count(v int32)              { m.data.still_unread_count = v }
func (m *TLupdateReadHistoryInbox) Getstill_unread_count() int32               { return m.data.still_unread_count }
func (m *TLupdateReadHistoryInbox) Setpts(v int32)                             { m.data.pts = v }
func (m *TLupdateReadHistoryInbox) Getpts() int32                              { return m.data.pts }
func (m *TLupdateReadHistoryInbox) Setpts_count(v int32)                       { m.data.pts_count = v }
func (m *TLupdateReadHistoryInbox) Getpts_count() int32                        { return m.data.pts_count }
func (m *TLupdateReadHistoryOutbox) Setpeer_37(v *Peer)                        { m.data.peer_37 = v }
func (m *TLupdateReadHistoryOutbox) Getpeer_37() *Peer                         { return m.data.peer_37 }
func (m *TLupdateReadHistoryOutbox) Setmax_id(v int32)                         { m.data.max_id = v }
func (m *TLupdateReadHistoryOutbox) Getmax_id() int32                          { return m.data.max_id }
func (m *TLupdateReadHistoryOutbox) Setpts(v int32)                            { m.data.pts = v }
func (m *TLupdateReadHistoryOutbox) Getpts() int32                             { return m.data.pts }
func (m *TLupdateReadHistoryOutbox) Setpts_count(v int32)                      { m.data.pts_count = v }
func (m *TLupdateReadHistoryOutbox) Getpts_count() int32                       { return m.data.pts_count }
func (m *TLupdateWebPage) Setwebpage(v *WebPage)                               { m.data.webpage = v }
func (m *TLupdateWebPage) Getwebpage() *WebPage                                { return m.data.webpage }
func (m *TLupdateWebPage) Setpts(v int32)                                      { m.data.pts = v }
func (m *TLupdateWebPage) Getpts() int32                                       { return m.data.pts }
func (m *TLupdateWebPage) Setpts_count(v int32)                                { m.data.pts_count = v }
func (m *TLupdateWebPage) Getpts_count() int32                                 { return m.data.pts_count }
func (m *TLupdateReadMessagesContents) Setmessages(v []int32)                  { m.data.messages = v }
func (m *TLupdateReadMessagesContents) Getmessages() []int32                   { return m.data.messages }
func (m *TLupdateReadMessagesContents) Setpts(v int32)                         { m.data.pts = v }
func (m *TLupdateReadMessagesContents) Getpts() int32                          { return m.data.pts }
func (m *TLupdateReadMessagesContents) Setpts_count(v int32)                   { m.data.pts_count = v }
func (m *TLupdateReadMessagesContents) Getpts_count() int32                    { return m.data.pts_count }
func (m *TLupdateChannelTooLong) Setchannel_id(v int32)                        { m.data.channel_id = v }
func (m *TLupdateChannelTooLong) Getchannel_id() int32                         { return m.data.channel_id }
func (m *TLupdateChannelTooLong) Setpts(v int32)                               { m.data.pts = v }
func (m *TLupdateChannelTooLong) Getpts() int32                                { return m.data.pts }
func (m *TLupdateChannel) Setchannel_id(v int32)                               { m.data.channel_id = v }
func (m *TLupdateChannel) Getchannel_id() int32                                { return m.data.channel_id }
func (m *TLupdateNewChannelMessage) Setmessage(v *Message)                     { m.data.message = v }
func (m *TLupdateNewChannelMessage) Getmessage() *Message                      { return m.data.message }
func (m *TLupdateNewChannelMessage) Setpts(v int32)                            { m.data.pts = v }
func (m *TLupdateNewChannelMessage) Getpts() int32                             { return m.data.pts }
func (m *TLupdateNewChannelMessage) Setpts_count(v int32)                      { m.data.pts_count = v }
func (m *TLupdateNewChannelMessage) Getpts_count() int32                       { return m.data.pts_count }
func (m *TLupdateReadChannelInbox) Setfolder_id(v int32)                       { m.data.folder_id = v }
func (m *TLupdateReadChannelInbox) Getfolder_id() int32                        { return m.data.folder_id }
func (m *TLupdateReadChannelInbox) Setchannel_id(v int32)                      { m.data.channel_id = v }
func (m *TLupdateReadChannelInbox) Getchannel_id() int32                       { return m.data.channel_id }
func (m *TLupdateReadChannelInbox) Setmax_id(v int32)                          { m.data.max_id = v }
func (m *TLupdateReadChannelInbox) Getmax_id() int32                           { return m.data.max_id }
func (m *TLupdateReadChannelInbox) Setstill_unread_count(v int32)              { m.data.still_unread_count = v }
func (m *TLupdateReadChannelInbox) Getstill_unread_count() int32               { return m.data.still_unread_count }
func (m *TLupdateReadChannelInbox) Setpts(v int32)                             { m.data.pts = v }
func (m *TLupdateReadChannelInbox) Getpts() int32                              { return m.data.pts }
func (m *TLupdateDeleteChannelMessages) Setchannel_id(v int32)                 { m.data.channel_id = v }
func (m *TLupdateDeleteChannelMessages) Getchannel_id() int32                  { return m.data.channel_id }
func (m *TLupdateDeleteChannelMessages) Setmessages(v []int32)                 { m.data.messages = v }
func (m *TLupdateDeleteChannelMessages) Getmessages() []int32                  { return m.data.messages }
func (m *TLupdateDeleteChannelMessages) Setpts(v int32)                        { m.data.pts = v }
func (m *TLupdateDeleteChannelMessages) Getpts() int32                         { return m.data.pts }
func (m *TLupdateDeleteChannelMessages) Setpts_count(v int32)                  { m.data.pts_count = v }
func (m *TLupdateDeleteChannelMessages) Getpts_count() int32                   { return m.data.pts_count }
func (m *TLupdateChannelMessageViews) Setchannel_id(v int32)                   { m.data.channel_id = v }
func (m *TLupdateChannelMessageViews) Getchannel_id() int32                    { return m.data.channel_id }
func (m *TLupdateChannelMessageViews) Setid(v int32)                           { m.data.id = v }
func (m *TLupdateChannelMessageViews) Getid() int32                            { return m.data.id }
func (m *TLupdateChannelMessageViews) Setviews(v int32)                        { m.data.views = v }
func (m *TLupdateChannelMessageViews) Getviews() int32                         { return m.data.views }
func (m *TLupdateChatParticipantAdmin) Setchat_id(v int32)                     { m.data.chat_id = v }
func (m *TLupdateChatParticipantAdmin) Getchat_id() int32                      { return m.data.chat_id }
func (m *TLupdateChatParticipantAdmin) Setuser_id(v int32)                     { m.data.user_id = v }
func (m *TLupdateChatParticipantAdmin) Getuser_id() int32                      { return m.data.user_id }
func (m *TLupdateChatParticipantAdmin) Setis_admin(v *Bool)                    { m.data.is_admin = v }
func (m *TLupdateChatParticipantAdmin) Getis_admin() *Bool                     { return m.data.is_admin }
func (m *TLupdateChatParticipantAdmin) Setversion(v int32)                     { m.data.version = v }
func (m *TLupdateChatParticipantAdmin) Getversion() int32                      { return m.data.version }
func (m *TLupdateNewStickerSet) Setstickerset(v *messages_StickerSet)          { m.data.stickerset = v }
func (m *TLupdateNewStickerSet) Getstickerset() *messages_StickerSet           { return m.data.stickerset }
func (m *TLupdateStickerSetsOrder) Setmasks(v bool)                            { m.data.masks = v }
func (m *TLupdateStickerSetsOrder) Getmasks() bool                             { return m.data.masks }
func (m *TLupdateStickerSetsOrder) Setorder(v []int64)                         { m.data.order = v }
func (m *TLupdateStickerSetsOrder) Getorder() []int64                          { return m.data.order }
func (m *TLupdateBotInlineQuery) Setquery_id(v int64)                          { m.data.query_id = v }
func (m *TLupdateBotInlineQuery) Getquery_id() int64                           { return m.data.query_id }
func (m *TLupdateBotInlineQuery) Setuser_id(v int32)                           { m.data.user_id = v }
func (m *TLupdateBotInlineQuery) Getuser_id() int32                            { return m.data.user_id }
func (m *TLupdateBotInlineQuery) Setquery(v string)                            { m.data.query = v }
func (m *TLupdateBotInlineQuery) Getquery() string                             { return m.data.query }
func (m *TLupdateBotInlineQuery) Setgeo(v *GeoPoint)                           { m.data.geo = v }
func (m *TLupdateBotInlineQuery) Getgeo() *GeoPoint                            { return m.data.geo }
func (m *TLupdateBotInlineQuery) Setoffset(v string)                           { m.data.offset = v }
func (m *TLupdateBotInlineQuery) Getoffset() string                            { return m.data.offset }
func (m *TLupdateBotInlineSend) Setuser_id(v int32)                            { m.data.user_id = v }
func (m *TLupdateBotInlineSend) Getuser_id() int32                             { return m.data.user_id }
func (m *TLupdateBotInlineSend) Setquery(v string)                             { m.data.query = v }
func (m *TLupdateBotInlineSend) Getquery() string                              { return m.data.query }
func (m *TLupdateBotInlineSend) Setgeo(v *GeoPoint)                            { m.data.geo = v }
func (m *TLupdateBotInlineSend) Getgeo() *GeoPoint                             { return m.data.geo }
func (m *TLupdateBotInlineSend) Setid_51(v string)                             { m.data.id_51 = v }
func (m *TLupdateBotInlineSend) Getid_51() string                              { return m.data.id_51 }
func (m *TLupdateBotInlineSend) Setmsg_id(v *InputBotInlineMessageID)          { m.data.msg_id = v }
func (m *TLupdateBotInlineSend) Getmsg_id() *InputBotInlineMessageID           { return m.data.msg_id }
func (m *TLupdateEditChannelMessage) Setmessage(v *Message)                    { m.data.message = v }
func (m *TLupdateEditChannelMessage) Getmessage() *Message                     { return m.data.message }
func (m *TLupdateEditChannelMessage) Setpts(v int32)                           { m.data.pts = v }
func (m *TLupdateEditChannelMessage) Getpts() int32                            { return m.data.pts }
func (m *TLupdateEditChannelMessage) Setpts_count(v int32)                     { m.data.pts_count = v }
func (m *TLupdateEditChannelMessage) Getpts_count() int32                      { return m.data.pts_count }
func (m *TLupdateBotCallbackQuery) Setquery_id(v int64)                        { m.data.query_id = v }
func (m *TLupdateBotCallbackQuery) Getquery_id() int64                         { return m.data.query_id }
func (m *TLupdateBotCallbackQuery) Setuser_id(v int32)                         { m.data.user_id = v }
func (m *TLupdateBotCallbackQuery) Getuser_id() int32                          { return m.data.user_id }
func (m *TLupdateBotCallbackQuery) Setpeer_37(v *Peer)                         { m.data.peer_37 = v }
func (m *TLupdateBotCallbackQuery) Getpeer_37() *Peer                          { return m.data.peer_37 }
func (m *TLupdateBotCallbackQuery) Setmsg_id_53(v int32)                       { m.data.msg_id_53 = v }
func (m *TLupdateBotCallbackQuery) Getmsg_id_53() int32                        { return m.data.msg_id_53 }
func (m *TLupdateBotCallbackQuery) Setchat_instance(v int64)                   { m.data.chat_instance = v }
func (m *TLupdateBotCallbackQuery) Getchat_instance() int64                    { return m.data.chat_instance }
func (m *TLupdateBotCallbackQuery) Setdata(v []byte)                           { m.data.data = v }
func (m *TLupdateBotCallbackQuery) Getdata() []byte                            { return m.data.data }
func (m *TLupdateBotCallbackQuery) Setgame_short_name(v string)                { m.data.game_short_name = v }
func (m *TLupdateBotCallbackQuery) Getgame_short_name() string                 { return m.data.game_short_name }
func (m *TLupdateEditMessage) Setmessage(v *Message)                           { m.data.message = v }
func (m *TLupdateEditMessage) Getmessage() *Message                            { return m.data.message }
func (m *TLupdateEditMessage) Setpts(v int32)                                  { m.data.pts = v }
func (m *TLupdateEditMessage) Getpts() int32                                   { return m.data.pts }
func (m *TLupdateEditMessage) Setpts_count(v int32)                            { m.data.pts_count = v }
func (m *TLupdateEditMessage) Getpts_count() int32                             { return m.data.pts_count }
func (m *TLupdateInlineBotCallbackQuery) Setquery_id(v int64)                  { m.data.query_id = v }
func (m *TLupdateInlineBotCallbackQuery) Getquery_id() int64                   { return m.data.query_id }
func (m *TLupdateInlineBotCallbackQuery) Setuser_id(v int32)                   { m.data.user_id = v }
func (m *TLupdateInlineBotCallbackQuery) Getuser_id() int32                    { return m.data.user_id }
func (m *TLupdateInlineBotCallbackQuery) Setmsg_id(v *InputBotInlineMessageID) { m.data.msg_id = v }
func (m *TLupdateInlineBotCallbackQuery) Getmsg_id() *InputBotInlineMessageID  { return m.data.msg_id }
func (m *TLupdateInlineBotCallbackQuery) Setchat_instance(v int64)             { m.data.chat_instance = v }
func (m *TLupdateInlineBotCallbackQuery) Getchat_instance() int64              { return m.data.chat_instance }
func (m *TLupdateInlineBotCallbackQuery) Setdata(v []byte)                     { m.data.data = v }
func (m *TLupdateInlineBotCallbackQuery) Getdata() []byte                      { return m.data.data }
func (m *TLupdateInlineBotCallbackQuery) Setgame_short_name(v string)          { m.data.game_short_name = v }
func (m *TLupdateInlineBotCallbackQuery) Getgame_short_name() string           { return m.data.game_short_name }
func (m *TLupdateReadChannelOutbox) Setchannel_id(v int32)                     { m.data.channel_id = v }
func (m *TLupdateReadChannelOutbox) Getchannel_id() int32                      { return m.data.channel_id }
func (m *TLupdateReadChannelOutbox) Setmax_id(v int32)                         { m.data.max_id = v }
func (m *TLupdateReadChannelOutbox) Getmax_id() int32                          { return m.data.max_id }
func (m *TLupdateDraftMessage) Setpeer_37(v *Peer)                             { m.data.peer_37 = v }
func (m *TLupdateDraftMessage) Getpeer_37() *Peer                              { return m.data.peer_37 }
func (m *TLupdateDraftMessage) Setdraft(v *DraftMessage)                       { m.data.draft = v }
func (m *TLupdateDraftMessage) Getdraft() *DraftMessage                        { return m.data.draft }
func (m *TLupdateChannelWebPage) Setchannel_id(v int32)                        { m.data.channel_id = v }
func (m *TLupdateChannelWebPage) Getchannel_id() int32                         { return m.data.channel_id }
func (m *TLupdateChannelWebPage) Setwebpage(v *WebPage)                        { m.data.webpage = v }
func (m *TLupdateChannelWebPage) Getwebpage() *WebPage                         { return m.data.webpage }
func (m *TLupdateChannelWebPage) Setpts(v int32)                               { m.data.pts = v }
func (m *TLupdateChannelWebPage) Getpts() int32                                { return m.data.pts }
func (m *TLupdateChannelWebPage) Setpts_count(v int32)                         { m.data.pts_count = v }
func (m *TLupdateChannelWebPage) Getpts_count() int32                          { return m.data.pts_count }
func (m *TLupdateDialogPinned) Setpinned(v bool)                               { m.data.pinned = v }
func (m *TLupdateDialogPinned) Getpinned() bool                                { return m.data.pinned }
func (m *TLupdateDialogPinned) Setfolder_id(v int32)                           { m.data.folder_id = v }
func (m *TLupdateDialogPinned) Getfolder_id() int32                            { return m.data.folder_id }
func (m *TLupdateDialogPinned) Setpeer_59(v *DialogPeer)                       { m.data.peer_59 = v }
func (m *TLupdateDialogPinned) Getpeer_59() *DialogPeer                        { return m.data.peer_59 }
func (m *TLupdatePinnedDialogs) Setfolder_id(v int32)                          { m.data.folder_id = v }
func (m *TLupdatePinnedDialogs) Getfolder_id() int32                           { return m.data.folder_id }
func (m *TLupdatePinnedDialogs) Setorder_60(v []*DialogPeer)                   { m.data.order_60 = v }
func (m *TLupdatePinnedDialogs) Getorder_60() []*DialogPeer                    { return m.data.order_60 }
func (m *TLupdateBotWebhookJSON) Setdata_61(v *DataJSON)                       { m.data.data_61 = v }
func (m *TLupdateBotWebhookJSON) Getdata_61() *DataJSON                        { return m.data.data_61 }
func (m *TLupdateBotWebhookJSONQuery) Setquery_id(v int64)                     { m.data.query_id = v }
func (m *TLupdateBotWebhookJSONQuery) Getquery_id() int64                      { return m.data.query_id }
func (m *TLupdateBotWebhookJSONQuery) Setdata_61(v *DataJSON)                  { m.data.data_61 = v }
func (m *TLupdateBotWebhookJSONQuery) Getdata_61() *DataJSON                   { return m.data.data_61 }
func (m *TLupdateBotWebhookJSONQuery) Settimeout(v int32)                      { m.data.timeout = v }
func (m *TLupdateBotWebhookJSONQuery) Gettimeout() int32                       { return m.data.timeout }
func (m *TLupdateBotShippingQuery) Setquery_id(v int64)                        { m.data.query_id = v }
func (m *TLupdateBotShippingQuery) Getquery_id() int64                         { return m.data.query_id }
func (m *TLupdateBotShippingQuery) Setuser_id(v int32)                         { m.data.user_id = v }
func (m *TLupdateBotShippingQuery) Getuser_id() int32                          { return m.data.user_id }
func (m *TLupdateBotShippingQuery) Setpayload(v []byte)                        { m.data.payload = v }
func (m *TLupdateBotShippingQuery) Getpayload() []byte                         { return m.data.payload }
func (m *TLupdateBotShippingQuery) Setshipping_address(v *PostAddress)         { m.data.shipping_address = v }
func (m *TLupdateBotShippingQuery) Getshipping_address() *PostAddress          { return m.data.shipping_address }
func (m *TLupdateBotPrecheckoutQuery) Setquery_id(v int64)                     { m.data.query_id = v }
func (m *TLupdateBotPrecheckoutQuery) Getquery_id() int64                      { return m.data.query_id }
func (m *TLupdateBotPrecheckoutQuery) Setuser_id(v int32)                      { m.data.user_id = v }
func (m *TLupdateBotPrecheckoutQuery) Getuser_id() int32                       { return m.data.user_id }
func (m *TLupdateBotPrecheckoutQuery) Setpayload(v []byte)                     { m.data.payload = v }
func (m *TLupdateBotPrecheckoutQuery) Getpayload() []byte                      { return m.data.payload }
func (m *TLupdateBotPrecheckoutQuery) Setinfo(v *PaymentRequestedInfo)         { m.data.info = v }
func (m *TLupdateBotPrecheckoutQuery) Getinfo() *PaymentRequestedInfo          { return m.data.info }
func (m *TLupdateBotPrecheckoutQuery) Setshipping_option_id(v string)          { m.data.shipping_option_id = v }
func (m *TLupdateBotPrecheckoutQuery) Getshipping_option_id() string {
	return m.data.shipping_option_id
}
func (m *TLupdateBotPrecheckoutQuery) Setcurrency(v string)             { m.data.currency = v }
func (m *TLupdateBotPrecheckoutQuery) Getcurrency() string              { return m.data.currency }
func (m *TLupdateBotPrecheckoutQuery) Settotal_amount(v int64)          { m.data.total_amount = v }
func (m *TLupdateBotPrecheckoutQuery) Gettotal_amount() int64           { return m.data.total_amount }
func (m *TLupdatePhoneCall) Setphone_call(v *PhoneCall)                 { m.data.phone_call = v }
func (m *TLupdatePhoneCall) Getphone_call() *PhoneCall                  { return m.data.phone_call }
func (m *TLupdateLangPackTooLong) Setlang_code(v string)                { m.data.lang_code = v }
func (m *TLupdateLangPackTooLong) Getlang_code() string                 { return m.data.lang_code }
func (m *TLupdateLangPack) Setdifference(v *LangPackDifference)         { m.data.difference = v }
func (m *TLupdateLangPack) Getdifference() *LangPackDifference          { return m.data.difference }
func (m *TLupdateChannelReadMessagesContents) Setchannel_id(v int32)    { m.data.channel_id = v }
func (m *TLupdateChannelReadMessagesContents) Getchannel_id() int32     { return m.data.channel_id }
func (m *TLupdateChannelReadMessagesContents) Setmessages(v []int32)    { m.data.messages = v }
func (m *TLupdateChannelReadMessagesContents) Getmessages() []int32     { return m.data.messages }
func (m *TLupdateChannelAvailableMessages) Setchannel_id(v int32)       { m.data.channel_id = v }
func (m *TLupdateChannelAvailableMessages) Getchannel_id() int32        { return m.data.channel_id }
func (m *TLupdateChannelAvailableMessages) Setavailable_min_id(v int32) { m.data.available_min_id = v }
func (m *TLupdateChannelAvailableMessages) Getavailable_min_id() int32 {
	return m.data.available_min_id
}
func (m *TLupdateDialogUnreadMark) Setunread(v bool)          { m.data.unread = v }
func (m *TLupdateDialogUnreadMark) Getunread() bool           { return m.data.unread }
func (m *TLupdateDialogUnreadMark) Setpeer_59(v *DialogPeer)  { m.data.peer_59 = v }
func (m *TLupdateDialogUnreadMark) Getpeer_59() *DialogPeer   { return m.data.peer_59 }
func (m *TLupdateMessagePoll) Setpoll_id(v int64)             { m.data.poll_id = v }
func (m *TLupdateMessagePoll) Getpoll_id() int64              { return m.data.poll_id }
func (m *TLupdateMessagePoll) Setpoll(v *Poll)                { m.data.poll = v }
func (m *TLupdateMessagePoll) Getpoll() *Poll                 { return m.data.poll }
func (m *TLupdateMessagePoll) Setresults(v *PollResults)      { m.data.results = v }
func (m *TLupdateMessagePoll) Getresults() *PollResults       { return m.data.results }
func (m *TLupdateChatDefaultBannedRights) Setpeer_37(v *Peer) { m.data.peer_37 = v }
func (m *TLupdateChatDefaultBannedRights) Getpeer_37() *Peer  { return m.data.peer_37 }
func (m *TLupdateChatDefaultBannedRights) Setdefault_banned_rights(v *ChatBannedRights) {
	m.data.default_banned_rights = v
}
func (m *TLupdateChatDefaultBannedRights) Getdefault_banned_rights() *ChatBannedRights {
	return m.data.default_banned_rights
}
func (m *TLupdateChatDefaultBannedRights) Setversion(v int32)      { m.data.version = v }
func (m *TLupdateChatDefaultBannedRights) Getversion() int32       { return m.data.version }
func (m *TLupdateFolderPeers) Setfolder_peers(v []*FolderPeer)     { m.data.folder_peers = v }
func (m *TLupdateFolderPeers) Getfolder_peers() []*FolderPeer      { return m.data.folder_peers }
func (m *TLupdateFolderPeers) Setpts(v int32)                      { m.data.pts = v }
func (m *TLupdateFolderPeers) Getpts() int32                       { return m.data.pts }
func (m *TLupdateFolderPeers) Setpts_count(v int32)                { m.data.pts_count = v }
func (m *TLupdateFolderPeers) Getpts_count() int32                 { return m.data.pts_count }
func (m *TLupdatePeerSettings) Setpeer_37(v *Peer)                 { m.data.peer_37 = v }
func (m *TLupdatePeerSettings) Getpeer_37() *Peer                  { return m.data.peer_37 }
func (m *TLupdatePeerSettings) Setsettings(v *PeerSettings)        { m.data.settings = v }
func (m *TLupdatePeerSettings) Getsettings() *PeerSettings         { return m.data.settings }
func (m *TLupdatePeerLocated) Setpeers(v []*PeerLocated)           { m.data.peers = v }
func (m *TLupdatePeerLocated) Getpeers() []*PeerLocated            { return m.data.peers }
func (m *TLupdateNewScheduledMessage) Setmessage(v *Message)       { m.data.message = v }
func (m *TLupdateNewScheduledMessage) Getmessage() *Message        { return m.data.message }
func (m *TLupdateDeleteScheduledMessages) Setpeer_37(v *Peer)      { m.data.peer_37 = v }
func (m *TLupdateDeleteScheduledMessages) Getpeer_37() *Peer       { return m.data.peer_37 }
func (m *TLupdateDeleteScheduledMessages) Setmessages(v []int32)   { m.data.messages = v }
func (m *TLupdateDeleteScheduledMessages) Getmessages() []int32    { return m.data.messages }
func (m *TLupdateTheme) Settheme(v *Theme)                         { m.data.theme = v }
func (m *TLupdateTheme) Gettheme() *Theme                          { return m.data.theme }
func (m *TLupdateGeoLiveViewed) Setpeer_37(v *Peer)                { m.data.peer_37 = v }
func (m *TLupdateGeoLiveViewed) Getpeer_37() *Peer                 { return m.data.peer_37 }
func (m *TLupdateGeoLiveViewed) Setmsg_id_53(v int32)              { m.data.msg_id_53 = v }
func (m *TLupdateGeoLiveViewed) Getmsg_id_53() int32               { return m.data.msg_id_53 }
func (m *TLupdateMessagePollVote) Setpoll_id(v int64)              { m.data.poll_id = v }
func (m *TLupdateMessagePollVote) Getpoll_id() int64               { return m.data.poll_id }
func (m *TLupdateMessagePollVote) Setuser_id(v int32)              { m.data.user_id = v }
func (m *TLupdateMessagePollVote) Getuser_id() int32               { return m.data.user_id }
func (m *TLupdateMessagePollVote) Setoptions(v [][]byte)           { m.data.options = v }
func (m *TLupdateMessagePollVote) Getoptions() [][]byte            { return m.data.options }
func (m *TLupdateDialogFilter) Setid(v int32)                      { m.data.id = v }
func (m *TLupdateDialogFilter) Getid() int32                       { return m.data.id }
func (m *TLupdateDialogFilter) Setfilter(v *DialogFilter)          { m.data.filter = v }
func (m *TLupdateDialogFilter) Getfilter() *DialogFilter           { return m.data.filter }
func (m *TLupdateDialogFilterOrder) Setorder_84(v []int32)         { m.data.order_84 = v }
func (m *TLupdateDialogFilterOrder) Getorder_84() []int32          { return m.data.order_84 }
func (m *TLupdatePhoneCallSignalingData) Setphone_call_id(v int64) { m.data.phone_call_id = v }
func (m *TLupdatePhoneCallSignalingData) Getphone_call_id() int64  { return m.data.phone_call_id }
func (m *TLupdatePhoneCallSignalingData) Setdata(v []byte)         { m.data.data = v }
func (m *TLupdatePhoneCallSignalingData) Getdata() []byte          { return m.data.data }
func (m *TLupdateChannelParticipant) Setchannel_id(v int32)        { m.data.channel_id = v }
func (m *TLupdateChannelParticipant) Getchannel_id() int32         { return m.data.channel_id }
func (m *TLupdateChannelParticipant) Setdate(v int32)              { m.data.date = v }
func (m *TLupdateChannelParticipant) Getdate() int32               { return m.data.date }
func (m *TLupdateChannelParticipant) Setuser_id(v int32)           { m.data.user_id = v }
func (m *TLupdateChannelParticipant) Getuser_id() int32            { return m.data.user_id }
func (m *TLupdateChannelParticipant) Setprev_participant(v *ChannelParticipant) {
	m.data.prev_participant = v
}
func (m *TLupdateChannelParticipant) Getprev_participant() *ChannelParticipant {
	return m.data.prev_participant
}
func (m *TLupdateChannelParticipant) Setnew_participant(v *ChannelParticipant) {
	m.data.new_participant = v
}
func (m *TLupdateChannelParticipant) Getnew_participant() *ChannelParticipant {
	return m.data.new_participant
}
func (m *TLupdateChannelParticipant) Setqts(v int32)                    { m.data.qts = v }
func (m *TLupdateChannelParticipant) Getqts() int32                     { return m.data.qts }
func (m *TLupdateChannelMessageForwards) Setchannel_id(v int32)         { m.data.channel_id = v }
func (m *TLupdateChannelMessageForwards) Getchannel_id() int32          { return m.data.channel_id }
func (m *TLupdateChannelMessageForwards) Setid(v int32)                 { m.data.id = v }
func (m *TLupdateChannelMessageForwards) Getid() int32                  { return m.data.id }
func (m *TLupdateChannelMessageForwards) Setforwards(v int32)           { m.data.forwards = v }
func (m *TLupdateChannelMessageForwards) Getforwards() int32            { return m.data.forwards }
func (m *TLupdateReadChannelDiscussionInbox) Setchannel_id(v int32)     { m.data.channel_id = v }
func (m *TLupdateReadChannelDiscussionInbox) Getchannel_id() int32      { return m.data.channel_id }
func (m *TLupdateReadChannelDiscussionInbox) Settop_msg_id(v int32)     { m.data.top_msg_id = v }
func (m *TLupdateReadChannelDiscussionInbox) Gettop_msg_id() int32      { return m.data.top_msg_id }
func (m *TLupdateReadChannelDiscussionInbox) Setread_max_id(v int32)    { m.data.read_max_id = v }
func (m *TLupdateReadChannelDiscussionInbox) Getread_max_id() int32     { return m.data.read_max_id }
func (m *TLupdateReadChannelDiscussionInbox) Setbroadcast_id(v int32)   { m.data.broadcast_id = v }
func (m *TLupdateReadChannelDiscussionInbox) Getbroadcast_id() int32    { return m.data.broadcast_id }
func (m *TLupdateReadChannelDiscussionInbox) Setbroadcast_post(v int32) { m.data.broadcast_post = v }
func (m *TLupdateReadChannelDiscussionInbox) Getbroadcast_post() int32  { return m.data.broadcast_post }
func (m *TLupdateReadChannelDiscussionOutbox) Setchannel_id(v int32)    { m.data.channel_id = v }
func (m *TLupdateReadChannelDiscussionOutbox) Getchannel_id() int32     { return m.data.channel_id }
func (m *TLupdateReadChannelDiscussionOutbox) Settop_msg_id(v int32)    { m.data.top_msg_id = v }
func (m *TLupdateReadChannelDiscussionOutbox) Gettop_msg_id() int32     { return m.data.top_msg_id }
func (m *TLupdateReadChannelDiscussionOutbox) Setread_max_id(v int32)   { m.data.read_max_id = v }
func (m *TLupdateReadChannelDiscussionOutbox) Getread_max_id() int32    { return m.data.read_max_id }
func (m *TLupdatePeerBlocked) Setpeer_id(v *Peer)                       { m.data.peer_id = v }
func (m *TLupdatePeerBlocked) Getpeer_id() *Peer                        { return m.data.peer_id }
func (m *TLupdatePeerBlocked) Setblocked(v *Bool)                       { m.data.blocked = v }
func (m *TLupdatePeerBlocked) Getblocked() *Bool                        { return m.data.blocked }
func (m *TLupdateChannelUserTyping) Setchannel_id(v int32)              { m.data.channel_id = v }
func (m *TLupdateChannelUserTyping) Getchannel_id() int32               { return m.data.channel_id }
func (m *TLupdateChannelUserTyping) Settop_msg_id(v int32)              { m.data.top_msg_id = v }
func (m *TLupdateChannelUserTyping) Gettop_msg_id() int32               { return m.data.top_msg_id }
func (m *TLupdateChannelUserTyping) Setuser_id(v int32)                 { m.data.user_id = v }
func (m *TLupdateChannelUserTyping) Getuser_id() int32                  { return m.data.user_id }
func (m *TLupdateChannelUserTyping) Setaction(v *SendMessageAction)     { m.data.action = v }
func (m *TLupdateChannelUserTyping) Getaction() *SendMessageAction      { return m.data.action }
func (m *TLupdatePinnedMessages) Setpinned(v bool)                      { m.data.pinned = v }
func (m *TLupdatePinnedMessages) Getpinned() bool                       { return m.data.pinned }
func (m *TLupdatePinnedMessages) Setpeer_37(v *Peer)                    { m.data.peer_37 = v }
func (m *TLupdatePinnedMessages) Getpeer_37() *Peer                     { return m.data.peer_37 }
func (m *TLupdatePinnedMessages) Setmessages(v []int32)                 { m.data.messages = v }
func (m *TLupdatePinnedMessages) Getmessages() []int32                  { return m.data.messages }
func (m *TLupdatePinnedMessages) Setpts(v int32)                        { m.data.pts = v }
func (m *TLupdatePinnedMessages) Getpts() int32                         { return m.data.pts }
func (m *TLupdatePinnedMessages) Setpts_count(v int32)                  { m.data.pts_count = v }
func (m *TLupdatePinnedMessages) Getpts_count() int32                   { return m.data.pts_count }
func (m *TLupdatePinnedChannelMessages) Setpinned(v bool)               { m.data.pinned = v }
func (m *TLupdatePinnedChannelMessages) Getpinned() bool                { return m.data.pinned }
func (m *TLupdatePinnedChannelMessages) Setchannel_id(v int32)          { m.data.channel_id = v }
func (m *TLupdatePinnedChannelMessages) Getchannel_id() int32           { return m.data.channel_id }
func (m *TLupdatePinnedChannelMessages) Setmessages(v []int32)          { m.data.messages = v }
func (m *TLupdatePinnedChannelMessages) Getmessages() []int32           { return m.data.messages }
func (m *TLupdatePinnedChannelMessages) Setpts(v int32)                 { m.data.pts = v }
func (m *TLupdatePinnedChannelMessages) Getpts() int32                  { return m.data.pts }
func (m *TLupdatePinnedChannelMessages) Setpts_count(v int32)           { m.data.pts_count = v }
func (m *TLupdatePinnedChannelMessages) Getpts_count() int32            { return m.data.pts_count }

///////////////////////////////////////////////////////////////////////////////
// Constructors:UserFull
// UserFull <--
// + TLuserFull
//
// Constructors:Type:UserFull
type UserFull struct {
	constructor int32
	data        *UserFull_Data
}

// Constructors:Type:Data:UserFull
type UserFull_Data struct {
	blocked               bool
	phone_calls_available bool
	phone_calls_private   bool
	can_pin_message       bool
	has_scheduled         bool
	video_calls_available bool
	user                  *User
	about                 string
	settings              *PeerSettings
	profile_photo         *Photo
	notify_settings       *PeerNotifySettings
	bot_info              *BotInfo
	pinned_msg_id         int32
	common_chats_count    int32
	folder_id             int32
}

// Constructors:Predicate:userFull
type TLuserFull struct {
	data *UserFull_Data
}

// Constructors:New:userFull
func NewTLuserFull() *TLuserFull {
	return &TLuserFull{data: &UserFull_Data{}}
}
func (m *TLuserFull) Setblocked(v bool)                        { m.data.blocked = v }
func (m *TLuserFull) Getblocked() bool                         { return m.data.blocked }
func (m *TLuserFull) Setphone_calls_available(v bool)          { m.data.phone_calls_available = v }
func (m *TLuserFull) Getphone_calls_available() bool           { return m.data.phone_calls_available }
func (m *TLuserFull) Setphone_calls_private(v bool)            { m.data.phone_calls_private = v }
func (m *TLuserFull) Getphone_calls_private() bool             { return m.data.phone_calls_private }
func (m *TLuserFull) Setcan_pin_message(v bool)                { m.data.can_pin_message = v }
func (m *TLuserFull) Getcan_pin_message() bool                 { return m.data.can_pin_message }
func (m *TLuserFull) Sethas_scheduled(v bool)                  { m.data.has_scheduled = v }
func (m *TLuserFull) Gethas_scheduled() bool                   { return m.data.has_scheduled }
func (m *TLuserFull) Setvideo_calls_available(v bool)          { m.data.video_calls_available = v }
func (m *TLuserFull) Getvideo_calls_available() bool           { return m.data.video_calls_available }
func (m *TLuserFull) Setuser(v *User)                          { m.data.user = v }
func (m *TLuserFull) Getuser() *User                           { return m.data.user }
func (m *TLuserFull) Setabout(v string)                        { m.data.about = v }
func (m *TLuserFull) Getabout() string                         { return m.data.about }
func (m *TLuserFull) Setsettings(v *PeerSettings)              { m.data.settings = v }
func (m *TLuserFull) Getsettings() *PeerSettings               { return m.data.settings }
func (m *TLuserFull) Setprofile_photo(v *Photo)                { m.data.profile_photo = v }
func (m *TLuserFull) Getprofile_photo() *Photo                 { return m.data.profile_photo }
func (m *TLuserFull) Setnotify_settings(v *PeerNotifySettings) { m.data.notify_settings = v }
func (m *TLuserFull) Getnotify_settings() *PeerNotifySettings  { return m.data.notify_settings }
func (m *TLuserFull) Setbot_info(v *BotInfo)                   { m.data.bot_info = v }
func (m *TLuserFull) Getbot_info() *BotInfo                    { return m.data.bot_info }
func (m *TLuserFull) Setpinned_msg_id(v int32)                 { m.data.pinned_msg_id = v }
func (m *TLuserFull) Getpinned_msg_id() int32                  { return m.data.pinned_msg_id }
func (m *TLuserFull) Setcommon_chats_count(v int32)            { m.data.common_chats_count = v }
func (m *TLuserFull) Getcommon_chats_count() int32             { return m.data.common_chats_count }
func (m *TLuserFull) Setfolder_id(v int32)                     { m.data.folder_id = v }
func (m *TLuserFull) Getfolder_id() int32                      { return m.data.folder_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PageListOrderedItem
// PageListOrderedItem <--
// + TLpageListOrderedItemText
// + TLpageListOrderedItemBlocks
//
// Constructors:Type:PageListOrderedItem
type PageListOrderedItem struct {
	constructor int32
	data        *PageListOrderedItem_Data
}

// Constructors:Type:Data:PageListOrderedItem
type PageListOrderedItem_Data struct {
	num    string
	text   *RichText
	blocks []*PageBlock
}

// Constructors:Predicate:pageListOrderedItemText
type TLpageListOrderedItemText struct {
	data *PageListOrderedItem_Data
}

// Constructors:New:pageListOrderedItemText
func NewTLpageListOrderedItemText() *TLpageListOrderedItemText {
	return &TLpageListOrderedItemText{data: &PageListOrderedItem_Data{}}
}

// Constructors:Predicate:pageListOrderedItemBlocks
type TLpageListOrderedItemBlocks struct {
	data *PageListOrderedItem_Data
}

// Constructors:New:pageListOrderedItemBlocks
func NewTLpageListOrderedItemBlocks() *TLpageListOrderedItemBlocks {
	return &TLpageListOrderedItemBlocks{data: &PageListOrderedItem_Data{}}
}
func (m *TLpageListOrderedItemText) Setnum(v string)            { m.data.num = v }
func (m *TLpageListOrderedItemText) Getnum() string             { return m.data.num }
func (m *TLpageListOrderedItemText) Settext(v *RichText)        { m.data.text = v }
func (m *TLpageListOrderedItemText) Gettext() *RichText         { return m.data.text }
func (m *TLpageListOrderedItemBlocks) Setnum(v string)          { m.data.num = v }
func (m *TLpageListOrderedItemBlocks) Getnum() string           { return m.data.num }
func (m *TLpageListOrderedItemBlocks) Setblocks(v []*PageBlock) { m.data.blocks = v }
func (m *TLpageListOrderedItemBlocks) Getblocks() []*PageBlock  { return m.data.blocks }

///////////////////////////////////////////////////////////////////////////////
// Constructors:updates_ChannelDifference
// updates_ChannelDifference <--
// + TLupdates_channelDifferenceEmpty
// + TLupdates_channelDifferenceTooLong
// + TLupdates_channelDifference
//
// Constructors:Type:updates_ChannelDifference
type updates_ChannelDifference struct {
	constructor int32
	data        *updates_ChannelDifference_Data
}

// Constructors:Type:Data:updates_ChannelDifference
type updates_ChannelDifference_Data struct {
	final         bool
	pts           int32
	timeout       int32
	dialog        *Dialog
	messages      []*Message
	chats         []*Chat
	users         []*User
	new_messages  []*Message
	other_updates []*Update
}

// Constructors:Predicate:updates_channelDifferenceEmpty
type TLupdates_channelDifferenceEmpty struct {
	data *updates_ChannelDifference_Data
}

// Constructors:New:updates_channelDifferenceEmpty
func NewTLupdates_channelDifferenceEmpty() *TLupdates_channelDifferenceEmpty {
	return &TLupdates_channelDifferenceEmpty{data: &updates_ChannelDifference_Data{}}
}

// Constructors:Predicate:updates_channelDifferenceTooLong
type TLupdates_channelDifferenceTooLong struct {
	data *updates_ChannelDifference_Data
}

// Constructors:New:updates_channelDifferenceTooLong
func NewTLupdates_channelDifferenceTooLong() *TLupdates_channelDifferenceTooLong {
	return &TLupdates_channelDifferenceTooLong{data: &updates_ChannelDifference_Data{}}
}

// Constructors:Predicate:updates_channelDifference
type TLupdates_channelDifference struct {
	data *updates_ChannelDifference_Data
}

// Constructors:New:updates_channelDifference
func NewTLupdates_channelDifference() *TLupdates_channelDifference {
	return &TLupdates_channelDifference{data: &updates_ChannelDifference_Data{}}
}
func (m *TLupdates_channelDifferenceEmpty) Setfinal(v bool)            { m.data.final = v }
func (m *TLupdates_channelDifferenceEmpty) Getfinal() bool             { return m.data.final }
func (m *TLupdates_channelDifferenceEmpty) Setpts(v int32)             { m.data.pts = v }
func (m *TLupdates_channelDifferenceEmpty) Getpts() int32              { return m.data.pts }
func (m *TLupdates_channelDifferenceEmpty) Settimeout(v int32)         { m.data.timeout = v }
func (m *TLupdates_channelDifferenceEmpty) Gettimeout() int32          { return m.data.timeout }
func (m *TLupdates_channelDifferenceTooLong) Setfinal(v bool)          { m.data.final = v }
func (m *TLupdates_channelDifferenceTooLong) Getfinal() bool           { return m.data.final }
func (m *TLupdates_channelDifferenceTooLong) Settimeout(v int32)       { m.data.timeout = v }
func (m *TLupdates_channelDifferenceTooLong) Gettimeout() int32        { return m.data.timeout }
func (m *TLupdates_channelDifferenceTooLong) Setdialog(v *Dialog)      { m.data.dialog = v }
func (m *TLupdates_channelDifferenceTooLong) Getdialog() *Dialog       { return m.data.dialog }
func (m *TLupdates_channelDifferenceTooLong) Setmessages(v []*Message) { m.data.messages = v }
func (m *TLupdates_channelDifferenceTooLong) Getmessages() []*Message  { return m.data.messages }
func (m *TLupdates_channelDifferenceTooLong) Setchats(v []*Chat)       { m.data.chats = v }
func (m *TLupdates_channelDifferenceTooLong) Getchats() []*Chat        { return m.data.chats }
func (m *TLupdates_channelDifferenceTooLong) Setusers(v []*User)       { m.data.users = v }
func (m *TLupdates_channelDifferenceTooLong) Getusers() []*User        { return m.data.users }
func (m *TLupdates_channelDifference) Setfinal(v bool)                 { m.data.final = v }
func (m *TLupdates_channelDifference) Getfinal() bool                  { return m.data.final }
func (m *TLupdates_channelDifference) Setpts(v int32)                  { m.data.pts = v }
func (m *TLupdates_channelDifference) Getpts() int32                   { return m.data.pts }
func (m *TLupdates_channelDifference) Settimeout(v int32)              { m.data.timeout = v }
func (m *TLupdates_channelDifference) Gettimeout() int32               { return m.data.timeout }
func (m *TLupdates_channelDifference) Setnew_messages(v []*Message)    { m.data.new_messages = v }
func (m *TLupdates_channelDifference) Getnew_messages() []*Message     { return m.data.new_messages }
func (m *TLupdates_channelDifference) Setother_updates(v []*Update)    { m.data.other_updates = v }
func (m *TLupdates_channelDifference) Getother_updates() []*Update     { return m.data.other_updates }
func (m *TLupdates_channelDifference) Setchats(v []*Chat)              { m.data.chats = v }
func (m *TLupdates_channelDifference) Getchats() []*Chat               { return m.data.chats }
func (m *TLupdates_channelDifference) Setusers(v []*User)              { m.data.users = v }
func (m *TLupdates_channelDifference) Getusers() []*User               { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:help_AppUpdate
// help_AppUpdate <--
// + TLhelp_appUpdate
// + TLhelp_noAppUpdate
//
// Constructors:Type:help_AppUpdate
type help_AppUpdate struct {
	constructor int32
	data        *help_AppUpdate_Data
}

// Constructors:Type:Data:help_AppUpdate
type help_AppUpdate_Data struct {
	can_not_skip bool
	id           int32
	version      string
	text         string
	entities     []*MessageEntity
	document     *Document
	url          string
}

// Constructors:Predicate:help_appUpdate
type TLhelp_appUpdate struct {
	data *help_AppUpdate_Data
}

// Constructors:New:help_appUpdate
func NewTLhelp_appUpdate() *TLhelp_appUpdate {
	return &TLhelp_appUpdate{data: &help_AppUpdate_Data{}}
}

// Constructors:Predicate:help_noAppUpdate
type TLhelp_noAppUpdate struct {
	data *help_AppUpdate_Data
}

// Constructors:New:help_noAppUpdate
func NewTLhelp_noAppUpdate() *TLhelp_noAppUpdate {
	return &TLhelp_noAppUpdate{data: &help_AppUpdate_Data{}}
}
func (m *TLhelp_appUpdate) Setcan_not_skip(v bool)         { m.data.can_not_skip = v }
func (m *TLhelp_appUpdate) Getcan_not_skip() bool          { return m.data.can_not_skip }
func (m *TLhelp_appUpdate) Setid(v int32)                  { m.data.id = v }
func (m *TLhelp_appUpdate) Getid() int32                   { return m.data.id }
func (m *TLhelp_appUpdate) Setversion(v string)            { m.data.version = v }
func (m *TLhelp_appUpdate) Getversion() string             { return m.data.version }
func (m *TLhelp_appUpdate) Settext(v string)               { m.data.text = v }
func (m *TLhelp_appUpdate) Gettext() string                { return m.data.text }
func (m *TLhelp_appUpdate) Setentities(v []*MessageEntity) { m.data.entities = v }
func (m *TLhelp_appUpdate) Getentities() []*MessageEntity  { return m.data.entities }
func (m *TLhelp_appUpdate) Setdocument(v *Document)        { m.data.document = v }
func (m *TLhelp_appUpdate) Getdocument() *Document         { return m.data.document }
func (m *TLhelp_appUpdate) Seturl(v string)                { m.data.url = v }
func (m *TLhelp_appUpdate) Geturl() string                 { return m.data.url }

///////////////////////////////////////////////////////////////////////////////
// Constructors:Bool
// Bool <--
// + TLboolFalse
// + TLboolTrue
//
// Constructors:Type:Bool
type Bool struct {
	constructor int32
	data        *Bool_Data
}

// Constructors:Type:Data:Bool
type Bool_Data struct {
}

// Constructors:Predicate:boolFalse
type TLboolFalse struct {
	data *Bool_Data
}

// Constructors:New:boolFalse
func NewTLboolFalse() *TLboolFalse {
	return &TLboolFalse{data: &Bool_Data{}}
}

// Constructors:Predicate:boolTrue
type TLboolTrue struct {
	data *Bool_Data
}

// Constructors:New:boolTrue
func NewTLboolTrue() *TLboolTrue {
	return &TLboolTrue{data: &Bool_Data{}}
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:ReceivedNotifyMessage
// ReceivedNotifyMessage <--
// + TLreceivedNotifyMessage
//
// Constructors:Type:ReceivedNotifyMessage
type ReceivedNotifyMessage struct {
	constructor int32
	data        *ReceivedNotifyMessage_Data
}

// Constructors:Type:Data:ReceivedNotifyMessage
type ReceivedNotifyMessage_Data struct {
	id    int32
	flags int32
}

// Constructors:Predicate:receivedNotifyMessage
type TLreceivedNotifyMessage struct {
	data *ReceivedNotifyMessage_Data
}

// Constructors:New:receivedNotifyMessage
func NewTLreceivedNotifyMessage() *TLreceivedNotifyMessage {
	return &TLreceivedNotifyMessage{data: &ReceivedNotifyMessage_Data{}}
}
func (m *TLreceivedNotifyMessage) Setid(v int32)    { m.data.id = v }
func (m *TLreceivedNotifyMessage) Getid() int32     { return m.data.id }
func (m *TLreceivedNotifyMessage) Setflags(v int32) { m.data.flags = v }
func (m *TLreceivedNotifyMessage) Getflags() int32  { return m.data.flags }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ChannelMessagesFilter
// ChannelMessagesFilter <--
// + TLchannelMessagesFilterEmpty
// + TLchannelMessagesFilter
//
// Constructors:Type:ChannelMessagesFilter
type ChannelMessagesFilter struct {
	constructor int32
	data        *ChannelMessagesFilter_Data
}

// Constructors:Type:Data:ChannelMessagesFilter
type ChannelMessagesFilter_Data struct {
	exclude_new_messages bool
	ranges               []*MessageRange
}

// Constructors:Predicate:channelMessagesFilterEmpty
type TLchannelMessagesFilterEmpty struct {
	data *ChannelMessagesFilter_Data
}

// Constructors:New:channelMessagesFilterEmpty
func NewTLchannelMessagesFilterEmpty() *TLchannelMessagesFilterEmpty {
	return &TLchannelMessagesFilterEmpty{data: &ChannelMessagesFilter_Data{}}
}

// Constructors:Predicate:channelMessagesFilter
type TLchannelMessagesFilter struct {
	data *ChannelMessagesFilter_Data
}

// Constructors:New:channelMessagesFilter
func NewTLchannelMessagesFilter() *TLchannelMessagesFilter {
	return &TLchannelMessagesFilter{data: &ChannelMessagesFilter_Data{}}
}
func (m *TLchannelMessagesFilter) Setexclude_new_messages(v bool) { m.data.exclude_new_messages = v }
func (m *TLchannelMessagesFilter) Getexclude_new_messages() bool  { return m.data.exclude_new_messages }
func (m *TLchannelMessagesFilter) Setranges(v []*MessageRange)    { m.data.ranges = v }
func (m *TLchannelMessagesFilter) Getranges() []*MessageRange     { return m.data.ranges }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputStickerSet
// InputStickerSet <--
// + TLinputStickerSetEmpty
// + TLinputStickerSetID
// + TLinputStickerSetShortName
// + TLinputStickerSetAnimatedEmoji
// + TLinputStickerSetDice
//
// Constructors:Type:InputStickerSet
type InputStickerSet struct {
	constructor int32
	data        *InputStickerSet_Data
}

// Constructors:Type:Data:InputStickerSet
type InputStickerSet_Data struct {
	id          int64
	access_hash int64
	short_name  string
	emoticon    string
}

// Constructors:Predicate:inputStickerSetEmpty
type TLinputStickerSetEmpty struct {
	data *InputStickerSet_Data
}

// Constructors:New:inputStickerSetEmpty
func NewTLinputStickerSetEmpty() *TLinputStickerSetEmpty {
	return &TLinputStickerSetEmpty{data: &InputStickerSet_Data{}}
}

// Constructors:Predicate:inputStickerSetID
type TLinputStickerSetID struct {
	data *InputStickerSet_Data
}

// Constructors:New:inputStickerSetID
func NewTLinputStickerSetID() *TLinputStickerSetID {
	return &TLinputStickerSetID{data: &InputStickerSet_Data{}}
}

// Constructors:Predicate:inputStickerSetShortName
type TLinputStickerSetShortName struct {
	data *InputStickerSet_Data
}

// Constructors:New:inputStickerSetShortName
func NewTLinputStickerSetShortName() *TLinputStickerSetShortName {
	return &TLinputStickerSetShortName{data: &InputStickerSet_Data{}}
}

// Constructors:Predicate:inputStickerSetAnimatedEmoji
type TLinputStickerSetAnimatedEmoji struct {
	data *InputStickerSet_Data
}

// Constructors:New:inputStickerSetAnimatedEmoji
func NewTLinputStickerSetAnimatedEmoji() *TLinputStickerSetAnimatedEmoji {
	return &TLinputStickerSetAnimatedEmoji{data: &InputStickerSet_Data{}}
}

// Constructors:Predicate:inputStickerSetDice
type TLinputStickerSetDice struct {
	data *InputStickerSet_Data
}

// Constructors:New:inputStickerSetDice
func NewTLinputStickerSetDice() *TLinputStickerSetDice {
	return &TLinputStickerSetDice{data: &InputStickerSet_Data{}}
}
func (m *TLinputStickerSetID) Setid(v int64)                 { m.data.id = v }
func (m *TLinputStickerSetID) Getid() int64                  { return m.data.id }
func (m *TLinputStickerSetID) Setaccess_hash(v int64)        { m.data.access_hash = v }
func (m *TLinputStickerSetID) Getaccess_hash() int64         { return m.data.access_hash }
func (m *TLinputStickerSetShortName) Setshort_name(v string) { m.data.short_name = v }
func (m *TLinputStickerSetShortName) Getshort_name() string  { return m.data.short_name }
func (m *TLinputStickerSetDice) Setemoticon(v string)        { m.data.emoticon = v }
func (m *TLinputStickerSetDice) Getemoticon() string         { return m.data.emoticon }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_MessageEditData
// messages_MessageEditData <--
// + TLmessages_messageEditData
//
// Constructors:Type:messages_MessageEditData
type messages_MessageEditData struct {
	constructor int32
	data        *messages_MessageEditData_Data
}

// Constructors:Type:Data:messages_MessageEditData
type messages_MessageEditData_Data struct {
	caption bool
}

// Constructors:Predicate:messages_messageEditData
type TLmessages_messageEditData struct {
	data *messages_MessageEditData_Data
}

// Constructors:New:messages_messageEditData
func NewTLmessages_messageEditData() *TLmessages_messageEditData {
	return &TLmessages_messageEditData{data: &messages_MessageEditData_Data{}}
}
func (m *TLmessages_messageEditData) Setcaption(v bool) { m.data.caption = v }
func (m *TLmessages_messageEditData) Getcaption() bool  { return m.data.caption }

///////////////////////////////////////////////////////////////////////////////
// Constructors:StatsGraph
// StatsGraph <--
// + TLstatsGraphAsync
// + TLstatsGraphError
// + TLstatsGraph
//
// Constructors:Type:StatsGraph
type StatsGraph struct {
	constructor int32
	data        *StatsGraph_Data
}

// Constructors:Type:Data:StatsGraph
type StatsGraph_Data struct {
	token      string
	error      string
	json       *DataJSON
	zoom_token string
}

// Constructors:Predicate:statsGraphAsync
type TLstatsGraphAsync struct {
	data *StatsGraph_Data
}

// Constructors:New:statsGraphAsync
func NewTLstatsGraphAsync() *TLstatsGraphAsync {
	return &TLstatsGraphAsync{data: &StatsGraph_Data{}}
}

// Constructors:Predicate:statsGraphError
type TLstatsGraphError struct {
	data *StatsGraph_Data
}

// Constructors:New:statsGraphError
func NewTLstatsGraphError() *TLstatsGraphError {
	return &TLstatsGraphError{data: &StatsGraph_Data{}}
}

// Constructors:Predicate:statsGraph
type TLstatsGraph struct {
	data *StatsGraph_Data
}

// Constructors:New:statsGraph
func NewTLstatsGraph() *TLstatsGraph {
	return &TLstatsGraph{data: &StatsGraph_Data{}}
}
func (m *TLstatsGraphAsync) Settoken(v string) { m.data.token = v }
func (m *TLstatsGraphAsync) Gettoken() string  { return m.data.token }
func (m *TLstatsGraphError) Seterror(v string) { m.data.error = v }
func (m *TLstatsGraphError) Geterror() string  { return m.data.error }
func (m *TLstatsGraph) Setjson(v *DataJSON)    { m.data.json = v }
func (m *TLstatsGraph) Getjson() *DataJSON     { return m.data.json }
func (m *TLstatsGraph) Setzoom_token(v string) { m.data.zoom_token = v }
func (m *TLstatsGraph) Getzoom_token() string  { return m.data.zoom_token }

///////////////////////////////////////////////////////////////////////////////
// Constructors:auth_Authorization
// auth_Authorization <--
// + TLauth_authorization
// + TLauth_authorizationSignUpRequired
//
// Constructors:Type:auth_Authorization
type auth_Authorization struct {
	constructor int32
	data        *auth_Authorization_Data
}

// Constructors:Type:Data:auth_Authorization
type auth_Authorization_Data struct {
	tmp_sessions     int32
	user             *User
	terms_of_service *help_TermsOfService
}

// Constructors:Predicate:auth_authorization
type TLauth_authorization struct {
	data *auth_Authorization_Data
}

// Constructors:New:auth_authorization
func NewTLauth_authorization() *TLauth_authorization {
	return &TLauth_authorization{data: &auth_Authorization_Data{}}
}

// Constructors:Predicate:auth_authorizationSignUpRequired
type TLauth_authorizationSignUpRequired struct {
	data *auth_Authorization_Data
}

// Constructors:New:auth_authorizationSignUpRequired
func NewTLauth_authorizationSignUpRequired() *TLauth_authorizationSignUpRequired {
	return &TLauth_authorizationSignUpRequired{data: &auth_Authorization_Data{}}
}
func (m *TLauth_authorization) Settmp_sessions(v int32) { m.data.tmp_sessions = v }
func (m *TLauth_authorization) Gettmp_sessions() int32  { return m.data.tmp_sessions }
func (m *TLauth_authorization) Setuser(v *User)         { m.data.user = v }
func (m *TLauth_authorization) Getuser() *User          { return m.data.user }
func (m *TLauth_authorizationSignUpRequired) Setterms_of_service(v *help_TermsOfService) {
	m.data.terms_of_service = v
}
func (m *TLauth_authorizationSignUpRequired) Getterms_of_service() *help_TermsOfService {
	return m.data.terms_of_service
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:contacts_ResolvedPeer
// contacts_ResolvedPeer <--
// + TLcontacts_resolvedPeer
//
// Constructors:Type:contacts_ResolvedPeer
type contacts_ResolvedPeer struct {
	constructor int32
	data        *contacts_ResolvedPeer_Data
}

// Constructors:Type:Data:contacts_ResolvedPeer
type contacts_ResolvedPeer_Data struct {
	peer  *Peer
	chats []*Chat
	users []*User
}

// Constructors:Predicate:contacts_resolvedPeer
type TLcontacts_resolvedPeer struct {
	data *contacts_ResolvedPeer_Data
}

// Constructors:New:contacts_resolvedPeer
func NewTLcontacts_resolvedPeer() *TLcontacts_resolvedPeer {
	return &TLcontacts_resolvedPeer{data: &contacts_ResolvedPeer_Data{}}
}
func (m *TLcontacts_resolvedPeer) Setpeer(v *Peer)    { m.data.peer = v }
func (m *TLcontacts_resolvedPeer) Getpeer() *Peer     { return m.data.peer }
func (m *TLcontacts_resolvedPeer) Setchats(v []*Chat) { m.data.chats = v }
func (m *TLcontacts_resolvedPeer) Getchats() []*Chat  { return m.data.chats }
func (m *TLcontacts_resolvedPeer) Setusers(v []*User) { m.data.users = v }
func (m *TLcontacts_resolvedPeer) Getusers() []*User  { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:LangPackString
// LangPackString <--
// + TLlangPackString
// + TLlangPackStringPluralized
// + TLlangPackStringDeleted
//
// Constructors:Type:LangPackString
type LangPackString struct {
	constructor int32
	data        *LangPackString_Data
}

// Constructors:Type:Data:LangPackString
type LangPackString_Data struct {
	key         string
	value       string
	zero_value  string
	one_value   string
	two_value   string
	few_value   string
	many_value  string
	other_value string
}

// Constructors:Predicate:langPackString
type TLlangPackString struct {
	data *LangPackString_Data
}

// Constructors:New:langPackString
func NewTLlangPackString() *TLlangPackString {
	return &TLlangPackString{data: &LangPackString_Data{}}
}

// Constructors:Predicate:langPackStringPluralized
type TLlangPackStringPluralized struct {
	data *LangPackString_Data
}

// Constructors:New:langPackStringPluralized
func NewTLlangPackStringPluralized() *TLlangPackStringPluralized {
	return &TLlangPackStringPluralized{data: &LangPackString_Data{}}
}

// Constructors:Predicate:langPackStringDeleted
type TLlangPackStringDeleted struct {
	data *LangPackString_Data
}

// Constructors:New:langPackStringDeleted
func NewTLlangPackStringDeleted() *TLlangPackStringDeleted {
	return &TLlangPackStringDeleted{data: &LangPackString_Data{}}
}
func (m *TLlangPackString) Setkey(v string)                   { m.data.key = v }
func (m *TLlangPackString) Getkey() string                    { return m.data.key }
func (m *TLlangPackString) Setvalue(v string)                 { m.data.value = v }
func (m *TLlangPackString) Getvalue() string                  { return m.data.value }
func (m *TLlangPackStringPluralized) Setkey(v string)         { m.data.key = v }
func (m *TLlangPackStringPluralized) Getkey() string          { return m.data.key }
func (m *TLlangPackStringPluralized) Setzero_value(v string)  { m.data.zero_value = v }
func (m *TLlangPackStringPluralized) Getzero_value() string   { return m.data.zero_value }
func (m *TLlangPackStringPluralized) Setone_value(v string)   { m.data.one_value = v }
func (m *TLlangPackStringPluralized) Getone_value() string    { return m.data.one_value }
func (m *TLlangPackStringPluralized) Settwo_value(v string)   { m.data.two_value = v }
func (m *TLlangPackStringPluralized) Gettwo_value() string    { return m.data.two_value }
func (m *TLlangPackStringPluralized) Setfew_value(v string)   { m.data.few_value = v }
func (m *TLlangPackStringPluralized) Getfew_value() string    { return m.data.few_value }
func (m *TLlangPackStringPluralized) Setmany_value(v string)  { m.data.many_value = v }
func (m *TLlangPackStringPluralized) Getmany_value() string   { return m.data.many_value }
func (m *TLlangPackStringPluralized) Setother_value(v string) { m.data.other_value = v }
func (m *TLlangPackStringPluralized) Getother_value() string  { return m.data.other_value }
func (m *TLlangPackStringDeleted) Setkey(v string)            { m.data.key = v }
func (m *TLlangPackStringDeleted) Getkey() string             { return m.data.key }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_MessageViews
// messages_MessageViews <--
// + TLmessages_messageViews
//
// Constructors:Type:messages_MessageViews
type messages_MessageViews struct {
	constructor int32
	data        *messages_MessageViews_Data
}

// Constructors:Type:Data:messages_MessageViews
type messages_MessageViews_Data struct {
	views []*MessageViews
	chats []*Chat
	users []*User
}

// Constructors:Predicate:messages_messageViews
type TLmessages_messageViews struct {
	data *messages_MessageViews_Data
}

// Constructors:New:messages_messageViews
func NewTLmessages_messageViews() *TLmessages_messageViews {
	return &TLmessages_messageViews{data: &messages_MessageViews_Data{}}
}
func (m *TLmessages_messageViews) Setviews(v []*MessageViews) { m.data.views = v }
func (m *TLmessages_messageViews) Getviews() []*MessageViews  { return m.data.views }
func (m *TLmessages_messageViews) Setchats(v []*Chat)         { m.data.chats = v }
func (m *TLmessages_messageViews) Getchats() []*Chat          { return m.data.chats }
func (m *TLmessages_messageViews) Setusers(v []*User)         { m.data.users = v }
func (m *TLmessages_messageViews) Getusers() []*User          { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputChannel
// InputChannel <--
// + TLinputChannelEmpty
// + TLinputChannel
// + TLinputChannelFromMessage
//
// Constructors:Type:InputChannel
type InputChannel struct {
	constructor int32
	data        *InputChannel_Data
}

// Constructors:Type:Data:InputChannel
type InputChannel_Data struct {
	channel_id  int32
	access_hash int64
	peer        *InputPeer
	msg_id      int32
}

// Constructors:Predicate:inputChannelEmpty
type TLinputChannelEmpty struct {
	data *InputChannel_Data
}

// Constructors:New:inputChannelEmpty
func NewTLinputChannelEmpty() *TLinputChannelEmpty {
	return &TLinputChannelEmpty{data: &InputChannel_Data{}}
}

// Constructors:Predicate:inputChannel
type TLinputChannel struct {
	data *InputChannel_Data
}

// Constructors:New:inputChannel
func NewTLinputChannel() *TLinputChannel {
	return &TLinputChannel{data: &InputChannel_Data{}}
}

// Constructors:Predicate:inputChannelFromMessage
type TLinputChannelFromMessage struct {
	data *InputChannel_Data
}

// Constructors:New:inputChannelFromMessage
func NewTLinputChannelFromMessage() *TLinputChannelFromMessage {
	return &TLinputChannelFromMessage{data: &InputChannel_Data{}}
}
func (m *TLinputChannel) Setchannel_id(v int32)            { m.data.channel_id = v }
func (m *TLinputChannel) Getchannel_id() int32             { return m.data.channel_id }
func (m *TLinputChannel) Setaccess_hash(v int64)           { m.data.access_hash = v }
func (m *TLinputChannel) Getaccess_hash() int64            { return m.data.access_hash }
func (m *TLinputChannelFromMessage) Setpeer(v *InputPeer)  { m.data.peer = v }
func (m *TLinputChannelFromMessage) Getpeer() *InputPeer   { return m.data.peer }
func (m *TLinputChannelFromMessage) Setmsg_id(v int32)     { m.data.msg_id = v }
func (m *TLinputChannelFromMessage) Getmsg_id() int32      { return m.data.msg_id }
func (m *TLinputChannelFromMessage) Setchannel_id(v int32) { m.data.channel_id = v }
func (m *TLinputChannelFromMessage) Getchannel_id() int32  { return m.data.channel_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_PeerDialogs
// messages_PeerDialogs <--
// + TLmessages_peerDialogs
//
// Constructors:Type:messages_PeerDialogs
type messages_PeerDialogs struct {
	constructor int32
	data        *messages_PeerDialogs_Data
}

// Constructors:Type:Data:messages_PeerDialogs
type messages_PeerDialogs_Data struct {
	dialogs  []*Dialog
	messages []*Message
	chats    []*Chat
	users    []*User
	state    *updates_State
}

// Constructors:Predicate:messages_peerDialogs
type TLmessages_peerDialogs struct {
	data *messages_PeerDialogs_Data
}

// Constructors:New:messages_peerDialogs
func NewTLmessages_peerDialogs() *TLmessages_peerDialogs {
	return &TLmessages_peerDialogs{data: &messages_PeerDialogs_Data{}}
}
func (m *TLmessages_peerDialogs) Setdialogs(v []*Dialog)    { m.data.dialogs = v }
func (m *TLmessages_peerDialogs) Getdialogs() []*Dialog     { return m.data.dialogs }
func (m *TLmessages_peerDialogs) Setmessages(v []*Message)  { m.data.messages = v }
func (m *TLmessages_peerDialogs) Getmessages() []*Message   { return m.data.messages }
func (m *TLmessages_peerDialogs) Setchats(v []*Chat)        { m.data.chats = v }
func (m *TLmessages_peerDialogs) Getchats() []*Chat         { return m.data.chats }
func (m *TLmessages_peerDialogs) Setusers(v []*User)        { m.data.users = v }
func (m *TLmessages_peerDialogs) Getusers() []*User         { return m.data.users }
func (m *TLmessages_peerDialogs) Setstate(v *updates_State) { m.data.state = v }
func (m *TLmessages_peerDialogs) Getstate() *updates_State  { return m.data.state }

///////////////////////////////////////////////////////////////////////////////
// Constructors:SecureRequiredType
// SecureRequiredType <--
// + TLsecureRequiredType
// + TLsecureRequiredTypeOneOf
//
// Constructors:Type:SecureRequiredType
type SecureRequiredType struct {
	constructor int32
	data        *SecureRequiredType_Data
}

// Constructors:Type:Data:SecureRequiredType
type SecureRequiredType_Data struct {
	native_names         bool
	selfie_required      bool
	translation_required bool
	type_key             *SecureValueType
	types                []*SecureRequiredType
}

// Constructors:Predicate:secureRequiredType
type TLsecureRequiredType struct {
	data *SecureRequiredType_Data
}

// Constructors:New:secureRequiredType
func NewTLsecureRequiredType() *TLsecureRequiredType {
	return &TLsecureRequiredType{data: &SecureRequiredType_Data{}}
}

// Constructors:Predicate:secureRequiredTypeOneOf
type TLsecureRequiredTypeOneOf struct {
	data *SecureRequiredType_Data
}

// Constructors:New:secureRequiredTypeOneOf
func NewTLsecureRequiredTypeOneOf() *TLsecureRequiredTypeOneOf {
	return &TLsecureRequiredTypeOneOf{data: &SecureRequiredType_Data{}}
}
func (m *TLsecureRequiredType) Setnative_names(v bool)                { m.data.native_names = v }
func (m *TLsecureRequiredType) Getnative_names() bool                 { return m.data.native_names }
func (m *TLsecureRequiredType) Setselfie_required(v bool)             { m.data.selfie_required = v }
func (m *TLsecureRequiredType) Getselfie_required() bool              { return m.data.selfie_required }
func (m *TLsecureRequiredType) Settranslation_required(v bool)        { m.data.translation_required = v }
func (m *TLsecureRequiredType) Gettranslation_required() bool         { return m.data.translation_required }
func (m *TLsecureRequiredType) Settype_key(v *SecureValueType)        { m.data.type_key = v }
func (m *TLsecureRequiredType) Gettype_key() *SecureValueType         { return m.data.type_key }
func (m *TLsecureRequiredTypeOneOf) Settypes(v []*SecureRequiredType) { m.data.types = v }
func (m *TLsecureRequiredTypeOneOf) Gettypes() []*SecureRequiredType  { return m.data.types }

///////////////////////////////////////////////////////////////////////////////
// Constructors:GeoPoint
// GeoPoint <--
// + TLgeoPointEmpty
// + TLgeoPoint
//
// Constructors:Type:GeoPoint
type GeoPoint struct {
	constructor int32
	data        *GeoPoint_Data
}

// Constructors:Type:Data:GeoPoint
type GeoPoint_Data struct {
	long            float64
	lat             float64
	access_hash     int64
	accuracy_radius int32
}

// Constructors:Predicate:geoPointEmpty
type TLgeoPointEmpty struct {
	data *GeoPoint_Data
}

// Constructors:New:geoPointEmpty
func NewTLgeoPointEmpty() *TLgeoPointEmpty {
	return &TLgeoPointEmpty{data: &GeoPoint_Data{}}
}

// Constructors:Predicate:geoPoint
type TLgeoPoint struct {
	data *GeoPoint_Data
}

// Constructors:New:geoPoint
func NewTLgeoPoint() *TLgeoPoint {
	return &TLgeoPoint{data: &GeoPoint_Data{}}
}
func (m *TLgeoPoint) Setlong(v float64)          { m.data.long = v }
func (m *TLgeoPoint) Getlong() float64           { return m.data.long }
func (m *TLgeoPoint) Setlat(v float64)           { m.data.lat = v }
func (m *TLgeoPoint) Getlat() float64            { return m.data.lat }
func (m *TLgeoPoint) Setaccess_hash(v int64)     { m.data.access_hash = v }
func (m *TLgeoPoint) Getaccess_hash() int64      { return m.data.access_hash }
func (m *TLgeoPoint) Setaccuracy_radius(v int32) { m.data.accuracy_radius = v }
func (m *TLgeoPoint) Getaccuracy_radius() int32  { return m.data.accuracy_radius }

///////////////////////////////////////////////////////////////////////////////
// Constructors:Photo
// Photo <--
// + TLphotoEmpty
// + TLphoto
//
// Constructors:Type:Photo
type Photo struct {
	constructor int32
	data        *Photo_Data
}

// Constructors:Type:Data:Photo
type Photo_Data struct {
	id             int64
	has_stickers   bool
	access_hash    int64
	file_reference []byte
	date           int32
	sizes          []*PhotoSize
	video_sizes    []*VideoSize
	dc_id          int32
}

// Constructors:Predicate:photoEmpty
type TLphotoEmpty struct {
	data *Photo_Data
}

// Constructors:New:photoEmpty
func NewTLphotoEmpty() *TLphotoEmpty {
	return &TLphotoEmpty{data: &Photo_Data{}}
}

// Constructors:Predicate:photo
type TLphoto struct {
	data *Photo_Data
}

// Constructors:New:photo
func NewTLphoto() *TLphoto {
	return &TLphoto{data: &Photo_Data{}}
}
func (m *TLphotoEmpty) Setid(v int64)            { m.data.id = v }
func (m *TLphotoEmpty) Getid() int64             { return m.data.id }
func (m *TLphoto) Sethas_stickers(v bool)        { m.data.has_stickers = v }
func (m *TLphoto) Gethas_stickers() bool         { return m.data.has_stickers }
func (m *TLphoto) Setid(v int64)                 { m.data.id = v }
func (m *TLphoto) Getid() int64                  { return m.data.id }
func (m *TLphoto) Setaccess_hash(v int64)        { m.data.access_hash = v }
func (m *TLphoto) Getaccess_hash() int64         { return m.data.access_hash }
func (m *TLphoto) Setfile_reference(v []byte)    { m.data.file_reference = v }
func (m *TLphoto) Getfile_reference() []byte     { return m.data.file_reference }
func (m *TLphoto) Setdate(v int32)               { m.data.date = v }
func (m *TLphoto) Getdate() int32                { return m.data.date }
func (m *TLphoto) Setsizes(v []*PhotoSize)       { m.data.sizes = v }
func (m *TLphoto) Getsizes() []*PhotoSize        { return m.data.sizes }
func (m *TLphoto) Setvideo_sizes(v []*VideoSize) { m.data.video_sizes = v }
func (m *TLphoto) Getvideo_sizes() []*VideoSize  { return m.data.video_sizes }
func (m *TLphoto) Setdc_id(v int32)              { m.data.dc_id = v }
func (m *TLphoto) Getdc_id() int32               { return m.data.dc_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ChannelAdminLogEvent
// ChannelAdminLogEvent <--
// + TLchannelAdminLogEvent
//
// Constructors:Type:ChannelAdminLogEvent
type ChannelAdminLogEvent struct {
	constructor int32
	data        *ChannelAdminLogEvent_Data
}

// Constructors:Type:Data:ChannelAdminLogEvent
type ChannelAdminLogEvent_Data struct {
	id      int64
	date    int32
	user_id int32
	action  *ChannelAdminLogEventAction
}

// Constructors:Predicate:channelAdminLogEvent
type TLchannelAdminLogEvent struct {
	data *ChannelAdminLogEvent_Data
}

// Constructors:New:channelAdminLogEvent
func NewTLchannelAdminLogEvent() *TLchannelAdminLogEvent {
	return &TLchannelAdminLogEvent{data: &ChannelAdminLogEvent_Data{}}
}
func (m *TLchannelAdminLogEvent) Setid(v int64)                           { m.data.id = v }
func (m *TLchannelAdminLogEvent) Getid() int64                            { return m.data.id }
func (m *TLchannelAdminLogEvent) Setdate(v int32)                         { m.data.date = v }
func (m *TLchannelAdminLogEvent) Getdate() int32                          { return m.data.date }
func (m *TLchannelAdminLogEvent) Setuser_id(v int32)                      { m.data.user_id = v }
func (m *TLchannelAdminLogEvent) Getuser_id() int32                       { return m.data.user_id }
func (m *TLchannelAdminLogEvent) Setaction(v *ChannelAdminLogEventAction) { m.data.action = v }
func (m *TLchannelAdminLogEvent) Getaction() *ChannelAdminLogEventAction  { return m.data.action }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputSingleMedia
// InputSingleMedia <--
// + TLinputSingleMedia
//
// Constructors:Type:InputSingleMedia
type InputSingleMedia struct {
	constructor int32
	data        *InputSingleMedia_Data
}

// Constructors:Type:Data:InputSingleMedia
type InputSingleMedia_Data struct {
	media     *InputMedia
	random_id int64
	message   string
	entities  []*MessageEntity
}

// Constructors:Predicate:inputSingleMedia
type TLinputSingleMedia struct {
	data *InputSingleMedia_Data
}

// Constructors:New:inputSingleMedia
func NewTLinputSingleMedia() *TLinputSingleMedia {
	return &TLinputSingleMedia{data: &InputSingleMedia_Data{}}
}
func (m *TLinputSingleMedia) Setmedia(v *InputMedia)         { m.data.media = v }
func (m *TLinputSingleMedia) Getmedia() *InputMedia          { return m.data.media }
func (m *TLinputSingleMedia) Setrandom_id(v int64)           { m.data.random_id = v }
func (m *TLinputSingleMedia) Getrandom_id() int64            { return m.data.random_id }
func (m *TLinputSingleMedia) Setmessage(v string)            { m.data.message = v }
func (m *TLinputSingleMedia) Getmessage() string             { return m.data.message }
func (m *TLinputSingleMedia) Setentities(v []*MessageEntity) { m.data.entities = v }
func (m *TLinputSingleMedia) Getentities() []*MessageEntity  { return m.data.entities }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ChatPhoto
// ChatPhoto <--
// + TLchatPhotoEmpty
// + TLchatPhoto
//
// Constructors:Type:ChatPhoto
type ChatPhoto struct {
	constructor int32
	data        *ChatPhoto_Data
}

// Constructors:Type:Data:ChatPhoto
type ChatPhoto_Data struct {
	has_video   bool
	photo_small *FileLocation
	photo_big   *FileLocation
	dc_id       int32
}

// Constructors:Predicate:chatPhotoEmpty
type TLchatPhotoEmpty struct {
	data *ChatPhoto_Data
}

// Constructors:New:chatPhotoEmpty
func NewTLchatPhotoEmpty() *TLchatPhotoEmpty {
	return &TLchatPhotoEmpty{data: &ChatPhoto_Data{}}
}

// Constructors:Predicate:chatPhoto
type TLchatPhoto struct {
	data *ChatPhoto_Data
}

// Constructors:New:chatPhoto
func NewTLchatPhoto() *TLchatPhoto {
	return &TLchatPhoto{data: &ChatPhoto_Data{}}
}
func (m *TLchatPhoto) Sethas_video(v bool)            { m.data.has_video = v }
func (m *TLchatPhoto) Gethas_video() bool             { return m.data.has_video }
func (m *TLchatPhoto) Setphoto_small(v *FileLocation) { m.data.photo_small = v }
func (m *TLchatPhoto) Getphoto_small() *FileLocation  { return m.data.photo_small }
func (m *TLchatPhoto) Setphoto_big(v *FileLocation)   { m.data.photo_big = v }
func (m *TLchatPhoto) Getphoto_big() *FileLocation    { return m.data.photo_big }
func (m *TLchatPhoto) Setdc_id(v int32)               { m.data.dc_id = v }
func (m *TLchatPhoto) Getdc_id() int32                { return m.data.dc_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:StickerSetCovered
// StickerSetCovered <--
// + TLstickerSetCovered
// + TLstickerSetMultiCovered
//
// Constructors:Type:StickerSetCovered
type StickerSetCovered struct {
	constructor int32
	data        *StickerSetCovered_Data
}

// Constructors:Type:Data:StickerSetCovered
type StickerSetCovered_Data struct {
	set    *StickerSet
	cover  *Document
	covers []*Document
}

// Constructors:Predicate:stickerSetCovered
type TLstickerSetCovered struct {
	data *StickerSetCovered_Data
}

// Constructors:New:stickerSetCovered
func NewTLstickerSetCovered() *TLstickerSetCovered {
	return &TLstickerSetCovered{data: &StickerSetCovered_Data{}}
}

// Constructors:Predicate:stickerSetMultiCovered
type TLstickerSetMultiCovered struct {
	data *StickerSetCovered_Data
}

// Constructors:New:stickerSetMultiCovered
func NewTLstickerSetMultiCovered() *TLstickerSetMultiCovered {
	return &TLstickerSetMultiCovered{data: &StickerSetCovered_Data{}}
}
func (m *TLstickerSetCovered) Setset(v *StickerSet)         { m.data.set = v }
func (m *TLstickerSetCovered) Getset() *StickerSet          { return m.data.set }
func (m *TLstickerSetCovered) Setcover(v *Document)         { m.data.cover = v }
func (m *TLstickerSetCovered) Getcover() *Document          { return m.data.cover }
func (m *TLstickerSetMultiCovered) Setset(v *StickerSet)    { m.data.set = v }
func (m *TLstickerSetMultiCovered) Getset() *StickerSet     { return m.data.set }
func (m *TLstickerSetMultiCovered) Setcovers(v []*Document) { m.data.covers = v }
func (m *TLstickerSetMultiCovered) Getcovers() []*Document  { return m.data.covers }

///////////////////////////////////////////////////////////////////////////////
// Constructors:MessagesFilter
// MessagesFilter <--
// + TLinputMessagesFilterEmpty
// + TLinputMessagesFilterPhotos
// + TLinputMessagesFilterVideo
// + TLinputMessagesFilterPhotoVideo
// + TLinputMessagesFilterDocument
// + TLinputMessagesFilterUrl
// + TLinputMessagesFilterGif
// + TLinputMessagesFilterVoice
// + TLinputMessagesFilterMusic
// + TLinputMessagesFilterChatPhotos
// + TLinputMessagesFilterPhoneCalls
// + TLinputMessagesFilterRoundVoice
// + TLinputMessagesFilterRoundVideo
// + TLinputMessagesFilterMyMentions
// + TLinputMessagesFilterGeo
// + TLinputMessagesFilterContacts
// + TLinputMessagesFilterPinned
//
// Constructors:Type:MessagesFilter
type MessagesFilter struct {
	constructor int32
	data        *MessagesFilter_Data
}

// Constructors:Type:Data:MessagesFilter
type MessagesFilter_Data struct {
	missed bool
}

// Constructors:Predicate:inputMessagesFilterEmpty
type TLinputMessagesFilterEmpty struct {
	data *MessagesFilter_Data
}

// Constructors:New:inputMessagesFilterEmpty
func NewTLinputMessagesFilterEmpty() *TLinputMessagesFilterEmpty {
	return &TLinputMessagesFilterEmpty{data: &MessagesFilter_Data{}}
}

// Constructors:Predicate:inputMessagesFilterPhotos
type TLinputMessagesFilterPhotos struct {
	data *MessagesFilter_Data
}

// Constructors:New:inputMessagesFilterPhotos
func NewTLinputMessagesFilterPhotos() *TLinputMessagesFilterPhotos {
	return &TLinputMessagesFilterPhotos{data: &MessagesFilter_Data{}}
}

// Constructors:Predicate:inputMessagesFilterVideo
type TLinputMessagesFilterVideo struct {
	data *MessagesFilter_Data
}

// Constructors:New:inputMessagesFilterVideo
func NewTLinputMessagesFilterVideo() *TLinputMessagesFilterVideo {
	return &TLinputMessagesFilterVideo{data: &MessagesFilter_Data{}}
}

// Constructors:Predicate:inputMessagesFilterPhotoVideo
type TLinputMessagesFilterPhotoVideo struct {
	data *MessagesFilter_Data
}

// Constructors:New:inputMessagesFilterPhotoVideo
func NewTLinputMessagesFilterPhotoVideo() *TLinputMessagesFilterPhotoVideo {
	return &TLinputMessagesFilterPhotoVideo{data: &MessagesFilter_Data{}}
}

// Constructors:Predicate:inputMessagesFilterDocument
type TLinputMessagesFilterDocument struct {
	data *MessagesFilter_Data
}

// Constructors:New:inputMessagesFilterDocument
func NewTLinputMessagesFilterDocument() *TLinputMessagesFilterDocument {
	return &TLinputMessagesFilterDocument{data: &MessagesFilter_Data{}}
}

// Constructors:Predicate:inputMessagesFilterUrl
type TLinputMessagesFilterUrl struct {
	data *MessagesFilter_Data
}

// Constructors:New:inputMessagesFilterUrl
func NewTLinputMessagesFilterUrl() *TLinputMessagesFilterUrl {
	return &TLinputMessagesFilterUrl{data: &MessagesFilter_Data{}}
}

// Constructors:Predicate:inputMessagesFilterGif
type TLinputMessagesFilterGif struct {
	data *MessagesFilter_Data
}

// Constructors:New:inputMessagesFilterGif
func NewTLinputMessagesFilterGif() *TLinputMessagesFilterGif {
	return &TLinputMessagesFilterGif{data: &MessagesFilter_Data{}}
}

// Constructors:Predicate:inputMessagesFilterVoice
type TLinputMessagesFilterVoice struct {
	data *MessagesFilter_Data
}

// Constructors:New:inputMessagesFilterVoice
func NewTLinputMessagesFilterVoice() *TLinputMessagesFilterVoice {
	return &TLinputMessagesFilterVoice{data: &MessagesFilter_Data{}}
}

// Constructors:Predicate:inputMessagesFilterMusic
type TLinputMessagesFilterMusic struct {
	data *MessagesFilter_Data
}

// Constructors:New:inputMessagesFilterMusic
func NewTLinputMessagesFilterMusic() *TLinputMessagesFilterMusic {
	return &TLinputMessagesFilterMusic{data: &MessagesFilter_Data{}}
}

// Constructors:Predicate:inputMessagesFilterChatPhotos
type TLinputMessagesFilterChatPhotos struct {
	data *MessagesFilter_Data
}

// Constructors:New:inputMessagesFilterChatPhotos
func NewTLinputMessagesFilterChatPhotos() *TLinputMessagesFilterChatPhotos {
	return &TLinputMessagesFilterChatPhotos{data: &MessagesFilter_Data{}}
}

// Constructors:Predicate:inputMessagesFilterPhoneCalls
type TLinputMessagesFilterPhoneCalls struct {
	data *MessagesFilter_Data
}

// Constructors:New:inputMessagesFilterPhoneCalls
func NewTLinputMessagesFilterPhoneCalls() *TLinputMessagesFilterPhoneCalls {
	return &TLinputMessagesFilterPhoneCalls{data: &MessagesFilter_Data{}}
}

// Constructors:Predicate:inputMessagesFilterRoundVoice
type TLinputMessagesFilterRoundVoice struct {
	data *MessagesFilter_Data
}

// Constructors:New:inputMessagesFilterRoundVoice
func NewTLinputMessagesFilterRoundVoice() *TLinputMessagesFilterRoundVoice {
	return &TLinputMessagesFilterRoundVoice{data: &MessagesFilter_Data{}}
}

// Constructors:Predicate:inputMessagesFilterRoundVideo
type TLinputMessagesFilterRoundVideo struct {
	data *MessagesFilter_Data
}

// Constructors:New:inputMessagesFilterRoundVideo
func NewTLinputMessagesFilterRoundVideo() *TLinputMessagesFilterRoundVideo {
	return &TLinputMessagesFilterRoundVideo{data: &MessagesFilter_Data{}}
}

// Constructors:Predicate:inputMessagesFilterMyMentions
type TLinputMessagesFilterMyMentions struct {
	data *MessagesFilter_Data
}

// Constructors:New:inputMessagesFilterMyMentions
func NewTLinputMessagesFilterMyMentions() *TLinputMessagesFilterMyMentions {
	return &TLinputMessagesFilterMyMentions{data: &MessagesFilter_Data{}}
}

// Constructors:Predicate:inputMessagesFilterGeo
type TLinputMessagesFilterGeo struct {
	data *MessagesFilter_Data
}

// Constructors:New:inputMessagesFilterGeo
func NewTLinputMessagesFilterGeo() *TLinputMessagesFilterGeo {
	return &TLinputMessagesFilterGeo{data: &MessagesFilter_Data{}}
}

// Constructors:Predicate:inputMessagesFilterContacts
type TLinputMessagesFilterContacts struct {
	data *MessagesFilter_Data
}

// Constructors:New:inputMessagesFilterContacts
func NewTLinputMessagesFilterContacts() *TLinputMessagesFilterContacts {
	return &TLinputMessagesFilterContacts{data: &MessagesFilter_Data{}}
}

// Constructors:Predicate:inputMessagesFilterPinned
type TLinputMessagesFilterPinned struct {
	data *MessagesFilter_Data
}

// Constructors:New:inputMessagesFilterPinned
func NewTLinputMessagesFilterPinned() *TLinputMessagesFilterPinned {
	return &TLinputMessagesFilterPinned{data: &MessagesFilter_Data{}}
}
func (m *TLinputMessagesFilterPhoneCalls) Setmissed(v bool) { m.data.missed = v }
func (m *TLinputMessagesFilterPhoneCalls) Getmissed() bool  { return m.data.missed }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputPhoneCall
// InputPhoneCall <--
// + TLinputPhoneCall
//
// Constructors:Type:InputPhoneCall
type InputPhoneCall struct {
	constructor int32
	data        *InputPhoneCall_Data
}

// Constructors:Type:Data:InputPhoneCall
type InputPhoneCall_Data struct {
	id          int64
	access_hash int64
}

// Constructors:Predicate:inputPhoneCall
type TLinputPhoneCall struct {
	data *InputPhoneCall_Data
}

// Constructors:New:inputPhoneCall
func NewTLinputPhoneCall() *TLinputPhoneCall {
	return &TLinputPhoneCall{data: &InputPhoneCall_Data{}}
}
func (m *TLinputPhoneCall) Setid(v int64)          { m.data.id = v }
func (m *TLinputPhoneCall) Getid() int64           { return m.data.id }
func (m *TLinputPhoneCall) Setaccess_hash(v int64) { m.data.access_hash = v }
func (m *TLinputPhoneCall) Getaccess_hash() int64  { return m.data.access_hash }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ChatFull
// ChatFull <--
// + TLchatFull
// + TLchannelFull
//
// Constructors:Type:ChatFull
type ChatFull struct {
	constructor int32
	data        *ChatFull_Data
}

// Constructors:Type:Data:ChatFull
type ChatFull_Data struct {
	can_set_username        bool
	has_scheduled           bool
	id                      int32
	about                   string
	participants            *ChatParticipants
	chat_photo              *Photo
	notify_settings         *PeerNotifySettings
	exported_invite         *ExportedChatInvite
	bot_info                []*BotInfo
	pinned_msg_id           int32
	folder_id               int32
	can_view_participants   bool
	can_set_stickers        bool
	hidden_prehistory       bool
	can_set_location        bool
	can_view_stats          bool
	blocked                 bool
	participants_count      int32
	admins_count            int32
	kicked_count            int32
	banned_count            int32
	online_count            int32
	read_inbox_max_id       int32
	read_outbox_max_id      int32
	unread_count            int32
	migrated_from_chat_id   int32
	migrated_from_max_id    int32
	stickerset              *StickerSet
	available_min_id        int32
	linked_chat_id          int32
	location                *ChannelLocation
	slowmode_seconds        int32
	slowmode_next_send_date int32
	stats_dc                int32
	pts                     int32
}

// Constructors:Predicate:chatFull
type TLchatFull struct {
	data *ChatFull_Data
}

// Constructors:New:chatFull
func NewTLchatFull() *TLchatFull {
	return &TLchatFull{data: &ChatFull_Data{}}
}

// Constructors:Predicate:channelFull
type TLchannelFull struct {
	data *ChatFull_Data
}

// Constructors:New:channelFull
func NewTLchannelFull() *TLchannelFull {
	return &TLchannelFull{data: &ChatFull_Data{}}
}
func (m *TLchatFull) Setcan_set_username(v bool)                  { m.data.can_set_username = v }
func (m *TLchatFull) Getcan_set_username() bool                   { return m.data.can_set_username }
func (m *TLchatFull) Sethas_scheduled(v bool)                     { m.data.has_scheduled = v }
func (m *TLchatFull) Gethas_scheduled() bool                      { return m.data.has_scheduled }
func (m *TLchatFull) Setid(v int32)                               { m.data.id = v }
func (m *TLchatFull) Getid() int32                                { return m.data.id }
func (m *TLchatFull) Setabout(v string)                           { m.data.about = v }
func (m *TLchatFull) Getabout() string                            { return m.data.about }
func (m *TLchatFull) Setparticipants(v *ChatParticipants)         { m.data.participants = v }
func (m *TLchatFull) Getparticipants() *ChatParticipants          { return m.data.participants }
func (m *TLchatFull) Setchat_photo(v *Photo)                      { m.data.chat_photo = v }
func (m *TLchatFull) Getchat_photo() *Photo                       { return m.data.chat_photo }
func (m *TLchatFull) Setnotify_settings(v *PeerNotifySettings)    { m.data.notify_settings = v }
func (m *TLchatFull) Getnotify_settings() *PeerNotifySettings     { return m.data.notify_settings }
func (m *TLchatFull) Setexported_invite(v *ExportedChatInvite)    { m.data.exported_invite = v }
func (m *TLchatFull) Getexported_invite() *ExportedChatInvite     { return m.data.exported_invite }
func (m *TLchatFull) Setbot_info(v []*BotInfo)                    { m.data.bot_info = v }
func (m *TLchatFull) Getbot_info() []*BotInfo                     { return m.data.bot_info }
func (m *TLchatFull) Setpinned_msg_id(v int32)                    { m.data.pinned_msg_id = v }
func (m *TLchatFull) Getpinned_msg_id() int32                     { return m.data.pinned_msg_id }
func (m *TLchatFull) Setfolder_id(v int32)                        { m.data.folder_id = v }
func (m *TLchatFull) Getfolder_id() int32                         { return m.data.folder_id }
func (m *TLchannelFull) Setcan_view_participants(v bool)          { m.data.can_view_participants = v }
func (m *TLchannelFull) Getcan_view_participants() bool           { return m.data.can_view_participants }
func (m *TLchannelFull) Setcan_set_username(v bool)               { m.data.can_set_username = v }
func (m *TLchannelFull) Getcan_set_username() bool                { return m.data.can_set_username }
func (m *TLchannelFull) Setcan_set_stickers(v bool)               { m.data.can_set_stickers = v }
func (m *TLchannelFull) Getcan_set_stickers() bool                { return m.data.can_set_stickers }
func (m *TLchannelFull) Sethidden_prehistory(v bool)              { m.data.hidden_prehistory = v }
func (m *TLchannelFull) Gethidden_prehistory() bool               { return m.data.hidden_prehistory }
func (m *TLchannelFull) Setcan_set_location(v bool)               { m.data.can_set_location = v }
func (m *TLchannelFull) Getcan_set_location() bool                { return m.data.can_set_location }
func (m *TLchannelFull) Sethas_scheduled(v bool)                  { m.data.has_scheduled = v }
func (m *TLchannelFull) Gethas_scheduled() bool                   { return m.data.has_scheduled }
func (m *TLchannelFull) Setcan_view_stats(v bool)                 { m.data.can_view_stats = v }
func (m *TLchannelFull) Getcan_view_stats() bool                  { return m.data.can_view_stats }
func (m *TLchannelFull) Setblocked(v bool)                        { m.data.blocked = v }
func (m *TLchannelFull) Getblocked() bool                         { return m.data.blocked }
func (m *TLchannelFull) Setid(v int32)                            { m.data.id = v }
func (m *TLchannelFull) Getid() int32                             { return m.data.id }
func (m *TLchannelFull) Setabout(v string)                        { m.data.about = v }
func (m *TLchannelFull) Getabout() string                         { return m.data.about }
func (m *TLchannelFull) Setparticipants_count(v int32)            { m.data.participants_count = v }
func (m *TLchannelFull) Getparticipants_count() int32             { return m.data.participants_count }
func (m *TLchannelFull) Setadmins_count(v int32)                  { m.data.admins_count = v }
func (m *TLchannelFull) Getadmins_count() int32                   { return m.data.admins_count }
func (m *TLchannelFull) Setkicked_count(v int32)                  { m.data.kicked_count = v }
func (m *TLchannelFull) Getkicked_count() int32                   { return m.data.kicked_count }
func (m *TLchannelFull) Setbanned_count(v int32)                  { m.data.banned_count = v }
func (m *TLchannelFull) Getbanned_count() int32                   { return m.data.banned_count }
func (m *TLchannelFull) Setonline_count(v int32)                  { m.data.online_count = v }
func (m *TLchannelFull) Getonline_count() int32                   { return m.data.online_count }
func (m *TLchannelFull) Setread_inbox_max_id(v int32)             { m.data.read_inbox_max_id = v }
func (m *TLchannelFull) Getread_inbox_max_id() int32              { return m.data.read_inbox_max_id }
func (m *TLchannelFull) Setread_outbox_max_id(v int32)            { m.data.read_outbox_max_id = v }
func (m *TLchannelFull) Getread_outbox_max_id() int32             { return m.data.read_outbox_max_id }
func (m *TLchannelFull) Setunread_count(v int32)                  { m.data.unread_count = v }
func (m *TLchannelFull) Getunread_count() int32                   { return m.data.unread_count }
func (m *TLchannelFull) Setchat_photo(v *Photo)                   { m.data.chat_photo = v }
func (m *TLchannelFull) Getchat_photo() *Photo                    { return m.data.chat_photo }
func (m *TLchannelFull) Setnotify_settings(v *PeerNotifySettings) { m.data.notify_settings = v }
func (m *TLchannelFull) Getnotify_settings() *PeerNotifySettings  { return m.data.notify_settings }
func (m *TLchannelFull) Setexported_invite(v *ExportedChatInvite) { m.data.exported_invite = v }
func (m *TLchannelFull) Getexported_invite() *ExportedChatInvite  { return m.data.exported_invite }
func (m *TLchannelFull) Setbot_info(v []*BotInfo)                 { m.data.bot_info = v }
func (m *TLchannelFull) Getbot_info() []*BotInfo                  { return m.data.bot_info }
func (m *TLchannelFull) Setmigrated_from_chat_id(v int32)         { m.data.migrated_from_chat_id = v }
func (m *TLchannelFull) Getmigrated_from_chat_id() int32          { return m.data.migrated_from_chat_id }
func (m *TLchannelFull) Setmigrated_from_max_id(v int32)          { m.data.migrated_from_max_id = v }
func (m *TLchannelFull) Getmigrated_from_max_id() int32           { return m.data.migrated_from_max_id }
func (m *TLchannelFull) Setpinned_msg_id(v int32)                 { m.data.pinned_msg_id = v }
func (m *TLchannelFull) Getpinned_msg_id() int32                  { return m.data.pinned_msg_id }
func (m *TLchannelFull) Setstickerset(v *StickerSet)              { m.data.stickerset = v }
func (m *TLchannelFull) Getstickerset() *StickerSet               { return m.data.stickerset }
func (m *TLchannelFull) Setavailable_min_id(v int32)              { m.data.available_min_id = v }
func (m *TLchannelFull) Getavailable_min_id() int32               { return m.data.available_min_id }
func (m *TLchannelFull) Setfolder_id(v int32)                     { m.data.folder_id = v }
func (m *TLchannelFull) Getfolder_id() int32                      { return m.data.folder_id }
func (m *TLchannelFull) Setlinked_chat_id(v int32)                { m.data.linked_chat_id = v }
func (m *TLchannelFull) Getlinked_chat_id() int32                 { return m.data.linked_chat_id }
func (m *TLchannelFull) Setlocation(v *ChannelLocation)           { m.data.location = v }
func (m *TLchannelFull) Getlocation() *ChannelLocation            { return m.data.location }
func (m *TLchannelFull) Setslowmode_seconds(v int32)              { m.data.slowmode_seconds = v }
func (m *TLchannelFull) Getslowmode_seconds() int32               { return m.data.slowmode_seconds }
func (m *TLchannelFull) Setslowmode_next_send_date(v int32)       { m.data.slowmode_next_send_date = v }
func (m *TLchannelFull) Getslowmode_next_send_date() int32        { return m.data.slowmode_next_send_date }
func (m *TLchannelFull) Setstats_dc(v int32)                      { m.data.stats_dc = v }
func (m *TLchannelFull) Getstats_dc() int32                       { return m.data.stats_dc }
func (m *TLchannelFull) Setpts(v int32)                           { m.data.pts = v }
func (m *TLchannelFull) Getpts() int32                            { return m.data.pts }

///////////////////////////////////////////////////////////////////////////////
// Constructors:WebAuthorization
// WebAuthorization <--
// + TLwebAuthorization
//
// Constructors:Type:WebAuthorization
type WebAuthorization struct {
	constructor int32
	data        *WebAuthorization_Data
}

// Constructors:Type:Data:WebAuthorization
type WebAuthorization_Data struct {
	hash         int64
	bot_id       int32
	domain       string
	browser      string
	platform     string
	date_created int32
	date_active  int32
	ip           string
	region       string
}

// Constructors:Predicate:webAuthorization
type TLwebAuthorization struct {
	data *WebAuthorization_Data
}

// Constructors:New:webAuthorization
func NewTLwebAuthorization() *TLwebAuthorization {
	return &TLwebAuthorization{data: &WebAuthorization_Data{}}
}
func (m *TLwebAuthorization) Sethash(v int64)         { m.data.hash = v }
func (m *TLwebAuthorization) Gethash() int64          { return m.data.hash }
func (m *TLwebAuthorization) Setbot_id(v int32)       { m.data.bot_id = v }
func (m *TLwebAuthorization) Getbot_id() int32        { return m.data.bot_id }
func (m *TLwebAuthorization) Setdomain(v string)      { m.data.domain = v }
func (m *TLwebAuthorization) Getdomain() string       { return m.data.domain }
func (m *TLwebAuthorization) Setbrowser(v string)     { m.data.browser = v }
func (m *TLwebAuthorization) Getbrowser() string      { return m.data.browser }
func (m *TLwebAuthorization) Setplatform(v string)    { m.data.platform = v }
func (m *TLwebAuthorization) Getplatform() string     { return m.data.platform }
func (m *TLwebAuthorization) Setdate_created(v int32) { m.data.date_created = v }
func (m *TLwebAuthorization) Getdate_created() int32  { return m.data.date_created }
func (m *TLwebAuthorization) Setdate_active(v int32)  { m.data.date_active = v }
func (m *TLwebAuthorization) Getdate_active() int32   { return m.data.date_active }
func (m *TLwebAuthorization) Setip(v string)          { m.data.ip = v }
func (m *TLwebAuthorization) Getip() string           { return m.data.ip }
func (m *TLwebAuthorization) Setregion(v string)      { m.data.region = v }
func (m *TLwebAuthorization) Getregion() string       { return m.data.region }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputGame
// InputGame <--
// + TLinputGameID
// + TLinputGameShortName
//
// Constructors:Type:InputGame
type InputGame struct {
	constructor int32
	data        *InputGame_Data
}

// Constructors:Type:Data:InputGame
type InputGame_Data struct {
	id          int64
	access_hash int64
	bot_id      *InputUser
	short_name  string
}

// Constructors:Predicate:inputGameID
type TLinputGameID struct {
	data *InputGame_Data
}

// Constructors:New:inputGameID
func NewTLinputGameID() *TLinputGameID {
	return &TLinputGameID{data: &InputGame_Data{}}
}

// Constructors:Predicate:inputGameShortName
type TLinputGameShortName struct {
	data *InputGame_Data
}

// Constructors:New:inputGameShortName
func NewTLinputGameShortName() *TLinputGameShortName {
	return &TLinputGameShortName{data: &InputGame_Data{}}
}
func (m *TLinputGameID) Setid(v int64)                 { m.data.id = v }
func (m *TLinputGameID) Getid() int64                  { return m.data.id }
func (m *TLinputGameID) Setaccess_hash(v int64)        { m.data.access_hash = v }
func (m *TLinputGameID) Getaccess_hash() int64         { return m.data.access_hash }
func (m *TLinputGameShortName) Setbot_id(v *InputUser) { m.data.bot_id = v }
func (m *TLinputGameShortName) Getbot_id() *InputUser  { return m.data.bot_id }
func (m *TLinputGameShortName) Setshort_name(v string) { m.data.short_name = v }
func (m *TLinputGameShortName) Getshort_name() string  { return m.data.short_name }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputSecureFile
// InputSecureFile <--
// + TLinputSecureFileUploaded
// + TLinputSecureFile
//
// Constructors:Type:InputSecureFile
type InputSecureFile struct {
	constructor int32
	data        *InputSecureFile_Data
}

// Constructors:Type:Data:InputSecureFile
type InputSecureFile_Data struct {
	id           int64
	parts        int32
	md5_checksum string
	file_hash    []byte
	secret       []byte
	access_hash  int64
}

// Constructors:Predicate:inputSecureFileUploaded
type TLinputSecureFileUploaded struct {
	data *InputSecureFile_Data
}

// Constructors:New:inputSecureFileUploaded
func NewTLinputSecureFileUploaded() *TLinputSecureFileUploaded {
	return &TLinputSecureFileUploaded{data: &InputSecureFile_Data{}}
}

// Constructors:Predicate:inputSecureFile
type TLinputSecureFile struct {
	data *InputSecureFile_Data
}

// Constructors:New:inputSecureFile
func NewTLinputSecureFile() *TLinputSecureFile {
	return &TLinputSecureFile{data: &InputSecureFile_Data{}}
}
func (m *TLinputSecureFileUploaded) Setid(v int64)            { m.data.id = v }
func (m *TLinputSecureFileUploaded) Getid() int64             { return m.data.id }
func (m *TLinputSecureFileUploaded) Setparts(v int32)         { m.data.parts = v }
func (m *TLinputSecureFileUploaded) Getparts() int32          { return m.data.parts }
func (m *TLinputSecureFileUploaded) Setmd5_checksum(v string) { m.data.md5_checksum = v }
func (m *TLinputSecureFileUploaded) Getmd5_checksum() string  { return m.data.md5_checksum }
func (m *TLinputSecureFileUploaded) Setfile_hash(v []byte)    { m.data.file_hash = v }
func (m *TLinputSecureFileUploaded) Getfile_hash() []byte     { return m.data.file_hash }
func (m *TLinputSecureFileUploaded) Setsecret(v []byte)       { m.data.secret = v }
func (m *TLinputSecureFileUploaded) Getsecret() []byte        { return m.data.secret }
func (m *TLinputSecureFile) Setid(v int64)                    { m.data.id = v }
func (m *TLinputSecureFile) Getid() int64                     { return m.data.id }
func (m *TLinputSecureFile) Setaccess_hash(v int64)           { m.data.access_hash = v }
func (m *TLinputSecureFile) Getaccess_hash() int64            { return m.data.access_hash }

///////////////////////////////////////////////////////////////////////////////
// Constructors:DraftMessage
// DraftMessage <--
// + TLdraftMessageEmpty
// + TLdraftMessage
//
// Constructors:Type:DraftMessage
type DraftMessage struct {
	constructor int32
	data        *DraftMessage_Data
}

// Constructors:Type:Data:DraftMessage
type DraftMessage_Data struct {
	date            int32
	no_webpage      bool
	reply_to_msg_id int32
	message         string
	entities        []*MessageEntity
}

// Constructors:Predicate:draftMessageEmpty
type TLdraftMessageEmpty struct {
	data *DraftMessage_Data
}

// Constructors:New:draftMessageEmpty
func NewTLdraftMessageEmpty() *TLdraftMessageEmpty {
	return &TLdraftMessageEmpty{data: &DraftMessage_Data{}}
}

// Constructors:Predicate:draftMessage
type TLdraftMessage struct {
	data *DraftMessage_Data
}

// Constructors:New:draftMessage
func NewTLdraftMessage() *TLdraftMessage {
	return &TLdraftMessage{data: &DraftMessage_Data{}}
}
func (m *TLdraftMessageEmpty) Setdate(v int32)           { m.data.date = v }
func (m *TLdraftMessageEmpty) Getdate() int32            { return m.data.date }
func (m *TLdraftMessage) Setno_webpage(v bool)           { m.data.no_webpage = v }
func (m *TLdraftMessage) Getno_webpage() bool            { return m.data.no_webpage }
func (m *TLdraftMessage) Setreply_to_msg_id(v int32)     { m.data.reply_to_msg_id = v }
func (m *TLdraftMessage) Getreply_to_msg_id() int32      { return m.data.reply_to_msg_id }
func (m *TLdraftMessage) Setmessage(v string)            { m.data.message = v }
func (m *TLdraftMessage) Getmessage() string             { return m.data.message }
func (m *TLdraftMessage) Setentities(v []*MessageEntity) { m.data.entities = v }
func (m *TLdraftMessage) Getentities() []*MessageEntity  { return m.data.entities }
func (m *TLdraftMessage) Setdate(v int32)                { m.data.date = v }
func (m *TLdraftMessage) Getdate() int32                 { return m.data.date }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ChannelAdminLogEventAction
// ChannelAdminLogEventAction <--
// + TLchannelAdminLogEventActionChangeTitle
// + TLchannelAdminLogEventActionChangeAbout
// + TLchannelAdminLogEventActionChangeUsername
// + TLchannelAdminLogEventActionChangePhoto
// + TLchannelAdminLogEventActionToggleInvites
// + TLchannelAdminLogEventActionToggleSignatures
// + TLchannelAdminLogEventActionUpdatePinned
// + TLchannelAdminLogEventActionEditMessage
// + TLchannelAdminLogEventActionDeleteMessage
// + TLchannelAdminLogEventActionParticipantJoin
// + TLchannelAdminLogEventActionParticipantLeave
// + TLchannelAdminLogEventActionParticipantInvite
// + TLchannelAdminLogEventActionParticipantToggleBan
// + TLchannelAdminLogEventActionParticipantToggleAdmin
// + TLchannelAdminLogEventActionChangeStickerSet
// + TLchannelAdminLogEventActionTogglePreHistoryHidden
// + TLchannelAdminLogEventActionDefaultBannedRights
// + TLchannelAdminLogEventActionStopPoll
// + TLchannelAdminLogEventActionChangeLinkedChat
// + TLchannelAdminLogEventActionChangeLocation
// + TLchannelAdminLogEventActionToggleSlowMode
//
// Constructors:Type:ChannelAdminLogEventAction
type ChannelAdminLogEventAction struct {
	constructor int32
	data        *ChannelAdminLogEventAction_Data
}

// Constructors:Type:Data:ChannelAdminLogEventAction
type ChannelAdminLogEventAction_Data struct {
	prev_value         string
	new_value          string
	prev_photo         *Photo
	new_photo          *Photo
	new_value_5        *Bool
	message            *Message
	prev_message       *Message
	new_message        *Message
	participant        *ChannelParticipant
	prev_participant   *ChannelParticipant
	new_participant    *ChannelParticipant
	prev_stickerset    *InputStickerSet
	new_stickerset     *InputStickerSet
	prev_banned_rights *ChatBannedRights
	new_banned_rights  *ChatBannedRights
	prev_value_16      int32
	new_value_17       int32
	prev_value_18      *ChannelLocation
	new_value_19       *ChannelLocation
}

// Constructors:Predicate:channelAdminLogEventActionChangeTitle
type TLchannelAdminLogEventActionChangeTitle struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionChangeTitle
func NewTLchannelAdminLogEventActionChangeTitle() *TLchannelAdminLogEventActionChangeTitle {
	return &TLchannelAdminLogEventActionChangeTitle{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionChangeAbout
type TLchannelAdminLogEventActionChangeAbout struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionChangeAbout
func NewTLchannelAdminLogEventActionChangeAbout() *TLchannelAdminLogEventActionChangeAbout {
	return &TLchannelAdminLogEventActionChangeAbout{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionChangeUsername
type TLchannelAdminLogEventActionChangeUsername struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionChangeUsername
func NewTLchannelAdminLogEventActionChangeUsername() *TLchannelAdminLogEventActionChangeUsername {
	return &TLchannelAdminLogEventActionChangeUsername{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionChangePhoto
type TLchannelAdminLogEventActionChangePhoto struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionChangePhoto
func NewTLchannelAdminLogEventActionChangePhoto() *TLchannelAdminLogEventActionChangePhoto {
	return &TLchannelAdminLogEventActionChangePhoto{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionToggleInvites
type TLchannelAdminLogEventActionToggleInvites struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionToggleInvites
func NewTLchannelAdminLogEventActionToggleInvites() *TLchannelAdminLogEventActionToggleInvites {
	return &TLchannelAdminLogEventActionToggleInvites{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionToggleSignatures
type TLchannelAdminLogEventActionToggleSignatures struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionToggleSignatures
func NewTLchannelAdminLogEventActionToggleSignatures() *TLchannelAdminLogEventActionToggleSignatures {
	return &TLchannelAdminLogEventActionToggleSignatures{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionUpdatePinned
type TLchannelAdminLogEventActionUpdatePinned struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionUpdatePinned
func NewTLchannelAdminLogEventActionUpdatePinned() *TLchannelAdminLogEventActionUpdatePinned {
	return &TLchannelAdminLogEventActionUpdatePinned{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionEditMessage
type TLchannelAdminLogEventActionEditMessage struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionEditMessage
func NewTLchannelAdminLogEventActionEditMessage() *TLchannelAdminLogEventActionEditMessage {
	return &TLchannelAdminLogEventActionEditMessage{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionDeleteMessage
type TLchannelAdminLogEventActionDeleteMessage struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionDeleteMessage
func NewTLchannelAdminLogEventActionDeleteMessage() *TLchannelAdminLogEventActionDeleteMessage {
	return &TLchannelAdminLogEventActionDeleteMessage{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionParticipantJoin
type TLchannelAdminLogEventActionParticipantJoin struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionParticipantJoin
func NewTLchannelAdminLogEventActionParticipantJoin() *TLchannelAdminLogEventActionParticipantJoin {
	return &TLchannelAdminLogEventActionParticipantJoin{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionParticipantLeave
type TLchannelAdminLogEventActionParticipantLeave struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionParticipantLeave
func NewTLchannelAdminLogEventActionParticipantLeave() *TLchannelAdminLogEventActionParticipantLeave {
	return &TLchannelAdminLogEventActionParticipantLeave{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionParticipantInvite
type TLchannelAdminLogEventActionParticipantInvite struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionParticipantInvite
func NewTLchannelAdminLogEventActionParticipantInvite() *TLchannelAdminLogEventActionParticipantInvite {
	return &TLchannelAdminLogEventActionParticipantInvite{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionParticipantToggleBan
type TLchannelAdminLogEventActionParticipantToggleBan struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionParticipantToggleBan
func NewTLchannelAdminLogEventActionParticipantToggleBan() *TLchannelAdminLogEventActionParticipantToggleBan {
	return &TLchannelAdminLogEventActionParticipantToggleBan{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionParticipantToggleAdmin
type TLchannelAdminLogEventActionParticipantToggleAdmin struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionParticipantToggleAdmin
func NewTLchannelAdminLogEventActionParticipantToggleAdmin() *TLchannelAdminLogEventActionParticipantToggleAdmin {
	return &TLchannelAdminLogEventActionParticipantToggleAdmin{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionChangeStickerSet
type TLchannelAdminLogEventActionChangeStickerSet struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionChangeStickerSet
func NewTLchannelAdminLogEventActionChangeStickerSet() *TLchannelAdminLogEventActionChangeStickerSet {
	return &TLchannelAdminLogEventActionChangeStickerSet{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionTogglePreHistoryHidden
type TLchannelAdminLogEventActionTogglePreHistoryHidden struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionTogglePreHistoryHidden
func NewTLchannelAdminLogEventActionTogglePreHistoryHidden() *TLchannelAdminLogEventActionTogglePreHistoryHidden {
	return &TLchannelAdminLogEventActionTogglePreHistoryHidden{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionDefaultBannedRights
type TLchannelAdminLogEventActionDefaultBannedRights struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionDefaultBannedRights
func NewTLchannelAdminLogEventActionDefaultBannedRights() *TLchannelAdminLogEventActionDefaultBannedRights {
	return &TLchannelAdminLogEventActionDefaultBannedRights{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionStopPoll
type TLchannelAdminLogEventActionStopPoll struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionStopPoll
func NewTLchannelAdminLogEventActionStopPoll() *TLchannelAdminLogEventActionStopPoll {
	return &TLchannelAdminLogEventActionStopPoll{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionChangeLinkedChat
type TLchannelAdminLogEventActionChangeLinkedChat struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionChangeLinkedChat
func NewTLchannelAdminLogEventActionChangeLinkedChat() *TLchannelAdminLogEventActionChangeLinkedChat {
	return &TLchannelAdminLogEventActionChangeLinkedChat{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionChangeLocation
type TLchannelAdminLogEventActionChangeLocation struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionChangeLocation
func NewTLchannelAdminLogEventActionChangeLocation() *TLchannelAdminLogEventActionChangeLocation {
	return &TLchannelAdminLogEventActionChangeLocation{data: &ChannelAdminLogEventAction_Data{}}
}

// Constructors:Predicate:channelAdminLogEventActionToggleSlowMode
type TLchannelAdminLogEventActionToggleSlowMode struct {
	data *ChannelAdminLogEventAction_Data
}

// Constructors:New:channelAdminLogEventActionToggleSlowMode
func NewTLchannelAdminLogEventActionToggleSlowMode() *TLchannelAdminLogEventActionToggleSlowMode {
	return &TLchannelAdminLogEventActionToggleSlowMode{data: &ChannelAdminLogEventAction_Data{}}
}
func (m *TLchannelAdminLogEventActionChangeTitle) Setprev_value(v string)    { m.data.prev_value = v }
func (m *TLchannelAdminLogEventActionChangeTitle) Getprev_value() string     { return m.data.prev_value }
func (m *TLchannelAdminLogEventActionChangeTitle) Setnew_value(v string)     { m.data.new_value = v }
func (m *TLchannelAdminLogEventActionChangeTitle) Getnew_value() string      { return m.data.new_value }
func (m *TLchannelAdminLogEventActionChangeAbout) Setprev_value(v string)    { m.data.prev_value = v }
func (m *TLchannelAdminLogEventActionChangeAbout) Getprev_value() string     { return m.data.prev_value }
func (m *TLchannelAdminLogEventActionChangeAbout) Setnew_value(v string)     { m.data.new_value = v }
func (m *TLchannelAdminLogEventActionChangeAbout) Getnew_value() string      { return m.data.new_value }
func (m *TLchannelAdminLogEventActionChangeUsername) Setprev_value(v string) { m.data.prev_value = v }
func (m *TLchannelAdminLogEventActionChangeUsername) Getprev_value() string  { return m.data.prev_value }
func (m *TLchannelAdminLogEventActionChangeUsername) Setnew_value(v string)  { m.data.new_value = v }
func (m *TLchannelAdminLogEventActionChangeUsername) Getnew_value() string   { return m.data.new_value }
func (m *TLchannelAdminLogEventActionChangePhoto) Setprev_photo(v *Photo)    { m.data.prev_photo = v }
func (m *TLchannelAdminLogEventActionChangePhoto) Getprev_photo() *Photo     { return m.data.prev_photo }
func (m *TLchannelAdminLogEventActionChangePhoto) Setnew_photo(v *Photo)     { m.data.new_photo = v }
func (m *TLchannelAdminLogEventActionChangePhoto) Getnew_photo() *Photo      { return m.data.new_photo }
func (m *TLchannelAdminLogEventActionToggleInvites) Setnew_value_5(v *Bool)  { m.data.new_value_5 = v }
func (m *TLchannelAdminLogEventActionToggleInvites) Getnew_value_5() *Bool   { return m.data.new_value_5 }
func (m *TLchannelAdminLogEventActionToggleSignatures) Setnew_value_5(v *Bool) {
	m.data.new_value_5 = v
}
func (m *TLchannelAdminLogEventActionToggleSignatures) Getnew_value_5() *Bool {
	return m.data.new_value_5
}
func (m *TLchannelAdminLogEventActionUpdatePinned) Setmessage(v *Message) { m.data.message = v }
func (m *TLchannelAdminLogEventActionUpdatePinned) Getmessage() *Message  { return m.data.message }
func (m *TLchannelAdminLogEventActionEditMessage) Setprev_message(v *Message) {
	m.data.prev_message = v
}
func (m *TLchannelAdminLogEventActionEditMessage) Getprev_message() *Message {
	return m.data.prev_message
}
func (m *TLchannelAdminLogEventActionEditMessage) Setnew_message(v *Message) { m.data.new_message = v }
func (m *TLchannelAdminLogEventActionEditMessage) Getnew_message() *Message {
	return m.data.new_message
}
func (m *TLchannelAdminLogEventActionDeleteMessage) Setmessage(v *Message) { m.data.message = v }
func (m *TLchannelAdminLogEventActionDeleteMessage) Getmessage() *Message  { return m.data.message }
func (m *TLchannelAdminLogEventActionParticipantInvite) Setparticipant(v *ChannelParticipant) {
	m.data.participant = v
}
func (m *TLchannelAdminLogEventActionParticipantInvite) Getparticipant() *ChannelParticipant {
	return m.data.participant
}
func (m *TLchannelAdminLogEventActionParticipantToggleBan) Setprev_participant(v *ChannelParticipant) {
	m.data.prev_participant = v
}
func (m *TLchannelAdminLogEventActionParticipantToggleBan) Getprev_participant() *ChannelParticipant {
	return m.data.prev_participant
}
func (m *TLchannelAdminLogEventActionParticipantToggleBan) Setnew_participant(v *ChannelParticipant) {
	m.data.new_participant = v
}
func (m *TLchannelAdminLogEventActionParticipantToggleBan) Getnew_participant() *ChannelParticipant {
	return m.data.new_participant
}
func (m *TLchannelAdminLogEventActionParticipantToggleAdmin) Setprev_participant(v *ChannelParticipant) {
	m.data.prev_participant = v
}
func (m *TLchannelAdminLogEventActionParticipantToggleAdmin) Getprev_participant() *ChannelParticipant {
	return m.data.prev_participant
}
func (m *TLchannelAdminLogEventActionParticipantToggleAdmin) Setnew_participant(v *ChannelParticipant) {
	m.data.new_participant = v
}
func (m *TLchannelAdminLogEventActionParticipantToggleAdmin) Getnew_participant() *ChannelParticipant {
	return m.data.new_participant
}
func (m *TLchannelAdminLogEventActionChangeStickerSet) Setprev_stickerset(v *InputStickerSet) {
	m.data.prev_stickerset = v
}
func (m *TLchannelAdminLogEventActionChangeStickerSet) Getprev_stickerset() *InputStickerSet {
	return m.data.prev_stickerset
}
func (m *TLchannelAdminLogEventActionChangeStickerSet) Setnew_stickerset(v *InputStickerSet) {
	m.data.new_stickerset = v
}
func (m *TLchannelAdminLogEventActionChangeStickerSet) Getnew_stickerset() *InputStickerSet {
	return m.data.new_stickerset
}
func (m *TLchannelAdminLogEventActionTogglePreHistoryHidden) Setnew_value_5(v *Bool) {
	m.data.new_value_5 = v
}
func (m *TLchannelAdminLogEventActionTogglePreHistoryHidden) Getnew_value_5() *Bool {
	return m.data.new_value_5
}
func (m *TLchannelAdminLogEventActionDefaultBannedRights) Setprev_banned_rights(v *ChatBannedRights) {
	m.data.prev_banned_rights = v
}
func (m *TLchannelAdminLogEventActionDefaultBannedRights) Getprev_banned_rights() *ChatBannedRights {
	return m.data.prev_banned_rights
}
func (m *TLchannelAdminLogEventActionDefaultBannedRights) Setnew_banned_rights(v *ChatBannedRights) {
	m.data.new_banned_rights = v
}
func (m *TLchannelAdminLogEventActionDefaultBannedRights) Getnew_banned_rights() *ChatBannedRights {
	return m.data.new_banned_rights
}
func (m *TLchannelAdminLogEventActionStopPoll) Setmessage(v *Message) { m.data.message = v }
func (m *TLchannelAdminLogEventActionStopPoll) Getmessage() *Message  { return m.data.message }
func (m *TLchannelAdminLogEventActionChangeLinkedChat) Setprev_value_16(v int32) {
	m.data.prev_value_16 = v
}
func (m *TLchannelAdminLogEventActionChangeLinkedChat) Getprev_value_16() int32 {
	return m.data.prev_value_16
}
func (m *TLchannelAdminLogEventActionChangeLinkedChat) Setnew_value_17(v int32) {
	m.data.new_value_17 = v
}
func (m *TLchannelAdminLogEventActionChangeLinkedChat) Getnew_value_17() int32 {
	return m.data.new_value_17
}
func (m *TLchannelAdminLogEventActionChangeLocation) Setprev_value_18(v *ChannelLocation) {
	m.data.prev_value_18 = v
}
func (m *TLchannelAdminLogEventActionChangeLocation) Getprev_value_18() *ChannelLocation {
	return m.data.prev_value_18
}
func (m *TLchannelAdminLogEventActionChangeLocation) Setnew_value_19(v *ChannelLocation) {
	m.data.new_value_19 = v
}
func (m *TLchannelAdminLogEventActionChangeLocation) Getnew_value_19() *ChannelLocation {
	return m.data.new_value_19
}
func (m *TLchannelAdminLogEventActionToggleSlowMode) Setprev_value_16(v int32) {
	m.data.prev_value_16 = v
}
func (m *TLchannelAdminLogEventActionToggleSlowMode) Getprev_value_16() int32 {
	return m.data.prev_value_16
}
func (m *TLchannelAdminLogEventActionToggleSlowMode) Setnew_value_17(v int32) {
	m.data.new_value_17 = v
}
func (m *TLchannelAdminLogEventActionToggleSlowMode) Getnew_value_17() int32 {
	return m.data.new_value_17
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputMessage
// InputMessage <--
// + TLinputMessageID
// + TLinputMessageReplyTo
// + TLinputMessagePinned
// + TLinputMessageCallbackQuery
//
// Constructors:Type:InputMessage
type InputMessage struct {
	constructor int32
	data        *InputMessage_Data
}

// Constructors:Type:Data:InputMessage
type InputMessage_Data struct {
	id       int32
	query_id int64
}

// Constructors:Predicate:inputMessageID
type TLinputMessageID struct {
	data *InputMessage_Data
}

// Constructors:New:inputMessageID
func NewTLinputMessageID() *TLinputMessageID {
	return &TLinputMessageID{data: &InputMessage_Data{}}
}

// Constructors:Predicate:inputMessageReplyTo
type TLinputMessageReplyTo struct {
	data *InputMessage_Data
}

// Constructors:New:inputMessageReplyTo
func NewTLinputMessageReplyTo() *TLinputMessageReplyTo {
	return &TLinputMessageReplyTo{data: &InputMessage_Data{}}
}

// Constructors:Predicate:inputMessagePinned
type TLinputMessagePinned struct {
	data *InputMessage_Data
}

// Constructors:New:inputMessagePinned
func NewTLinputMessagePinned() *TLinputMessagePinned {
	return &TLinputMessagePinned{data: &InputMessage_Data{}}
}

// Constructors:Predicate:inputMessageCallbackQuery
type TLinputMessageCallbackQuery struct {
	data *InputMessage_Data
}

// Constructors:New:inputMessageCallbackQuery
func NewTLinputMessageCallbackQuery() *TLinputMessageCallbackQuery {
	return &TLinputMessageCallbackQuery{data: &InputMessage_Data{}}
}
func (m *TLinputMessageID) Setid(v int32)                  { m.data.id = v }
func (m *TLinputMessageID) Getid() int32                   { return m.data.id }
func (m *TLinputMessageReplyTo) Setid(v int32)             { m.data.id = v }
func (m *TLinputMessageReplyTo) Getid() int32              { return m.data.id }
func (m *TLinputMessageCallbackQuery) Setid(v int32)       { m.data.id = v }
func (m *TLinputMessageCallbackQuery) Getid() int32        { return m.data.id }
func (m *TLinputMessageCallbackQuery) Setquery_id(v int64) { m.data.query_id = v }
func (m *TLinputMessageCallbackQuery) Getquery_id() int64  { return m.data.query_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:SecureValueType
// SecureValueType <--
// + TLsecureValueTypePersonalDetails
// + TLsecureValueTypePassport
// + TLsecureValueTypeDriverLicense
// + TLsecureValueTypeIdentityCard
// + TLsecureValueTypeInternalPassport
// + TLsecureValueTypeAddress
// + TLsecureValueTypeUtilityBill
// + TLsecureValueTypeBankStatement
// + TLsecureValueTypeRentalAgreement
// + TLsecureValueTypePassportRegistration
// + TLsecureValueTypeTemporaryRegistration
// + TLsecureValueTypePhone
// + TLsecureValueTypeEmail
//
// Constructors:Type:SecureValueType
type SecureValueType struct {
	constructor int32
	data        *SecureValueType_Data
}

// Constructors:Type:Data:SecureValueType
type SecureValueType_Data struct {
}

// Constructors:Predicate:secureValueTypePersonalDetails
type TLsecureValueTypePersonalDetails struct {
	data *SecureValueType_Data
}

// Constructors:New:secureValueTypePersonalDetails
func NewTLsecureValueTypePersonalDetails() *TLsecureValueTypePersonalDetails {
	return &TLsecureValueTypePersonalDetails{data: &SecureValueType_Data{}}
}

// Constructors:Predicate:secureValueTypePassport
type TLsecureValueTypePassport struct {
	data *SecureValueType_Data
}

// Constructors:New:secureValueTypePassport
func NewTLsecureValueTypePassport() *TLsecureValueTypePassport {
	return &TLsecureValueTypePassport{data: &SecureValueType_Data{}}
}

// Constructors:Predicate:secureValueTypeDriverLicense
type TLsecureValueTypeDriverLicense struct {
	data *SecureValueType_Data
}

// Constructors:New:secureValueTypeDriverLicense
func NewTLsecureValueTypeDriverLicense() *TLsecureValueTypeDriverLicense {
	return &TLsecureValueTypeDriverLicense{data: &SecureValueType_Data{}}
}

// Constructors:Predicate:secureValueTypeIdentityCard
type TLsecureValueTypeIdentityCard struct {
	data *SecureValueType_Data
}

// Constructors:New:secureValueTypeIdentityCard
func NewTLsecureValueTypeIdentityCard() *TLsecureValueTypeIdentityCard {
	return &TLsecureValueTypeIdentityCard{data: &SecureValueType_Data{}}
}

// Constructors:Predicate:secureValueTypeInternalPassport
type TLsecureValueTypeInternalPassport struct {
	data *SecureValueType_Data
}

// Constructors:New:secureValueTypeInternalPassport
func NewTLsecureValueTypeInternalPassport() *TLsecureValueTypeInternalPassport {
	return &TLsecureValueTypeInternalPassport{data: &SecureValueType_Data{}}
}

// Constructors:Predicate:secureValueTypeAddress
type TLsecureValueTypeAddress struct {
	data *SecureValueType_Data
}

// Constructors:New:secureValueTypeAddress
func NewTLsecureValueTypeAddress() *TLsecureValueTypeAddress {
	return &TLsecureValueTypeAddress{data: &SecureValueType_Data{}}
}

// Constructors:Predicate:secureValueTypeUtilityBill
type TLsecureValueTypeUtilityBill struct {
	data *SecureValueType_Data
}

// Constructors:New:secureValueTypeUtilityBill
func NewTLsecureValueTypeUtilityBill() *TLsecureValueTypeUtilityBill {
	return &TLsecureValueTypeUtilityBill{data: &SecureValueType_Data{}}
}

// Constructors:Predicate:secureValueTypeBankStatement
type TLsecureValueTypeBankStatement struct {
	data *SecureValueType_Data
}

// Constructors:New:secureValueTypeBankStatement
func NewTLsecureValueTypeBankStatement() *TLsecureValueTypeBankStatement {
	return &TLsecureValueTypeBankStatement{data: &SecureValueType_Data{}}
}

// Constructors:Predicate:secureValueTypeRentalAgreement
type TLsecureValueTypeRentalAgreement struct {
	data *SecureValueType_Data
}

// Constructors:New:secureValueTypeRentalAgreement
func NewTLsecureValueTypeRentalAgreement() *TLsecureValueTypeRentalAgreement {
	return &TLsecureValueTypeRentalAgreement{data: &SecureValueType_Data{}}
}

// Constructors:Predicate:secureValueTypePassportRegistration
type TLsecureValueTypePassportRegistration struct {
	data *SecureValueType_Data
}

// Constructors:New:secureValueTypePassportRegistration
func NewTLsecureValueTypePassportRegistration() *TLsecureValueTypePassportRegistration {
	return &TLsecureValueTypePassportRegistration{data: &SecureValueType_Data{}}
}

// Constructors:Predicate:secureValueTypeTemporaryRegistration
type TLsecureValueTypeTemporaryRegistration struct {
	data *SecureValueType_Data
}

// Constructors:New:secureValueTypeTemporaryRegistration
func NewTLsecureValueTypeTemporaryRegistration() *TLsecureValueTypeTemporaryRegistration {
	return &TLsecureValueTypeTemporaryRegistration{data: &SecureValueType_Data{}}
}

// Constructors:Predicate:secureValueTypePhone
type TLsecureValueTypePhone struct {
	data *SecureValueType_Data
}

// Constructors:New:secureValueTypePhone
func NewTLsecureValueTypePhone() *TLsecureValueTypePhone {
	return &TLsecureValueTypePhone{data: &SecureValueType_Data{}}
}

// Constructors:Predicate:secureValueTypeEmail
type TLsecureValueTypeEmail struct {
	data *SecureValueType_Data
}

// Constructors:New:secureValueTypeEmail
func NewTLsecureValueTypeEmail() *TLsecureValueTypeEmail {
	return &TLsecureValueTypeEmail{data: &SecureValueType_Data{}}
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:SecurePasswordKdfAlgo
// SecurePasswordKdfAlgo <--
// + TLsecurePasswordKdfAlgoUnknown
// + TLsecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000
// + TLsecurePasswordKdfAlgoSHA512
//
// Constructors:Type:SecurePasswordKdfAlgo
type SecurePasswordKdfAlgo struct {
	constructor int32
	data        *SecurePasswordKdfAlgo_Data
}

// Constructors:Type:Data:SecurePasswordKdfAlgo
type SecurePasswordKdfAlgo_Data struct {
	salt []byte
}

// Constructors:Predicate:securePasswordKdfAlgoUnknown
type TLsecurePasswordKdfAlgoUnknown struct {
	data *SecurePasswordKdfAlgo_Data
}

// Constructors:New:securePasswordKdfAlgoUnknown
func NewTLsecurePasswordKdfAlgoUnknown() *TLsecurePasswordKdfAlgoUnknown {
	return &TLsecurePasswordKdfAlgoUnknown{data: &SecurePasswordKdfAlgo_Data{}}
}

// Constructors:Predicate:securePasswordKdfAlgoPBKDF2HMACSHA512iter100000
type TLsecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 struct {
	data *SecurePasswordKdfAlgo_Data
}

// Constructors:New:securePasswordKdfAlgoPBKDF2HMACSHA512iter100000
func NewTLsecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000() *TLsecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 {
	return &TLsecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000{data: &SecurePasswordKdfAlgo_Data{}}
}

// Constructors:Predicate:securePasswordKdfAlgoSHA512
type TLsecurePasswordKdfAlgoSHA512 struct {
	data *SecurePasswordKdfAlgo_Data
}

// Constructors:New:securePasswordKdfAlgoSHA512
func NewTLsecurePasswordKdfAlgoSHA512() *TLsecurePasswordKdfAlgoSHA512 {
	return &TLsecurePasswordKdfAlgoSHA512{data: &SecurePasswordKdfAlgo_Data{}}
}
func (m *TLsecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000) Setsalt(v []byte) { m.data.salt = v }
func (m *TLsecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000) Getsalt() []byte  { return m.data.salt }
func (m *TLsecurePasswordKdfAlgoSHA512) Setsalt(v []byte)                     { m.data.salt = v }
func (m *TLsecurePasswordKdfAlgoSHA512) Getsalt() []byte                      { return m.data.salt }

///////////////////////////////////////////////////////////////////////////////
// Constructors:updates_Difference
// updates_Difference <--
// + TLupdates_differenceEmpty
// + TLupdates_difference
// + TLupdates_differenceSlice
// + TLupdates_differenceTooLong
//
// Constructors:Type:updates_Difference
type updates_Difference struct {
	constructor int32
	data        *updates_Difference_Data
}

// Constructors:Type:Data:updates_Difference
type updates_Difference_Data struct {
	date                   int32
	seq                    int32
	new_messages           []*Message
	new_encrypted_messages []*EncryptedMessage
	other_updates          []*Update
	chats                  []*Chat
	users                  []*User
	state                  *updates_State
	intermediate_state     *updates_State
	pts                    int32
}

// Constructors:Predicate:updates_differenceEmpty
type TLupdates_differenceEmpty struct {
	data *updates_Difference_Data
}

// Constructors:New:updates_differenceEmpty
func NewTLupdates_differenceEmpty() *TLupdates_differenceEmpty {
	return &TLupdates_differenceEmpty{data: &updates_Difference_Data{}}
}

// Constructors:Predicate:updates_difference
type TLupdates_difference struct {
	data *updates_Difference_Data
}

// Constructors:New:updates_difference
func NewTLupdates_difference() *TLupdates_difference {
	return &TLupdates_difference{data: &updates_Difference_Data{}}
}

// Constructors:Predicate:updates_differenceSlice
type TLupdates_differenceSlice struct {
	data *updates_Difference_Data
}

// Constructors:New:updates_differenceSlice
func NewTLupdates_differenceSlice() *TLupdates_differenceSlice {
	return &TLupdates_differenceSlice{data: &updates_Difference_Data{}}
}

// Constructors:Predicate:updates_differenceTooLong
type TLupdates_differenceTooLong struct {
	data *updates_Difference_Data
}

// Constructors:New:updates_differenceTooLong
func NewTLupdates_differenceTooLong() *TLupdates_differenceTooLong {
	return &TLupdates_differenceTooLong{data: &updates_Difference_Data{}}
}
func (m *TLupdates_differenceEmpty) Setdate(v int32)         { m.data.date = v }
func (m *TLupdates_differenceEmpty) Getdate() int32          { return m.data.date }
func (m *TLupdates_differenceEmpty) Setseq(v int32)          { m.data.seq = v }
func (m *TLupdates_differenceEmpty) Getseq() int32           { return m.data.seq }
func (m *TLupdates_difference) Setnew_messages(v []*Message) { m.data.new_messages = v }
func (m *TLupdates_difference) Getnew_messages() []*Message  { return m.data.new_messages }
func (m *TLupdates_difference) Setnew_encrypted_messages(v []*EncryptedMessage) {
	m.data.new_encrypted_messages = v
}
func (m *TLupdates_difference) Getnew_encrypted_messages() []*EncryptedMessage {
	return m.data.new_encrypted_messages
}
func (m *TLupdates_difference) Setother_updates(v []*Update)      { m.data.other_updates = v }
func (m *TLupdates_difference) Getother_updates() []*Update       { return m.data.other_updates }
func (m *TLupdates_difference) Setchats(v []*Chat)                { m.data.chats = v }
func (m *TLupdates_difference) Getchats() []*Chat                 { return m.data.chats }
func (m *TLupdates_difference) Setusers(v []*User)                { m.data.users = v }
func (m *TLupdates_difference) Getusers() []*User                 { return m.data.users }
func (m *TLupdates_difference) Setstate(v *updates_State)         { m.data.state = v }
func (m *TLupdates_difference) Getstate() *updates_State          { return m.data.state }
func (m *TLupdates_differenceSlice) Setnew_messages(v []*Message) { m.data.new_messages = v }
func (m *TLupdates_differenceSlice) Getnew_messages() []*Message  { return m.data.new_messages }
func (m *TLupdates_differenceSlice) Setnew_encrypted_messages(v []*EncryptedMessage) {
	m.data.new_encrypted_messages = v
}
func (m *TLupdates_differenceSlice) Getnew_encrypted_messages() []*EncryptedMessage {
	return m.data.new_encrypted_messages
}
func (m *TLupdates_differenceSlice) Setother_updates(v []*Update) { m.data.other_updates = v }
func (m *TLupdates_differenceSlice) Getother_updates() []*Update  { return m.data.other_updates }
func (m *TLupdates_differenceSlice) Setchats(v []*Chat)           { m.data.chats = v }
func (m *TLupdates_differenceSlice) Getchats() []*Chat            { return m.data.chats }
func (m *TLupdates_differenceSlice) Setusers(v []*User)           { m.data.users = v }
func (m *TLupdates_differenceSlice) Getusers() []*User            { return m.data.users }
func (m *TLupdates_differenceSlice) Setintermediate_state(v *updates_State) {
	m.data.intermediate_state = v
}
func (m *TLupdates_differenceSlice) Getintermediate_state() *updates_State {
	return m.data.intermediate_state
}
func (m *TLupdates_differenceTooLong) Setpts(v int32) { m.data.pts = v }
func (m *TLupdates_differenceTooLong) Getpts() int32  { return m.data.pts }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PhoneCallDiscardReason
// PhoneCallDiscardReason <--
// + TLphoneCallDiscardReasonMissed
// + TLphoneCallDiscardReasonDisconnect
// + TLphoneCallDiscardReasonHangup
// + TLphoneCallDiscardReasonBusy
//
// Constructors:Type:PhoneCallDiscardReason
type PhoneCallDiscardReason struct {
	constructor int32
	data        *PhoneCallDiscardReason_Data
}

// Constructors:Type:Data:PhoneCallDiscardReason
type PhoneCallDiscardReason_Data struct {
}

// Constructors:Predicate:phoneCallDiscardReasonMissed
type TLphoneCallDiscardReasonMissed struct {
	data *PhoneCallDiscardReason_Data
}

// Constructors:New:phoneCallDiscardReasonMissed
func NewTLphoneCallDiscardReasonMissed() *TLphoneCallDiscardReasonMissed {
	return &TLphoneCallDiscardReasonMissed{data: &PhoneCallDiscardReason_Data{}}
}

// Constructors:Predicate:phoneCallDiscardReasonDisconnect
type TLphoneCallDiscardReasonDisconnect struct {
	data *PhoneCallDiscardReason_Data
}

// Constructors:New:phoneCallDiscardReasonDisconnect
func NewTLphoneCallDiscardReasonDisconnect() *TLphoneCallDiscardReasonDisconnect {
	return &TLphoneCallDiscardReasonDisconnect{data: &PhoneCallDiscardReason_Data{}}
}

// Constructors:Predicate:phoneCallDiscardReasonHangup
type TLphoneCallDiscardReasonHangup struct {
	data *PhoneCallDiscardReason_Data
}

// Constructors:New:phoneCallDiscardReasonHangup
func NewTLphoneCallDiscardReasonHangup() *TLphoneCallDiscardReasonHangup {
	return &TLphoneCallDiscardReasonHangup{data: &PhoneCallDiscardReason_Data{}}
}

// Constructors:Predicate:phoneCallDiscardReasonBusy
type TLphoneCallDiscardReasonBusy struct {
	data *PhoneCallDiscardReason_Data
}

// Constructors:New:phoneCallDiscardReasonBusy
func NewTLphoneCallDiscardReasonBusy() *TLphoneCallDiscardReasonBusy {
	return &TLphoneCallDiscardReasonBusy{data: &PhoneCallDiscardReason_Data{}}
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:TopPeer
// TopPeer <--
// + TLtopPeer
//
// Constructors:Type:TopPeer
type TopPeer struct {
	constructor int32
	data        *TopPeer_Data
}

// Constructors:Type:Data:TopPeer
type TopPeer_Data struct {
	peer   *Peer
	rating float64
}

// Constructors:Predicate:topPeer
type TLtopPeer struct {
	data *TopPeer_Data
}

// Constructors:New:topPeer
func NewTLtopPeer() *TLtopPeer {
	return &TLtopPeer{data: &TopPeer_Data{}}
}
func (m *TLtopPeer) Setpeer(v *Peer)     { m.data.peer = v }
func (m *TLtopPeer) Getpeer() *Peer      { return m.data.peer }
func (m *TLtopPeer) Setrating(v float64) { m.data.rating = v }
func (m *TLtopPeer) Getrating() float64  { return m.data.rating }

///////////////////////////////////////////////////////////////////////////////
// Constructors:channels_ChannelParticipant
// channels_ChannelParticipant <--
// + TLchannels_channelParticipant
//
// Constructors:Type:channels_ChannelParticipant
type channels_ChannelParticipant struct {
	constructor int32
	data        *channels_ChannelParticipant_Data
}

// Constructors:Type:Data:channels_ChannelParticipant
type channels_ChannelParticipant_Data struct {
	participant *ChannelParticipant
	users       []*User
}

// Constructors:Predicate:channels_channelParticipant
type TLchannels_channelParticipant struct {
	data *channels_ChannelParticipant_Data
}

// Constructors:New:channels_channelParticipant
func NewTLchannels_channelParticipant() *TLchannels_channelParticipant {
	return &TLchannels_channelParticipant{data: &channels_ChannelParticipant_Data{}}
}
func (m *TLchannels_channelParticipant) Setparticipant(v *ChannelParticipant) { m.data.participant = v }
func (m *TLchannels_channelParticipant) Getparticipant() *ChannelParticipant {
	return m.data.participant
}
func (m *TLchannels_channelParticipant) Setusers(v []*User) { m.data.users = v }
func (m *TLchannels_channelParticipant) Getusers() []*User  { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:StickerPack
// StickerPack <--
// + TLstickerPack
//
// Constructors:Type:StickerPack
type StickerPack struct {
	constructor int32
	data        *StickerPack_Data
}

// Constructors:Type:Data:StickerPack
type StickerPack_Data struct {
	emoticon  string
	documents []int64
}

// Constructors:Predicate:stickerPack
type TLstickerPack struct {
	data *StickerPack_Data
}

// Constructors:New:stickerPack
func NewTLstickerPack() *TLstickerPack {
	return &TLstickerPack{data: &StickerPack_Data{}}
}
func (m *TLstickerPack) Setemoticon(v string)   { m.data.emoticon = v }
func (m *TLstickerPack) Getemoticon() string    { return m.data.emoticon }
func (m *TLstickerPack) Setdocuments(v []int64) { m.data.documents = v }
func (m *TLstickerPack) Getdocuments() []int64  { return m.data.documents }

///////////////////////////////////////////////////////////////////////////////
// Constructors:JSONObjectValue
// JSONObjectValue <--
// + TLjsonObjectValue
//
// Constructors:Type:JSONObjectValue
type JSONObjectValue struct {
	constructor int32
	data        *JSONObjectValue_Data
}

// Constructors:Type:Data:JSONObjectValue
type JSONObjectValue_Data struct {
	key   string
	value *JSONValue
}

// Constructors:Predicate:jsonObjectValue
type TLjsonObjectValue struct {
	data *JSONObjectValue_Data
}

// Constructors:New:jsonObjectValue
func NewTLjsonObjectValue() *TLjsonObjectValue {
	return &TLjsonObjectValue{data: &JSONObjectValue_Data{}}
}
func (m *TLjsonObjectValue) Setkey(v string)       { m.data.key = v }
func (m *TLjsonObjectValue) Getkey() string        { return m.data.key }
func (m *TLjsonObjectValue) Setvalue(v *JSONValue) { m.data.value = v }
func (m *TLjsonObjectValue) Getvalue() *JSONValue  { return m.data.value }

///////////////////////////////////////////////////////////////////////////////
// Constructors:stats_BroadcastStats
// stats_BroadcastStats <--
// + TLstats_broadcastStats
//
// Constructors:Type:stats_BroadcastStats
type stats_BroadcastStats struct {
	constructor int32
	data        *stats_BroadcastStats_Data
}

// Constructors:Type:Data:stats_BroadcastStats
type stats_BroadcastStats_Data struct {
	period                        *StatsDateRangeDays
	followers                     *StatsAbsValueAndPrev
	views_per_post                *StatsAbsValueAndPrev
	shares_per_post               *StatsAbsValueAndPrev
	enabled_notifications         *StatsPercentValue
	growth_graph                  *StatsGraph
	followers_graph               *StatsGraph
	mute_graph                    *StatsGraph
	top_hours_graph               *StatsGraph
	interactions_graph            *StatsGraph
	iv_interactions_graph         *StatsGraph
	views_by_source_graph         *StatsGraph
	new_followers_by_source_graph *StatsGraph
	languages_graph               *StatsGraph
	recent_message_interactions   []*MessageInteractionCounters
}

// Constructors:Predicate:stats_broadcastStats
type TLstats_broadcastStats struct {
	data *stats_BroadcastStats_Data
}

// Constructors:New:stats_broadcastStats
func NewTLstats_broadcastStats() *TLstats_broadcastStats {
	return &TLstats_broadcastStats{data: &stats_BroadcastStats_Data{}}
}
func (m *TLstats_broadcastStats) Setperiod(v *StatsDateRangeDays)      { m.data.period = v }
func (m *TLstats_broadcastStats) Getperiod() *StatsDateRangeDays       { return m.data.period }
func (m *TLstats_broadcastStats) Setfollowers(v *StatsAbsValueAndPrev) { m.data.followers = v }
func (m *TLstats_broadcastStats) Getfollowers() *StatsAbsValueAndPrev  { return m.data.followers }
func (m *TLstats_broadcastStats) Setviews_per_post(v *StatsAbsValueAndPrev) {
	m.data.views_per_post = v
}
func (m *TLstats_broadcastStats) Getviews_per_post() *StatsAbsValueAndPrev {
	return m.data.views_per_post
}
func (m *TLstats_broadcastStats) Setshares_per_post(v *StatsAbsValueAndPrev) {
	m.data.shares_per_post = v
}
func (m *TLstats_broadcastStats) Getshares_per_post() *StatsAbsValueAndPrev {
	return m.data.shares_per_post
}
func (m *TLstats_broadcastStats) Setenabled_notifications(v *StatsPercentValue) {
	m.data.enabled_notifications = v
}
func (m *TLstats_broadcastStats) Getenabled_notifications() *StatsPercentValue {
	return m.data.enabled_notifications
}
func (m *TLstats_broadcastStats) Setgrowth_graph(v *StatsGraph)       { m.data.growth_graph = v }
func (m *TLstats_broadcastStats) Getgrowth_graph() *StatsGraph        { return m.data.growth_graph }
func (m *TLstats_broadcastStats) Setfollowers_graph(v *StatsGraph)    { m.data.followers_graph = v }
func (m *TLstats_broadcastStats) Getfollowers_graph() *StatsGraph     { return m.data.followers_graph }
func (m *TLstats_broadcastStats) Setmute_graph(v *StatsGraph)         { m.data.mute_graph = v }
func (m *TLstats_broadcastStats) Getmute_graph() *StatsGraph          { return m.data.mute_graph }
func (m *TLstats_broadcastStats) Settop_hours_graph(v *StatsGraph)    { m.data.top_hours_graph = v }
func (m *TLstats_broadcastStats) Gettop_hours_graph() *StatsGraph     { return m.data.top_hours_graph }
func (m *TLstats_broadcastStats) Setinteractions_graph(v *StatsGraph) { m.data.interactions_graph = v }
func (m *TLstats_broadcastStats) Getinteractions_graph() *StatsGraph {
	return m.data.interactions_graph
}
func (m *TLstats_broadcastStats) Setiv_interactions_graph(v *StatsGraph) {
	m.data.iv_interactions_graph = v
}
func (m *TLstats_broadcastStats) Getiv_interactions_graph() *StatsGraph {
	return m.data.iv_interactions_graph
}
func (m *TLstats_broadcastStats) Setviews_by_source_graph(v *StatsGraph) {
	m.data.views_by_source_graph = v
}
func (m *TLstats_broadcastStats) Getviews_by_source_graph() *StatsGraph {
	return m.data.views_by_source_graph
}
func (m *TLstats_broadcastStats) Setnew_followers_by_source_graph(v *StatsGraph) {
	m.data.new_followers_by_source_graph = v
}
func (m *TLstats_broadcastStats) Getnew_followers_by_source_graph() *StatsGraph {
	return m.data.new_followers_by_source_graph
}
func (m *TLstats_broadcastStats) Setlanguages_graph(v *StatsGraph) { m.data.languages_graph = v }
func (m *TLstats_broadcastStats) Getlanguages_graph() *StatsGraph  { return m.data.languages_graph }
func (m *TLstats_broadcastStats) Setrecent_message_interactions(v []*MessageInteractionCounters) {
	m.data.recent_message_interactions = v
}
func (m *TLstats_broadcastStats) Getrecent_message_interactions() []*MessageInteractionCounters {
	return m.data.recent_message_interactions
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:Poll
// Poll <--
// + TLpoll
//
// Constructors:Type:Poll
type Poll struct {
	constructor int32
	data        *Poll_Data
}

// Constructors:Type:Data:Poll
type Poll_Data struct {
	id              int64
	closed          bool
	public_voters   bool
	multiple_choice bool
	quiz            bool
	question        string
	answers         []*PollAnswer
	close_period    int32
	close_date      int32
}

// Constructors:Predicate:poll
type TLpoll struct {
	data *Poll_Data
}

// Constructors:New:poll
func NewTLpoll() *TLpoll {
	return &TLpoll{data: &Poll_Data{}}
}
func (m *TLpoll) Setid(v int64)              { m.data.id = v }
func (m *TLpoll) Getid() int64               { return m.data.id }
func (m *TLpoll) Setclosed(v bool)           { m.data.closed = v }
func (m *TLpoll) Getclosed() bool            { return m.data.closed }
func (m *TLpoll) Setpublic_voters(v bool)    { m.data.public_voters = v }
func (m *TLpoll) Getpublic_voters() bool     { return m.data.public_voters }
func (m *TLpoll) Setmultiple_choice(v bool)  { m.data.multiple_choice = v }
func (m *TLpoll) Getmultiple_choice() bool   { return m.data.multiple_choice }
func (m *TLpoll) Setquiz(v bool)             { m.data.quiz = v }
func (m *TLpoll) Getquiz() bool              { return m.data.quiz }
func (m *TLpoll) Setquestion(v string)       { m.data.question = v }
func (m *TLpoll) Getquestion() string        { return m.data.question }
func (m *TLpoll) Setanswers(v []*PollAnswer) { m.data.answers = v }
func (m *TLpoll) Getanswers() []*PollAnswer  { return m.data.answers }
func (m *TLpoll) Setclose_period(v int32)    { m.data.close_period = v }
func (m *TLpoll) Getclose_period() int32     { return m.data.close_period }
func (m *TLpoll) Setclose_date(v int32)      { m.data.close_date = v }
func (m *TLpoll) Getclose_date() int32       { return m.data.close_date }

///////////////////////////////////////////////////////////////////////////////
// Constructors:help_InviteText
// help_InviteText <--
// + TLhelp_inviteText
//
// Constructors:Type:help_InviteText
type help_InviteText struct {
	constructor int32
	data        *help_InviteText_Data
}

// Constructors:Type:Data:help_InviteText
type help_InviteText_Data struct {
	message string
}

// Constructors:Predicate:help_inviteText
type TLhelp_inviteText struct {
	data *help_InviteText_Data
}

// Constructors:New:help_inviteText
func NewTLhelp_inviteText() *TLhelp_inviteText {
	return &TLhelp_inviteText{data: &help_InviteText_Data{}}
}
func (m *TLhelp_inviteText) Setmessage(v string) { m.data.message = v }
func (m *TLhelp_inviteText) Getmessage() string  { return m.data.message }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ChatParticipants
// ChatParticipants <--
// + TLchatParticipantsForbidden
// + TLchatParticipants
//
// Constructors:Type:ChatParticipants
type ChatParticipants struct {
	constructor int32
	data        *ChatParticipants_Data
}

// Constructors:Type:Data:ChatParticipants
type ChatParticipants_Data struct {
	chat_id          int32
	self_participant *ChatParticipant
	participants     []*ChatParticipant
	version          int32
}

// Constructors:Predicate:chatParticipantsForbidden
type TLchatParticipantsForbidden struct {
	data *ChatParticipants_Data
}

// Constructors:New:chatParticipantsForbidden
func NewTLchatParticipantsForbidden() *TLchatParticipantsForbidden {
	return &TLchatParticipantsForbidden{data: &ChatParticipants_Data{}}
}

// Constructors:Predicate:chatParticipants
type TLchatParticipants struct {
	data *ChatParticipants_Data
}

// Constructors:New:chatParticipants
func NewTLchatParticipants() *TLchatParticipants {
	return &TLchatParticipants{data: &ChatParticipants_Data{}}
}
func (m *TLchatParticipantsForbidden) Setchat_id(v int32) { m.data.chat_id = v }
func (m *TLchatParticipantsForbidden) Getchat_id() int32  { return m.data.chat_id }
func (m *TLchatParticipantsForbidden) Setself_participant(v *ChatParticipant) {
	m.data.self_participant = v
}
func (m *TLchatParticipantsForbidden) Getself_participant() *ChatParticipant {
	return m.data.self_participant
}
func (m *TLchatParticipants) Setchat_id(v int32)                   { m.data.chat_id = v }
func (m *TLchatParticipants) Getchat_id() int32                    { return m.data.chat_id }
func (m *TLchatParticipants) Setparticipants(v []*ChatParticipant) { m.data.participants = v }
func (m *TLchatParticipants) Getparticipants() []*ChatParticipant  { return m.data.participants }
func (m *TLchatParticipants) Setversion(v int32)                   { m.data.version = v }
func (m *TLchatParticipants) Getversion() int32                    { return m.data.version }

///////////////////////////////////////////////////////////////////////////////
// Constructors:UserStatus
// UserStatus <--
// + TLuserStatusEmpty
// + TLuserStatusOnline
// + TLuserStatusOffline
// + TLuserStatusRecently
// + TLuserStatusLastWeek
// + TLuserStatusLastMonth
//
// Constructors:Type:UserStatus
type UserStatus struct {
	constructor int32
	data        *UserStatus_Data
}

// Constructors:Type:Data:UserStatus
type UserStatus_Data struct {
	expires    int32
	was_online int32
}

// Constructors:Predicate:userStatusEmpty
type TLuserStatusEmpty struct {
	data *UserStatus_Data
}

// Constructors:New:userStatusEmpty
func NewTLuserStatusEmpty() *TLuserStatusEmpty {
	return &TLuserStatusEmpty{data: &UserStatus_Data{}}
}

// Constructors:Predicate:userStatusOnline
type TLuserStatusOnline struct {
	data *UserStatus_Data
}

// Constructors:New:userStatusOnline
func NewTLuserStatusOnline() *TLuserStatusOnline {
	return &TLuserStatusOnline{data: &UserStatus_Data{}}
}

// Constructors:Predicate:userStatusOffline
type TLuserStatusOffline struct {
	data *UserStatus_Data
}

// Constructors:New:userStatusOffline
func NewTLuserStatusOffline() *TLuserStatusOffline {
	return &TLuserStatusOffline{data: &UserStatus_Data{}}
}

// Constructors:Predicate:userStatusRecently
type TLuserStatusRecently struct {
	data *UserStatus_Data
}

// Constructors:New:userStatusRecently
func NewTLuserStatusRecently() *TLuserStatusRecently {
	return &TLuserStatusRecently{data: &UserStatus_Data{}}
}

// Constructors:Predicate:userStatusLastWeek
type TLuserStatusLastWeek struct {
	data *UserStatus_Data
}

// Constructors:New:userStatusLastWeek
func NewTLuserStatusLastWeek() *TLuserStatusLastWeek {
	return &TLuserStatusLastWeek{data: &UserStatus_Data{}}
}

// Constructors:Predicate:userStatusLastMonth
type TLuserStatusLastMonth struct {
	data *UserStatus_Data
}

// Constructors:New:userStatusLastMonth
func NewTLuserStatusLastMonth() *TLuserStatusLastMonth {
	return &TLuserStatusLastMonth{data: &UserStatus_Data{}}
}
func (m *TLuserStatusOnline) Setexpires(v int32)     { m.data.expires = v }
func (m *TLuserStatusOnline) Getexpires() int32      { return m.data.expires }
func (m *TLuserStatusOffline) Setwas_online(v int32) { m.data.was_online = v }
func (m *TLuserStatusOffline) Getwas_online() int32  { return m.data.was_online }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ThemeSettings
// ThemeSettings <--
// + TLthemeSettings
//
// Constructors:Type:ThemeSettings
type ThemeSettings struct {
	constructor int32
	data        *ThemeSettings_Data
}

// Constructors:Type:Data:ThemeSettings
type ThemeSettings_Data struct {
	base_theme           *BaseTheme
	accent_color         int32
	message_top_color    int32
	message_bottom_color int32
	wallpaper            *WallPaper
}

// Constructors:Predicate:themeSettings
type TLthemeSettings struct {
	data *ThemeSettings_Data
}

// Constructors:New:themeSettings
func NewTLthemeSettings() *TLthemeSettings {
	return &TLthemeSettings{data: &ThemeSettings_Data{}}
}
func (m *TLthemeSettings) Setbase_theme(v *BaseTheme)      { m.data.base_theme = v }
func (m *TLthemeSettings) Getbase_theme() *BaseTheme       { return m.data.base_theme }
func (m *TLthemeSettings) Setaccent_color(v int32)         { m.data.accent_color = v }
func (m *TLthemeSettings) Getaccent_color() int32          { return m.data.accent_color }
func (m *TLthemeSettings) Setmessage_top_color(v int32)    { m.data.message_top_color = v }
func (m *TLthemeSettings) Getmessage_top_color() int32     { return m.data.message_top_color }
func (m *TLthemeSettings) Setmessage_bottom_color(v int32) { m.data.message_bottom_color = v }
func (m *TLthemeSettings) Getmessage_bottom_color() int32  { return m.data.message_bottom_color }
func (m *TLthemeSettings) Setwallpaper(v *WallPaper)       { m.data.wallpaper = v }
func (m *TLthemeSettings) Getwallpaper() *WallPaper        { return m.data.wallpaper }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PhoneConnection
// PhoneConnection <--
// + TLphoneConnection
// + TLphoneConnectionWebrtc
//
// Constructors:Type:PhoneConnection
type PhoneConnection struct {
	constructor int32
	data        *PhoneConnection_Data
}

// Constructors:Type:Data:PhoneConnection
type PhoneConnection_Data struct {
	id       int64
	ip       string
	ipv6     string
	port     int32
	peer_tag []byte
	turn     bool
	stun     bool
	username string
	password string
}

// Constructors:Predicate:phoneConnection
type TLphoneConnection struct {
	data *PhoneConnection_Data
}

// Constructors:New:phoneConnection
func NewTLphoneConnection() *TLphoneConnection {
	return &TLphoneConnection{data: &PhoneConnection_Data{}}
}

// Constructors:Predicate:phoneConnectionWebrtc
type TLphoneConnectionWebrtc struct {
	data *PhoneConnection_Data
}

// Constructors:New:phoneConnectionWebrtc
func NewTLphoneConnectionWebrtc() *TLphoneConnectionWebrtc {
	return &TLphoneConnectionWebrtc{data: &PhoneConnection_Data{}}
}
func (m *TLphoneConnection) Setid(v int64)              { m.data.id = v }
func (m *TLphoneConnection) Getid() int64               { return m.data.id }
func (m *TLphoneConnection) Setip(v string)             { m.data.ip = v }
func (m *TLphoneConnection) Getip() string              { return m.data.ip }
func (m *TLphoneConnection) Setipv6(v string)           { m.data.ipv6 = v }
func (m *TLphoneConnection) Getipv6() string            { return m.data.ipv6 }
func (m *TLphoneConnection) Setport(v int32)            { m.data.port = v }
func (m *TLphoneConnection) Getport() int32             { return m.data.port }
func (m *TLphoneConnection) Setpeer_tag(v []byte)       { m.data.peer_tag = v }
func (m *TLphoneConnection) Getpeer_tag() []byte        { return m.data.peer_tag }
func (m *TLphoneConnectionWebrtc) Setturn(v bool)       { m.data.turn = v }
func (m *TLphoneConnectionWebrtc) Getturn() bool        { return m.data.turn }
func (m *TLphoneConnectionWebrtc) Setstun(v bool)       { m.data.stun = v }
func (m *TLphoneConnectionWebrtc) Getstun() bool        { return m.data.stun }
func (m *TLphoneConnectionWebrtc) Setid(v int64)        { m.data.id = v }
func (m *TLphoneConnectionWebrtc) Getid() int64         { return m.data.id }
func (m *TLphoneConnectionWebrtc) Setip(v string)       { m.data.ip = v }
func (m *TLphoneConnectionWebrtc) Getip() string        { return m.data.ip }
func (m *TLphoneConnectionWebrtc) Setipv6(v string)     { m.data.ipv6 = v }
func (m *TLphoneConnectionWebrtc) Getipv6() string      { return m.data.ipv6 }
func (m *TLphoneConnectionWebrtc) Setport(v int32)      { m.data.port = v }
func (m *TLphoneConnectionWebrtc) Getport() int32       { return m.data.port }
func (m *TLphoneConnectionWebrtc) Setusername(v string) { m.data.username = v }
func (m *TLphoneConnectionWebrtc) Getusername() string  { return m.data.username }
func (m *TLphoneConnectionWebrtc) Setpassword(v string) { m.data.password = v }
func (m *TLphoneConnectionWebrtc) Getpassword() string  { return m.data.password }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PageTableCell
// PageTableCell <--
// + TLpageTableCell
//
// Constructors:Type:PageTableCell
type PageTableCell struct {
	constructor int32
	data        *PageTableCell_Data
}

// Constructors:Type:Data:PageTableCell
type PageTableCell_Data struct {
	header        bool
	align_center  bool
	align_right   bool
	valign_middle bool
	valign_bottom bool
	text          *RichText
	colspan       int32
	rowspan       int32
}

// Constructors:Predicate:pageTableCell
type TLpageTableCell struct {
	data *PageTableCell_Data
}

// Constructors:New:pageTableCell
func NewTLpageTableCell() *TLpageTableCell {
	return &TLpageTableCell{data: &PageTableCell_Data{}}
}
func (m *TLpageTableCell) Setheader(v bool)        { m.data.header = v }
func (m *TLpageTableCell) Getheader() bool         { return m.data.header }
func (m *TLpageTableCell) Setalign_center(v bool)  { m.data.align_center = v }
func (m *TLpageTableCell) Getalign_center() bool   { return m.data.align_center }
func (m *TLpageTableCell) Setalign_right(v bool)   { m.data.align_right = v }
func (m *TLpageTableCell) Getalign_right() bool    { return m.data.align_right }
func (m *TLpageTableCell) Setvalign_middle(v bool) { m.data.valign_middle = v }
func (m *TLpageTableCell) Getvalign_middle() bool  { return m.data.valign_middle }
func (m *TLpageTableCell) Setvalign_bottom(v bool) { m.data.valign_bottom = v }
func (m *TLpageTableCell) Getvalign_bottom() bool  { return m.data.valign_bottom }
func (m *TLpageTableCell) Settext(v *RichText)     { m.data.text = v }
func (m *TLpageTableCell) Gettext() *RichText      { return m.data.text }
func (m *TLpageTableCell) Setcolspan(v int32)      { m.data.colspan = v }
func (m *TLpageTableCell) Getcolspan() int32       { return m.data.colspan }
func (m *TLpageTableCell) Setrowspan(v int32)      { m.data.rowspan = v }
func (m *TLpageTableCell) Getrowspan() int32       { return m.data.rowspan }

///////////////////////////////////////////////////////////////////////////////
// Constructors:updates_State
// updates_State <--
// + TLupdates_state
//
// Constructors:Type:updates_State
type updates_State struct {
	constructor int32
	data        *updates_State_Data
}

// Constructors:Type:Data:updates_State
type updates_State_Data struct {
	pts          int32
	qts          int32
	date         int32
	seq          int32
	unread_count int32
}

// Constructors:Predicate:updates_state
type TLupdates_state struct {
	data *updates_State_Data
}

// Constructors:New:updates_state
func NewTLupdates_state() *TLupdates_state {
	return &TLupdates_state{data: &updates_State_Data{}}
}
func (m *TLupdates_state) Setpts(v int32)          { m.data.pts = v }
func (m *TLupdates_state) Getpts() int32           { return m.data.pts }
func (m *TLupdates_state) Setqts(v int32)          { m.data.qts = v }
func (m *TLupdates_state) Getqts() int32           { return m.data.qts }
func (m *TLupdates_state) Setdate(v int32)         { m.data.date = v }
func (m *TLupdates_state) Getdate() int32          { return m.data.date }
func (m *TLupdates_state) Setseq(v int32)          { m.data.seq = v }
func (m *TLupdates_state) Getseq() int32           { return m.data.seq }
func (m *TLupdates_state) Setunread_count(v int32) { m.data.unread_count = v }
func (m *TLupdates_state) Getunread_count() int32  { return m.data.unread_count }

///////////////////////////////////////////////////////////////////////////////
// Constructors:auth_LoginToken
// auth_LoginToken <--
// + TLauth_loginToken
// + TLauth_loginTokenMigrateTo
// + TLauth_loginTokenSuccess
//
// Constructors:Type:auth_LoginToken
type auth_LoginToken struct {
	constructor int32
	data        *auth_LoginToken_Data
}

// Constructors:Type:Data:auth_LoginToken
type auth_LoginToken_Data struct {
	expires       int32
	token         []byte
	dc_id         int32
	authorization *auth_Authorization
}

// Constructors:Predicate:auth_loginToken
type TLauth_loginToken struct {
	data *auth_LoginToken_Data
}

// Constructors:New:auth_loginToken
func NewTLauth_loginToken() *TLauth_loginToken {
	return &TLauth_loginToken{data: &auth_LoginToken_Data{}}
}

// Constructors:Predicate:auth_loginTokenMigrateTo
type TLauth_loginTokenMigrateTo struct {
	data *auth_LoginToken_Data
}

// Constructors:New:auth_loginTokenMigrateTo
func NewTLauth_loginTokenMigrateTo() *TLauth_loginTokenMigrateTo {
	return &TLauth_loginTokenMigrateTo{data: &auth_LoginToken_Data{}}
}

// Constructors:Predicate:auth_loginTokenSuccess
type TLauth_loginTokenSuccess struct {
	data *auth_LoginToken_Data
}

// Constructors:New:auth_loginTokenSuccess
func NewTLauth_loginTokenSuccess() *TLauth_loginTokenSuccess {
	return &TLauth_loginTokenSuccess{data: &auth_LoginToken_Data{}}
}
func (m *TLauth_loginToken) Setexpires(v int32)                            { m.data.expires = v }
func (m *TLauth_loginToken) Getexpires() int32                             { return m.data.expires }
func (m *TLauth_loginToken) Settoken(v []byte)                             { m.data.token = v }
func (m *TLauth_loginToken) Gettoken() []byte                              { return m.data.token }
func (m *TLauth_loginTokenMigrateTo) Setdc_id(v int32)                     { m.data.dc_id = v }
func (m *TLauth_loginTokenMigrateTo) Getdc_id() int32                      { return m.data.dc_id }
func (m *TLauth_loginTokenMigrateTo) Settoken(v []byte)                    { m.data.token = v }
func (m *TLauth_loginTokenMigrateTo) Gettoken() []byte                     { return m.data.token }
func (m *TLauth_loginTokenSuccess) Setauthorization(v *auth_Authorization) { m.data.authorization = v }
func (m *TLauth_loginTokenSuccess) Getauthorization() *auth_Authorization {
	return m.data.authorization
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:EmojiKeywordsDifference
// EmojiKeywordsDifference <--
// + TLemojiKeywordsDifference
//
// Constructors:Type:EmojiKeywordsDifference
type EmojiKeywordsDifference struct {
	constructor int32
	data        *EmojiKeywordsDifference_Data
}

// Constructors:Type:Data:EmojiKeywordsDifference
type EmojiKeywordsDifference_Data struct {
	lang_code    string
	from_version int32
	version      int32
	keywords     []*EmojiKeyword
}

// Constructors:Predicate:emojiKeywordsDifference
type TLemojiKeywordsDifference struct {
	data *EmojiKeywordsDifference_Data
}

// Constructors:New:emojiKeywordsDifference
func NewTLemojiKeywordsDifference() *TLemojiKeywordsDifference {
	return &TLemojiKeywordsDifference{data: &EmojiKeywordsDifference_Data{}}
}
func (m *TLemojiKeywordsDifference) Setlang_code(v string)         { m.data.lang_code = v }
func (m *TLemojiKeywordsDifference) Getlang_code() string          { return m.data.lang_code }
func (m *TLemojiKeywordsDifference) Setfrom_version(v int32)       { m.data.from_version = v }
func (m *TLemojiKeywordsDifference) Getfrom_version() int32        { return m.data.from_version }
func (m *TLemojiKeywordsDifference) Setversion(v int32)            { m.data.version = v }
func (m *TLemojiKeywordsDifference) Getversion() int32             { return m.data.version }
func (m *TLemojiKeywordsDifference) Setkeywords(v []*EmojiKeyword) { m.data.keywords = v }
func (m *TLemojiKeywordsDifference) Getkeywords() []*EmojiKeyword  { return m.data.keywords }

///////////////////////////////////////////////////////////////////////////////
// Constructors:BotCommand
// BotCommand <--
// + TLbotCommand
//
// Constructors:Type:BotCommand
type BotCommand struct {
	constructor int32
	data        *BotCommand_Data
}

// Constructors:Type:Data:BotCommand
type BotCommand_Data struct {
	command     string
	description string
}

// Constructors:Predicate:botCommand
type TLbotCommand struct {
	data *BotCommand_Data
}

// Constructors:New:botCommand
func NewTLbotCommand() *TLbotCommand {
	return &TLbotCommand{data: &BotCommand_Data{}}
}
func (m *TLbotCommand) Setcommand(v string)     { m.data.command = v }
func (m *TLbotCommand) Getcommand() string      { return m.data.command }
func (m *TLbotCommand) Setdescription(v string) { m.data.description = v }
func (m *TLbotCommand) Getdescription() string  { return m.data.description }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ImportedContact
// ImportedContact <--
// + TLimportedContact
//
// Constructors:Type:ImportedContact
type ImportedContact struct {
	constructor int32
	data        *ImportedContact_Data
}

// Constructors:Type:Data:ImportedContact
type ImportedContact_Data struct {
	user_id   int32
	client_id int64
}

// Constructors:Predicate:importedContact
type TLimportedContact struct {
	data *ImportedContact_Data
}

// Constructors:New:importedContact
func NewTLimportedContact() *TLimportedContact {
	return &TLimportedContact{data: &ImportedContact_Data{}}
}
func (m *TLimportedContact) Setuser_id(v int32)   { m.data.user_id = v }
func (m *TLimportedContact) Getuser_id() int32    { return m.data.user_id }
func (m *TLimportedContact) Setclient_id(v int64) { m.data.client_id = v }
func (m *TLimportedContact) Getclient_id() int64  { return m.data.client_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:auth_CodeType
// auth_CodeType <--
// + TLauth_codeTypeSms
// + TLauth_codeTypeCall
// + TLauth_codeTypeFlashCall
//
// Constructors:Type:auth_CodeType
type auth_CodeType struct {
	constructor int32
	data        *auth_CodeType_Data
}

// Constructors:Type:Data:auth_CodeType
type auth_CodeType_Data struct {
}

// Constructors:Predicate:auth_codeTypeSms
type TLauth_codeTypeSms struct {
	data *auth_CodeType_Data
}

// Constructors:New:auth_codeTypeSms
func NewTLauth_codeTypeSms() *TLauth_codeTypeSms {
	return &TLauth_codeTypeSms{data: &auth_CodeType_Data{}}
}

// Constructors:Predicate:auth_codeTypeCall
type TLauth_codeTypeCall struct {
	data *auth_CodeType_Data
}

// Constructors:New:auth_codeTypeCall
func NewTLauth_codeTypeCall() *TLauth_codeTypeCall {
	return &TLauth_codeTypeCall{data: &auth_CodeType_Data{}}
}

// Constructors:Predicate:auth_codeTypeFlashCall
type TLauth_codeTypeFlashCall struct {
	data *auth_CodeType_Data
}

// Constructors:New:auth_codeTypeFlashCall
func NewTLauth_codeTypeFlashCall() *TLauth_codeTypeFlashCall {
	return &TLauth_codeTypeFlashCall{data: &auth_CodeType_Data{}}
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:account_PrivacyRules
// account_PrivacyRules <--
// + TLaccount_privacyRules
//
// Constructors:Type:account_PrivacyRules
type account_PrivacyRules struct {
	constructor int32
	data        *account_PrivacyRules_Data
}

// Constructors:Type:Data:account_PrivacyRules
type account_PrivacyRules_Data struct {
	rules []*PrivacyRule
	chats []*Chat
	users []*User
}

// Constructors:Predicate:account_privacyRules
type TLaccount_privacyRules struct {
	data *account_PrivacyRules_Data
}

// Constructors:New:account_privacyRules
func NewTLaccount_privacyRules() *TLaccount_privacyRules {
	return &TLaccount_privacyRules{data: &account_PrivacyRules_Data{}}
}
func (m *TLaccount_privacyRules) Setrules(v []*PrivacyRule) { m.data.rules = v }
func (m *TLaccount_privacyRules) Getrules() []*PrivacyRule  { return m.data.rules }
func (m *TLaccount_privacyRules) Setchats(v []*Chat)        { m.data.chats = v }
func (m *TLaccount_privacyRules) Getchats() []*Chat         { return m.data.chats }
func (m *TLaccount_privacyRules) Setusers(v []*User)        { m.data.users = v }
func (m *TLaccount_privacyRules) Getusers() []*User         { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:Document
// Document <--
// + TLdocumentEmpty
// + TLdocument
//
// Constructors:Type:Document
type Document struct {
	constructor int32
	data        *Document_Data
}

// Constructors:Type:Data:Document
type Document_Data struct {
	id             int64
	access_hash    int64
	file_reference []byte
	date           int32
	mime_type      string
	size           int32
	thumbs         []*PhotoSize
	video_thumbs   []*VideoSize
	dc_id          int32
	attributes     []*DocumentAttribute
}

// Constructors:Predicate:documentEmpty
type TLdocumentEmpty struct {
	data *Document_Data
}

// Constructors:New:documentEmpty
func NewTLdocumentEmpty() *TLdocumentEmpty {
	return &TLdocumentEmpty{data: &Document_Data{}}
}

// Constructors:Predicate:document
type TLdocument struct {
	data *Document_Data
}

// Constructors:New:document
func NewTLdocument() *TLdocument {
	return &TLdocument{data: &Document_Data{}}
}
func (m *TLdocumentEmpty) Setid(v int64)                   { m.data.id = v }
func (m *TLdocumentEmpty) Getid() int64                    { return m.data.id }
func (m *TLdocument) Setid(v int64)                        { m.data.id = v }
func (m *TLdocument) Getid() int64                         { return m.data.id }
func (m *TLdocument) Setaccess_hash(v int64)               { m.data.access_hash = v }
func (m *TLdocument) Getaccess_hash() int64                { return m.data.access_hash }
func (m *TLdocument) Setfile_reference(v []byte)           { m.data.file_reference = v }
func (m *TLdocument) Getfile_reference() []byte            { return m.data.file_reference }
func (m *TLdocument) Setdate(v int32)                      { m.data.date = v }
func (m *TLdocument) Getdate() int32                       { return m.data.date }
func (m *TLdocument) Setmime_type(v string)                { m.data.mime_type = v }
func (m *TLdocument) Getmime_type() string                 { return m.data.mime_type }
func (m *TLdocument) Setsize(v int32)                      { m.data.size = v }
func (m *TLdocument) Getsize() int32                       { return m.data.size }
func (m *TLdocument) Setthumbs(v []*PhotoSize)             { m.data.thumbs = v }
func (m *TLdocument) Getthumbs() []*PhotoSize              { return m.data.thumbs }
func (m *TLdocument) Setvideo_thumbs(v []*VideoSize)       { m.data.video_thumbs = v }
func (m *TLdocument) Getvideo_thumbs() []*VideoSize        { return m.data.video_thumbs }
func (m *TLdocument) Setdc_id(v int32)                     { m.data.dc_id = v }
func (m *TLdocument) Getdc_id() int32                      { return m.data.dc_id }
func (m *TLdocument) Setattributes(v []*DocumentAttribute) { m.data.attributes = v }
func (m *TLdocument) Getattributes() []*DocumentAttribute  { return m.data.attributes }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputPrivacyKey
// InputPrivacyKey <--
// + TLinputPrivacyKeyStatusTimestamp
// + TLinputPrivacyKeyChatInvite
// + TLinputPrivacyKeyPhoneCall
// + TLinputPrivacyKeyPhoneP2P
// + TLinputPrivacyKeyForwards
// + TLinputPrivacyKeyProfilePhoto
// + TLinputPrivacyKeyPhoneNumber
// + TLinputPrivacyKeyAddedByPhone
//
// Constructors:Type:InputPrivacyKey
type InputPrivacyKey struct {
	constructor int32
	data        *InputPrivacyKey_Data
}

// Constructors:Type:Data:InputPrivacyKey
type InputPrivacyKey_Data struct {
}

// Constructors:Predicate:inputPrivacyKeyStatusTimestamp
type TLinputPrivacyKeyStatusTimestamp struct {
	data *InputPrivacyKey_Data
}

// Constructors:New:inputPrivacyKeyStatusTimestamp
func NewTLinputPrivacyKeyStatusTimestamp() *TLinputPrivacyKeyStatusTimestamp {
	return &TLinputPrivacyKeyStatusTimestamp{data: &InputPrivacyKey_Data{}}
}

// Constructors:Predicate:inputPrivacyKeyChatInvite
type TLinputPrivacyKeyChatInvite struct {
	data *InputPrivacyKey_Data
}

// Constructors:New:inputPrivacyKeyChatInvite
func NewTLinputPrivacyKeyChatInvite() *TLinputPrivacyKeyChatInvite {
	return &TLinputPrivacyKeyChatInvite{data: &InputPrivacyKey_Data{}}
}

// Constructors:Predicate:inputPrivacyKeyPhoneCall
type TLinputPrivacyKeyPhoneCall struct {
	data *InputPrivacyKey_Data
}

// Constructors:New:inputPrivacyKeyPhoneCall
func NewTLinputPrivacyKeyPhoneCall() *TLinputPrivacyKeyPhoneCall {
	return &TLinputPrivacyKeyPhoneCall{data: &InputPrivacyKey_Data{}}
}

// Constructors:Predicate:inputPrivacyKeyPhoneP2P
type TLinputPrivacyKeyPhoneP2P struct {
	data *InputPrivacyKey_Data
}

// Constructors:New:inputPrivacyKeyPhoneP2P
func NewTLinputPrivacyKeyPhoneP2P() *TLinputPrivacyKeyPhoneP2P {
	return &TLinputPrivacyKeyPhoneP2P{data: &InputPrivacyKey_Data{}}
}

// Constructors:Predicate:inputPrivacyKeyForwards
type TLinputPrivacyKeyForwards struct {
	data *InputPrivacyKey_Data
}

// Constructors:New:inputPrivacyKeyForwards
func NewTLinputPrivacyKeyForwards() *TLinputPrivacyKeyForwards {
	return &TLinputPrivacyKeyForwards{data: &InputPrivacyKey_Data{}}
}

// Constructors:Predicate:inputPrivacyKeyProfilePhoto
type TLinputPrivacyKeyProfilePhoto struct {
	data *InputPrivacyKey_Data
}

// Constructors:New:inputPrivacyKeyProfilePhoto
func NewTLinputPrivacyKeyProfilePhoto() *TLinputPrivacyKeyProfilePhoto {
	return &TLinputPrivacyKeyProfilePhoto{data: &InputPrivacyKey_Data{}}
}

// Constructors:Predicate:inputPrivacyKeyPhoneNumber
type TLinputPrivacyKeyPhoneNumber struct {
	data *InputPrivacyKey_Data
}

// Constructors:New:inputPrivacyKeyPhoneNumber
func NewTLinputPrivacyKeyPhoneNumber() *TLinputPrivacyKeyPhoneNumber {
	return &TLinputPrivacyKeyPhoneNumber{data: &InputPrivacyKey_Data{}}
}

// Constructors:Predicate:inputPrivacyKeyAddedByPhone
type TLinputPrivacyKeyAddedByPhone struct {
	data *InputPrivacyKey_Data
}

// Constructors:New:inputPrivacyKeyAddedByPhone
func NewTLinputPrivacyKeyAddedByPhone() *TLinputPrivacyKeyAddedByPhone {
	return &TLinputPrivacyKeyAddedByPhone{data: &InputPrivacyKey_Data{}}
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_AllStickers
// messages_AllStickers <--
// + TLmessages_allStickersNotModified
// + TLmessages_allStickers
//
// Constructors:Type:messages_AllStickers
type messages_AllStickers struct {
	constructor int32
	data        *messages_AllStickers_Data
}

// Constructors:Type:Data:messages_AllStickers
type messages_AllStickers_Data struct {
	hash int32
	sets []*StickerSet
}

// Constructors:Predicate:messages_allStickersNotModified
type TLmessages_allStickersNotModified struct {
	data *messages_AllStickers_Data
}

// Constructors:New:messages_allStickersNotModified
func NewTLmessages_allStickersNotModified() *TLmessages_allStickersNotModified {
	return &TLmessages_allStickersNotModified{data: &messages_AllStickers_Data{}}
}

// Constructors:Predicate:messages_allStickers
type TLmessages_allStickers struct {
	data *messages_AllStickers_Data
}

// Constructors:New:messages_allStickers
func NewTLmessages_allStickers() *TLmessages_allStickers {
	return &TLmessages_allStickers{data: &messages_AllStickers_Data{}}
}
func (m *TLmessages_allStickers) Sethash(v int32)         { m.data.hash = v }
func (m *TLmessages_allStickers) Gethash() int32          { return m.data.hash }
func (m *TLmessages_allStickers) Setsets(v []*StickerSet) { m.data.sets = v }
func (m *TLmessages_allStickers) Getsets() []*StickerSet  { return m.data.sets }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ExportedChatInvite
// ExportedChatInvite <--
// + TLchatInviteEmpty
// + TLchatInviteExported
//
// Constructors:Type:ExportedChatInvite
type ExportedChatInvite struct {
	constructor int32
	data        *ExportedChatInvite_Data
}

// Constructors:Type:Data:ExportedChatInvite
type ExportedChatInvite_Data struct {
	link string
}

// Constructors:Predicate:chatInviteEmpty
type TLchatInviteEmpty struct {
	data *ExportedChatInvite_Data
}

// Constructors:New:chatInviteEmpty
func NewTLchatInviteEmpty() *TLchatInviteEmpty {
	return &TLchatInviteEmpty{data: &ExportedChatInvite_Data{}}
}

// Constructors:Predicate:chatInviteExported
type TLchatInviteExported struct {
	data *ExportedChatInvite_Data
}

// Constructors:New:chatInviteExported
func NewTLchatInviteExported() *TLchatInviteExported {
	return &TLchatInviteExported{data: &ExportedChatInvite_Data{}}
}
func (m *TLchatInviteExported) Setlink(v string) { m.data.link = v }
func (m *TLchatInviteExported) Getlink() string  { return m.data.link }

///////////////////////////////////////////////////////////////////////////////
// Constructors:Authorization
// Authorization <--
// + TLauthorization
//
// Constructors:Type:Authorization
type Authorization struct {
	constructor int32
	data        *Authorization_Data
}

// Constructors:Type:Data:Authorization
type Authorization_Data struct {
	current          bool
	official_app     bool
	password_pending bool
	hash             int64
	device_model     string
	platform         string
	system_version   string
	api_id           int32
	app_name         string
	app_version      string
	date_created     int32
	date_active      int32
	ip               string
	country          string
	region           string
}

// Constructors:Predicate:authorization
type TLauthorization struct {
	data *Authorization_Data
}

// Constructors:New:authorization
func NewTLauthorization() *TLauthorization {
	return &TLauthorization{data: &Authorization_Data{}}
}
func (m *TLauthorization) Setcurrent(v bool)          { m.data.current = v }
func (m *TLauthorization) Getcurrent() bool           { return m.data.current }
func (m *TLauthorization) Setofficial_app(v bool)     { m.data.official_app = v }
func (m *TLauthorization) Getofficial_app() bool      { return m.data.official_app }
func (m *TLauthorization) Setpassword_pending(v bool) { m.data.password_pending = v }
func (m *TLauthorization) Getpassword_pending() bool  { return m.data.password_pending }
func (m *TLauthorization) Sethash(v int64)            { m.data.hash = v }
func (m *TLauthorization) Gethash() int64             { return m.data.hash }
func (m *TLauthorization) Setdevice_model(v string)   { m.data.device_model = v }
func (m *TLauthorization) Getdevice_model() string    { return m.data.device_model }
func (m *TLauthorization) Setplatform(v string)       { m.data.platform = v }
func (m *TLauthorization) Getplatform() string        { return m.data.platform }
func (m *TLauthorization) Setsystem_version(v string) { m.data.system_version = v }
func (m *TLauthorization) Getsystem_version() string  { return m.data.system_version }
func (m *TLauthorization) Setapi_id(v int32)          { m.data.api_id = v }
func (m *TLauthorization) Getapi_id() int32           { return m.data.api_id }
func (m *TLauthorization) Setapp_name(v string)       { m.data.app_name = v }
func (m *TLauthorization) Getapp_name() string        { return m.data.app_name }
func (m *TLauthorization) Setapp_version(v string)    { m.data.app_version = v }
func (m *TLauthorization) Getapp_version() string     { return m.data.app_version }
func (m *TLauthorization) Setdate_created(v int32)    { m.data.date_created = v }
func (m *TLauthorization) Getdate_created() int32     { return m.data.date_created }
func (m *TLauthorization) Setdate_active(v int32)     { m.data.date_active = v }
func (m *TLauthorization) Getdate_active() int32      { return m.data.date_active }
func (m *TLauthorization) Setip(v string)             { m.data.ip = v }
func (m *TLauthorization) Getip() string              { return m.data.ip }
func (m *TLauthorization) Setcountry(v string)        { m.data.country = v }
func (m *TLauthorization) Getcountry() string         { return m.data.country }
func (m *TLauthorization) Setregion(v string)         { m.data.region = v }
func (m *TLauthorization) Getregion() string          { return m.data.region }

///////////////////////////////////////////////////////////////////////////////
// Constructors:payments_PaymentReceipt
// payments_PaymentReceipt <--
// + TLpayments_paymentReceipt
//
// Constructors:Type:payments_PaymentReceipt
type payments_PaymentReceipt struct {
	constructor int32
	data        *payments_PaymentReceipt_Data
}

// Constructors:Type:Data:payments_PaymentReceipt
type payments_PaymentReceipt_Data struct {
	date              int32
	bot_id            int32
	invoice           *Invoice
	provider_id       int32
	info              *PaymentRequestedInfo
	shipping          *ShippingOption
	currency          string
	total_amount      int64
	credentials_title string
	users             []*User
}

// Constructors:Predicate:payments_paymentReceipt
type TLpayments_paymentReceipt struct {
	data *payments_PaymentReceipt_Data
}

// Constructors:New:payments_paymentReceipt
func NewTLpayments_paymentReceipt() *TLpayments_paymentReceipt {
	return &TLpayments_paymentReceipt{data: &payments_PaymentReceipt_Data{}}
}
func (m *TLpayments_paymentReceipt) Setdate(v int32)                 { m.data.date = v }
func (m *TLpayments_paymentReceipt) Getdate() int32                  { return m.data.date }
func (m *TLpayments_paymentReceipt) Setbot_id(v int32)               { m.data.bot_id = v }
func (m *TLpayments_paymentReceipt) Getbot_id() int32                { return m.data.bot_id }
func (m *TLpayments_paymentReceipt) Setinvoice(v *Invoice)           { m.data.invoice = v }
func (m *TLpayments_paymentReceipt) Getinvoice() *Invoice            { return m.data.invoice }
func (m *TLpayments_paymentReceipt) Setprovider_id(v int32)          { m.data.provider_id = v }
func (m *TLpayments_paymentReceipt) Getprovider_id() int32           { return m.data.provider_id }
func (m *TLpayments_paymentReceipt) Setinfo(v *PaymentRequestedInfo) { m.data.info = v }
func (m *TLpayments_paymentReceipt) Getinfo() *PaymentRequestedInfo  { return m.data.info }
func (m *TLpayments_paymentReceipt) Setshipping(v *ShippingOption)   { m.data.shipping = v }
func (m *TLpayments_paymentReceipt) Getshipping() *ShippingOption    { return m.data.shipping }
func (m *TLpayments_paymentReceipt) Setcurrency(v string)            { m.data.currency = v }
func (m *TLpayments_paymentReceipt) Getcurrency() string             { return m.data.currency }
func (m *TLpayments_paymentReceipt) Settotal_amount(v int64)         { m.data.total_amount = v }
func (m *TLpayments_paymentReceipt) Gettotal_amount() int64          { return m.data.total_amount }
func (m *TLpayments_paymentReceipt) Setcredentials_title(v string)   { m.data.credentials_title = v }
func (m *TLpayments_paymentReceipt) Getcredentials_title() string    { return m.data.credentials_title }
func (m *TLpayments_paymentReceipt) Setusers(v []*User)              { m.data.users = v }
func (m *TLpayments_paymentReceipt) Getusers() []*User               { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:StatsAbsValueAndPrev
// StatsAbsValueAndPrev <--
// + TLstatsAbsValueAndPrev
//
// Constructors:Type:StatsAbsValueAndPrev
type StatsAbsValueAndPrev struct {
	constructor int32
	data        *StatsAbsValueAndPrev_Data
}

// Constructors:Type:Data:StatsAbsValueAndPrev
type StatsAbsValueAndPrev_Data struct {
	current  float64
	previous float64
}

// Constructors:Predicate:statsAbsValueAndPrev
type TLstatsAbsValueAndPrev struct {
	data *StatsAbsValueAndPrev_Data
}

// Constructors:New:statsAbsValueAndPrev
func NewTLstatsAbsValueAndPrev() *TLstatsAbsValueAndPrev {
	return &TLstatsAbsValueAndPrev{data: &StatsAbsValueAndPrev_Data{}}
}
func (m *TLstatsAbsValueAndPrev) Setcurrent(v float64)  { m.data.current = v }
func (m *TLstatsAbsValueAndPrev) Getcurrent() float64   { return m.data.current }
func (m *TLstatsAbsValueAndPrev) Setprevious(v float64) { m.data.previous = v }
func (m *TLstatsAbsValueAndPrev) Getprevious() float64  { return m.data.previous }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PageCaption
// PageCaption <--
// + TLpageCaption
//
// Constructors:Type:PageCaption
type PageCaption struct {
	constructor int32
	data        *PageCaption_Data
}

// Constructors:Type:Data:PageCaption
type PageCaption_Data struct {
	text   *RichText
	credit *RichText
}

// Constructors:Predicate:pageCaption
type TLpageCaption struct {
	data *PageCaption_Data
}

// Constructors:New:pageCaption
func NewTLpageCaption() *TLpageCaption {
	return &TLpageCaption{data: &PageCaption_Data{}}
}
func (m *TLpageCaption) Settext(v *RichText)   { m.data.text = v }
func (m *TLpageCaption) Gettext() *RichText    { return m.data.text }
func (m *TLpageCaption) Setcredit(v *RichText) { m.data.credit = v }
func (m *TLpageCaption) Getcredit() *RichText  { return m.data.credit }

///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageUserVote
// MessageUserVote <--
// + TLmessageUserVote
// + TLmessageUserVoteInputOption
// + TLmessageUserVoteMultiple
//
// Constructors:Type:MessageUserVote
type MessageUserVote struct {
	constructor int32
	data        *MessageUserVote_Data
}

// Constructors:Type:Data:MessageUserVote
type MessageUserVote_Data struct {
	user_id int32
	option  []byte
	date    int32
	options [][]byte
}

// Constructors:Predicate:messageUserVote
type TLmessageUserVote struct {
	data *MessageUserVote_Data
}

// Constructors:New:messageUserVote
func NewTLmessageUserVote() *TLmessageUserVote {
	return &TLmessageUserVote{data: &MessageUserVote_Data{}}
}

// Constructors:Predicate:messageUserVoteInputOption
type TLmessageUserVoteInputOption struct {
	data *MessageUserVote_Data
}

// Constructors:New:messageUserVoteInputOption
func NewTLmessageUserVoteInputOption() *TLmessageUserVoteInputOption {
	return &TLmessageUserVoteInputOption{data: &MessageUserVote_Data{}}
}

// Constructors:Predicate:messageUserVoteMultiple
type TLmessageUserVoteMultiple struct {
	data *MessageUserVote_Data
}

// Constructors:New:messageUserVoteMultiple
func NewTLmessageUserVoteMultiple() *TLmessageUserVoteMultiple {
	return &TLmessageUserVoteMultiple{data: &MessageUserVote_Data{}}
}
func (m *TLmessageUserVote) Setuser_id(v int32)            { m.data.user_id = v }
func (m *TLmessageUserVote) Getuser_id() int32             { return m.data.user_id }
func (m *TLmessageUserVote) Setoption(v []byte)            { m.data.option = v }
func (m *TLmessageUserVote) Getoption() []byte             { return m.data.option }
func (m *TLmessageUserVote) Setdate(v int32)               { m.data.date = v }
func (m *TLmessageUserVote) Getdate() int32                { return m.data.date }
func (m *TLmessageUserVoteInputOption) Setuser_id(v int32) { m.data.user_id = v }
func (m *TLmessageUserVoteInputOption) Getuser_id() int32  { return m.data.user_id }
func (m *TLmessageUserVoteInputOption) Setdate(v int32)    { m.data.date = v }
func (m *TLmessageUserVoteInputOption) Getdate() int32     { return m.data.date }
func (m *TLmessageUserVoteMultiple) Setuser_id(v int32)    { m.data.user_id = v }
func (m *TLmessageUserVoteMultiple) Getuser_id() int32     { return m.data.user_id }
func (m *TLmessageUserVoteMultiple) Setoptions(v [][]byte) { m.data.options = v }
func (m *TLmessageUserVoteMultiple) Getoptions() [][]byte  { return m.data.options }
func (m *TLmessageUserVoteMultiple) Setdate(v int32)       { m.data.date = v }
func (m *TLmessageUserVoteMultiple) Getdate() int32        { return m.data.date }

///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageReplyHeader
// MessageReplyHeader <--
// + TLmessageReplyHeader
//
// Constructors:Type:MessageReplyHeader
type MessageReplyHeader struct {
	constructor int32
	data        *MessageReplyHeader_Data
}

// Constructors:Type:Data:MessageReplyHeader
type MessageReplyHeader_Data struct {
	reply_to_msg_id  int32
	reply_to_peer_id *Peer
	reply_to_top_id  int32
}

// Constructors:Predicate:messageReplyHeader
type TLmessageReplyHeader struct {
	data *MessageReplyHeader_Data
}

// Constructors:New:messageReplyHeader
func NewTLmessageReplyHeader() *TLmessageReplyHeader {
	return &TLmessageReplyHeader{data: &MessageReplyHeader_Data{}}
}
func (m *TLmessageReplyHeader) Setreply_to_msg_id(v int32)  { m.data.reply_to_msg_id = v }
func (m *TLmessageReplyHeader) Getreply_to_msg_id() int32   { return m.data.reply_to_msg_id }
func (m *TLmessageReplyHeader) Setreply_to_peer_id(v *Peer) { m.data.reply_to_peer_id = v }
func (m *TLmessageReplyHeader) Getreply_to_peer_id() *Peer  { return m.data.reply_to_peer_id }
func (m *TLmessageReplyHeader) Setreply_to_top_id(v int32)  { m.data.reply_to_top_id = v }
func (m *TLmessageReplyHeader) Getreply_to_top_id() int32   { return m.data.reply_to_top_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_Chats
// messages_Chats <--
// + TLmessages_chats
// + TLmessages_chatsSlice
//
// Constructors:Type:messages_Chats
type messages_Chats struct {
	constructor int32
	data        *messages_Chats_Data
}

// Constructors:Type:Data:messages_Chats
type messages_Chats_Data struct {
	chats []*Chat
	count int32
}

// Constructors:Predicate:messages_chats
type TLmessages_chats struct {
	data *messages_Chats_Data
}

// Constructors:New:messages_chats
func NewTLmessages_chats() *TLmessages_chats {
	return &TLmessages_chats{data: &messages_Chats_Data{}}
}

// Constructors:Predicate:messages_chatsSlice
type TLmessages_chatsSlice struct {
	data *messages_Chats_Data
}

// Constructors:New:messages_chatsSlice
func NewTLmessages_chatsSlice() *TLmessages_chatsSlice {
	return &TLmessages_chatsSlice{data: &messages_Chats_Data{}}
}
func (m *TLmessages_chats) Setchats(v []*Chat)      { m.data.chats = v }
func (m *TLmessages_chats) Getchats() []*Chat       { return m.data.chats }
func (m *TLmessages_chatsSlice) Setcount(v int32)   { m.data.count = v }
func (m *TLmessages_chatsSlice) Getcount() int32    { return m.data.count }
func (m *TLmessages_chatsSlice) Setchats(v []*Chat) { m.data.chats = v }
func (m *TLmessages_chatsSlice) Getchats() []*Chat  { return m.data.chats }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_ArchivedStickers
// messages_ArchivedStickers <--
// + TLmessages_archivedStickers
//
// Constructors:Type:messages_ArchivedStickers
type messages_ArchivedStickers struct {
	constructor int32
	data        *messages_ArchivedStickers_Data
}

// Constructors:Type:Data:messages_ArchivedStickers
type messages_ArchivedStickers_Data struct {
	count int32
	sets  []*StickerSetCovered
}

// Constructors:Predicate:messages_archivedStickers
type TLmessages_archivedStickers struct {
	data *messages_ArchivedStickers_Data
}

// Constructors:New:messages_archivedStickers
func NewTLmessages_archivedStickers() *TLmessages_archivedStickers {
	return &TLmessages_archivedStickers{data: &messages_ArchivedStickers_Data{}}
}
func (m *TLmessages_archivedStickers) Setcount(v int32)               { m.data.count = v }
func (m *TLmessages_archivedStickers) Getcount() int32                { return m.data.count }
func (m *TLmessages_archivedStickers) Setsets(v []*StickerSetCovered) { m.data.sets = v }
func (m *TLmessages_archivedStickers) Getsets() []*StickerSetCovered  { return m.data.sets }

///////////////////////////////////////////////////////////////////////////////
// Constructors:payments_PaymentResult
// payments_PaymentResult <--
// + TLpayments_paymentResult
// + TLpayments_paymentVerificationNeeded
//
// Constructors:Type:payments_PaymentResult
type payments_PaymentResult struct {
	constructor int32
	data        *payments_PaymentResult_Data
}

// Constructors:Type:Data:payments_PaymentResult
type payments_PaymentResult_Data struct {
	updates *Updates
	url     string
}

// Constructors:Predicate:payments_paymentResult
type TLpayments_paymentResult struct {
	data *payments_PaymentResult_Data
}

// Constructors:New:payments_paymentResult
func NewTLpayments_paymentResult() *TLpayments_paymentResult {
	return &TLpayments_paymentResult{data: &payments_PaymentResult_Data{}}
}

// Constructors:Predicate:payments_paymentVerificationNeeded
type TLpayments_paymentVerificationNeeded struct {
	data *payments_PaymentResult_Data
}

// Constructors:New:payments_paymentVerificationNeeded
func NewTLpayments_paymentVerificationNeeded() *TLpayments_paymentVerificationNeeded {
	return &TLpayments_paymentVerificationNeeded{data: &payments_PaymentResult_Data{}}
}
func (m *TLpayments_paymentResult) Setupdates(v *Updates)       { m.data.updates = v }
func (m *TLpayments_paymentResult) Getupdates() *Updates        { return m.data.updates }
func (m *TLpayments_paymentVerificationNeeded) Seturl(v string) { m.data.url = v }
func (m *TLpayments_paymentVerificationNeeded) Geturl() string  { return m.data.url }

///////////////////////////////////////////////////////////////////////////////
// Constructors:StatsDateRangeDays
// StatsDateRangeDays <--
// + TLstatsDateRangeDays
//
// Constructors:Type:StatsDateRangeDays
type StatsDateRangeDays struct {
	constructor int32
	data        *StatsDateRangeDays_Data
}

// Constructors:Type:Data:StatsDateRangeDays
type StatsDateRangeDays_Data struct {
	min_date int32
	max_date int32
}

// Constructors:Predicate:statsDateRangeDays
type TLstatsDateRangeDays struct {
	data *StatsDateRangeDays_Data
}

// Constructors:New:statsDateRangeDays
func NewTLstatsDateRangeDays() *TLstatsDateRangeDays {
	return &TLstatsDateRangeDays{data: &StatsDateRangeDays_Data{}}
}
func (m *TLstatsDateRangeDays) Setmin_date(v int32) { m.data.min_date = v }
func (m *TLstatsDateRangeDays) Getmin_date() int32  { return m.data.min_date }
func (m *TLstatsDateRangeDays) Setmax_date(v int32) { m.data.max_date = v }
func (m *TLstatsDateRangeDays) Getmax_date() int32  { return m.data.max_date }

///////////////////////////////////////////////////////////////////////////////
// Constructors:FileHash
// FileHash <--
// + TLfileHash
//
// Constructors:Type:FileHash
type FileHash struct {
	constructor int32
	data        *FileHash_Data
}

// Constructors:Type:Data:FileHash
type FileHash_Data struct {
	offset int32
	limit  int32
	hash   []byte
}

// Constructors:Predicate:fileHash
type TLfileHash struct {
	data *FileHash_Data
}

// Constructors:New:fileHash
func NewTLfileHash() *TLfileHash {
	return &TLfileHash{data: &FileHash_Data{}}
}
func (m *TLfileHash) Setoffset(v int32) { m.data.offset = v }
func (m *TLfileHash) Getoffset() int32  { return m.data.offset }
func (m *TLfileHash) Setlimit(v int32)  { m.data.limit = v }
func (m *TLfileHash) Getlimit() int32   { return m.data.limit }
func (m *TLfileHash) Sethash(v []byte)  { m.data.hash = v }
func (m *TLfileHash) Gethash() []byte   { return m.data.hash }

///////////////////////////////////////////////////////////////////////////////
// Constructors:MaskCoords
// MaskCoords <--
// + TLmaskCoords
//
// Constructors:Type:MaskCoords
type MaskCoords struct {
	constructor int32
	data        *MaskCoords_Data
}

// Constructors:Type:Data:MaskCoords
type MaskCoords_Data struct {
	n    int32
	x    float64
	y    float64
	zoom float64
}

// Constructors:Predicate:maskCoords
type TLmaskCoords struct {
	data *MaskCoords_Data
}

// Constructors:New:maskCoords
func NewTLmaskCoords() *TLmaskCoords {
	return &TLmaskCoords{data: &MaskCoords_Data{}}
}
func (m *TLmaskCoords) Setn(v int32)      { m.data.n = v }
func (m *TLmaskCoords) Getn() int32       { return m.data.n }
func (m *TLmaskCoords) Setx(v float64)    { m.data.x = v }
func (m *TLmaskCoords) Getx() float64     { return m.data.x }
func (m *TLmaskCoords) Sety(v float64)    { m.data.y = v }
func (m *TLmaskCoords) Gety() float64     { return m.data.y }
func (m *TLmaskCoords) Setzoom(v float64) { m.data.zoom = v }
func (m *TLmaskCoords) Getzoom() float64  { return m.data.zoom }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputWebDocument
// InputWebDocument <--
// + TLinputWebDocument
//
// Constructors:Type:InputWebDocument
type InputWebDocument struct {
	constructor int32
	data        *InputWebDocument_Data
}

// Constructors:Type:Data:InputWebDocument
type InputWebDocument_Data struct {
	url        string
	size       int32
	mime_type  string
	attributes []*DocumentAttribute
}

// Constructors:Predicate:inputWebDocument
type TLinputWebDocument struct {
	data *InputWebDocument_Data
}

// Constructors:New:inputWebDocument
func NewTLinputWebDocument() *TLinputWebDocument {
	return &TLinputWebDocument{data: &InputWebDocument_Data{}}
}
func (m *TLinputWebDocument) Seturl(v string)                      { m.data.url = v }
func (m *TLinputWebDocument) Geturl() string                       { return m.data.url }
func (m *TLinputWebDocument) Setsize(v int32)                      { m.data.size = v }
func (m *TLinputWebDocument) Getsize() int32                       { return m.data.size }
func (m *TLinputWebDocument) Setmime_type(v string)                { m.data.mime_type = v }
func (m *TLinputWebDocument) Getmime_type() string                 { return m.data.mime_type }
func (m *TLinputWebDocument) Setattributes(v []*DocumentAttribute) { m.data.attributes = v }
func (m *TLinputWebDocument) Getattributes() []*DocumentAttribute  { return m.data.attributes }

///////////////////////////////////////////////////////////////////////////////
// Constructors:help_Country
// help_Country <--
// + TLhelp_country
//
// Constructors:Type:help_Country
type help_Country struct {
	constructor int32
	data        *help_Country_Data
}

// Constructors:Type:Data:help_Country
type help_Country_Data struct {
	hidden        bool
	iso2          string
	default_name  string
	name          string
	country_codes []*help_CountryCode
}

// Constructors:Predicate:help_country
type TLhelp_country struct {
	data *help_Country_Data
}

// Constructors:New:help_country
func NewTLhelp_country() *TLhelp_country {
	return &TLhelp_country{data: &help_Country_Data{}}
}
func (m *TLhelp_country) Sethidden(v bool)                       { m.data.hidden = v }
func (m *TLhelp_country) Gethidden() bool                        { return m.data.hidden }
func (m *TLhelp_country) Setiso2(v string)                       { m.data.iso2 = v }
func (m *TLhelp_country) Getiso2() string                        { return m.data.iso2 }
func (m *TLhelp_country) Setdefault_name(v string)               { m.data.default_name = v }
func (m *TLhelp_country) Getdefault_name() string                { return m.data.default_name }
func (m *TLhelp_country) Setname(v string)                       { m.data.name = v }
func (m *TLhelp_country) Getname() string                        { return m.data.name }
func (m *TLhelp_country) Setcountry_codes(v []*help_CountryCode) { m.data.country_codes = v }
func (m *TLhelp_country) Getcountry_codes() []*help_CountryCode  { return m.data.country_codes }

///////////////////////////////////////////////////////////////////////////////
// Constructors:FileLocation
// FileLocation <--
// + TLfileLocationToBeDeprecated
//
// Constructors:Type:FileLocation
type FileLocation struct {
	constructor int32
	data        *FileLocation_Data
}

// Constructors:Type:Data:FileLocation
type FileLocation_Data struct {
	volume_id int64
	local_id  int32
}

// Constructors:Predicate:fileLocationToBeDeprecated
type TLfileLocationToBeDeprecated struct {
	data *FileLocation_Data
}

// Constructors:New:fileLocationToBeDeprecated
func NewTLfileLocationToBeDeprecated() *TLfileLocationToBeDeprecated {
	return &TLfileLocationToBeDeprecated{data: &FileLocation_Data{}}
}
func (m *TLfileLocationToBeDeprecated) Setvolume_id(v int64) { m.data.volume_id = v }
func (m *TLfileLocationToBeDeprecated) Getvolume_id() int64  { return m.data.volume_id }
func (m *TLfileLocationToBeDeprecated) Setlocal_id(v int32)  { m.data.local_id = v }
func (m *TLfileLocationToBeDeprecated) Getlocal_id() int32   { return m.data.local_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputEncryptedFile
// InputEncryptedFile <--
// + TLinputEncryptedFileEmpty
// + TLinputEncryptedFileUploaded
// + TLinputEncryptedFile
// + TLinputEncryptedFileBigUploaded
//
// Constructors:Type:InputEncryptedFile
type InputEncryptedFile struct {
	constructor int32
	data        *InputEncryptedFile_Data
}

// Constructors:Type:Data:InputEncryptedFile
type InputEncryptedFile_Data struct {
	id              int64
	parts           int32
	md5_checksum    string
	key_fingerprint int32
	access_hash     int64
}

// Constructors:Predicate:inputEncryptedFileEmpty
type TLinputEncryptedFileEmpty struct {
	data *InputEncryptedFile_Data
}

// Constructors:New:inputEncryptedFileEmpty
func NewTLinputEncryptedFileEmpty() *TLinputEncryptedFileEmpty {
	return &TLinputEncryptedFileEmpty{data: &InputEncryptedFile_Data{}}
}

// Constructors:Predicate:inputEncryptedFileUploaded
type TLinputEncryptedFileUploaded struct {
	data *InputEncryptedFile_Data
}

// Constructors:New:inputEncryptedFileUploaded
func NewTLinputEncryptedFileUploaded() *TLinputEncryptedFileUploaded {
	return &TLinputEncryptedFileUploaded{data: &InputEncryptedFile_Data{}}
}

// Constructors:Predicate:inputEncryptedFile
type TLinputEncryptedFile struct {
	data *InputEncryptedFile_Data
}

// Constructors:New:inputEncryptedFile
func NewTLinputEncryptedFile() *TLinputEncryptedFile {
	return &TLinputEncryptedFile{data: &InputEncryptedFile_Data{}}
}

// Constructors:Predicate:inputEncryptedFileBigUploaded
type TLinputEncryptedFileBigUploaded struct {
	data *InputEncryptedFile_Data
}

// Constructors:New:inputEncryptedFileBigUploaded
func NewTLinputEncryptedFileBigUploaded() *TLinputEncryptedFileBigUploaded {
	return &TLinputEncryptedFileBigUploaded{data: &InputEncryptedFile_Data{}}
}
func (m *TLinputEncryptedFileUploaded) Setid(v int64)                 { m.data.id = v }
func (m *TLinputEncryptedFileUploaded) Getid() int64                  { return m.data.id }
func (m *TLinputEncryptedFileUploaded) Setparts(v int32)              { m.data.parts = v }
func (m *TLinputEncryptedFileUploaded) Getparts() int32               { return m.data.parts }
func (m *TLinputEncryptedFileUploaded) Setmd5_checksum(v string)      { m.data.md5_checksum = v }
func (m *TLinputEncryptedFileUploaded) Getmd5_checksum() string       { return m.data.md5_checksum }
func (m *TLinputEncryptedFileUploaded) Setkey_fingerprint(v int32)    { m.data.key_fingerprint = v }
func (m *TLinputEncryptedFileUploaded) Getkey_fingerprint() int32     { return m.data.key_fingerprint }
func (m *TLinputEncryptedFile) Setid(v int64)                         { m.data.id = v }
func (m *TLinputEncryptedFile) Getid() int64                          { return m.data.id }
func (m *TLinputEncryptedFile) Setaccess_hash(v int64)                { m.data.access_hash = v }
func (m *TLinputEncryptedFile) Getaccess_hash() int64                 { return m.data.access_hash }
func (m *TLinputEncryptedFileBigUploaded) Setid(v int64)              { m.data.id = v }
func (m *TLinputEncryptedFileBigUploaded) Getid() int64               { return m.data.id }
func (m *TLinputEncryptedFileBigUploaded) Setparts(v int32)           { m.data.parts = v }
func (m *TLinputEncryptedFileBigUploaded) Getparts() int32            { return m.data.parts }
func (m *TLinputEncryptedFileBigUploaded) Setkey_fingerprint(v int32) { m.data.key_fingerprint = v }
func (m *TLinputEncryptedFileBigUploaded) Getkey_fingerprint() int32  { return m.data.key_fingerprint }

///////////////////////////////////////////////////////////////////////////////
// Constructors:User
// User <--
// + TLuserEmpty
// + TLuser
//
// Constructors:Type:User
type User struct {
	constructor int32
	data        *User_Data
}

// Constructors:Type:Data:User
type User_Data struct {
	id                     int32
	self                   bool
	contact                bool
	mutual_contact         bool
	deleted                bool
	bot                    bool
	bot_chat_history       bool
	bot_nochats            bool
	verified               bool
	restricted             bool
	min                    bool
	bot_inline_geo         bool
	support                bool
	scam                   bool
	apply_min_photo        bool
	access_hash            int64
	first_name             string
	last_name              string
	username               string
	phone                  string
	photo                  *UserProfilePhoto
	status                 *UserStatus
	bot_info_version       int32
	restriction_reason     []*RestrictionReason
	bot_inline_placeholder string
	lang_code              string
}

// Constructors:Predicate:userEmpty
type TLuserEmpty struct {
	data *User_Data
}

// Constructors:New:userEmpty
func NewTLuserEmpty() *TLuserEmpty {
	return &TLuserEmpty{data: &User_Data{}}
}

// Constructors:Predicate:user
type TLuser struct {
	data *User_Data
}

// Constructors:New:user
func NewTLuser() *TLuser {
	return &TLuser{data: &User_Data{}}
}
func (m *TLuserEmpty) Setid(v int32)                           { m.data.id = v }
func (m *TLuserEmpty) Getid() int32                            { return m.data.id }
func (m *TLuser) Setself(v bool)                               { m.data.self = v }
func (m *TLuser) Getself() bool                                { return m.data.self }
func (m *TLuser) Setcontact(v bool)                            { m.data.contact = v }
func (m *TLuser) Getcontact() bool                             { return m.data.contact }
func (m *TLuser) Setmutual_contact(v bool)                     { m.data.mutual_contact = v }
func (m *TLuser) Getmutual_contact() bool                      { return m.data.mutual_contact }
func (m *TLuser) Setdeleted(v bool)                            { m.data.deleted = v }
func (m *TLuser) Getdeleted() bool                             { return m.data.deleted }
func (m *TLuser) Setbot(v bool)                                { m.data.bot = v }
func (m *TLuser) Getbot() bool                                 { return m.data.bot }
func (m *TLuser) Setbot_chat_history(v bool)                   { m.data.bot_chat_history = v }
func (m *TLuser) Getbot_chat_history() bool                    { return m.data.bot_chat_history }
func (m *TLuser) Setbot_nochats(v bool)                        { m.data.bot_nochats = v }
func (m *TLuser) Getbot_nochats() bool                         { return m.data.bot_nochats }
func (m *TLuser) Setverified(v bool)                           { m.data.verified = v }
func (m *TLuser) Getverified() bool                            { return m.data.verified }
func (m *TLuser) Setrestricted(v bool)                         { m.data.restricted = v }
func (m *TLuser) Getrestricted() bool                          { return m.data.restricted }
func (m *TLuser) Setmin(v bool)                                { m.data.min = v }
func (m *TLuser) Getmin() bool                                 { return m.data.min }
func (m *TLuser) Setbot_inline_geo(v bool)                     { m.data.bot_inline_geo = v }
func (m *TLuser) Getbot_inline_geo() bool                      { return m.data.bot_inline_geo }
func (m *TLuser) Setsupport(v bool)                            { m.data.support = v }
func (m *TLuser) Getsupport() bool                             { return m.data.support }
func (m *TLuser) Setscam(v bool)                               { m.data.scam = v }
func (m *TLuser) Getscam() bool                                { return m.data.scam }
func (m *TLuser) Setapply_min_photo(v bool)                    { m.data.apply_min_photo = v }
func (m *TLuser) Getapply_min_photo() bool                     { return m.data.apply_min_photo }
func (m *TLuser) Setid(v int32)                                { m.data.id = v }
func (m *TLuser) Getid() int32                                 { return m.data.id }
func (m *TLuser) Setaccess_hash(v int64)                       { m.data.access_hash = v }
func (m *TLuser) Getaccess_hash() int64                        { return m.data.access_hash }
func (m *TLuser) Setfirst_name(v string)                       { m.data.first_name = v }
func (m *TLuser) Getfirst_name() string                        { return m.data.first_name }
func (m *TLuser) Setlast_name(v string)                        { m.data.last_name = v }
func (m *TLuser) Getlast_name() string                         { return m.data.last_name }
func (m *TLuser) Setusername(v string)                         { m.data.username = v }
func (m *TLuser) Getusername() string                          { return m.data.username }
func (m *TLuser) Setphone(v string)                            { m.data.phone = v }
func (m *TLuser) Getphone() string                             { return m.data.phone }
func (m *TLuser) Setphoto(v *UserProfilePhoto)                 { m.data.photo = v }
func (m *TLuser) Getphoto() *UserProfilePhoto                  { return m.data.photo }
func (m *TLuser) Setstatus(v *UserStatus)                      { m.data.status = v }
func (m *TLuser) Getstatus() *UserStatus                       { return m.data.status }
func (m *TLuser) Setbot_info_version(v int32)                  { m.data.bot_info_version = v }
func (m *TLuser) Getbot_info_version() int32                   { return m.data.bot_info_version }
func (m *TLuser) Setrestriction_reason(v []*RestrictionReason) { m.data.restriction_reason = v }
func (m *TLuser) Getrestriction_reason() []*RestrictionReason  { return m.data.restriction_reason }
func (m *TLuser) Setbot_inline_placeholder(v string)           { m.data.bot_inline_placeholder = v }
func (m *TLuser) Getbot_inline_placeholder() string            { return m.data.bot_inline_placeholder }
func (m *TLuser) Setlang_code(v string)                        { m.data.lang_code = v }
func (m *TLuser) Getlang_code() string                         { return m.data.lang_code }

///////////////////////////////////////////////////////////////////////////////
// Constructors:photos_Photos
// photos_Photos <--
// + TLphotos_photos
// + TLphotos_photosSlice
//
// Constructors:Type:photos_Photos
type photos_Photos struct {
	constructor int32
	data        *photos_Photos_Data
}

// Constructors:Type:Data:photos_Photos
type photos_Photos_Data struct {
	photos []*Photo
	users  []*User
	count  int32
}

// Constructors:Predicate:photos_photos
type TLphotos_photos struct {
	data *photos_Photos_Data
}

// Constructors:New:photos_photos
func NewTLphotos_photos() *TLphotos_photos {
	return &TLphotos_photos{data: &photos_Photos_Data{}}
}

// Constructors:Predicate:photos_photosSlice
type TLphotos_photosSlice struct {
	data *photos_Photos_Data
}

// Constructors:New:photos_photosSlice
func NewTLphotos_photosSlice() *TLphotos_photosSlice {
	return &TLphotos_photosSlice{data: &photos_Photos_Data{}}
}
func (m *TLphotos_photos) Setphotos(v []*Photo)      { m.data.photos = v }
func (m *TLphotos_photos) Getphotos() []*Photo       { return m.data.photos }
func (m *TLphotos_photos) Setusers(v []*User)        { m.data.users = v }
func (m *TLphotos_photos) Getusers() []*User         { return m.data.users }
func (m *TLphotos_photosSlice) Setcount(v int32)     { m.data.count = v }
func (m *TLphotos_photosSlice) Getcount() int32      { return m.data.count }
func (m *TLphotos_photosSlice) Setphotos(v []*Photo) { m.data.photos = v }
func (m *TLphotos_photosSlice) Getphotos() []*Photo  { return m.data.photos }
func (m *TLphotos_photosSlice) Setusers(v []*User)   { m.data.users = v }
func (m *TLphotos_photosSlice) Getusers() []*User    { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:BotInlineMessage
// BotInlineMessage <--
// + TLbotInlineMessageMediaAuto
// + TLbotInlineMessageText
// + TLbotInlineMessageMediaGeo
// + TLbotInlineMessageMediaVenue
// + TLbotInlineMessageMediaContact
//
// Constructors:Type:BotInlineMessage
type BotInlineMessage struct {
	constructor int32
	data        *BotInlineMessage_Data
}

// Constructors:Type:Data:BotInlineMessage
type BotInlineMessage_Data struct {
	message                       string
	entities                      []*MessageEntity
	reply_markup                  *ReplyMarkup
	no_webpage                    bool
	geo                           *GeoPoint
	heading                       int32
	period                        int32
	proximity_notification_radius int32
	title                         string
	address                       string
	provider                      string
	venue_id                      string
	venue_type                    string
	phone_number                  string
	first_name                    string
	last_name                     string
	vcard                         string
}

// Constructors:Predicate:botInlineMessageMediaAuto
type TLbotInlineMessageMediaAuto struct {
	data *BotInlineMessage_Data
}

// Constructors:New:botInlineMessageMediaAuto
func NewTLbotInlineMessageMediaAuto() *TLbotInlineMessageMediaAuto {
	return &TLbotInlineMessageMediaAuto{data: &BotInlineMessage_Data{}}
}

// Constructors:Predicate:botInlineMessageText
type TLbotInlineMessageText struct {
	data *BotInlineMessage_Data
}

// Constructors:New:botInlineMessageText
func NewTLbotInlineMessageText() *TLbotInlineMessageText {
	return &TLbotInlineMessageText{data: &BotInlineMessage_Data{}}
}

// Constructors:Predicate:botInlineMessageMediaGeo
type TLbotInlineMessageMediaGeo struct {
	data *BotInlineMessage_Data
}

// Constructors:New:botInlineMessageMediaGeo
func NewTLbotInlineMessageMediaGeo() *TLbotInlineMessageMediaGeo {
	return &TLbotInlineMessageMediaGeo{data: &BotInlineMessage_Data{}}
}

// Constructors:Predicate:botInlineMessageMediaVenue
type TLbotInlineMessageMediaVenue struct {
	data *BotInlineMessage_Data
}

// Constructors:New:botInlineMessageMediaVenue
func NewTLbotInlineMessageMediaVenue() *TLbotInlineMessageMediaVenue {
	return &TLbotInlineMessageMediaVenue{data: &BotInlineMessage_Data{}}
}

// Constructors:Predicate:botInlineMessageMediaContact
type TLbotInlineMessageMediaContact struct {
	data *BotInlineMessage_Data
}

// Constructors:New:botInlineMessageMediaContact
func NewTLbotInlineMessageMediaContact() *TLbotInlineMessageMediaContact {
	return &TLbotInlineMessageMediaContact{data: &BotInlineMessage_Data{}}
}
func (m *TLbotInlineMessageMediaAuto) Setmessage(v string)            { m.data.message = v }
func (m *TLbotInlineMessageMediaAuto) Getmessage() string             { return m.data.message }
func (m *TLbotInlineMessageMediaAuto) Setentities(v []*MessageEntity) { m.data.entities = v }
func (m *TLbotInlineMessageMediaAuto) Getentities() []*MessageEntity  { return m.data.entities }
func (m *TLbotInlineMessageMediaAuto) Setreply_markup(v *ReplyMarkup) { m.data.reply_markup = v }
func (m *TLbotInlineMessageMediaAuto) Getreply_markup() *ReplyMarkup  { return m.data.reply_markup }
func (m *TLbotInlineMessageText) Setno_webpage(v bool)                { m.data.no_webpage = v }
func (m *TLbotInlineMessageText) Getno_webpage() bool                 { return m.data.no_webpage }
func (m *TLbotInlineMessageText) Setmessage(v string)                 { m.data.message = v }
func (m *TLbotInlineMessageText) Getmessage() string                  { return m.data.message }
func (m *TLbotInlineMessageText) Setentities(v []*MessageEntity)      { m.data.entities = v }
func (m *TLbotInlineMessageText) Getentities() []*MessageEntity       { return m.data.entities }
func (m *TLbotInlineMessageText) Setreply_markup(v *ReplyMarkup)      { m.data.reply_markup = v }
func (m *TLbotInlineMessageText) Getreply_markup() *ReplyMarkup       { return m.data.reply_markup }
func (m *TLbotInlineMessageMediaGeo) Setgeo(v *GeoPoint)              { m.data.geo = v }
func (m *TLbotInlineMessageMediaGeo) Getgeo() *GeoPoint               { return m.data.geo }
func (m *TLbotInlineMessageMediaGeo) Setheading(v int32)              { m.data.heading = v }
func (m *TLbotInlineMessageMediaGeo) Getheading() int32               { return m.data.heading }
func (m *TLbotInlineMessageMediaGeo) Setperiod(v int32)               { m.data.period = v }
func (m *TLbotInlineMessageMediaGeo) Getperiod() int32                { return m.data.period }
func (m *TLbotInlineMessageMediaGeo) Setproximity_notification_radius(v int32) {
	m.data.proximity_notification_radius = v
}
func (m *TLbotInlineMessageMediaGeo) Getproximity_notification_radius() int32 {
	return m.data.proximity_notification_radius
}
func (m *TLbotInlineMessageMediaGeo) Setreply_markup(v *ReplyMarkup)     { m.data.reply_markup = v }
func (m *TLbotInlineMessageMediaGeo) Getreply_markup() *ReplyMarkup      { return m.data.reply_markup }
func (m *TLbotInlineMessageMediaVenue) Setgeo(v *GeoPoint)               { m.data.geo = v }
func (m *TLbotInlineMessageMediaVenue) Getgeo() *GeoPoint                { return m.data.geo }
func (m *TLbotInlineMessageMediaVenue) Settitle(v string)                { m.data.title = v }
func (m *TLbotInlineMessageMediaVenue) Gettitle() string                 { return m.data.title }
func (m *TLbotInlineMessageMediaVenue) Setaddress(v string)              { m.data.address = v }
func (m *TLbotInlineMessageMediaVenue) Getaddress() string               { return m.data.address }
func (m *TLbotInlineMessageMediaVenue) Setprovider(v string)             { m.data.provider = v }
func (m *TLbotInlineMessageMediaVenue) Getprovider() string              { return m.data.provider }
func (m *TLbotInlineMessageMediaVenue) Setvenue_id(v string)             { m.data.venue_id = v }
func (m *TLbotInlineMessageMediaVenue) Getvenue_id() string              { return m.data.venue_id }
func (m *TLbotInlineMessageMediaVenue) Setvenue_type(v string)           { m.data.venue_type = v }
func (m *TLbotInlineMessageMediaVenue) Getvenue_type() string            { return m.data.venue_type }
func (m *TLbotInlineMessageMediaVenue) Setreply_markup(v *ReplyMarkup)   { m.data.reply_markup = v }
func (m *TLbotInlineMessageMediaVenue) Getreply_markup() *ReplyMarkup    { return m.data.reply_markup }
func (m *TLbotInlineMessageMediaContact) Setphone_number(v string)       { m.data.phone_number = v }
func (m *TLbotInlineMessageMediaContact) Getphone_number() string        { return m.data.phone_number }
func (m *TLbotInlineMessageMediaContact) Setfirst_name(v string)         { m.data.first_name = v }
func (m *TLbotInlineMessageMediaContact) Getfirst_name() string          { return m.data.first_name }
func (m *TLbotInlineMessageMediaContact) Setlast_name(v string)          { m.data.last_name = v }
func (m *TLbotInlineMessageMediaContact) Getlast_name() string           { return m.data.last_name }
func (m *TLbotInlineMessageMediaContact) Setvcard(v string)              { m.data.vcard = v }
func (m *TLbotInlineMessageMediaContact) Getvcard() string               { return m.data.vcard }
func (m *TLbotInlineMessageMediaContact) Setreply_markup(v *ReplyMarkup) { m.data.reply_markup = v }
func (m *TLbotInlineMessageMediaContact) Getreply_markup() *ReplyMarkup  { return m.data.reply_markup }

///////////////////////////////////////////////////////////////////////////////
// Constructors:DialogPeer
// DialogPeer <--
// + TLdialogPeer
// + TLdialogPeerFolder
//
// Constructors:Type:DialogPeer
type DialogPeer struct {
	constructor int32
	data        *DialogPeer_Data
}

// Constructors:Type:Data:DialogPeer
type DialogPeer_Data struct {
	peer      *Peer
	folder_id int32
}

// Constructors:Predicate:dialogPeer
type TLdialogPeer struct {
	data *DialogPeer_Data
}

// Constructors:New:dialogPeer
func NewTLdialogPeer() *TLdialogPeer {
	return &TLdialogPeer{data: &DialogPeer_Data{}}
}

// Constructors:Predicate:dialogPeerFolder
type TLdialogPeerFolder struct {
	data *DialogPeer_Data
}

// Constructors:New:dialogPeerFolder
func NewTLdialogPeerFolder() *TLdialogPeerFolder {
	return &TLdialogPeerFolder{data: &DialogPeer_Data{}}
}
func (m *TLdialogPeer) Setpeer(v *Peer)            { m.data.peer = v }
func (m *TLdialogPeer) Getpeer() *Peer             { return m.data.peer }
func (m *TLdialogPeerFolder) Setfolder_id(v int32) { m.data.folder_id = v }
func (m *TLdialogPeerFolder) Getfolder_id() int32  { return m.data.folder_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputClientProxy
// InputClientProxy <--
// + TLinputClientProxy
//
// Constructors:Type:InputClientProxy
type InputClientProxy struct {
	constructor int32
	data        *InputClientProxy_Data
}

// Constructors:Type:Data:InputClientProxy
type InputClientProxy_Data struct {
	address string
	port    int32
}

// Constructors:Predicate:inputClientProxy
type TLinputClientProxy struct {
	data *InputClientProxy_Data
}

// Constructors:New:inputClientProxy
func NewTLinputClientProxy() *TLinputClientProxy {
	return &TLinputClientProxy{data: &InputClientProxy_Data{}}
}
func (m *TLinputClientProxy) Setaddress(v string) { m.data.address = v }
func (m *TLinputClientProxy) Getaddress() string  { return m.data.address }
func (m *TLinputClientProxy) Setport(v int32)     { m.data.port = v }
func (m *TLinputClientProxy) Getport() int32      { return m.data.port }

///////////////////////////////////////////////////////////////////////////////
// Constructors:DataJSON
// DataJSON <--
// + TLdataJSON
//
// Constructors:Type:DataJSON
type DataJSON struct {
	constructor int32
	data        *DataJSON_Data
}

// Constructors:Type:Data:DataJSON
type DataJSON_Data struct {
	data string
}

// Constructors:Predicate:dataJSON
type TLdataJSON struct {
	data *DataJSON_Data
}

// Constructors:New:dataJSON
func NewTLdataJSON() *TLdataJSON {
	return &TLdataJSON{data: &DataJSON_Data{}}
}
func (m *TLdataJSON) Setdata(v string) { m.data.data = v }
func (m *TLdataJSON) Getdata() string  { return m.data.data }

///////////////////////////////////////////////////////////////////////////////
// Constructors:EncryptedMessage
// EncryptedMessage <--
// + TLencryptedMessage
// + TLencryptedMessageService
//
// Constructors:Type:EncryptedMessage
type EncryptedMessage struct {
	constructor int32
	data        *EncryptedMessage_Data
}

// Constructors:Type:Data:EncryptedMessage
type EncryptedMessage_Data struct {
	random_id int64
	chat_id   int32
	date      int32
	bytes     []byte
	file      *EncryptedFile
}

// Constructors:Predicate:encryptedMessage
type TLencryptedMessage struct {
	data *EncryptedMessage_Data
}

// Constructors:New:encryptedMessage
func NewTLencryptedMessage() *TLencryptedMessage {
	return &TLencryptedMessage{data: &EncryptedMessage_Data{}}
}

// Constructors:Predicate:encryptedMessageService
type TLencryptedMessageService struct {
	data *EncryptedMessage_Data
}

// Constructors:New:encryptedMessageService
func NewTLencryptedMessageService() *TLencryptedMessageService {
	return &TLencryptedMessageService{data: &EncryptedMessage_Data{}}
}
func (m *TLencryptedMessage) Setrandom_id(v int64)        { m.data.random_id = v }
func (m *TLencryptedMessage) Getrandom_id() int64         { return m.data.random_id }
func (m *TLencryptedMessage) Setchat_id(v int32)          { m.data.chat_id = v }
func (m *TLencryptedMessage) Getchat_id() int32           { return m.data.chat_id }
func (m *TLencryptedMessage) Setdate(v int32)             { m.data.date = v }
func (m *TLencryptedMessage) Getdate() int32              { return m.data.date }
func (m *TLencryptedMessage) Setbytes(v []byte)           { m.data.bytes = v }
func (m *TLencryptedMessage) Getbytes() []byte            { return m.data.bytes }
func (m *TLencryptedMessage) Setfile(v *EncryptedFile)    { m.data.file = v }
func (m *TLencryptedMessage) Getfile() *EncryptedFile     { return m.data.file }
func (m *TLencryptedMessageService) Setrandom_id(v int64) { m.data.random_id = v }
func (m *TLencryptedMessageService) Getrandom_id() int64  { return m.data.random_id }
func (m *TLencryptedMessageService) Setchat_id(v int32)   { m.data.chat_id = v }
func (m *TLencryptedMessageService) Getchat_id() int32    { return m.data.chat_id }
func (m *TLencryptedMessageService) Setdate(v int32)      { m.data.date = v }
func (m *TLencryptedMessageService) Getdate() int32       { return m.data.date }
func (m *TLencryptedMessageService) Setbytes(v []byte)    { m.data.bytes = v }
func (m *TLencryptedMessageService) Getbytes() []byte     { return m.data.bytes }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputUser
// InputUser <--
// + TLinputUserEmpty
// + TLinputUserSelf
// + TLinputUser
// + TLinputUserFromMessage
//
// Constructors:Type:InputUser
type InputUser struct {
	constructor int32
	data        *InputUser_Data
}

// Constructors:Type:Data:InputUser
type InputUser_Data struct {
	user_id     int32
	access_hash int64
	peer        *InputPeer
	msg_id      int32
}

// Constructors:Predicate:inputUserEmpty
type TLinputUserEmpty struct {
	data *InputUser_Data
}

// Constructors:New:inputUserEmpty
func NewTLinputUserEmpty() *TLinputUserEmpty {
	return &TLinputUserEmpty{data: &InputUser_Data{}}
}

// Constructors:Predicate:inputUserSelf
type TLinputUserSelf struct {
	data *InputUser_Data
}

// Constructors:New:inputUserSelf
func NewTLinputUserSelf() *TLinputUserSelf {
	return &TLinputUserSelf{data: &InputUser_Data{}}
}

// Constructors:Predicate:inputUser
type TLinputUser struct {
	data *InputUser_Data
}

// Constructors:New:inputUser
func NewTLinputUser() *TLinputUser {
	return &TLinputUser{data: &InputUser_Data{}}
}

// Constructors:Predicate:inputUserFromMessage
type TLinputUserFromMessage struct {
	data *InputUser_Data
}

// Constructors:New:inputUserFromMessage
func NewTLinputUserFromMessage() *TLinputUserFromMessage {
	return &TLinputUserFromMessage{data: &InputUser_Data{}}
}
func (m *TLinputUser) Setuser_id(v int32)              { m.data.user_id = v }
func (m *TLinputUser) Getuser_id() int32               { return m.data.user_id }
func (m *TLinputUser) Setaccess_hash(v int64)          { m.data.access_hash = v }
func (m *TLinputUser) Getaccess_hash() int64           { return m.data.access_hash }
func (m *TLinputUserFromMessage) Setpeer(v *InputPeer) { m.data.peer = v }
func (m *TLinputUserFromMessage) Getpeer() *InputPeer  { return m.data.peer }
func (m *TLinputUserFromMessage) Setmsg_id(v int32)    { m.data.msg_id = v }
func (m *TLinputUserFromMessage) Getmsg_id() int32     { return m.data.msg_id }
func (m *TLinputUserFromMessage) Setuser_id(v int32)   { m.data.user_id = v }
func (m *TLinputUserFromMessage) Getuser_id() int32    { return m.data.user_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:AccountDaysTTL
// AccountDaysTTL <--
// + TLaccountDaysTTL
//
// Constructors:Type:AccountDaysTTL
type AccountDaysTTL struct {
	constructor int32
	data        *AccountDaysTTL_Data
}

// Constructors:Type:Data:AccountDaysTTL
type AccountDaysTTL_Data struct {
	days int32
}

// Constructors:Predicate:accountDaysTTL
type TLaccountDaysTTL struct {
	data *AccountDaysTTL_Data
}

// Constructors:New:accountDaysTTL
func NewTLaccountDaysTTL() *TLaccountDaysTTL {
	return &TLaccountDaysTTL{data: &AccountDaysTTL_Data{}}
}
func (m *TLaccountDaysTTL) Setdays(v int32) { m.data.days = v }
func (m *TLaccountDaysTTL) Getdays() int32  { return m.data.days }

///////////////////////////////////////////////////////////////////////////////
// Constructors:WebDocument
// WebDocument <--
// + TLwebDocument
// + TLwebDocumentNoProxy
//
// Constructors:Type:WebDocument
type WebDocument struct {
	constructor int32
	data        *WebDocument_Data
}

// Constructors:Type:Data:WebDocument
type WebDocument_Data struct {
	url         string
	access_hash int64
	size        int32
	mime_type   string
	attributes  []*DocumentAttribute
}

// Constructors:Predicate:webDocument
type TLwebDocument struct {
	data *WebDocument_Data
}

// Constructors:New:webDocument
func NewTLwebDocument() *TLwebDocument {
	return &TLwebDocument{data: &WebDocument_Data{}}
}

// Constructors:Predicate:webDocumentNoProxy
type TLwebDocumentNoProxy struct {
	data *WebDocument_Data
}

// Constructors:New:webDocumentNoProxy
func NewTLwebDocumentNoProxy() *TLwebDocumentNoProxy {
	return &TLwebDocumentNoProxy{data: &WebDocument_Data{}}
}
func (m *TLwebDocument) Seturl(v string)                             { m.data.url = v }
func (m *TLwebDocument) Geturl() string                              { return m.data.url }
func (m *TLwebDocument) Setaccess_hash(v int64)                      { m.data.access_hash = v }
func (m *TLwebDocument) Getaccess_hash() int64                       { return m.data.access_hash }
func (m *TLwebDocument) Setsize(v int32)                             { m.data.size = v }
func (m *TLwebDocument) Getsize() int32                              { return m.data.size }
func (m *TLwebDocument) Setmime_type(v string)                       { m.data.mime_type = v }
func (m *TLwebDocument) Getmime_type() string                        { return m.data.mime_type }
func (m *TLwebDocument) Setattributes(v []*DocumentAttribute)        { m.data.attributes = v }
func (m *TLwebDocument) Getattributes() []*DocumentAttribute         { return m.data.attributes }
func (m *TLwebDocumentNoProxy) Seturl(v string)                      { m.data.url = v }
func (m *TLwebDocumentNoProxy) Geturl() string                       { return m.data.url }
func (m *TLwebDocumentNoProxy) Setsize(v int32)                      { m.data.size = v }
func (m *TLwebDocumentNoProxy) Getsize() int32                       { return m.data.size }
func (m *TLwebDocumentNoProxy) Setmime_type(v string)                { m.data.mime_type = v }
func (m *TLwebDocumentNoProxy) Getmime_type() string                 { return m.data.mime_type }
func (m *TLwebDocumentNoProxy) Setattributes(v []*DocumentAttribute) { m.data.attributes = v }
func (m *TLwebDocumentNoProxy) Getattributes() []*DocumentAttribute  { return m.data.attributes }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_HighScores
// messages_HighScores <--
// + TLmessages_highScores
//
// Constructors:Type:messages_HighScores
type messages_HighScores struct {
	constructor int32
	data        *messages_HighScores_Data
}

// Constructors:Type:Data:messages_HighScores
type messages_HighScores_Data struct {
	scores []*HighScore
	users  []*User
}

// Constructors:Predicate:messages_highScores
type TLmessages_highScores struct {
	data *messages_HighScores_Data
}

// Constructors:New:messages_highScores
func NewTLmessages_highScores() *TLmessages_highScores {
	return &TLmessages_highScores{data: &messages_HighScores_Data{}}
}
func (m *TLmessages_highScores) Setscores(v []*HighScore) { m.data.scores = v }
func (m *TLmessages_highScores) Getscores() []*HighScore  { return m.data.scores }
func (m *TLmessages_highScores) Setusers(v []*User)       { m.data.users = v }
func (m *TLmessages_highScores) Getusers() []*User        { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputChatPhoto
// InputChatPhoto <--
// + TLinputChatPhotoEmpty
// + TLinputChatUploadedPhoto
// + TLinputChatPhoto
//
// Constructors:Type:InputChatPhoto
type InputChatPhoto struct {
	constructor int32
	data        *InputChatPhoto_Data
}

// Constructors:Type:Data:InputChatPhoto
type InputChatPhoto_Data struct {
	file           *InputFile
	video          *InputFile
	video_start_ts float64
	id             *InputPhoto
}

// Constructors:Predicate:inputChatPhotoEmpty
type TLinputChatPhotoEmpty struct {
	data *InputChatPhoto_Data
}

// Constructors:New:inputChatPhotoEmpty
func NewTLinputChatPhotoEmpty() *TLinputChatPhotoEmpty {
	return &TLinputChatPhotoEmpty{data: &InputChatPhoto_Data{}}
}

// Constructors:Predicate:inputChatUploadedPhoto
type TLinputChatUploadedPhoto struct {
	data *InputChatPhoto_Data
}

// Constructors:New:inputChatUploadedPhoto
func NewTLinputChatUploadedPhoto() *TLinputChatUploadedPhoto {
	return &TLinputChatUploadedPhoto{data: &InputChatPhoto_Data{}}
}

// Constructors:Predicate:inputChatPhoto
type TLinputChatPhoto struct {
	data *InputChatPhoto_Data
}

// Constructors:New:inputChatPhoto
func NewTLinputChatPhoto() *TLinputChatPhoto {
	return &TLinputChatPhoto{data: &InputChatPhoto_Data{}}
}
func (m *TLinputChatUploadedPhoto) Setfile(v *InputFile)        { m.data.file = v }
func (m *TLinputChatUploadedPhoto) Getfile() *InputFile         { return m.data.file }
func (m *TLinputChatUploadedPhoto) Setvideo(v *InputFile)       { m.data.video = v }
func (m *TLinputChatUploadedPhoto) Getvideo() *InputFile        { return m.data.video }
func (m *TLinputChatUploadedPhoto) Setvideo_start_ts(v float64) { m.data.video_start_ts = v }
func (m *TLinputChatUploadedPhoto) Getvideo_start_ts() float64  { return m.data.video_start_ts }
func (m *TLinputChatPhoto) Setid(v *InputPhoto)                 { m.data.id = v }
func (m *TLinputChatPhoto) Getid() *InputPhoto                  { return m.data.id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageInteractionCounters
// MessageInteractionCounters <--
// + TLmessageInteractionCounters
//
// Constructors:Type:MessageInteractionCounters
type MessageInteractionCounters struct {
	constructor int32
	data        *MessageInteractionCounters_Data
}

// Constructors:Type:Data:MessageInteractionCounters
type MessageInteractionCounters_Data struct {
	msg_id   int32
	views    int32
	forwards int32
}

// Constructors:Predicate:messageInteractionCounters
type TLmessageInteractionCounters struct {
	data *MessageInteractionCounters_Data
}

// Constructors:New:messageInteractionCounters
func NewTLmessageInteractionCounters() *TLmessageInteractionCounters {
	return &TLmessageInteractionCounters{data: &MessageInteractionCounters_Data{}}
}
func (m *TLmessageInteractionCounters) Setmsg_id(v int32)   { m.data.msg_id = v }
func (m *TLmessageInteractionCounters) Getmsg_id() int32    { return m.data.msg_id }
func (m *TLmessageInteractionCounters) Setviews(v int32)    { m.data.views = v }
func (m *TLmessageInteractionCounters) Getviews() int32     { return m.data.views }
func (m *TLmessageInteractionCounters) Setforwards(v int32) { m.data.forwards = v }
func (m *TLmessageInteractionCounters) Getforwards() int32  { return m.data.forwards }

///////////////////////////////////////////////////////////////////////////////
// Constructors:BankCardOpenUrl
// BankCardOpenUrl <--
// + TLbankCardOpenUrl
//
// Constructors:Type:BankCardOpenUrl
type BankCardOpenUrl struct {
	constructor int32
	data        *BankCardOpenUrl_Data
}

// Constructors:Type:Data:BankCardOpenUrl
type BankCardOpenUrl_Data struct {
	url  string
	name string
}

// Constructors:Predicate:bankCardOpenUrl
type TLbankCardOpenUrl struct {
	data *BankCardOpenUrl_Data
}

// Constructors:New:bankCardOpenUrl
func NewTLbankCardOpenUrl() *TLbankCardOpenUrl {
	return &TLbankCardOpenUrl{data: &BankCardOpenUrl_Data{}}
}
func (m *TLbankCardOpenUrl) Seturl(v string)  { m.data.url = v }
func (m *TLbankCardOpenUrl) Geturl() string   { return m.data.url }
func (m *TLbankCardOpenUrl) Setname(v string) { m.data.name = v }
func (m *TLbankCardOpenUrl) Getname() string  { return m.data.name }

///////////////////////////////////////////////////////////////////////////////
// Constructors:UserProfilePhoto
// UserProfilePhoto <--
// + TLuserProfilePhotoEmpty
// + TLuserProfilePhoto
//
// Constructors:Type:UserProfilePhoto
type UserProfilePhoto struct {
	constructor int32
	data        *UserProfilePhoto_Data
}

// Constructors:Type:Data:UserProfilePhoto
type UserProfilePhoto_Data struct {
	has_video   bool
	photo_id    int64
	photo_small *FileLocation
	photo_big   *FileLocation
	dc_id       int32
}

// Constructors:Predicate:userProfilePhotoEmpty
type TLuserProfilePhotoEmpty struct {
	data *UserProfilePhoto_Data
}

// Constructors:New:userProfilePhotoEmpty
func NewTLuserProfilePhotoEmpty() *TLuserProfilePhotoEmpty {
	return &TLuserProfilePhotoEmpty{data: &UserProfilePhoto_Data{}}
}

// Constructors:Predicate:userProfilePhoto
type TLuserProfilePhoto struct {
	data *UserProfilePhoto_Data
}

// Constructors:New:userProfilePhoto
func NewTLuserProfilePhoto() *TLuserProfilePhoto {
	return &TLuserProfilePhoto{data: &UserProfilePhoto_Data{}}
}
func (m *TLuserProfilePhoto) Sethas_video(v bool)            { m.data.has_video = v }
func (m *TLuserProfilePhoto) Gethas_video() bool             { return m.data.has_video }
func (m *TLuserProfilePhoto) Setphoto_id(v int64)            { m.data.photo_id = v }
func (m *TLuserProfilePhoto) Getphoto_id() int64             { return m.data.photo_id }
func (m *TLuserProfilePhoto) Setphoto_small(v *FileLocation) { m.data.photo_small = v }
func (m *TLuserProfilePhoto) Getphoto_small() *FileLocation  { return m.data.photo_small }
func (m *TLuserProfilePhoto) Setphoto_big(v *FileLocation)   { m.data.photo_big = v }
func (m *TLuserProfilePhoto) Getphoto_big() *FileLocation    { return m.data.photo_big }
func (m *TLuserProfilePhoto) Setdc_id(v int32)               { m.data.dc_id = v }
func (m *TLuserProfilePhoto) Getdc_id() int32                { return m.data.dc_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:account_Authorizations
// account_Authorizations <--
// + TLaccount_authorizations
//
// Constructors:Type:account_Authorizations
type account_Authorizations struct {
	constructor int32
	data        *account_Authorizations_Data
}

// Constructors:Type:Data:account_Authorizations
type account_Authorizations_Data struct {
	authorizations []*Authorization
}

// Constructors:Predicate:account_authorizations
type TLaccount_authorizations struct {
	data *account_Authorizations_Data
}

// Constructors:New:account_authorizations
func NewTLaccount_authorizations() *TLaccount_authorizations {
	return &TLaccount_authorizations{data: &account_Authorizations_Data{}}
}
func (m *TLaccount_authorizations) Setauthorizations(v []*Authorization) { m.data.authorizations = v }
func (m *TLaccount_authorizations) Getauthorizations() []*Authorization  { return m.data.authorizations }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PeerBlocked
// PeerBlocked <--
// + TLpeerBlocked
//
// Constructors:Type:PeerBlocked
type PeerBlocked struct {
	constructor int32
	data        *PeerBlocked_Data
}

// Constructors:Type:Data:PeerBlocked
type PeerBlocked_Data struct {
	peer_id *Peer
	date    int32
}

// Constructors:Predicate:peerBlocked
type TLpeerBlocked struct {
	data *PeerBlocked_Data
}

// Constructors:New:peerBlocked
func NewTLpeerBlocked() *TLpeerBlocked {
	return &TLpeerBlocked{data: &PeerBlocked_Data{}}
}
func (m *TLpeerBlocked) Setpeer_id(v *Peer) { m.data.peer_id = v }
func (m *TLpeerBlocked) Getpeer_id() *Peer  { return m.data.peer_id }
func (m *TLpeerBlocked) Setdate(v int32)    { m.data.date = v }
func (m *TLpeerBlocked) Getdate() int32     { return m.data.date }

///////////////////////////////////////////////////////////////////////////////
// Constructors:WallPaperSettings
// WallPaperSettings <--
// + TLwallPaperSettings
//
// Constructors:Type:WallPaperSettings
type WallPaperSettings struct {
	constructor int32
	data        *WallPaperSettings_Data
}

// Constructors:Type:Data:WallPaperSettings
type WallPaperSettings_Data struct {
	blur                    bool
	motion                  bool
	background_color        int32
	second_background_color int32
	intensity               int32
	rotation                int32
}

// Constructors:Predicate:wallPaperSettings
type TLwallPaperSettings struct {
	data *WallPaperSettings_Data
}

// Constructors:New:wallPaperSettings
func NewTLwallPaperSettings() *TLwallPaperSettings {
	return &TLwallPaperSettings{data: &WallPaperSettings_Data{}}
}
func (m *TLwallPaperSettings) Setblur(v bool)                     { m.data.blur = v }
func (m *TLwallPaperSettings) Getblur() bool                      { return m.data.blur }
func (m *TLwallPaperSettings) Setmotion(v bool)                   { m.data.motion = v }
func (m *TLwallPaperSettings) Getmotion() bool                    { return m.data.motion }
func (m *TLwallPaperSettings) Setbackground_color(v int32)        { m.data.background_color = v }
func (m *TLwallPaperSettings) Getbackground_color() int32         { return m.data.background_color }
func (m *TLwallPaperSettings) Setsecond_background_color(v int32) { m.data.second_background_color = v }
func (m *TLwallPaperSettings) Getsecond_background_color() int32 {
	return m.data.second_background_color
}
func (m *TLwallPaperSettings) Setintensity(v int32) { m.data.intensity = v }
func (m *TLwallPaperSettings) Getintensity() int32  { return m.data.intensity }
func (m *TLwallPaperSettings) Setrotation(v int32)  { m.data.rotation = v }
func (m *TLwallPaperSettings) Getrotation() int32   { return m.data.rotation }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_RecentStickers
// messages_RecentStickers <--
// + TLmessages_recentStickersNotModified
// + TLmessages_recentStickers
//
// Constructors:Type:messages_RecentStickers
type messages_RecentStickers struct {
	constructor int32
	data        *messages_RecentStickers_Data
}

// Constructors:Type:Data:messages_RecentStickers
type messages_RecentStickers_Data struct {
	hash     int32
	packs    []*StickerPack
	stickers []*Document
	dates    []int32
}

// Constructors:Predicate:messages_recentStickersNotModified
type TLmessages_recentStickersNotModified struct {
	data *messages_RecentStickers_Data
}

// Constructors:New:messages_recentStickersNotModified
func NewTLmessages_recentStickersNotModified() *TLmessages_recentStickersNotModified {
	return &TLmessages_recentStickersNotModified{data: &messages_RecentStickers_Data{}}
}

// Constructors:Predicate:messages_recentStickers
type TLmessages_recentStickers struct {
	data *messages_RecentStickers_Data
}

// Constructors:New:messages_recentStickers
func NewTLmessages_recentStickers() *TLmessages_recentStickers {
	return &TLmessages_recentStickers{data: &messages_RecentStickers_Data{}}
}
func (m *TLmessages_recentStickers) Sethash(v int32)           { m.data.hash = v }
func (m *TLmessages_recentStickers) Gethash() int32            { return m.data.hash }
func (m *TLmessages_recentStickers) Setpacks(v []*StickerPack) { m.data.packs = v }
func (m *TLmessages_recentStickers) Getpacks() []*StickerPack  { return m.data.packs }
func (m *TLmessages_recentStickers) Setstickers(v []*Document) { m.data.stickers = v }
func (m *TLmessages_recentStickers) Getstickers() []*Document  { return m.data.stickers }
func (m *TLmessages_recentStickers) Setdates(v []int32)        { m.data.dates = v }
func (m *TLmessages_recentStickers) Getdates() []int32         { return m.data.dates }

///////////////////////////////////////////////////////////////////////////////
// Constructors:payments_BankCardData
// payments_BankCardData <--
// + TLpayments_bankCardData
//
// Constructors:Type:payments_BankCardData
type payments_BankCardData struct {
	constructor int32
	data        *payments_BankCardData_Data
}

// Constructors:Type:Data:payments_BankCardData
type payments_BankCardData_Data struct {
	title     string
	open_urls []*BankCardOpenUrl
}

// Constructors:Predicate:payments_bankCardData
type TLpayments_bankCardData struct {
	data *payments_BankCardData_Data
}

// Constructors:New:payments_bankCardData
func NewTLpayments_bankCardData() *TLpayments_bankCardData {
	return &TLpayments_bankCardData{data: &payments_BankCardData_Data{}}
}
func (m *TLpayments_bankCardData) Settitle(v string)                 { m.data.title = v }
func (m *TLpayments_bankCardData) Gettitle() string                  { return m.data.title }
func (m *TLpayments_bankCardData) Setopen_urls(v []*BankCardOpenUrl) { m.data.open_urls = v }
func (m *TLpayments_bankCardData) Getopen_urls() []*BankCardOpenUrl  { return m.data.open_urls }

///////////////////////////////////////////////////////////////////////////////
// Constructors:Contact
// Contact <--
// + TLcontact
//
// Constructors:Type:Contact
type Contact struct {
	constructor int32
	data        *Contact_Data
}

// Constructors:Type:Data:Contact
type Contact_Data struct {
	user_id int32
	mutual  *Bool
}

// Constructors:Predicate:contact
type TLcontact struct {
	data *Contact_Data
}

// Constructors:New:contact
func NewTLcontact() *TLcontact {
	return &TLcontact{data: &Contact_Data{}}
}
func (m *TLcontact) Setuser_id(v int32) { m.data.user_id = v }
func (m *TLcontact) Getuser_id() int32  { return m.data.user_id }
func (m *TLcontact) Setmutual(v *Bool)  { m.data.mutual = v }
func (m *TLcontact) Getmutual() *Bool   { return m.data.mutual }

///////////////////////////////////////////////////////////////////////////////
// Constructors:HighScore
// HighScore <--
// + TLhighScore
//
// Constructors:Type:HighScore
type HighScore struct {
	constructor int32
	data        *HighScore_Data
}

// Constructors:Type:Data:HighScore
type HighScore_Data struct {
	pos     int32
	user_id int32
	score   int32
}

// Constructors:Predicate:highScore
type TLhighScore struct {
	data *HighScore_Data
}

// Constructors:New:highScore
func NewTLhighScore() *TLhighScore {
	return &TLhighScore{data: &HighScore_Data{}}
}
func (m *TLhighScore) Setpos(v int32)     { m.data.pos = v }
func (m *TLhighScore) Getpos() int32      { return m.data.pos }
func (m *TLhighScore) Setuser_id(v int32) { m.data.user_id = v }
func (m *TLhighScore) Getuser_id() int32  { return m.data.user_id }
func (m *TLhighScore) Setscore(v int32)   { m.data.score = v }
func (m *TLhighScore) Getscore() int32    { return m.data.score }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ChannelParticipant
// ChannelParticipant <--
// + TLchannelParticipant
// + TLchannelParticipantSelf
// + TLchannelParticipantCreator
// + TLchannelParticipantAdmin
// + TLchannelParticipantBanned
// + TLchannelParticipantLeft
//
// Constructors:Type:ChannelParticipant
type ChannelParticipant struct {
	constructor int32
	data        *ChannelParticipant_Data
}

// Constructors:Type:Data:ChannelParticipant
type ChannelParticipant_Data struct {
	user_id       int32
	date          int32
	inviter_id    int32
	admin_rights  *ChatAdminRights
	rank          string
	can_edit      bool
	self          bool
	promoted_by   int32
	left          bool
	kicked_by     int32
	banned_rights *ChatBannedRights
}

// Constructors:Predicate:channelParticipant
type TLchannelParticipant struct {
	data *ChannelParticipant_Data
}

// Constructors:New:channelParticipant
func NewTLchannelParticipant() *TLchannelParticipant {
	return &TLchannelParticipant{data: &ChannelParticipant_Data{}}
}

// Constructors:Predicate:channelParticipantSelf
type TLchannelParticipantSelf struct {
	data *ChannelParticipant_Data
}

// Constructors:New:channelParticipantSelf
func NewTLchannelParticipantSelf() *TLchannelParticipantSelf {
	return &TLchannelParticipantSelf{data: &ChannelParticipant_Data{}}
}

// Constructors:Predicate:channelParticipantCreator
type TLchannelParticipantCreator struct {
	data *ChannelParticipant_Data
}

// Constructors:New:channelParticipantCreator
func NewTLchannelParticipantCreator() *TLchannelParticipantCreator {
	return &TLchannelParticipantCreator{data: &ChannelParticipant_Data{}}
}

// Constructors:Predicate:channelParticipantAdmin
type TLchannelParticipantAdmin struct {
	data *ChannelParticipant_Data
}

// Constructors:New:channelParticipantAdmin
func NewTLchannelParticipantAdmin() *TLchannelParticipantAdmin {
	return &TLchannelParticipantAdmin{data: &ChannelParticipant_Data{}}
}

// Constructors:Predicate:channelParticipantBanned
type TLchannelParticipantBanned struct {
	data *ChannelParticipant_Data
}

// Constructors:New:channelParticipantBanned
func NewTLchannelParticipantBanned() *TLchannelParticipantBanned {
	return &TLchannelParticipantBanned{data: &ChannelParticipant_Data{}}
}

// Constructors:Predicate:channelParticipantLeft
type TLchannelParticipantLeft struct {
	data *ChannelParticipant_Data
}

// Constructors:New:channelParticipantLeft
func NewTLchannelParticipantLeft() *TLchannelParticipantLeft {
	return &TLchannelParticipantLeft{data: &ChannelParticipant_Data{}}
}
func (m *TLchannelParticipant) Setuser_id(v int32)                         { m.data.user_id = v }
func (m *TLchannelParticipant) Getuser_id() int32                          { return m.data.user_id }
func (m *TLchannelParticipant) Setdate(v int32)                            { m.data.date = v }
func (m *TLchannelParticipant) Getdate() int32                             { return m.data.date }
func (m *TLchannelParticipantSelf) Setuser_id(v int32)                     { m.data.user_id = v }
func (m *TLchannelParticipantSelf) Getuser_id() int32                      { return m.data.user_id }
func (m *TLchannelParticipantSelf) Setinviter_id(v int32)                  { m.data.inviter_id = v }
func (m *TLchannelParticipantSelf) Getinviter_id() int32                   { return m.data.inviter_id }
func (m *TLchannelParticipantSelf) Setdate(v int32)                        { m.data.date = v }
func (m *TLchannelParticipantSelf) Getdate() int32                         { return m.data.date }
func (m *TLchannelParticipantCreator) Setuser_id(v int32)                  { m.data.user_id = v }
func (m *TLchannelParticipantCreator) Getuser_id() int32                   { return m.data.user_id }
func (m *TLchannelParticipantCreator) Setadmin_rights(v *ChatAdminRights)  { m.data.admin_rights = v }
func (m *TLchannelParticipantCreator) Getadmin_rights() *ChatAdminRights   { return m.data.admin_rights }
func (m *TLchannelParticipantCreator) Setrank(v string)                    { m.data.rank = v }
func (m *TLchannelParticipantCreator) Getrank() string                     { return m.data.rank }
func (m *TLchannelParticipantAdmin) Setcan_edit(v bool)                    { m.data.can_edit = v }
func (m *TLchannelParticipantAdmin) Getcan_edit() bool                     { return m.data.can_edit }
func (m *TLchannelParticipantAdmin) Setself(v bool)                        { m.data.self = v }
func (m *TLchannelParticipantAdmin) Getself() bool                         { return m.data.self }
func (m *TLchannelParticipantAdmin) Setuser_id(v int32)                    { m.data.user_id = v }
func (m *TLchannelParticipantAdmin) Getuser_id() int32                     { return m.data.user_id }
func (m *TLchannelParticipantAdmin) Setinviter_id(v int32)                 { m.data.inviter_id = v }
func (m *TLchannelParticipantAdmin) Getinviter_id() int32                  { return m.data.inviter_id }
func (m *TLchannelParticipantAdmin) Setpromoted_by(v int32)                { m.data.promoted_by = v }
func (m *TLchannelParticipantAdmin) Getpromoted_by() int32                 { return m.data.promoted_by }
func (m *TLchannelParticipantAdmin) Setdate(v int32)                       { m.data.date = v }
func (m *TLchannelParticipantAdmin) Getdate() int32                        { return m.data.date }
func (m *TLchannelParticipantAdmin) Setadmin_rights(v *ChatAdminRights)    { m.data.admin_rights = v }
func (m *TLchannelParticipantAdmin) Getadmin_rights() *ChatAdminRights     { return m.data.admin_rights }
func (m *TLchannelParticipantAdmin) Setrank(v string)                      { m.data.rank = v }
func (m *TLchannelParticipantAdmin) Getrank() string                       { return m.data.rank }
func (m *TLchannelParticipantBanned) Setleft(v bool)                       { m.data.left = v }
func (m *TLchannelParticipantBanned) Getleft() bool                        { return m.data.left }
func (m *TLchannelParticipantBanned) Setuser_id(v int32)                   { m.data.user_id = v }
func (m *TLchannelParticipantBanned) Getuser_id() int32                    { return m.data.user_id }
func (m *TLchannelParticipantBanned) Setkicked_by(v int32)                 { m.data.kicked_by = v }
func (m *TLchannelParticipantBanned) Getkicked_by() int32                  { return m.data.kicked_by }
func (m *TLchannelParticipantBanned) Setdate(v int32)                      { m.data.date = v }
func (m *TLchannelParticipantBanned) Getdate() int32                       { return m.data.date }
func (m *TLchannelParticipantBanned) Setbanned_rights(v *ChatBannedRights) { m.data.banned_rights = v }
func (m *TLchannelParticipantBanned) Getbanned_rights() *ChatBannedRights {
	return m.data.banned_rights
}
func (m *TLchannelParticipantLeft) Setuser_id(v int32) { m.data.user_id = v }
func (m *TLchannelParticipantLeft) Getuser_id() int32  { return m.data.user_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:auth_PasswordRecovery
// auth_PasswordRecovery <--
// + TLauth_passwordRecovery
//
// Constructors:Type:auth_PasswordRecovery
type auth_PasswordRecovery struct {
	constructor int32
	data        *auth_PasswordRecovery_Data
}

// Constructors:Type:Data:auth_PasswordRecovery
type auth_PasswordRecovery_Data struct {
	email_pattern string
}

// Constructors:Predicate:auth_passwordRecovery
type TLauth_passwordRecovery struct {
	data *auth_PasswordRecovery_Data
}

// Constructors:New:auth_passwordRecovery
func NewTLauth_passwordRecovery() *TLauth_passwordRecovery {
	return &TLauth_passwordRecovery{data: &auth_PasswordRecovery_Data{}}
}
func (m *TLauth_passwordRecovery) Setemail_pattern(v string) { m.data.email_pattern = v }
func (m *TLauth_passwordRecovery) Getemail_pattern() string  { return m.data.email_pattern }

///////////////////////////////////////////////////////////////////////////////
// Constructors:StatsGroupTopAdmin
// StatsGroupTopAdmin <--
// + TLstatsGroupTopAdmin
//
// Constructors:Type:StatsGroupTopAdmin
type StatsGroupTopAdmin struct {
	constructor int32
	data        *StatsGroupTopAdmin_Data
}

// Constructors:Type:Data:StatsGroupTopAdmin
type StatsGroupTopAdmin_Data struct {
	user_id int32
	deleted int32
	kicked  int32
	banned  int32
}

// Constructors:Predicate:statsGroupTopAdmin
type TLstatsGroupTopAdmin struct {
	data *StatsGroupTopAdmin_Data
}

// Constructors:New:statsGroupTopAdmin
func NewTLstatsGroupTopAdmin() *TLstatsGroupTopAdmin {
	return &TLstatsGroupTopAdmin{data: &StatsGroupTopAdmin_Data{}}
}
func (m *TLstatsGroupTopAdmin) Setuser_id(v int32) { m.data.user_id = v }
func (m *TLstatsGroupTopAdmin) Getuser_id() int32  { return m.data.user_id }
func (m *TLstatsGroupTopAdmin) Setdeleted(v int32) { m.data.deleted = v }
func (m *TLstatsGroupTopAdmin) Getdeleted() int32  { return m.data.deleted }
func (m *TLstatsGroupTopAdmin) Setkicked(v int32)  { m.data.kicked = v }
func (m *TLstatsGroupTopAdmin) Getkicked() int32   { return m.data.kicked }
func (m *TLstatsGroupTopAdmin) Setbanned(v int32)  { m.data.banned = v }
func (m *TLstatsGroupTopAdmin) Getbanned() int32   { return m.data.banned }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PhoneCall
// PhoneCall <--
// + TLphoneCallEmpty
// + TLphoneCallWaiting
// + TLphoneCallRequested
// + TLphoneCallAccepted
// + TLphoneCall
// + TLphoneCallDiscarded
//
// Constructors:Type:PhoneCall
type PhoneCall struct {
	constructor int32
	data        *PhoneCall_Data
}

// Constructors:Type:Data:PhoneCall
type PhoneCall_Data struct {
	id              int64
	video           bool
	access_hash     int64
	date            int32
	admin_id        int32
	participant_id  int32
	protocol        *PhoneCallProtocol
	receive_date    int32
	g_a_hash        []byte
	g_b             []byte
	p2p_allowed     bool
	g_a_or_b        []byte
	key_fingerprint int64
	connections     []*PhoneConnection
	start_date      int32
	need_rating     bool
	need_debug      bool
	reason          *PhoneCallDiscardReason
	duration        int32
}

// Constructors:Predicate:phoneCallEmpty
type TLphoneCallEmpty struct {
	data *PhoneCall_Data
}

// Constructors:New:phoneCallEmpty
func NewTLphoneCallEmpty() *TLphoneCallEmpty {
	return &TLphoneCallEmpty{data: &PhoneCall_Data{}}
}

// Constructors:Predicate:phoneCallWaiting
type TLphoneCallWaiting struct {
	data *PhoneCall_Data
}

// Constructors:New:phoneCallWaiting
func NewTLphoneCallWaiting() *TLphoneCallWaiting {
	return &TLphoneCallWaiting{data: &PhoneCall_Data{}}
}

// Constructors:Predicate:phoneCallRequested
type TLphoneCallRequested struct {
	data *PhoneCall_Data
}

// Constructors:New:phoneCallRequested
func NewTLphoneCallRequested() *TLphoneCallRequested {
	return &TLphoneCallRequested{data: &PhoneCall_Data{}}
}

// Constructors:Predicate:phoneCallAccepted
type TLphoneCallAccepted struct {
	data *PhoneCall_Data
}

// Constructors:New:phoneCallAccepted
func NewTLphoneCallAccepted() *TLphoneCallAccepted {
	return &TLphoneCallAccepted{data: &PhoneCall_Data{}}
}

// Constructors:Predicate:phoneCall
type TLphoneCall struct {
	data *PhoneCall_Data
}

// Constructors:New:phoneCall
func NewTLphoneCall() *TLphoneCall {
	return &TLphoneCall{data: &PhoneCall_Data{}}
}

// Constructors:Predicate:phoneCallDiscarded
type TLphoneCallDiscarded struct {
	data *PhoneCall_Data
}

// Constructors:New:phoneCallDiscarded
func NewTLphoneCallDiscarded() *TLphoneCallDiscarded {
	return &TLphoneCallDiscarded{data: &PhoneCall_Data{}}
}
func (m *TLphoneCallEmpty) Setid(v int64)                           { m.data.id = v }
func (m *TLphoneCallEmpty) Getid() int64                            { return m.data.id }
func (m *TLphoneCallWaiting) Setvideo(v bool)                       { m.data.video = v }
func (m *TLphoneCallWaiting) Getvideo() bool                        { return m.data.video }
func (m *TLphoneCallWaiting) Setid(v int64)                         { m.data.id = v }
func (m *TLphoneCallWaiting) Getid() int64                          { return m.data.id }
func (m *TLphoneCallWaiting) Setaccess_hash(v int64)                { m.data.access_hash = v }
func (m *TLphoneCallWaiting) Getaccess_hash() int64                 { return m.data.access_hash }
func (m *TLphoneCallWaiting) Setdate(v int32)                       { m.data.date = v }
func (m *TLphoneCallWaiting) Getdate() int32                        { return m.data.date }
func (m *TLphoneCallWaiting) Setadmin_id(v int32)                   { m.data.admin_id = v }
func (m *TLphoneCallWaiting) Getadmin_id() int32                    { return m.data.admin_id }
func (m *TLphoneCallWaiting) Setparticipant_id(v int32)             { m.data.participant_id = v }
func (m *TLphoneCallWaiting) Getparticipant_id() int32              { return m.data.participant_id }
func (m *TLphoneCallWaiting) Setprotocol(v *PhoneCallProtocol)      { m.data.protocol = v }
func (m *TLphoneCallWaiting) Getprotocol() *PhoneCallProtocol       { return m.data.protocol }
func (m *TLphoneCallWaiting) Setreceive_date(v int32)               { m.data.receive_date = v }
func (m *TLphoneCallWaiting) Getreceive_date() int32                { return m.data.receive_date }
func (m *TLphoneCallRequested) Setvideo(v bool)                     { m.data.video = v }
func (m *TLphoneCallRequested) Getvideo() bool                      { return m.data.video }
func (m *TLphoneCallRequested) Setid(v int64)                       { m.data.id = v }
func (m *TLphoneCallRequested) Getid() int64                        { return m.data.id }
func (m *TLphoneCallRequested) Setaccess_hash(v int64)              { m.data.access_hash = v }
func (m *TLphoneCallRequested) Getaccess_hash() int64               { return m.data.access_hash }
func (m *TLphoneCallRequested) Setdate(v int32)                     { m.data.date = v }
func (m *TLphoneCallRequested) Getdate() int32                      { return m.data.date }
func (m *TLphoneCallRequested) Setadmin_id(v int32)                 { m.data.admin_id = v }
func (m *TLphoneCallRequested) Getadmin_id() int32                  { return m.data.admin_id }
func (m *TLphoneCallRequested) Setparticipant_id(v int32)           { m.data.participant_id = v }
func (m *TLphoneCallRequested) Getparticipant_id() int32            { return m.data.participant_id }
func (m *TLphoneCallRequested) Setg_a_hash(v []byte)                { m.data.g_a_hash = v }
func (m *TLphoneCallRequested) Getg_a_hash() []byte                 { return m.data.g_a_hash }
func (m *TLphoneCallRequested) Setprotocol(v *PhoneCallProtocol)    { m.data.protocol = v }
func (m *TLphoneCallRequested) Getprotocol() *PhoneCallProtocol     { return m.data.protocol }
func (m *TLphoneCallAccepted) Setvideo(v bool)                      { m.data.video = v }
func (m *TLphoneCallAccepted) Getvideo() bool                       { return m.data.video }
func (m *TLphoneCallAccepted) Setid(v int64)                        { m.data.id = v }
func (m *TLphoneCallAccepted) Getid() int64                         { return m.data.id }
func (m *TLphoneCallAccepted) Setaccess_hash(v int64)               { m.data.access_hash = v }
func (m *TLphoneCallAccepted) Getaccess_hash() int64                { return m.data.access_hash }
func (m *TLphoneCallAccepted) Setdate(v int32)                      { m.data.date = v }
func (m *TLphoneCallAccepted) Getdate() int32                       { return m.data.date }
func (m *TLphoneCallAccepted) Setadmin_id(v int32)                  { m.data.admin_id = v }
func (m *TLphoneCallAccepted) Getadmin_id() int32                   { return m.data.admin_id }
func (m *TLphoneCallAccepted) Setparticipant_id(v int32)            { m.data.participant_id = v }
func (m *TLphoneCallAccepted) Getparticipant_id() int32             { return m.data.participant_id }
func (m *TLphoneCallAccepted) Setg_b(v []byte)                      { m.data.g_b = v }
func (m *TLphoneCallAccepted) Getg_b() []byte                       { return m.data.g_b }
func (m *TLphoneCallAccepted) Setprotocol(v *PhoneCallProtocol)     { m.data.protocol = v }
func (m *TLphoneCallAccepted) Getprotocol() *PhoneCallProtocol      { return m.data.protocol }
func (m *TLphoneCall) Setp2p_allowed(v bool)                        { m.data.p2p_allowed = v }
func (m *TLphoneCall) Getp2p_allowed() bool                         { return m.data.p2p_allowed }
func (m *TLphoneCall) Setvideo(v bool)                              { m.data.video = v }
func (m *TLphoneCall) Getvideo() bool                               { return m.data.video }
func (m *TLphoneCall) Setid(v int64)                                { m.data.id = v }
func (m *TLphoneCall) Getid() int64                                 { return m.data.id }
func (m *TLphoneCall) Setaccess_hash(v int64)                       { m.data.access_hash = v }
func (m *TLphoneCall) Getaccess_hash() int64                        { return m.data.access_hash }
func (m *TLphoneCall) Setdate(v int32)                              { m.data.date = v }
func (m *TLphoneCall) Getdate() int32                               { return m.data.date }
func (m *TLphoneCall) Setadmin_id(v int32)                          { m.data.admin_id = v }
func (m *TLphoneCall) Getadmin_id() int32                           { return m.data.admin_id }
func (m *TLphoneCall) Setparticipant_id(v int32)                    { m.data.participant_id = v }
func (m *TLphoneCall) Getparticipant_id() int32                     { return m.data.participant_id }
func (m *TLphoneCall) Setg_a_or_b(v []byte)                         { m.data.g_a_or_b = v }
func (m *TLphoneCall) Getg_a_or_b() []byte                          { return m.data.g_a_or_b }
func (m *TLphoneCall) Setkey_fingerprint(v int64)                   { m.data.key_fingerprint = v }
func (m *TLphoneCall) Getkey_fingerprint() int64                    { return m.data.key_fingerprint }
func (m *TLphoneCall) Setprotocol(v *PhoneCallProtocol)             { m.data.protocol = v }
func (m *TLphoneCall) Getprotocol() *PhoneCallProtocol              { return m.data.protocol }
func (m *TLphoneCall) Setconnections(v []*PhoneConnection)          { m.data.connections = v }
func (m *TLphoneCall) Getconnections() []*PhoneConnection           { return m.data.connections }
func (m *TLphoneCall) Setstart_date(v int32)                        { m.data.start_date = v }
func (m *TLphoneCall) Getstart_date() int32                         { return m.data.start_date }
func (m *TLphoneCallDiscarded) Setneed_rating(v bool)               { m.data.need_rating = v }
func (m *TLphoneCallDiscarded) Getneed_rating() bool                { return m.data.need_rating }
func (m *TLphoneCallDiscarded) Setneed_debug(v bool)                { m.data.need_debug = v }
func (m *TLphoneCallDiscarded) Getneed_debug() bool                 { return m.data.need_debug }
func (m *TLphoneCallDiscarded) Setvideo(v bool)                     { m.data.video = v }
func (m *TLphoneCallDiscarded) Getvideo() bool                      { return m.data.video }
func (m *TLphoneCallDiscarded) Setid(v int64)                       { m.data.id = v }
func (m *TLphoneCallDiscarded) Getid() int64                        { return m.data.id }
func (m *TLphoneCallDiscarded) Setreason(v *PhoneCallDiscardReason) { m.data.reason = v }
func (m *TLphoneCallDiscarded) Getreason() *PhoneCallDiscardReason  { return m.data.reason }
func (m *TLphoneCallDiscarded) Setduration(v int32)                 { m.data.duration = v }
func (m *TLphoneCallDiscarded) Getduration() int32                  { return m.data.duration }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputMedia
// InputMedia <--
// + TLinputMediaEmpty
// + TLinputMediaUploadedPhoto
// + TLinputMediaPhoto
// + TLinputMediaGeoPoint
// + TLinputMediaContact
// + TLinputMediaUploadedDocument
// + TLinputMediaDocument
// + TLinputMediaVenue
// + TLinputMediaPhotoExternal
// + TLinputMediaDocumentExternal
// + TLinputMediaGame
// + TLinputMediaInvoice
// + TLinputMediaGeoLive
// + TLinputMediaPoll
// + TLinputMediaDice
//
// Constructors:Type:InputMedia
type InputMedia struct {
	constructor int32
	data        *InputMedia_Data
}

// Constructors:Type:Data:InputMedia
type InputMedia_Data struct {
	file                          *InputFile
	stickers                      []*InputDocument
	ttl_seconds                   int32
	id                            *InputPhoto
	geo_point                     *InputGeoPoint
	phone_number                  string
	first_name                    string
	last_name                     string
	vcard                         string
	nosound_video                 bool
	force_file                    bool
	thumb                         *InputFile
	mime_type                     string
	attributes                    []*DocumentAttribute
	id_15                         *InputDocument
	title                         string
	address                       string
	provider                      string
	venue_id                      string
	venue_type                    string
	url                           string
	id_22                         *InputGame
	description                   string
	photo                         *InputWebDocument
	invoice                       *Invoice
	payload                       []byte
	provider_data                 *DataJSON
	start_param                   string
	stopped                       bool
	heading                       int32
	period                        int32
	proximity_notification_radius int32
	poll                          *Poll
	correct_answers               [][]byte
	solution                      string
	solution_entities             []*MessageEntity
	emoticon                      string
}

// Constructors:Predicate:inputMediaEmpty
type TLinputMediaEmpty struct {
	data *InputMedia_Data
}

// Constructors:New:inputMediaEmpty
func NewTLinputMediaEmpty() *TLinputMediaEmpty {
	return &TLinputMediaEmpty{data: &InputMedia_Data{}}
}

// Constructors:Predicate:inputMediaUploadedPhoto
type TLinputMediaUploadedPhoto struct {
	data *InputMedia_Data
}

// Constructors:New:inputMediaUploadedPhoto
func NewTLinputMediaUploadedPhoto() *TLinputMediaUploadedPhoto {
	return &TLinputMediaUploadedPhoto{data: &InputMedia_Data{}}
}

// Constructors:Predicate:inputMediaPhoto
type TLinputMediaPhoto struct {
	data *InputMedia_Data
}

// Constructors:New:inputMediaPhoto
func NewTLinputMediaPhoto() *TLinputMediaPhoto {
	return &TLinputMediaPhoto{data: &InputMedia_Data{}}
}

// Constructors:Predicate:inputMediaGeoPoint
type TLinputMediaGeoPoint struct {
	data *InputMedia_Data
}

// Constructors:New:inputMediaGeoPoint
func NewTLinputMediaGeoPoint() *TLinputMediaGeoPoint {
	return &TLinputMediaGeoPoint{data: &InputMedia_Data{}}
}

// Constructors:Predicate:inputMediaContact
type TLinputMediaContact struct {
	data *InputMedia_Data
}

// Constructors:New:inputMediaContact
func NewTLinputMediaContact() *TLinputMediaContact {
	return &TLinputMediaContact{data: &InputMedia_Data{}}
}

// Constructors:Predicate:inputMediaUploadedDocument
type TLinputMediaUploadedDocument struct {
	data *InputMedia_Data
}

// Constructors:New:inputMediaUploadedDocument
func NewTLinputMediaUploadedDocument() *TLinputMediaUploadedDocument {
	return &TLinputMediaUploadedDocument{data: &InputMedia_Data{}}
}

// Constructors:Predicate:inputMediaDocument
type TLinputMediaDocument struct {
	data *InputMedia_Data
}

// Constructors:New:inputMediaDocument
func NewTLinputMediaDocument() *TLinputMediaDocument {
	return &TLinputMediaDocument{data: &InputMedia_Data{}}
}

// Constructors:Predicate:inputMediaVenue
type TLinputMediaVenue struct {
	data *InputMedia_Data
}

// Constructors:New:inputMediaVenue
func NewTLinputMediaVenue() *TLinputMediaVenue {
	return &TLinputMediaVenue{data: &InputMedia_Data{}}
}

// Constructors:Predicate:inputMediaPhotoExternal
type TLinputMediaPhotoExternal struct {
	data *InputMedia_Data
}

// Constructors:New:inputMediaPhotoExternal
func NewTLinputMediaPhotoExternal() *TLinputMediaPhotoExternal {
	return &TLinputMediaPhotoExternal{data: &InputMedia_Data{}}
}

// Constructors:Predicate:inputMediaDocumentExternal
type TLinputMediaDocumentExternal struct {
	data *InputMedia_Data
}

// Constructors:New:inputMediaDocumentExternal
func NewTLinputMediaDocumentExternal() *TLinputMediaDocumentExternal {
	return &TLinputMediaDocumentExternal{data: &InputMedia_Data{}}
}

// Constructors:Predicate:inputMediaGame
type TLinputMediaGame struct {
	data *InputMedia_Data
}

// Constructors:New:inputMediaGame
func NewTLinputMediaGame() *TLinputMediaGame {
	return &TLinputMediaGame{data: &InputMedia_Data{}}
}

// Constructors:Predicate:inputMediaInvoice
type TLinputMediaInvoice struct {
	data *InputMedia_Data
}

// Constructors:New:inputMediaInvoice
func NewTLinputMediaInvoice() *TLinputMediaInvoice {
	return &TLinputMediaInvoice{data: &InputMedia_Data{}}
}

// Constructors:Predicate:inputMediaGeoLive
type TLinputMediaGeoLive struct {
	data *InputMedia_Data
}

// Constructors:New:inputMediaGeoLive
func NewTLinputMediaGeoLive() *TLinputMediaGeoLive {
	return &TLinputMediaGeoLive{data: &InputMedia_Data{}}
}

// Constructors:Predicate:inputMediaPoll
type TLinputMediaPoll struct {
	data *InputMedia_Data
}

// Constructors:New:inputMediaPoll
func NewTLinputMediaPoll() *TLinputMediaPoll {
	return &TLinputMediaPoll{data: &InputMedia_Data{}}
}

// Constructors:Predicate:inputMediaDice
type TLinputMediaDice struct {
	data *InputMedia_Data
}

// Constructors:New:inputMediaDice
func NewTLinputMediaDice() *TLinputMediaDice {
	return &TLinputMediaDice{data: &InputMedia_Data{}}
}
func (m *TLinputMediaUploadedPhoto) Setfile(v *InputFile)                    { m.data.file = v }
func (m *TLinputMediaUploadedPhoto) Getfile() *InputFile                     { return m.data.file }
func (m *TLinputMediaUploadedPhoto) Setstickers(v []*InputDocument)          { m.data.stickers = v }
func (m *TLinputMediaUploadedPhoto) Getstickers() []*InputDocument           { return m.data.stickers }
func (m *TLinputMediaUploadedPhoto) Setttl_seconds(v int32)                  { m.data.ttl_seconds = v }
func (m *TLinputMediaUploadedPhoto) Getttl_seconds() int32                   { return m.data.ttl_seconds }
func (m *TLinputMediaPhoto) Setid(v *InputPhoto)                             { m.data.id = v }
func (m *TLinputMediaPhoto) Getid() *InputPhoto                              { return m.data.id }
func (m *TLinputMediaPhoto) Setttl_seconds(v int32)                          { m.data.ttl_seconds = v }
func (m *TLinputMediaPhoto) Getttl_seconds() int32                           { return m.data.ttl_seconds }
func (m *TLinputMediaGeoPoint) Setgeo_point(v *InputGeoPoint)                { m.data.geo_point = v }
func (m *TLinputMediaGeoPoint) Getgeo_point() *InputGeoPoint                 { return m.data.geo_point }
func (m *TLinputMediaContact) Setphone_number(v string)                      { m.data.phone_number = v }
func (m *TLinputMediaContact) Getphone_number() string                       { return m.data.phone_number }
func (m *TLinputMediaContact) Setfirst_name(v string)                        { m.data.first_name = v }
func (m *TLinputMediaContact) Getfirst_name() string                         { return m.data.first_name }
func (m *TLinputMediaContact) Setlast_name(v string)                         { m.data.last_name = v }
func (m *TLinputMediaContact) Getlast_name() string                          { return m.data.last_name }
func (m *TLinputMediaContact) Setvcard(v string)                             { m.data.vcard = v }
func (m *TLinputMediaContact) Getvcard() string                              { return m.data.vcard }
func (m *TLinputMediaUploadedDocument) Setnosound_video(v bool)              { m.data.nosound_video = v }
func (m *TLinputMediaUploadedDocument) Getnosound_video() bool               { return m.data.nosound_video }
func (m *TLinputMediaUploadedDocument) Setforce_file(v bool)                 { m.data.force_file = v }
func (m *TLinputMediaUploadedDocument) Getforce_file() bool                  { return m.data.force_file }
func (m *TLinputMediaUploadedDocument) Setfile(v *InputFile)                 { m.data.file = v }
func (m *TLinputMediaUploadedDocument) Getfile() *InputFile                  { return m.data.file }
func (m *TLinputMediaUploadedDocument) Setthumb(v *InputFile)                { m.data.thumb = v }
func (m *TLinputMediaUploadedDocument) Getthumb() *InputFile                 { return m.data.thumb }
func (m *TLinputMediaUploadedDocument) Setmime_type(v string)                { m.data.mime_type = v }
func (m *TLinputMediaUploadedDocument) Getmime_type() string                 { return m.data.mime_type }
func (m *TLinputMediaUploadedDocument) Setattributes(v []*DocumentAttribute) { m.data.attributes = v }
func (m *TLinputMediaUploadedDocument) Getattributes() []*DocumentAttribute  { return m.data.attributes }
func (m *TLinputMediaUploadedDocument) Setstickers(v []*InputDocument)       { m.data.stickers = v }
func (m *TLinputMediaUploadedDocument) Getstickers() []*InputDocument        { return m.data.stickers }
func (m *TLinputMediaUploadedDocument) Setttl_seconds(v int32)               { m.data.ttl_seconds = v }
func (m *TLinputMediaUploadedDocument) Getttl_seconds() int32                { return m.data.ttl_seconds }
func (m *TLinputMediaDocument) Setid_15(v *InputDocument)                    { m.data.id_15 = v }
func (m *TLinputMediaDocument) Getid_15() *InputDocument                     { return m.data.id_15 }
func (m *TLinputMediaDocument) Setttl_seconds(v int32)                       { m.data.ttl_seconds = v }
func (m *TLinputMediaDocument) Getttl_seconds() int32                        { return m.data.ttl_seconds }
func (m *TLinputMediaVenue) Setgeo_point(v *InputGeoPoint)                   { m.data.geo_point = v }
func (m *TLinputMediaVenue) Getgeo_point() *InputGeoPoint                    { return m.data.geo_point }
func (m *TLinputMediaVenue) Settitle(v string)                               { m.data.title = v }
func (m *TLinputMediaVenue) Gettitle() string                                { return m.data.title }
func (m *TLinputMediaVenue) Setaddress(v string)                             { m.data.address = v }
func (m *TLinputMediaVenue) Getaddress() string                              { return m.data.address }
func (m *TLinputMediaVenue) Setprovider(v string)                            { m.data.provider = v }
func (m *TLinputMediaVenue) Getprovider() string                             { return m.data.provider }
func (m *TLinputMediaVenue) Setvenue_id(v string)                            { m.data.venue_id = v }
func (m *TLinputMediaVenue) Getvenue_id() string                             { return m.data.venue_id }
func (m *TLinputMediaVenue) Setvenue_type(v string)                          { m.data.venue_type = v }
func (m *TLinputMediaVenue) Getvenue_type() string                           { return m.data.venue_type }
func (m *TLinputMediaPhotoExternal) Seturl(v string)                         { m.data.url = v }
func (m *TLinputMediaPhotoExternal) Geturl() string                          { return m.data.url }
func (m *TLinputMediaPhotoExternal) Setttl_seconds(v int32)                  { m.data.ttl_seconds = v }
func (m *TLinputMediaPhotoExternal) Getttl_seconds() int32                   { return m.data.ttl_seconds }
func (m *TLinputMediaDocumentExternal) Seturl(v string)                      { m.data.url = v }
func (m *TLinputMediaDocumentExternal) Geturl() string                       { return m.data.url }
func (m *TLinputMediaDocumentExternal) Setttl_seconds(v int32)               { m.data.ttl_seconds = v }
func (m *TLinputMediaDocumentExternal) Getttl_seconds() int32                { return m.data.ttl_seconds }
func (m *TLinputMediaGame) Setid_22(v *InputGame)                            { m.data.id_22 = v }
func (m *TLinputMediaGame) Getid_22() *InputGame                             { return m.data.id_22 }
func (m *TLinputMediaInvoice) Settitle(v string)                             { m.data.title = v }
func (m *TLinputMediaInvoice) Gettitle() string                              { return m.data.title }
func (m *TLinputMediaInvoice) Setdescription(v string)                       { m.data.description = v }
func (m *TLinputMediaInvoice) Getdescription() string                        { return m.data.description }
func (m *TLinputMediaInvoice) Setphoto(v *InputWebDocument)                  { m.data.photo = v }
func (m *TLinputMediaInvoice) Getphoto() *InputWebDocument                   { return m.data.photo }
func (m *TLinputMediaInvoice) Setinvoice(v *Invoice)                         { m.data.invoice = v }
func (m *TLinputMediaInvoice) Getinvoice() *Invoice                          { return m.data.invoice }
func (m *TLinputMediaInvoice) Setpayload(v []byte)                           { m.data.payload = v }
func (m *TLinputMediaInvoice) Getpayload() []byte                            { return m.data.payload }
func (m *TLinputMediaInvoice) Setprovider(v string)                          { m.data.provider = v }
func (m *TLinputMediaInvoice) Getprovider() string                           { return m.data.provider }
func (m *TLinputMediaInvoice) Setprovider_data(v *DataJSON)                  { m.data.provider_data = v }
func (m *TLinputMediaInvoice) Getprovider_data() *DataJSON                   { return m.data.provider_data }
func (m *TLinputMediaInvoice) Setstart_param(v string)                       { m.data.start_param = v }
func (m *TLinputMediaInvoice) Getstart_param() string                        { return m.data.start_param }
func (m *TLinputMediaGeoLive) Setstopped(v bool)                             { m.data.stopped = v }
func (m *TLinputMediaGeoLive) Getstopped() bool                              { return m.data.stopped }
func (m *TLinputMediaGeoLive) Setgeo_point(v *InputGeoPoint)                 { m.data.geo_point = v }
func (m *TLinputMediaGeoLive) Getgeo_point() *InputGeoPoint                  { return m.data.geo_point }
func (m *TLinputMediaGeoLive) Setheading(v int32)                            { m.data.heading = v }
func (m *TLinputMediaGeoLive) Getheading() int32                             { return m.data.heading }
func (m *TLinputMediaGeoLive) Setperiod(v int32)                             { m.data.period = v }
func (m *TLinputMediaGeoLive) Getperiod() int32                              { return m.data.period }
func (m *TLinputMediaGeoLive) Setproximity_notification_radius(v int32) {
	m.data.proximity_notification_radius = v
}
func (m *TLinputMediaGeoLive) Getproximity_notification_radius() int32 {
	return m.data.proximity_notification_radius
}
func (m *TLinputMediaPoll) Setpoll(v *Poll)                         { m.data.poll = v }
func (m *TLinputMediaPoll) Getpoll() *Poll                          { return m.data.poll }
func (m *TLinputMediaPoll) Setcorrect_answers(v [][]byte)           { m.data.correct_answers = v }
func (m *TLinputMediaPoll) Getcorrect_answers() [][]byte            { return m.data.correct_answers }
func (m *TLinputMediaPoll) Setsolution(v string)                    { m.data.solution = v }
func (m *TLinputMediaPoll) Getsolution() string                     { return m.data.solution }
func (m *TLinputMediaPoll) Setsolution_entities(v []*MessageEntity) { m.data.solution_entities = v }
func (m *TLinputMediaPoll) Getsolution_entities() []*MessageEntity  { return m.data.solution_entities }
func (m *TLinputMediaDice) Setemoticon(v string)                    { m.data.emoticon = v }
func (m *TLinputMediaDice) Getemoticon() string                     { return m.data.emoticon }

///////////////////////////////////////////////////////////////////////////////
// Constructors:Invoice
// Invoice <--
// + TLinvoice
//
// Constructors:Type:Invoice
type Invoice struct {
	constructor int32
	data        *Invoice_Data
}

// Constructors:Type:Data:Invoice
type Invoice_Data struct {
	test                       bool
	name_requested             bool
	phone_requested            bool
	email_requested            bool
	shipping_address_requested bool
	flexible                   bool
	phone_to_provider          bool
	email_to_provider          bool
	currency                   string
	prices                     []*LabeledPrice
}

// Constructors:Predicate:invoice
type TLinvoice struct {
	data *Invoice_Data
}

// Constructors:New:invoice
func NewTLinvoice() *TLinvoice {
	return &TLinvoice{data: &Invoice_Data{}}
}
func (m *TLinvoice) Settest(v bool)                       { m.data.test = v }
func (m *TLinvoice) Gettest() bool                        { return m.data.test }
func (m *TLinvoice) Setname_requested(v bool)             { m.data.name_requested = v }
func (m *TLinvoice) Getname_requested() bool              { return m.data.name_requested }
func (m *TLinvoice) Setphone_requested(v bool)            { m.data.phone_requested = v }
func (m *TLinvoice) Getphone_requested() bool             { return m.data.phone_requested }
func (m *TLinvoice) Setemail_requested(v bool)            { m.data.email_requested = v }
func (m *TLinvoice) Getemail_requested() bool             { return m.data.email_requested }
func (m *TLinvoice) Setshipping_address_requested(v bool) { m.data.shipping_address_requested = v }
func (m *TLinvoice) Getshipping_address_requested() bool  { return m.data.shipping_address_requested }
func (m *TLinvoice) Setflexible(v bool)                   { m.data.flexible = v }
func (m *TLinvoice) Getflexible() bool                    { return m.data.flexible }
func (m *TLinvoice) Setphone_to_provider(v bool)          { m.data.phone_to_provider = v }
func (m *TLinvoice) Getphone_to_provider() bool           { return m.data.phone_to_provider }
func (m *TLinvoice) Setemail_to_provider(v bool)          { m.data.email_to_provider = v }
func (m *TLinvoice) Getemail_to_provider() bool           { return m.data.email_to_provider }
func (m *TLinvoice) Setcurrency(v string)                 { m.data.currency = v }
func (m *TLinvoice) Getcurrency() string                  { return m.data.currency }
func (m *TLinvoice) Setprices(v []*LabeledPrice)          { m.data.prices = v }
func (m *TLinvoice) Getprices() []*LabeledPrice           { return m.data.prices }

///////////////////////////////////////////////////////////////////////////////
// Constructors:NotifyPeer
// NotifyPeer <--
// + TLnotifyPeer
// + TLnotifyUsers
// + TLnotifyChats
// + TLnotifyBroadcasts
//
// Constructors:Type:NotifyPeer
type NotifyPeer struct {
	constructor int32
	data        *NotifyPeer_Data
}

// Constructors:Type:Data:NotifyPeer
type NotifyPeer_Data struct {
	peer *Peer
}

// Constructors:Predicate:notifyPeer
type TLnotifyPeer struct {
	data *NotifyPeer_Data
}

// Constructors:New:notifyPeer
func NewTLnotifyPeer() *TLnotifyPeer {
	return &TLnotifyPeer{data: &NotifyPeer_Data{}}
}

// Constructors:Predicate:notifyUsers
type TLnotifyUsers struct {
	data *NotifyPeer_Data
}

// Constructors:New:notifyUsers
func NewTLnotifyUsers() *TLnotifyUsers {
	return &TLnotifyUsers{data: &NotifyPeer_Data{}}
}

// Constructors:Predicate:notifyChats
type TLnotifyChats struct {
	data *NotifyPeer_Data
}

// Constructors:New:notifyChats
func NewTLnotifyChats() *TLnotifyChats {
	return &TLnotifyChats{data: &NotifyPeer_Data{}}
}

// Constructors:Predicate:notifyBroadcasts
type TLnotifyBroadcasts struct {
	data *NotifyPeer_Data
}

// Constructors:New:notifyBroadcasts
func NewTLnotifyBroadcasts() *TLnotifyBroadcasts {
	return &TLnotifyBroadcasts{data: &NotifyPeer_Data{}}
}
func (m *TLnotifyPeer) Setpeer(v *Peer) { m.data.peer = v }
func (m *TLnotifyPeer) Getpeer() *Peer  { return m.data.peer }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputFileLocation
// InputFileLocation <--
// + TLinputFileLocation
// + TLinputEncryptedFileLocation
// + TLinputDocumentFileLocation
// + TLinputSecureFileLocation
// + TLinputTakeoutFileLocation
// + TLinputPhotoFileLocation
// + TLinputPhotoLegacyFileLocation
// + TLinputPeerPhotoFileLocation
// + TLinputStickerSetThumb
//
// Constructors:Type:InputFileLocation
type InputFileLocation struct {
	constructor int32
	data        *InputFileLocation_Data
}

// Constructors:Type:Data:InputFileLocation
type InputFileLocation_Data struct {
	volume_id      int64
	local_id       int32
	secret         int64
	file_reference []byte
	id             int64
	access_hash    int64
	thumb_size     string
	big            bool
	peer           *InputPeer
	stickerset     *InputStickerSet
}

// Constructors:Predicate:inputFileLocation
type TLinputFileLocation struct {
	data *InputFileLocation_Data
}

// Constructors:New:inputFileLocation
func NewTLinputFileLocation() *TLinputFileLocation {
	return &TLinputFileLocation{data: &InputFileLocation_Data{}}
}

// Constructors:Predicate:inputEncryptedFileLocation
type TLinputEncryptedFileLocation struct {
	data *InputFileLocation_Data
}

// Constructors:New:inputEncryptedFileLocation
func NewTLinputEncryptedFileLocation() *TLinputEncryptedFileLocation {
	return &TLinputEncryptedFileLocation{data: &InputFileLocation_Data{}}
}

// Constructors:Predicate:inputDocumentFileLocation
type TLinputDocumentFileLocation struct {
	data *InputFileLocation_Data
}

// Constructors:New:inputDocumentFileLocation
func NewTLinputDocumentFileLocation() *TLinputDocumentFileLocation {
	return &TLinputDocumentFileLocation{data: &InputFileLocation_Data{}}
}

// Constructors:Predicate:inputSecureFileLocation
type TLinputSecureFileLocation struct {
	data *InputFileLocation_Data
}

// Constructors:New:inputSecureFileLocation
func NewTLinputSecureFileLocation() *TLinputSecureFileLocation {
	return &TLinputSecureFileLocation{data: &InputFileLocation_Data{}}
}

// Constructors:Predicate:inputTakeoutFileLocation
type TLinputTakeoutFileLocation struct {
	data *InputFileLocation_Data
}

// Constructors:New:inputTakeoutFileLocation
func NewTLinputTakeoutFileLocation() *TLinputTakeoutFileLocation {
	return &TLinputTakeoutFileLocation{data: &InputFileLocation_Data{}}
}

// Constructors:Predicate:inputPhotoFileLocation
type TLinputPhotoFileLocation struct {
	data *InputFileLocation_Data
}

// Constructors:New:inputPhotoFileLocation
func NewTLinputPhotoFileLocation() *TLinputPhotoFileLocation {
	return &TLinputPhotoFileLocation{data: &InputFileLocation_Data{}}
}

// Constructors:Predicate:inputPhotoLegacyFileLocation
type TLinputPhotoLegacyFileLocation struct {
	data *InputFileLocation_Data
}

// Constructors:New:inputPhotoLegacyFileLocation
func NewTLinputPhotoLegacyFileLocation() *TLinputPhotoLegacyFileLocation {
	return &TLinputPhotoLegacyFileLocation{data: &InputFileLocation_Data{}}
}

// Constructors:Predicate:inputPeerPhotoFileLocation
type TLinputPeerPhotoFileLocation struct {
	data *InputFileLocation_Data
}

// Constructors:New:inputPeerPhotoFileLocation
func NewTLinputPeerPhotoFileLocation() *TLinputPeerPhotoFileLocation {
	return &TLinputPeerPhotoFileLocation{data: &InputFileLocation_Data{}}
}

// Constructors:Predicate:inputStickerSetThumb
type TLinputStickerSetThumb struct {
	data *InputFileLocation_Data
}

// Constructors:New:inputStickerSetThumb
func NewTLinputStickerSetThumb() *TLinputStickerSetThumb {
	return &TLinputStickerSetThumb{data: &InputFileLocation_Data{}}
}
func (m *TLinputFileLocation) Setvolume_id(v int64)                  { m.data.volume_id = v }
func (m *TLinputFileLocation) Getvolume_id() int64                   { return m.data.volume_id }
func (m *TLinputFileLocation) Setlocal_id(v int32)                   { m.data.local_id = v }
func (m *TLinputFileLocation) Getlocal_id() int32                    { return m.data.local_id }
func (m *TLinputFileLocation) Setsecret(v int64)                     { m.data.secret = v }
func (m *TLinputFileLocation) Getsecret() int64                      { return m.data.secret }
func (m *TLinputFileLocation) Setfile_reference(v []byte)            { m.data.file_reference = v }
func (m *TLinputFileLocation) Getfile_reference() []byte             { return m.data.file_reference }
func (m *TLinputEncryptedFileLocation) Setid(v int64)                { m.data.id = v }
func (m *TLinputEncryptedFileLocation) Getid() int64                 { return m.data.id }
func (m *TLinputEncryptedFileLocation) Setaccess_hash(v int64)       { m.data.access_hash = v }
func (m *TLinputEncryptedFileLocation) Getaccess_hash() int64        { return m.data.access_hash }
func (m *TLinputDocumentFileLocation) Setid(v int64)                 { m.data.id = v }
func (m *TLinputDocumentFileLocation) Getid() int64                  { return m.data.id }
func (m *TLinputDocumentFileLocation) Setaccess_hash(v int64)        { m.data.access_hash = v }
func (m *TLinputDocumentFileLocation) Getaccess_hash() int64         { return m.data.access_hash }
func (m *TLinputDocumentFileLocation) Setfile_reference(v []byte)    { m.data.file_reference = v }
func (m *TLinputDocumentFileLocation) Getfile_reference() []byte     { return m.data.file_reference }
func (m *TLinputDocumentFileLocation) Setthumb_size(v string)        { m.data.thumb_size = v }
func (m *TLinputDocumentFileLocation) Getthumb_size() string         { return m.data.thumb_size }
func (m *TLinputSecureFileLocation) Setid(v int64)                   { m.data.id = v }
func (m *TLinputSecureFileLocation) Getid() int64                    { return m.data.id }
func (m *TLinputSecureFileLocation) Setaccess_hash(v int64)          { m.data.access_hash = v }
func (m *TLinputSecureFileLocation) Getaccess_hash() int64           { return m.data.access_hash }
func (m *TLinputPhotoFileLocation) Setid(v int64)                    { m.data.id = v }
func (m *TLinputPhotoFileLocation) Getid() int64                     { return m.data.id }
func (m *TLinputPhotoFileLocation) Setaccess_hash(v int64)           { m.data.access_hash = v }
func (m *TLinputPhotoFileLocation) Getaccess_hash() int64            { return m.data.access_hash }
func (m *TLinputPhotoFileLocation) Setfile_reference(v []byte)       { m.data.file_reference = v }
func (m *TLinputPhotoFileLocation) Getfile_reference() []byte        { return m.data.file_reference }
func (m *TLinputPhotoFileLocation) Setthumb_size(v string)           { m.data.thumb_size = v }
func (m *TLinputPhotoFileLocation) Getthumb_size() string            { return m.data.thumb_size }
func (m *TLinputPhotoLegacyFileLocation) Setid(v int64)              { m.data.id = v }
func (m *TLinputPhotoLegacyFileLocation) Getid() int64               { return m.data.id }
func (m *TLinputPhotoLegacyFileLocation) Setaccess_hash(v int64)     { m.data.access_hash = v }
func (m *TLinputPhotoLegacyFileLocation) Getaccess_hash() int64      { return m.data.access_hash }
func (m *TLinputPhotoLegacyFileLocation) Setfile_reference(v []byte) { m.data.file_reference = v }
func (m *TLinputPhotoLegacyFileLocation) Getfile_reference() []byte  { return m.data.file_reference }
func (m *TLinputPhotoLegacyFileLocation) Setvolume_id(v int64)       { m.data.volume_id = v }
func (m *TLinputPhotoLegacyFileLocation) Getvolume_id() int64        { return m.data.volume_id }
func (m *TLinputPhotoLegacyFileLocation) Setlocal_id(v int32)        { m.data.local_id = v }
func (m *TLinputPhotoLegacyFileLocation) Getlocal_id() int32         { return m.data.local_id }
func (m *TLinputPhotoLegacyFileLocation) Setsecret(v int64)          { m.data.secret = v }
func (m *TLinputPhotoLegacyFileLocation) Getsecret() int64           { return m.data.secret }
func (m *TLinputPeerPhotoFileLocation) Setbig(v bool)                { m.data.big = v }
func (m *TLinputPeerPhotoFileLocation) Getbig() bool                 { return m.data.big }
func (m *TLinputPeerPhotoFileLocation) Setpeer(v *InputPeer)         { m.data.peer = v }
func (m *TLinputPeerPhotoFileLocation) Getpeer() *InputPeer          { return m.data.peer }
func (m *TLinputPeerPhotoFileLocation) Setvolume_id(v int64)         { m.data.volume_id = v }
func (m *TLinputPeerPhotoFileLocation) Getvolume_id() int64          { return m.data.volume_id }
func (m *TLinputPeerPhotoFileLocation) Setlocal_id(v int32)          { m.data.local_id = v }
func (m *TLinputPeerPhotoFileLocation) Getlocal_id() int32           { return m.data.local_id }
func (m *TLinputStickerSetThumb) Setstickerset(v *InputStickerSet)   { m.data.stickerset = v }
func (m *TLinputStickerSetThumb) Getstickerset() *InputStickerSet    { return m.data.stickerset }
func (m *TLinputStickerSetThumb) Setvolume_id(v int64)               { m.data.volume_id = v }
func (m *TLinputStickerSetThumb) Getvolume_id() int64                { return m.data.volume_id }
func (m *TLinputStickerSetThumb) Setlocal_id(v int32)                { m.data.local_id = v }
func (m *TLinputStickerSetThumb) Getlocal_id() int32                 { return m.data.local_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:DialogFilter
// DialogFilter <--
// + TLdialogFilter
//
// Constructors:Type:DialogFilter
type DialogFilter struct {
	constructor int32
	data        *DialogFilter_Data
}

// Constructors:Type:Data:DialogFilter
type DialogFilter_Data struct {
	contacts         bool
	non_contacts     bool
	groups           bool
	broadcasts       bool
	bots             bool
	exclude_muted    bool
	exclude_read     bool
	exclude_archived bool
	id               int32
	title            string
	emoticon         string
	pinned_peers     []*InputPeer
	include_peers    []*InputPeer
	exclude_peers    []*InputPeer
}

// Constructors:Predicate:dialogFilter
type TLdialogFilter struct {
	data *DialogFilter_Data
}

// Constructors:New:dialogFilter
func NewTLdialogFilter() *TLdialogFilter {
	return &TLdialogFilter{data: &DialogFilter_Data{}}
}
func (m *TLdialogFilter) Setcontacts(v bool)              { m.data.contacts = v }
func (m *TLdialogFilter) Getcontacts() bool               { return m.data.contacts }
func (m *TLdialogFilter) Setnon_contacts(v bool)          { m.data.non_contacts = v }
func (m *TLdialogFilter) Getnon_contacts() bool           { return m.data.non_contacts }
func (m *TLdialogFilter) Setgroups(v bool)                { m.data.groups = v }
func (m *TLdialogFilter) Getgroups() bool                 { return m.data.groups }
func (m *TLdialogFilter) Setbroadcasts(v bool)            { m.data.broadcasts = v }
func (m *TLdialogFilter) Getbroadcasts() bool             { return m.data.broadcasts }
func (m *TLdialogFilter) Setbots(v bool)                  { m.data.bots = v }
func (m *TLdialogFilter) Getbots() bool                   { return m.data.bots }
func (m *TLdialogFilter) Setexclude_muted(v bool)         { m.data.exclude_muted = v }
func (m *TLdialogFilter) Getexclude_muted() bool          { return m.data.exclude_muted }
func (m *TLdialogFilter) Setexclude_read(v bool)          { m.data.exclude_read = v }
func (m *TLdialogFilter) Getexclude_read() bool           { return m.data.exclude_read }
func (m *TLdialogFilter) Setexclude_archived(v bool)      { m.data.exclude_archived = v }
func (m *TLdialogFilter) Getexclude_archived() bool       { return m.data.exclude_archived }
func (m *TLdialogFilter) Setid(v int32)                   { m.data.id = v }
func (m *TLdialogFilter) Getid() int32                    { return m.data.id }
func (m *TLdialogFilter) Settitle(v string)               { m.data.title = v }
func (m *TLdialogFilter) Gettitle() string                { return m.data.title }
func (m *TLdialogFilter) Setemoticon(v string)            { m.data.emoticon = v }
func (m *TLdialogFilter) Getemoticon() string             { return m.data.emoticon }
func (m *TLdialogFilter) Setpinned_peers(v []*InputPeer)  { m.data.pinned_peers = v }
func (m *TLdialogFilter) Getpinned_peers() []*InputPeer   { return m.data.pinned_peers }
func (m *TLdialogFilter) Setinclude_peers(v []*InputPeer) { m.data.include_peers = v }
func (m *TLdialogFilter) Getinclude_peers() []*InputPeer  { return m.data.include_peers }
func (m *TLdialogFilter) Setexclude_peers(v []*InputPeer) { m.data.exclude_peers = v }
func (m *TLdialogFilter) Getexclude_peers() []*InputPeer  { return m.data.exclude_peers }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputTheme
// InputTheme <--
// + TLinputTheme
// + TLinputThemeSlug
//
// Constructors:Type:InputTheme
type InputTheme struct {
	constructor int32
	data        *InputTheme_Data
}

// Constructors:Type:Data:InputTheme
type InputTheme_Data struct {
	id          int64
	access_hash int64
	slug        string
}

// Constructors:Predicate:inputTheme
type TLinputTheme struct {
	data *InputTheme_Data
}

// Constructors:New:inputTheme
func NewTLinputTheme() *TLinputTheme {
	return &TLinputTheme{data: &InputTheme_Data{}}
}

// Constructors:Predicate:inputThemeSlug
type TLinputThemeSlug struct {
	data *InputTheme_Data
}

// Constructors:New:inputThemeSlug
func NewTLinputThemeSlug() *TLinputThemeSlug {
	return &TLinputThemeSlug{data: &InputTheme_Data{}}
}
func (m *TLinputTheme) Setid(v int64)          { m.data.id = v }
func (m *TLinputTheme) Getid() int64           { return m.data.id }
func (m *TLinputTheme) Setaccess_hash(v int64) { m.data.access_hash = v }
func (m *TLinputTheme) Getaccess_hash() int64  { return m.data.access_hash }
func (m *TLinputThemeSlug) Setslug(v string)   { m.data.slug = v }
func (m *TLinputThemeSlug) Getslug() string    { return m.data.slug }

///////////////////////////////////////////////////////////////////////////////
// Constructors:DcOption
// DcOption <--
// + TLdcOption
//
// Constructors:Type:DcOption
type DcOption struct {
	constructor int32
	data        *DcOption_Data
}

// Constructors:Type:Data:DcOption
type DcOption_Data struct {
	ipv6       bool
	media_only bool
	tcpo_only  bool
	cdn        bool
	static     bool
	id         int32
	ip_address string
	port       int32
	secret     []byte
}

// Constructors:Predicate:dcOption
type TLdcOption struct {
	data *DcOption_Data
}

// Constructors:New:dcOption
func NewTLdcOption() *TLdcOption {
	return &TLdcOption{data: &DcOption_Data{}}
}
func (m *TLdcOption) Setipv6(v bool)         { m.data.ipv6 = v }
func (m *TLdcOption) Getipv6() bool          { return m.data.ipv6 }
func (m *TLdcOption) Setmedia_only(v bool)   { m.data.media_only = v }
func (m *TLdcOption) Getmedia_only() bool    { return m.data.media_only }
func (m *TLdcOption) Settcpo_only(v bool)    { m.data.tcpo_only = v }
func (m *TLdcOption) Gettcpo_only() bool     { return m.data.tcpo_only }
func (m *TLdcOption) Setcdn(v bool)          { m.data.cdn = v }
func (m *TLdcOption) Getcdn() bool           { return m.data.cdn }
func (m *TLdcOption) Setstatic(v bool)       { m.data.static = v }
func (m *TLdcOption) Getstatic() bool        { return m.data.static }
func (m *TLdcOption) Setid(v int32)          { m.data.id = v }
func (m *TLdcOption) Getid() int32           { return m.data.id }
func (m *TLdcOption) Setip_address(v string) { m.data.ip_address = v }
func (m *TLdcOption) Getip_address() string  { return m.data.ip_address }
func (m *TLdcOption) Setport(v int32)        { m.data.port = v }
func (m *TLdcOption) Getport() int32         { return m.data.port }
func (m *TLdcOption) Setsecret(v []byte)     { m.data.secret = v }
func (m *TLdcOption) Getsecret() []byte      { return m.data.secret }

///////////////////////////////////////////////////////////////////////////////
// Constructors:MessageViews
// MessageViews <--
// + TLmessageViews
//
// Constructors:Type:MessageViews
type MessageViews struct {
	constructor int32
	data        *MessageViews_Data
}

// Constructors:Type:Data:MessageViews
type MessageViews_Data struct {
	views    int32
	forwards int32
	replies  *MessageReplies
}

// Constructors:Predicate:messageViews
type TLmessageViews struct {
	data *MessageViews_Data
}

// Constructors:New:messageViews
func NewTLmessageViews() *TLmessageViews {
	return &TLmessageViews{data: &MessageViews_Data{}}
}
func (m *TLmessageViews) Setviews(v int32)             { m.data.views = v }
func (m *TLmessageViews) Getviews() int32              { return m.data.views }
func (m *TLmessageViews) Setforwards(v int32)          { m.data.forwards = v }
func (m *TLmessageViews) Getforwards() int32           { return m.data.forwards }
func (m *TLmessageViews) Setreplies(v *MessageReplies) { m.data.replies = v }
func (m *TLmessageViews) Getreplies() *MessageReplies  { return m.data.replies }

///////////////////////////////////////////////////////////////////////////////
// Constructors:Message
// Message <--
// + TLmessageEmpty
// + TLmessage
// + TLmessageService
//
// Constructors:Type:Message
type Message struct {
	constructor int32
	data        *Message_Data
}

// Constructors:Type:Data:Message
type Message_Data struct {
	id                 int32
	out                bool
	mentioned          bool
	media_unread       bool
	silent             bool
	post               bool
	from_scheduled     bool
	legacy             bool
	edit_hide          bool
	pinned             bool
	from_id            *Peer
	peer_id            *Peer
	fwd_from           *MessageFwdHeader
	via_bot_id         int32
	reply_to           *MessageReplyHeader
	date               int32
	message            string
	media              *MessageMedia
	reply_markup       *ReplyMarkup
	entities           []*MessageEntity
	views              int32
	forwards           int32
	replies            *MessageReplies
	edit_date          int32
	post_author        string
	grouped_id         int64
	restriction_reason []*RestrictionReason
	action             *MessageAction
}

// Constructors:Predicate:messageEmpty
type TLmessageEmpty struct {
	data *Message_Data
}

// Constructors:New:messageEmpty
func NewTLmessageEmpty() *TLmessageEmpty {
	return &TLmessageEmpty{data: &Message_Data{}}
}

// Constructors:Predicate:message
type TLmessage struct {
	data *Message_Data
}

// Constructors:New:message
func NewTLmessage() *TLmessage {
	return &TLmessage{data: &Message_Data{}}
}

// Constructors:Predicate:messageService
type TLmessageService struct {
	data *Message_Data
}

// Constructors:New:messageService
func NewTLmessageService() *TLmessageService {
	return &TLmessageService{data: &Message_Data{}}
}
func (m *TLmessageEmpty) Setid(v int32)                           { m.data.id = v }
func (m *TLmessageEmpty) Getid() int32                            { return m.data.id }
func (m *TLmessage) Setout(v bool)                                { m.data.out = v }
func (m *TLmessage) Getout() bool                                 { return m.data.out }
func (m *TLmessage) Setmentioned(v bool)                          { m.data.mentioned = v }
func (m *TLmessage) Getmentioned() bool                           { return m.data.mentioned }
func (m *TLmessage) Setmedia_unread(v bool)                       { m.data.media_unread = v }
func (m *TLmessage) Getmedia_unread() bool                        { return m.data.media_unread }
func (m *TLmessage) Setsilent(v bool)                             { m.data.silent = v }
func (m *TLmessage) Getsilent() bool                              { return m.data.silent }
func (m *TLmessage) Setpost(v bool)                               { m.data.post = v }
func (m *TLmessage) Getpost() bool                                { return m.data.post }
func (m *TLmessage) Setfrom_scheduled(v bool)                     { m.data.from_scheduled = v }
func (m *TLmessage) Getfrom_scheduled() bool                      { return m.data.from_scheduled }
func (m *TLmessage) Setlegacy(v bool)                             { m.data.legacy = v }
func (m *TLmessage) Getlegacy() bool                              { return m.data.legacy }
func (m *TLmessage) Setedit_hide(v bool)                          { m.data.edit_hide = v }
func (m *TLmessage) Getedit_hide() bool                           { return m.data.edit_hide }
func (m *TLmessage) Setpinned(v bool)                             { m.data.pinned = v }
func (m *TLmessage) Getpinned() bool                              { return m.data.pinned }
func (m *TLmessage) Setid(v int32)                                { m.data.id = v }
func (m *TLmessage) Getid() int32                                 { return m.data.id }
func (m *TLmessage) Setfrom_id(v *Peer)                           { m.data.from_id = v }
func (m *TLmessage) Getfrom_id() *Peer                            { return m.data.from_id }
func (m *TLmessage) Setpeer_id(v *Peer)                           { m.data.peer_id = v }
func (m *TLmessage) Getpeer_id() *Peer                            { return m.data.peer_id }
func (m *TLmessage) Setfwd_from(v *MessageFwdHeader)              { m.data.fwd_from = v }
func (m *TLmessage) Getfwd_from() *MessageFwdHeader               { return m.data.fwd_from }
func (m *TLmessage) Setvia_bot_id(v int32)                        { m.data.via_bot_id = v }
func (m *TLmessage) Getvia_bot_id() int32                         { return m.data.via_bot_id }
func (m *TLmessage) Setreply_to(v *MessageReplyHeader)            { m.data.reply_to = v }
func (m *TLmessage) Getreply_to() *MessageReplyHeader             { return m.data.reply_to }
func (m *TLmessage) Setdate(v int32)                              { m.data.date = v }
func (m *TLmessage) Getdate() int32                               { return m.data.date }
func (m *TLmessage) Setmessage(v string)                          { m.data.message = v }
func (m *TLmessage) Getmessage() string                           { return m.data.message }
func (m *TLmessage) Setmedia(v *MessageMedia)                     { m.data.media = v }
func (m *TLmessage) Getmedia() *MessageMedia                      { return m.data.media }
func (m *TLmessage) Setreply_markup(v *ReplyMarkup)               { m.data.reply_markup = v }
func (m *TLmessage) Getreply_markup() *ReplyMarkup                { return m.data.reply_markup }
func (m *TLmessage) Setentities(v []*MessageEntity)               { m.data.entities = v }
func (m *TLmessage) Getentities() []*MessageEntity                { return m.data.entities }
func (m *TLmessage) Setviews(v int32)                             { m.data.views = v }
func (m *TLmessage) Getviews() int32                              { return m.data.views }
func (m *TLmessage) Setforwards(v int32)                          { m.data.forwards = v }
func (m *TLmessage) Getforwards() int32                           { return m.data.forwards }
func (m *TLmessage) Setreplies(v *MessageReplies)                 { m.data.replies = v }
func (m *TLmessage) Getreplies() *MessageReplies                  { return m.data.replies }
func (m *TLmessage) Setedit_date(v int32)                         { m.data.edit_date = v }
func (m *TLmessage) Getedit_date() int32                          { return m.data.edit_date }
func (m *TLmessage) Setpost_author(v string)                      { m.data.post_author = v }
func (m *TLmessage) Getpost_author() string                       { return m.data.post_author }
func (m *TLmessage) Setgrouped_id(v int64)                        { m.data.grouped_id = v }
func (m *TLmessage) Getgrouped_id() int64                         { return m.data.grouped_id }
func (m *TLmessage) Setrestriction_reason(v []*RestrictionReason) { m.data.restriction_reason = v }
func (m *TLmessage) Getrestriction_reason() []*RestrictionReason  { return m.data.restriction_reason }
func (m *TLmessageService) Setout(v bool)                         { m.data.out = v }
func (m *TLmessageService) Getout() bool                          { return m.data.out }
func (m *TLmessageService) Setmentioned(v bool)                   { m.data.mentioned = v }
func (m *TLmessageService) Getmentioned() bool                    { return m.data.mentioned }
func (m *TLmessageService) Setmedia_unread(v bool)                { m.data.media_unread = v }
func (m *TLmessageService) Getmedia_unread() bool                 { return m.data.media_unread }
func (m *TLmessageService) Setsilent(v bool)                      { m.data.silent = v }
func (m *TLmessageService) Getsilent() bool                       { return m.data.silent }
func (m *TLmessageService) Setpost(v bool)                        { m.data.post = v }
func (m *TLmessageService) Getpost() bool                         { return m.data.post }
func (m *TLmessageService) Setlegacy(v bool)                      { m.data.legacy = v }
func (m *TLmessageService) Getlegacy() bool                       { return m.data.legacy }
func (m *TLmessageService) Setid(v int32)                         { m.data.id = v }
func (m *TLmessageService) Getid() int32                          { return m.data.id }
func (m *TLmessageService) Setfrom_id(v *Peer)                    { m.data.from_id = v }
func (m *TLmessageService) Getfrom_id() *Peer                     { return m.data.from_id }
func (m *TLmessageService) Setpeer_id(v *Peer)                    { m.data.peer_id = v }
func (m *TLmessageService) Getpeer_id() *Peer                     { return m.data.peer_id }
func (m *TLmessageService) Setreply_to(v *MessageReplyHeader)     { m.data.reply_to = v }
func (m *TLmessageService) Getreply_to() *MessageReplyHeader      { return m.data.reply_to }
func (m *TLmessageService) Setdate(v int32)                       { m.data.date = v }
func (m *TLmessageService) Getdate() int32                        { return m.data.date }
func (m *TLmessageService) Setaction(v *MessageAction)            { m.data.action = v }
func (m *TLmessageService) Getaction() *MessageAction             { return m.data.action }

///////////////////////////////////////////////////////////////////////////////
// Constructors:EncryptedFile
// EncryptedFile <--
// + TLencryptedFileEmpty
// + TLencryptedFile
//
// Constructors:Type:EncryptedFile
type EncryptedFile struct {
	constructor int32
	data        *EncryptedFile_Data
}

// Constructors:Type:Data:EncryptedFile
type EncryptedFile_Data struct {
	id              int64
	access_hash     int64
	size            int32
	dc_id           int32
	key_fingerprint int32
}

// Constructors:Predicate:encryptedFileEmpty
type TLencryptedFileEmpty struct {
	data *EncryptedFile_Data
}

// Constructors:New:encryptedFileEmpty
func NewTLencryptedFileEmpty() *TLencryptedFileEmpty {
	return &TLencryptedFileEmpty{data: &EncryptedFile_Data{}}
}

// Constructors:Predicate:encryptedFile
type TLencryptedFile struct {
	data *EncryptedFile_Data
}

// Constructors:New:encryptedFile
func NewTLencryptedFile() *TLencryptedFile {
	return &TLencryptedFile{data: &EncryptedFile_Data{}}
}
func (m *TLencryptedFile) Setid(v int64)              { m.data.id = v }
func (m *TLencryptedFile) Getid() int64               { return m.data.id }
func (m *TLencryptedFile) Setaccess_hash(v int64)     { m.data.access_hash = v }
func (m *TLencryptedFile) Getaccess_hash() int64      { return m.data.access_hash }
func (m *TLencryptedFile) Setsize(v int32)            { m.data.size = v }
func (m *TLencryptedFile) Getsize() int32             { return m.data.size }
func (m *TLencryptedFile) Setdc_id(v int32)           { m.data.dc_id = v }
func (m *TLencryptedFile) Getdc_id() int32            { return m.data.dc_id }
func (m *TLencryptedFile) Setkey_fingerprint(v int32) { m.data.key_fingerprint = v }
func (m *TLencryptedFile) Getkey_fingerprint() int32  { return m.data.key_fingerprint }

///////////////////////////////////////////////////////////////////////////////
// Constructors:account_Password
// account_Password <--
// + TLaccount_password
//
// Constructors:Type:account_Password
type account_Password struct {
	constructor int32
	data        *account_Password_Data
}

// Constructors:Type:Data:account_Password
type account_Password_Data struct {
	has_recovery              bool
	has_secure_values         bool
	has_password              bool
	current_algo              *PasswordKdfAlgo
	srp_B                     []byte
	srp_id                    int64
	hint                      string
	email_unconfirmed_pattern string
	new_algo                  *PasswordKdfAlgo
	new_secure_algo           *SecurePasswordKdfAlgo
	secure_random             []byte
}

// Constructors:Predicate:account_password
type TLaccount_password struct {
	data *account_Password_Data
}

// Constructors:New:account_password
func NewTLaccount_password() *TLaccount_password {
	return &TLaccount_password{data: &account_Password_Data{}}
}
func (m *TLaccount_password) Sethas_recovery(v bool)             { m.data.has_recovery = v }
func (m *TLaccount_password) Gethas_recovery() bool              { return m.data.has_recovery }
func (m *TLaccount_password) Sethas_secure_values(v bool)        { m.data.has_secure_values = v }
func (m *TLaccount_password) Gethas_secure_values() bool         { return m.data.has_secure_values }
func (m *TLaccount_password) Sethas_password(v bool)             { m.data.has_password = v }
func (m *TLaccount_password) Gethas_password() bool              { return m.data.has_password }
func (m *TLaccount_password) Setcurrent_algo(v *PasswordKdfAlgo) { m.data.current_algo = v }
func (m *TLaccount_password) Getcurrent_algo() *PasswordKdfAlgo  { return m.data.current_algo }
func (m *TLaccount_password) Setsrp_B(v []byte)                  { m.data.srp_B = v }
func (m *TLaccount_password) Getsrp_B() []byte                   { return m.data.srp_B }
func (m *TLaccount_password) Setsrp_id(v int64)                  { m.data.srp_id = v }
func (m *TLaccount_password) Getsrp_id() int64                   { return m.data.srp_id }
func (m *TLaccount_password) Sethint(v string)                   { m.data.hint = v }
func (m *TLaccount_password) Gethint() string                    { return m.data.hint }
func (m *TLaccount_password) Setemail_unconfirmed_pattern(v string) {
	m.data.email_unconfirmed_pattern = v
}
func (m *TLaccount_password) Getemail_unconfirmed_pattern() string {
	return m.data.email_unconfirmed_pattern
}
func (m *TLaccount_password) Setnew_algo(v *PasswordKdfAlgo)              { m.data.new_algo = v }
func (m *TLaccount_password) Getnew_algo() *PasswordKdfAlgo               { return m.data.new_algo }
func (m *TLaccount_password) Setnew_secure_algo(v *SecurePasswordKdfAlgo) { m.data.new_secure_algo = v }
func (m *TLaccount_password) Getnew_secure_algo() *SecurePasswordKdfAlgo {
	return m.data.new_secure_algo
}
func (m *TLaccount_password) Setsecure_random(v []byte) { m.data.secure_random = v }
func (m *TLaccount_password) Getsecure_random() []byte  { return m.data.secure_random }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputStickeredMedia
// InputStickeredMedia <--
// + TLinputStickeredMediaPhoto
// + TLinputStickeredMediaDocument
//
// Constructors:Type:InputStickeredMedia
type InputStickeredMedia struct {
	constructor int32
	data        *InputStickeredMedia_Data
}

// Constructors:Type:Data:InputStickeredMedia
type InputStickeredMedia_Data struct {
	id   *InputPhoto
	id_2 *InputDocument
}

// Constructors:Predicate:inputStickeredMediaPhoto
type TLinputStickeredMediaPhoto struct {
	data *InputStickeredMedia_Data
}

// Constructors:New:inputStickeredMediaPhoto
func NewTLinputStickeredMediaPhoto() *TLinputStickeredMediaPhoto {
	return &TLinputStickeredMediaPhoto{data: &InputStickeredMedia_Data{}}
}

// Constructors:Predicate:inputStickeredMediaDocument
type TLinputStickeredMediaDocument struct {
	data *InputStickeredMedia_Data
}

// Constructors:New:inputStickeredMediaDocument
func NewTLinputStickeredMediaDocument() *TLinputStickeredMediaDocument {
	return &TLinputStickeredMediaDocument{data: &InputStickeredMedia_Data{}}
}
func (m *TLinputStickeredMediaPhoto) Setid(v *InputPhoto)         { m.data.id = v }
func (m *TLinputStickeredMediaPhoto) Getid() *InputPhoto          { return m.data.id }
func (m *TLinputStickeredMediaDocument) Setid_2(v *InputDocument) { m.data.id_2 = v }
func (m *TLinputStickeredMediaDocument) Getid_2() *InputDocument  { return m.data.id_2 }

///////////////////////////////////////////////////////////////////////////////
// Constructors:GlobalPrivacySettings
// GlobalPrivacySettings <--
// + TLglobalPrivacySettings
//
// Constructors:Type:GlobalPrivacySettings
type GlobalPrivacySettings struct {
	constructor int32
	data        *GlobalPrivacySettings_Data
}

// Constructors:Type:Data:GlobalPrivacySettings
type GlobalPrivacySettings_Data struct {
	archive_and_mute_new_noncontact_peers *Bool
}

// Constructors:Predicate:globalPrivacySettings
type TLglobalPrivacySettings struct {
	data *GlobalPrivacySettings_Data
}

// Constructors:New:globalPrivacySettings
func NewTLglobalPrivacySettings() *TLglobalPrivacySettings {
	return &TLglobalPrivacySettings{data: &GlobalPrivacySettings_Data{}}
}
func (m *TLglobalPrivacySettings) Setarchive_and_mute_new_noncontact_peers(v *Bool) {
	m.data.archive_and_mute_new_noncontact_peers = v
}
func (m *TLglobalPrivacySettings) Getarchive_and_mute_new_noncontact_peers() *Bool {
	return m.data.archive_and_mute_new_noncontact_peers
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:PeerNotifySettings
// PeerNotifySettings <--
// + TLpeerNotifySettings
//
// Constructors:Type:PeerNotifySettings
type PeerNotifySettings struct {
	constructor int32
	data        *PeerNotifySettings_Data
}

// Constructors:Type:Data:PeerNotifySettings
type PeerNotifySettings_Data struct {
	show_previews *Bool
	silent        *Bool
	mute_until    int32
	sound         string
}

// Constructors:Predicate:peerNotifySettings
type TLpeerNotifySettings struct {
	data *PeerNotifySettings_Data
}

// Constructors:New:peerNotifySettings
func NewTLpeerNotifySettings() *TLpeerNotifySettings {
	return &TLpeerNotifySettings{data: &PeerNotifySettings_Data{}}
}
func (m *TLpeerNotifySettings) Setshow_previews(v *Bool) { m.data.show_previews = v }
func (m *TLpeerNotifySettings) Getshow_previews() *Bool  { return m.data.show_previews }
func (m *TLpeerNotifySettings) Setsilent(v *Bool)        { m.data.silent = v }
func (m *TLpeerNotifySettings) Getsilent() *Bool         { return m.data.silent }
func (m *TLpeerNotifySettings) Setmute_until(v int32)    { m.data.mute_until = v }
func (m *TLpeerNotifySettings) Getmute_until() int32     { return m.data.mute_until }
func (m *TLpeerNotifySettings) Setsound(v string)        { m.data.sound = v }
func (m *TLpeerNotifySettings) Getsound() string         { return m.data.sound }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ChannelParticipantsFilter
// ChannelParticipantsFilter <--
// + TLchannelParticipantsRecent
// + TLchannelParticipantsAdmins
// + TLchannelParticipantsKicked
// + TLchannelParticipantsBots
// + TLchannelParticipantsBanned
// + TLchannelParticipantsSearch
// + TLchannelParticipantsContacts
// + TLchannelParticipantsMentions
//
// Constructors:Type:ChannelParticipantsFilter
type ChannelParticipantsFilter struct {
	constructor int32
	data        *ChannelParticipantsFilter_Data
}

// Constructors:Type:Data:ChannelParticipantsFilter
type ChannelParticipantsFilter_Data struct {
	q          string
	top_msg_id int32
}

// Constructors:Predicate:channelParticipantsRecent
type TLchannelParticipantsRecent struct {
	data *ChannelParticipantsFilter_Data
}

// Constructors:New:channelParticipantsRecent
func NewTLchannelParticipantsRecent() *TLchannelParticipantsRecent {
	return &TLchannelParticipantsRecent{data: &ChannelParticipantsFilter_Data{}}
}

// Constructors:Predicate:channelParticipantsAdmins
type TLchannelParticipantsAdmins struct {
	data *ChannelParticipantsFilter_Data
}

// Constructors:New:channelParticipantsAdmins
func NewTLchannelParticipantsAdmins() *TLchannelParticipantsAdmins {
	return &TLchannelParticipantsAdmins{data: &ChannelParticipantsFilter_Data{}}
}

// Constructors:Predicate:channelParticipantsKicked
type TLchannelParticipantsKicked struct {
	data *ChannelParticipantsFilter_Data
}

// Constructors:New:channelParticipantsKicked
func NewTLchannelParticipantsKicked() *TLchannelParticipantsKicked {
	return &TLchannelParticipantsKicked{data: &ChannelParticipantsFilter_Data{}}
}

// Constructors:Predicate:channelParticipantsBots
type TLchannelParticipantsBots struct {
	data *ChannelParticipantsFilter_Data
}

// Constructors:New:channelParticipantsBots
func NewTLchannelParticipantsBots() *TLchannelParticipantsBots {
	return &TLchannelParticipantsBots{data: &ChannelParticipantsFilter_Data{}}
}

// Constructors:Predicate:channelParticipantsBanned
type TLchannelParticipantsBanned struct {
	data *ChannelParticipantsFilter_Data
}

// Constructors:New:channelParticipantsBanned
func NewTLchannelParticipantsBanned() *TLchannelParticipantsBanned {
	return &TLchannelParticipantsBanned{data: &ChannelParticipantsFilter_Data{}}
}

// Constructors:Predicate:channelParticipantsSearch
type TLchannelParticipantsSearch struct {
	data *ChannelParticipantsFilter_Data
}

// Constructors:New:channelParticipantsSearch
func NewTLchannelParticipantsSearch() *TLchannelParticipantsSearch {
	return &TLchannelParticipantsSearch{data: &ChannelParticipantsFilter_Data{}}
}

// Constructors:Predicate:channelParticipantsContacts
type TLchannelParticipantsContacts struct {
	data *ChannelParticipantsFilter_Data
}

// Constructors:New:channelParticipantsContacts
func NewTLchannelParticipantsContacts() *TLchannelParticipantsContacts {
	return &TLchannelParticipantsContacts{data: &ChannelParticipantsFilter_Data{}}
}

// Constructors:Predicate:channelParticipantsMentions
type TLchannelParticipantsMentions struct {
	data *ChannelParticipantsFilter_Data
}

// Constructors:New:channelParticipantsMentions
func NewTLchannelParticipantsMentions() *TLchannelParticipantsMentions {
	return &TLchannelParticipantsMentions{data: &ChannelParticipantsFilter_Data{}}
}
func (m *TLchannelParticipantsKicked) Setq(v string)           { m.data.q = v }
func (m *TLchannelParticipantsKicked) Getq() string            { return m.data.q }
func (m *TLchannelParticipantsBanned) Setq(v string)           { m.data.q = v }
func (m *TLchannelParticipantsBanned) Getq() string            { return m.data.q }
func (m *TLchannelParticipantsSearch) Setq(v string)           { m.data.q = v }
func (m *TLchannelParticipantsSearch) Getq() string            { return m.data.q }
func (m *TLchannelParticipantsContacts) Setq(v string)         { m.data.q = v }
func (m *TLchannelParticipantsContacts) Getq() string          { return m.data.q }
func (m *TLchannelParticipantsMentions) Setq(v string)         { m.data.q = v }
func (m *TLchannelParticipantsMentions) Getq() string          { return m.data.q }
func (m *TLchannelParticipantsMentions) Settop_msg_id(v int32) { m.data.top_msg_id = v }
func (m *TLchannelParticipantsMentions) Gettop_msg_id() int32  { return m.data.top_msg_id }

///////////////////////////////////////////////////////////////////////////////
// Constructors:auth_SentCodeType
// auth_SentCodeType <--
// + TLauth_sentCodeTypeApp
// + TLauth_sentCodeTypeSms
// + TLauth_sentCodeTypeCall
// + TLauth_sentCodeTypeFlashCall
//
// Constructors:Type:auth_SentCodeType
type auth_SentCodeType struct {
	constructor int32
	data        *auth_SentCodeType_Data
}

// Constructors:Type:Data:auth_SentCodeType
type auth_SentCodeType_Data struct {
	length  int32
	pattern string
}

// Constructors:Predicate:auth_sentCodeTypeApp
type TLauth_sentCodeTypeApp struct {
	data *auth_SentCodeType_Data
}

// Constructors:New:auth_sentCodeTypeApp
func NewTLauth_sentCodeTypeApp() *TLauth_sentCodeTypeApp {
	return &TLauth_sentCodeTypeApp{data: &auth_SentCodeType_Data{}}
}

// Constructors:Predicate:auth_sentCodeTypeSms
type TLauth_sentCodeTypeSms struct {
	data *auth_SentCodeType_Data
}

// Constructors:New:auth_sentCodeTypeSms
func NewTLauth_sentCodeTypeSms() *TLauth_sentCodeTypeSms {
	return &TLauth_sentCodeTypeSms{data: &auth_SentCodeType_Data{}}
}

// Constructors:Predicate:auth_sentCodeTypeCall
type TLauth_sentCodeTypeCall struct {
	data *auth_SentCodeType_Data
}

// Constructors:New:auth_sentCodeTypeCall
func NewTLauth_sentCodeTypeCall() *TLauth_sentCodeTypeCall {
	return &TLauth_sentCodeTypeCall{data: &auth_SentCodeType_Data{}}
}

// Constructors:Predicate:auth_sentCodeTypeFlashCall
type TLauth_sentCodeTypeFlashCall struct {
	data *auth_SentCodeType_Data
}

// Constructors:New:auth_sentCodeTypeFlashCall
func NewTLauth_sentCodeTypeFlashCall() *TLauth_sentCodeTypeFlashCall {
	return &TLauth_sentCodeTypeFlashCall{data: &auth_SentCodeType_Data{}}
}
func (m *TLauth_sentCodeTypeApp) Setlength(v int32)         { m.data.length = v }
func (m *TLauth_sentCodeTypeApp) Getlength() int32          { return m.data.length }
func (m *TLauth_sentCodeTypeSms) Setlength(v int32)         { m.data.length = v }
func (m *TLauth_sentCodeTypeSms) Getlength() int32          { return m.data.length }
func (m *TLauth_sentCodeTypeCall) Setlength(v int32)        { m.data.length = v }
func (m *TLauth_sentCodeTypeCall) Getlength() int32         { return m.data.length }
func (m *TLauth_sentCodeTypeFlashCall) Setpattern(v string) { m.data.pattern = v }
func (m *TLauth_sentCodeTypeFlashCall) Getpattern() string  { return m.data.pattern }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_AffectedHistory
// messages_AffectedHistory <--
// + TLmessages_affectedHistory
//
// Constructors:Type:messages_AffectedHistory
type messages_AffectedHistory struct {
	constructor int32
	data        *messages_AffectedHistory_Data
}

// Constructors:Type:Data:messages_AffectedHistory
type messages_AffectedHistory_Data struct {
	pts       int32
	pts_count int32
	offset    int32
}

// Constructors:Predicate:messages_affectedHistory
type TLmessages_affectedHistory struct {
	data *messages_AffectedHistory_Data
}

// Constructors:New:messages_affectedHistory
func NewTLmessages_affectedHistory() *TLmessages_affectedHistory {
	return &TLmessages_affectedHistory{data: &messages_AffectedHistory_Data{}}
}
func (m *TLmessages_affectedHistory) Setpts(v int32)       { m.data.pts = v }
func (m *TLmessages_affectedHistory) Getpts() int32        { return m.data.pts }
func (m *TLmessages_affectedHistory) Setpts_count(v int32) { m.data.pts_count = v }
func (m *TLmessages_affectedHistory) Getpts_count() int32  { return m.data.pts_count }
func (m *TLmessages_affectedHistory) Setoffset(v int32)    { m.data.offset = v }
func (m *TLmessages_affectedHistory) Getoffset() int32     { return m.data.offset }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PeerSettings
// PeerSettings <--
// + TLpeerSettings
//
// Constructors:Type:PeerSettings
type PeerSettings struct {
	constructor int32
	data        *PeerSettings_Data
}

// Constructors:Type:Data:PeerSettings
type PeerSettings_Data struct {
	report_spam             bool
	add_contact             bool
	block_contact           bool
	share_contact           bool
	need_contacts_exception bool
	report_geo              bool
	autoarchived            bool
	geo_distance            int32
}

// Constructors:Predicate:peerSettings
type TLpeerSettings struct {
	data *PeerSettings_Data
}

// Constructors:New:peerSettings
func NewTLpeerSettings() *TLpeerSettings {
	return &TLpeerSettings{data: &PeerSettings_Data{}}
}
func (m *TLpeerSettings) Setreport_spam(v bool)             { m.data.report_spam = v }
func (m *TLpeerSettings) Getreport_spam() bool              { return m.data.report_spam }
func (m *TLpeerSettings) Setadd_contact(v bool)             { m.data.add_contact = v }
func (m *TLpeerSettings) Getadd_contact() bool              { return m.data.add_contact }
func (m *TLpeerSettings) Setblock_contact(v bool)           { m.data.block_contact = v }
func (m *TLpeerSettings) Getblock_contact() bool            { return m.data.block_contact }
func (m *TLpeerSettings) Setshare_contact(v bool)           { m.data.share_contact = v }
func (m *TLpeerSettings) Getshare_contact() bool            { return m.data.share_contact }
func (m *TLpeerSettings) Setneed_contacts_exception(v bool) { m.data.need_contacts_exception = v }
func (m *TLpeerSettings) Getneed_contacts_exception() bool  { return m.data.need_contacts_exception }
func (m *TLpeerSettings) Setreport_geo(v bool)              { m.data.report_geo = v }
func (m *TLpeerSettings) Getreport_geo() bool               { return m.data.report_geo }
func (m *TLpeerSettings) Setautoarchived(v bool)            { m.data.autoarchived = v }
func (m *TLpeerSettings) Getautoarchived() bool             { return m.data.autoarchived }
func (m *TLpeerSettings) Setgeo_distance(v int32)           { m.data.geo_distance = v }
func (m *TLpeerSettings) Getgeo_distance() int32            { return m.data.geo_distance }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputPhoto
// InputPhoto <--
// + TLinputPhotoEmpty
// + TLinputPhoto
//
// Constructors:Type:InputPhoto
type InputPhoto struct {
	constructor int32
	data        *InputPhoto_Data
}

// Constructors:Type:Data:InputPhoto
type InputPhoto_Data struct {
	id             int64
	access_hash    int64
	file_reference []byte
}

// Constructors:Predicate:inputPhotoEmpty
type TLinputPhotoEmpty struct {
	data *InputPhoto_Data
}

// Constructors:New:inputPhotoEmpty
func NewTLinputPhotoEmpty() *TLinputPhotoEmpty {
	return &TLinputPhotoEmpty{data: &InputPhoto_Data{}}
}

// Constructors:Predicate:inputPhoto
type TLinputPhoto struct {
	data *InputPhoto_Data
}

// Constructors:New:inputPhoto
func NewTLinputPhoto() *TLinputPhoto {
	return &TLinputPhoto{data: &InputPhoto_Data{}}
}
func (m *TLinputPhoto) Setid(v int64)              { m.data.id = v }
func (m *TLinputPhoto) Getid() int64               { return m.data.id }
func (m *TLinputPhoto) Setaccess_hash(v int64)     { m.data.access_hash = v }
func (m *TLinputPhoto) Getaccess_hash() int64      { return m.data.access_hash }
func (m *TLinputPhoto) Setfile_reference(v []byte) { m.data.file_reference = v }
func (m *TLinputPhoto) Getfile_reference() []byte  { return m.data.file_reference }

///////////////////////////////////////////////////////////////////////////////
// Constructors:ChatParticipant
// ChatParticipant <--
// + TLchatParticipant
// + TLchatParticipantCreator
// + TLchatParticipantAdmin
//
// Constructors:Type:ChatParticipant
type ChatParticipant struct {
	constructor int32
	data        *ChatParticipant_Data
}

// Constructors:Type:Data:ChatParticipant
type ChatParticipant_Data struct {
	user_id    int32
	inviter_id int32
	date       int32
}

// Constructors:Predicate:chatParticipant
type TLchatParticipant struct {
	data *ChatParticipant_Data
}

// Constructors:New:chatParticipant
func NewTLchatParticipant() *TLchatParticipant {
	return &TLchatParticipant{data: &ChatParticipant_Data{}}
}

// Constructors:Predicate:chatParticipantCreator
type TLchatParticipantCreator struct {
	data *ChatParticipant_Data
}

// Constructors:New:chatParticipantCreator
func NewTLchatParticipantCreator() *TLchatParticipantCreator {
	return &TLchatParticipantCreator{data: &ChatParticipant_Data{}}
}

// Constructors:Predicate:chatParticipantAdmin
type TLchatParticipantAdmin struct {
	data *ChatParticipant_Data
}

// Constructors:New:chatParticipantAdmin
func NewTLchatParticipantAdmin() *TLchatParticipantAdmin {
	return &TLchatParticipantAdmin{data: &ChatParticipant_Data{}}
}
func (m *TLchatParticipant) Setuser_id(v int32)         { m.data.user_id = v }
func (m *TLchatParticipant) Getuser_id() int32          { return m.data.user_id }
func (m *TLchatParticipant) Setinviter_id(v int32)      { m.data.inviter_id = v }
func (m *TLchatParticipant) Getinviter_id() int32       { return m.data.inviter_id }
func (m *TLchatParticipant) Setdate(v int32)            { m.data.date = v }
func (m *TLchatParticipant) Getdate() int32             { return m.data.date }
func (m *TLchatParticipantCreator) Setuser_id(v int32)  { m.data.user_id = v }
func (m *TLchatParticipantCreator) Getuser_id() int32   { return m.data.user_id }
func (m *TLchatParticipantAdmin) Setuser_id(v int32)    { m.data.user_id = v }
func (m *TLchatParticipantAdmin) Getuser_id() int32     { return m.data.user_id }
func (m *TLchatParticipantAdmin) Setinviter_id(v int32) { m.data.inviter_id = v }
func (m *TLchatParticipantAdmin) Getinviter_id() int32  { return m.data.inviter_id }
func (m *TLchatParticipantAdmin) Setdate(v int32)       { m.data.date = v }
func (m *TLchatParticipantAdmin) Getdate() int32        { return m.data.date }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_Stickers
// messages_Stickers <--
// + TLmessages_stickersNotModified
// + TLmessages_stickers
//
// Constructors:Type:messages_Stickers
type messages_Stickers struct {
	constructor int32
	data        *messages_Stickers_Data
}

// Constructors:Type:Data:messages_Stickers
type messages_Stickers_Data struct {
	hash     int32
	stickers []*Document
}

// Constructors:Predicate:messages_stickersNotModified
type TLmessages_stickersNotModified struct {
	data *messages_Stickers_Data
}

// Constructors:New:messages_stickersNotModified
func NewTLmessages_stickersNotModified() *TLmessages_stickersNotModified {
	return &TLmessages_stickersNotModified{data: &messages_Stickers_Data{}}
}

// Constructors:Predicate:messages_stickers
type TLmessages_stickers struct {
	data *messages_Stickers_Data
}

// Constructors:New:messages_stickers
func NewTLmessages_stickers() *TLmessages_stickers {
	return &TLmessages_stickers{data: &messages_Stickers_Data{}}
}
func (m *TLmessages_stickers) Sethash(v int32)           { m.data.hash = v }
func (m *TLmessages_stickers) Gethash() int32            { return m.data.hash }
func (m *TLmessages_stickers) Setstickers(v []*Document) { m.data.stickers = v }
func (m *TLmessages_stickers) Getstickers() []*Document  { return m.data.stickers }

///////////////////////////////////////////////////////////////////////////////
// Constructors:contacts_Contacts
// contacts_Contacts <--
// + TLcontacts_contactsNotModified
// + TLcontacts_contacts
//
// Constructors:Type:contacts_Contacts
type contacts_Contacts struct {
	constructor int32
	data        *contacts_Contacts_Data
}

// Constructors:Type:Data:contacts_Contacts
type contacts_Contacts_Data struct {
	contacts    []*Contact
	saved_count int32
	users       []*User
}

// Constructors:Predicate:contacts_contactsNotModified
type TLcontacts_contactsNotModified struct {
	data *contacts_Contacts_Data
}

// Constructors:New:contacts_contactsNotModified
func NewTLcontacts_contactsNotModified() *TLcontacts_contactsNotModified {
	return &TLcontacts_contactsNotModified{data: &contacts_Contacts_Data{}}
}

// Constructors:Predicate:contacts_contacts
type TLcontacts_contacts struct {
	data *contacts_Contacts_Data
}

// Constructors:New:contacts_contacts
func NewTLcontacts_contacts() *TLcontacts_contacts {
	return &TLcontacts_contacts{data: &contacts_Contacts_Data{}}
}
func (m *TLcontacts_contacts) Setcontacts(v []*Contact) { m.data.contacts = v }
func (m *TLcontacts_contacts) Getcontacts() []*Contact  { return m.data.contacts }
func (m *TLcontacts_contacts) Setsaved_count(v int32)   { m.data.saved_count = v }
func (m *TLcontacts_contacts) Getsaved_count() int32    { return m.data.saved_count }
func (m *TLcontacts_contacts) Setusers(v []*User)       { m.data.users = v }
func (m *TLcontacts_contacts) Getusers() []*User        { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_SavedGifs
// messages_SavedGifs <--
// + TLmessages_savedGifsNotModified
// + TLmessages_savedGifs
//
// Constructors:Type:messages_SavedGifs
type messages_SavedGifs struct {
	constructor int32
	data        *messages_SavedGifs_Data
}

// Constructors:Type:Data:messages_SavedGifs
type messages_SavedGifs_Data struct {
	hash int32
	gifs []*Document
}

// Constructors:Predicate:messages_savedGifsNotModified
type TLmessages_savedGifsNotModified struct {
	data *messages_SavedGifs_Data
}

// Constructors:New:messages_savedGifsNotModified
func NewTLmessages_savedGifsNotModified() *TLmessages_savedGifsNotModified {
	return &TLmessages_savedGifsNotModified{data: &messages_SavedGifs_Data{}}
}

// Constructors:Predicate:messages_savedGifs
type TLmessages_savedGifs struct {
	data *messages_SavedGifs_Data
}

// Constructors:New:messages_savedGifs
func NewTLmessages_savedGifs() *TLmessages_savedGifs {
	return &TLmessages_savedGifs{data: &messages_SavedGifs_Data{}}
}
func (m *TLmessages_savedGifs) Sethash(v int32)       { m.data.hash = v }
func (m *TLmessages_savedGifs) Gethash() int32        { return m.data.hash }
func (m *TLmessages_savedGifs) Setgifs(v []*Document) { m.data.gifs = v }
func (m *TLmessages_savedGifs) Getgifs() []*Document  { return m.data.gifs }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InlineBotSwitchPM
// InlineBotSwitchPM <--
// + TLinlineBotSwitchPM
//
// Constructors:Type:InlineBotSwitchPM
type InlineBotSwitchPM struct {
	constructor int32
	data        *InlineBotSwitchPM_Data
}

// Constructors:Type:Data:InlineBotSwitchPM
type InlineBotSwitchPM_Data struct {
	text        string
	start_param string
}

// Constructors:Predicate:inlineBotSwitchPM
type TLinlineBotSwitchPM struct {
	data *InlineBotSwitchPM_Data
}

// Constructors:New:inlineBotSwitchPM
func NewTLinlineBotSwitchPM() *TLinlineBotSwitchPM {
	return &TLinlineBotSwitchPM{data: &InlineBotSwitchPM_Data{}}
}
func (m *TLinlineBotSwitchPM) Settext(v string)        { m.data.text = v }
func (m *TLinlineBotSwitchPM) Gettext() string         { return m.data.text }
func (m *TLinlineBotSwitchPM) Setstart_param(v string) { m.data.start_param = v }
func (m *TLinlineBotSwitchPM) Getstart_param() string  { return m.data.start_param }

///////////////////////////////////////////////////////////////////////////////
// Constructors:BotInfo
// BotInfo <--
// + TLbotInfo
//
// Constructors:Type:BotInfo
type BotInfo struct {
	constructor int32
	data        *BotInfo_Data
}

// Constructors:Type:Data:BotInfo
type BotInfo_Data struct {
	user_id     int32
	description string
	commands    []*BotCommand
}

// Constructors:Predicate:botInfo
type TLbotInfo struct {
	data *BotInfo_Data
}

// Constructors:New:botInfo
func NewTLbotInfo() *TLbotInfo {
	return &TLbotInfo{data: &BotInfo_Data{}}
}
func (m *TLbotInfo) Setuser_id(v int32)          { m.data.user_id = v }
func (m *TLbotInfo) Getuser_id() int32           { return m.data.user_id }
func (m *TLbotInfo) Setdescription(v string)     { m.data.description = v }
func (m *TLbotInfo) Getdescription() string      { return m.data.description }
func (m *TLbotInfo) Setcommands(v []*BotCommand) { m.data.commands = v }
func (m *TLbotInfo) Getcommands() []*BotCommand  { return m.data.commands }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PaymentRequestedInfo
// PaymentRequestedInfo <--
// + TLpaymentRequestedInfo
//
// Constructors:Type:PaymentRequestedInfo
type PaymentRequestedInfo struct {
	constructor int32
	data        *PaymentRequestedInfo_Data
}

// Constructors:Type:Data:PaymentRequestedInfo
type PaymentRequestedInfo_Data struct {
	name             string
	phone            string
	email            string
	shipping_address *PostAddress
}

// Constructors:Predicate:paymentRequestedInfo
type TLpaymentRequestedInfo struct {
	data *PaymentRequestedInfo_Data
}

// Constructors:New:paymentRequestedInfo
func NewTLpaymentRequestedInfo() *TLpaymentRequestedInfo {
	return &TLpaymentRequestedInfo{data: &PaymentRequestedInfo_Data{}}
}
func (m *TLpaymentRequestedInfo) Setname(v string)                   { m.data.name = v }
func (m *TLpaymentRequestedInfo) Getname() string                    { return m.data.name }
func (m *TLpaymentRequestedInfo) Setphone(v string)                  { m.data.phone = v }
func (m *TLpaymentRequestedInfo) Getphone() string                   { return m.data.phone }
func (m *TLpaymentRequestedInfo) Setemail(v string)                  { m.data.email = v }
func (m *TLpaymentRequestedInfo) Getemail() string                   { return m.data.email }
func (m *TLpaymentRequestedInfo) Setshipping_address(v *PostAddress) { m.data.shipping_address = v }
func (m *TLpaymentRequestedInfo) Getshipping_address() *PostAddress  { return m.data.shipping_address }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputSecureValue
// InputSecureValue <--
// + TLinputSecureValue
//
// Constructors:Type:InputSecureValue
type InputSecureValue struct {
	constructor int32
	data        *InputSecureValue_Data
}

// Constructors:Type:Data:InputSecureValue
type InputSecureValue_Data struct {
	type_key     *SecureValueType
	data         *SecureData
	front_side   *InputSecureFile
	reverse_side *InputSecureFile
	selfie       *InputSecureFile
	translation  []*InputSecureFile
	files        []*InputSecureFile
	plain_data   *SecurePlainData
}

// Constructors:Predicate:inputSecureValue
type TLinputSecureValue struct {
	data *InputSecureValue_Data
}

// Constructors:New:inputSecureValue
func NewTLinputSecureValue() *TLinputSecureValue {
	return &TLinputSecureValue{data: &InputSecureValue_Data{}}
}
func (m *TLinputSecureValue) Settype_key(v *SecureValueType)      { m.data.type_key = v }
func (m *TLinputSecureValue) Gettype_key() *SecureValueType       { return m.data.type_key }
func (m *TLinputSecureValue) Setdata(v *SecureData)               { m.data.data = v }
func (m *TLinputSecureValue) Getdata() *SecureData                { return m.data.data }
func (m *TLinputSecureValue) Setfront_side(v *InputSecureFile)    { m.data.front_side = v }
func (m *TLinputSecureValue) Getfront_side() *InputSecureFile     { return m.data.front_side }
func (m *TLinputSecureValue) Setreverse_side(v *InputSecureFile)  { m.data.reverse_side = v }
func (m *TLinputSecureValue) Getreverse_side() *InputSecureFile   { return m.data.reverse_side }
func (m *TLinputSecureValue) Setselfie(v *InputSecureFile)        { m.data.selfie = v }
func (m *TLinputSecureValue) Getselfie() *InputSecureFile         { return m.data.selfie }
func (m *TLinputSecureValue) Settranslation(v []*InputSecureFile) { m.data.translation = v }
func (m *TLinputSecureValue) Gettranslation() []*InputSecureFile  { return m.data.translation }
func (m *TLinputSecureValue) Setfiles(v []*InputSecureFile)       { m.data.files = v }
func (m *TLinputSecureValue) Getfiles() []*InputSecureFile        { return m.data.files }
func (m *TLinputSecureValue) Setplain_data(v *SecurePlainData)    { m.data.plain_data = v }
func (m *TLinputSecureValue) Getplain_data() *SecurePlainData     { return m.data.plain_data }

///////////////////////////////////////////////////////////////////////////////
// Constructors:StatsPercentValue
// StatsPercentValue <--
// + TLstatsPercentValue
//
// Constructors:Type:StatsPercentValue
type StatsPercentValue struct {
	constructor int32
	data        *StatsPercentValue_Data
}

// Constructors:Type:Data:StatsPercentValue
type StatsPercentValue_Data struct {
	part  float64
	total float64
}

// Constructors:Predicate:statsPercentValue
type TLstatsPercentValue struct {
	data *StatsPercentValue_Data
}

// Constructors:New:statsPercentValue
func NewTLstatsPercentValue() *TLstatsPercentValue {
	return &TLstatsPercentValue{data: &StatsPercentValue_Data{}}
}
func (m *TLstatsPercentValue) Setpart(v float64)  { m.data.part = v }
func (m *TLstatsPercentValue) Getpart() float64   { return m.data.part }
func (m *TLstatsPercentValue) Settotal(v float64) { m.data.total = v }
func (m *TLstatsPercentValue) Gettotal() float64  { return m.data.total }

///////////////////////////////////////////////////////////////////////////////
// Constructors:contacts_TopPeers
// contacts_TopPeers <--
// + TLcontacts_topPeersNotModified
// + TLcontacts_topPeers
// + TLcontacts_topPeersDisabled
//
// Constructors:Type:contacts_TopPeers
type contacts_TopPeers struct {
	constructor int32
	data        *contacts_TopPeers_Data
}

// Constructors:Type:Data:contacts_TopPeers
type contacts_TopPeers_Data struct {
	categories []*TopPeerCategoryPeers
	chats      []*Chat
	users      []*User
}

// Constructors:Predicate:contacts_topPeersNotModified
type TLcontacts_topPeersNotModified struct {
	data *contacts_TopPeers_Data
}

// Constructors:New:contacts_topPeersNotModified
func NewTLcontacts_topPeersNotModified() *TLcontacts_topPeersNotModified {
	return &TLcontacts_topPeersNotModified{data: &contacts_TopPeers_Data{}}
}

// Constructors:Predicate:contacts_topPeers
type TLcontacts_topPeers struct {
	data *contacts_TopPeers_Data
}

// Constructors:New:contacts_topPeers
func NewTLcontacts_topPeers() *TLcontacts_topPeers {
	return &TLcontacts_topPeers{data: &contacts_TopPeers_Data{}}
}

// Constructors:Predicate:contacts_topPeersDisabled
type TLcontacts_topPeersDisabled struct {
	data *contacts_TopPeers_Data
}

// Constructors:New:contacts_topPeersDisabled
func NewTLcontacts_topPeersDisabled() *TLcontacts_topPeersDisabled {
	return &TLcontacts_topPeersDisabled{data: &contacts_TopPeers_Data{}}
}
func (m *TLcontacts_topPeers) Setcategories(v []*TopPeerCategoryPeers) { m.data.categories = v }
func (m *TLcontacts_topPeers) Getcategories() []*TopPeerCategoryPeers  { return m.data.categories }
func (m *TLcontacts_topPeers) Setchats(v []*Chat)                      { m.data.chats = v }
func (m *TLcontacts_topPeers) Getchats() []*Chat                       { return m.data.chats }
func (m *TLcontacts_topPeers) Setusers(v []*User)                      { m.data.users = v }
func (m *TLcontacts_topPeers) Getusers() []*User                       { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:True
// True <--
// + TLtrue
//
// Constructors:Type:True
type True struct {
	constructor int32
	data        *True_Data
}

// Constructors:Type:Data:True
type True_Data struct {
}

// Constructors:Predicate:true
type TLtrue struct {
	data *True_Data
}

// Constructors:New:true
func NewTLtrue() *TLtrue {
	return &TLtrue{data: &True_Data{}}
}

///////////////////////////////////////////////////////////////////////////////
// Constructors:WebPage
// WebPage <--
// + TLwebPageEmpty
// + TLwebPagePending
// + TLwebPage
// + TLwebPageNotModified
//
// Constructors:Type:WebPage
type WebPage struct {
	constructor int32
	data        *WebPage_Data
}

// Constructors:Type:Data:WebPage
type WebPage_Data struct {
	id                int64
	date              int32
	url               string
	display_url       string
	hash              int32
	type_key          string
	site_name         string
	title             string
	description       string
	photo             *Photo
	embed_url         string
	embed_type        string
	embed_width       int32
	embed_height      int32
	duration          int32
	author            string
	document          *Document
	cached_page       *Page
	attributes        []*WebPageAttribute
	cached_page_views int32
}

// Constructors:Predicate:webPageEmpty
type TLwebPageEmpty struct {
	data *WebPage_Data
}

// Constructors:New:webPageEmpty
func NewTLwebPageEmpty() *TLwebPageEmpty {
	return &TLwebPageEmpty{data: &WebPage_Data{}}
}

// Constructors:Predicate:webPagePending
type TLwebPagePending struct {
	data *WebPage_Data
}

// Constructors:New:webPagePending
func NewTLwebPagePending() *TLwebPagePending {
	return &TLwebPagePending{data: &WebPage_Data{}}
}

// Constructors:Predicate:webPage
type TLwebPage struct {
	data *WebPage_Data
}

// Constructors:New:webPage
func NewTLwebPage() *TLwebPage {
	return &TLwebPage{data: &WebPage_Data{}}
}

// Constructors:Predicate:webPageNotModified
type TLwebPageNotModified struct {
	data *WebPage_Data
}

// Constructors:New:webPageNotModified
func NewTLwebPageNotModified() *TLwebPageNotModified {
	return &TLwebPageNotModified{data: &WebPage_Data{}}
}
func (m *TLwebPageEmpty) Setid(v int64)                      { m.data.id = v }
func (m *TLwebPageEmpty) Getid() int64                       { return m.data.id }
func (m *TLwebPagePending) Setid(v int64)                    { m.data.id = v }
func (m *TLwebPagePending) Getid() int64                     { return m.data.id }
func (m *TLwebPagePending) Setdate(v int32)                  { m.data.date = v }
func (m *TLwebPagePending) Getdate() int32                   { return m.data.date }
func (m *TLwebPage) Setid(v int64)                           { m.data.id = v }
func (m *TLwebPage) Getid() int64                            { return m.data.id }
func (m *TLwebPage) Seturl(v string)                         { m.data.url = v }
func (m *TLwebPage) Geturl() string                          { return m.data.url }
func (m *TLwebPage) Setdisplay_url(v string)                 { m.data.display_url = v }
func (m *TLwebPage) Getdisplay_url() string                  { return m.data.display_url }
func (m *TLwebPage) Sethash(v int32)                         { m.data.hash = v }
func (m *TLwebPage) Gethash() int32                          { return m.data.hash }
func (m *TLwebPage) Settype_key(v string)                    { m.data.type_key = v }
func (m *TLwebPage) Gettype_key() string                     { return m.data.type_key }
func (m *TLwebPage) Setsite_name(v string)                   { m.data.site_name = v }
func (m *TLwebPage) Getsite_name() string                    { return m.data.site_name }
func (m *TLwebPage) Settitle(v string)                       { m.data.title = v }
func (m *TLwebPage) Gettitle() string                        { return m.data.title }
func (m *TLwebPage) Setdescription(v string)                 { m.data.description = v }
func (m *TLwebPage) Getdescription() string                  { return m.data.description }
func (m *TLwebPage) Setphoto(v *Photo)                       { m.data.photo = v }
func (m *TLwebPage) Getphoto() *Photo                        { return m.data.photo }
func (m *TLwebPage) Setembed_url(v string)                   { m.data.embed_url = v }
func (m *TLwebPage) Getembed_url() string                    { return m.data.embed_url }
func (m *TLwebPage) Setembed_type(v string)                  { m.data.embed_type = v }
func (m *TLwebPage) Getembed_type() string                   { return m.data.embed_type }
func (m *TLwebPage) Setembed_width(v int32)                  { m.data.embed_width = v }
func (m *TLwebPage) Getembed_width() int32                   { return m.data.embed_width }
func (m *TLwebPage) Setembed_height(v int32)                 { m.data.embed_height = v }
func (m *TLwebPage) Getembed_height() int32                  { return m.data.embed_height }
func (m *TLwebPage) Setduration(v int32)                     { m.data.duration = v }
func (m *TLwebPage) Getduration() int32                      { return m.data.duration }
func (m *TLwebPage) Setauthor(v string)                      { m.data.author = v }
func (m *TLwebPage) Getauthor() string                       { return m.data.author }
func (m *TLwebPage) Setdocument(v *Document)                 { m.data.document = v }
func (m *TLwebPage) Getdocument() *Document                  { return m.data.document }
func (m *TLwebPage) Setcached_page(v *Page)                  { m.data.cached_page = v }
func (m *TLwebPage) Getcached_page() *Page                   { return m.data.cached_page }
func (m *TLwebPage) Setattributes(v []*WebPageAttribute)     { m.data.attributes = v }
func (m *TLwebPage) Getattributes() []*WebPageAttribute      { return m.data.attributes }
func (m *TLwebPageNotModified) Setcached_page_views(v int32) { m.data.cached_page_views = v }
func (m *TLwebPageNotModified) Getcached_page_views() int32  { return m.data.cached_page_views }

///////////////////////////////////////////////////////////////////////////////
// Constructors:InputWallPaper
// InputWallPaper <--
// + TLinputWallPaper
// + TLinputWallPaperSlug
// + TLinputWallPaperNoFile
//
// Constructors:Type:InputWallPaper
type InputWallPaper struct {
	constructor int32
	data        *InputWallPaper_Data
}

// Constructors:Type:Data:InputWallPaper
type InputWallPaper_Data struct {
	id          int64
	access_hash int64
	slug        string
}

// Constructors:Predicate:inputWallPaper
type TLinputWallPaper struct {
	data *InputWallPaper_Data
}

// Constructors:New:inputWallPaper
func NewTLinputWallPaper() *TLinputWallPaper {
	return &TLinputWallPaper{data: &InputWallPaper_Data{}}
}

// Constructors:Predicate:inputWallPaperSlug
type TLinputWallPaperSlug struct {
	data *InputWallPaper_Data
}

// Constructors:New:inputWallPaperSlug
func NewTLinputWallPaperSlug() *TLinputWallPaperSlug {
	return &TLinputWallPaperSlug{data: &InputWallPaper_Data{}}
}

// Constructors:Predicate:inputWallPaperNoFile
type TLinputWallPaperNoFile struct {
	data *InputWallPaper_Data
}

// Constructors:New:inputWallPaperNoFile
func NewTLinputWallPaperNoFile() *TLinputWallPaperNoFile {
	return &TLinputWallPaperNoFile{data: &InputWallPaper_Data{}}
}
func (m *TLinputWallPaper) Setid(v int64)          { m.data.id = v }
func (m *TLinputWallPaper) Getid() int64           { return m.data.id }
func (m *TLinputWallPaper) Setaccess_hash(v int64) { m.data.access_hash = v }
func (m *TLinputWallPaper) Getaccess_hash() int64  { return m.data.access_hash }
func (m *TLinputWallPaperSlug) Setslug(v string)   { m.data.slug = v }
func (m *TLinputWallPaperSlug) Getslug() string    { return m.data.slug }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PostAddress
// PostAddress <--
// + TLpostAddress
//
// Constructors:Type:PostAddress
type PostAddress struct {
	constructor int32
	data        *PostAddress_Data
}

// Constructors:Type:Data:PostAddress
type PostAddress_Data struct {
	street_line1 string
	street_line2 string
	city         string
	state        string
	country_iso2 string
	post_code    string
}

// Constructors:Predicate:postAddress
type TLpostAddress struct {
	data *PostAddress_Data
}

// Constructors:New:postAddress
func NewTLpostAddress() *TLpostAddress {
	return &TLpostAddress{data: &PostAddress_Data{}}
}
func (m *TLpostAddress) Setstreet_line1(v string) { m.data.street_line1 = v }
func (m *TLpostAddress) Getstreet_line1() string  { return m.data.street_line1 }
func (m *TLpostAddress) Setstreet_line2(v string) { m.data.street_line2 = v }
func (m *TLpostAddress) Getstreet_line2() string  { return m.data.street_line2 }
func (m *TLpostAddress) Setcity(v string)         { m.data.city = v }
func (m *TLpostAddress) Getcity() string          { return m.data.city }
func (m *TLpostAddress) Setstate(v string)        { m.data.state = v }
func (m *TLpostAddress) Getstate() string         { return m.data.state }
func (m *TLpostAddress) Setcountry_iso2(v string) { m.data.country_iso2 = v }
func (m *TLpostAddress) Getcountry_iso2() string  { return m.data.country_iso2 }
func (m *TLpostAddress) Setpost_code(v string)    { m.data.post_code = v }
func (m *TLpostAddress) Getpost_code() string     { return m.data.post_code }

///////////////////////////////////////////////////////////////////////////////
// Constructors:CdnPublicKey
// CdnPublicKey <--
// + TLcdnPublicKey
//
// Constructors:Type:CdnPublicKey
type CdnPublicKey struct {
	constructor int32
	data        *CdnPublicKey_Data
}

// Constructors:Type:Data:CdnPublicKey
type CdnPublicKey_Data struct {
	dc_id      int32
	public_key string
}

// Constructors:Predicate:cdnPublicKey
type TLcdnPublicKey struct {
	data *CdnPublicKey_Data
}

// Constructors:New:cdnPublicKey
func NewTLcdnPublicKey() *TLcdnPublicKey {
	return &TLcdnPublicKey{data: &CdnPublicKey_Data{}}
}
func (m *TLcdnPublicKey) Setdc_id(v int32)       { m.data.dc_id = v }
func (m *TLcdnPublicKey) Getdc_id() int32        { return m.data.dc_id }
func (m *TLcdnPublicKey) Setpublic_key(v string) { m.data.public_key = v }
func (m *TLcdnPublicKey) Getpublic_key() string  { return m.data.public_key }

///////////////////////////////////////////////////////////////////////////////
// Constructors:RestrictionReason
// RestrictionReason <--
// + TLrestrictionReason
//
// Constructors:Type:RestrictionReason
type RestrictionReason struct {
	constructor int32
	data        *RestrictionReason_Data
}

// Constructors:Type:Data:RestrictionReason
type RestrictionReason_Data struct {
	platform string
	reason   string
	text     string
}

// Constructors:Predicate:restrictionReason
type TLrestrictionReason struct {
	data *RestrictionReason_Data
}

// Constructors:New:restrictionReason
func NewTLrestrictionReason() *TLrestrictionReason {
	return &TLrestrictionReason{data: &RestrictionReason_Data{}}
}
func (m *TLrestrictionReason) Setplatform(v string) { m.data.platform = v }
func (m *TLrestrictionReason) Getplatform() string  { return m.data.platform }
func (m *TLrestrictionReason) Setreason(v string)   { m.data.reason = v }
func (m *TLrestrictionReason) Getreason() string    { return m.data.reason }
func (m *TLrestrictionReason) Settext(v string)     { m.data.text = v }
func (m *TLrestrictionReason) Gettext() string      { return m.data.text }

///////////////////////////////////////////////////////////////////////////////
// Constructors:PageRelatedArticle
// PageRelatedArticle <--
// + TLpageRelatedArticle
//
// Constructors:Type:PageRelatedArticle
type PageRelatedArticle struct {
	constructor int32
	data        *PageRelatedArticle_Data
}

// Constructors:Type:Data:PageRelatedArticle
type PageRelatedArticle_Data struct {
	url            string
	webpage_id     int64
	title          string
	description    string
	photo_id       int64
	author         string
	published_date int32
}

// Constructors:Predicate:pageRelatedArticle
type TLpageRelatedArticle struct {
	data *PageRelatedArticle_Data
}

// Constructors:New:pageRelatedArticle
func NewTLpageRelatedArticle() *TLpageRelatedArticle {
	return &TLpageRelatedArticle{data: &PageRelatedArticle_Data{}}
}
func (m *TLpageRelatedArticle) Seturl(v string)           { m.data.url = v }
func (m *TLpageRelatedArticle) Geturl() string            { return m.data.url }
func (m *TLpageRelatedArticle) Setwebpage_id(v int64)     { m.data.webpage_id = v }
func (m *TLpageRelatedArticle) Getwebpage_id() int64      { return m.data.webpage_id }
func (m *TLpageRelatedArticle) Settitle(v string)         { m.data.title = v }
func (m *TLpageRelatedArticle) Gettitle() string          { return m.data.title }
func (m *TLpageRelatedArticle) Setdescription(v string)   { m.data.description = v }
func (m *TLpageRelatedArticle) Getdescription() string    { return m.data.description }
func (m *TLpageRelatedArticle) Setphoto_id(v int64)       { m.data.photo_id = v }
func (m *TLpageRelatedArticle) Getphoto_id() int64        { return m.data.photo_id }
func (m *TLpageRelatedArticle) Setauthor(v string)        { m.data.author = v }
func (m *TLpageRelatedArticle) Getauthor() string         { return m.data.author }
func (m *TLpageRelatedArticle) Setpublished_date(v int32) { m.data.published_date = v }
func (m *TLpageRelatedArticle) Getpublished_date() int32  { return m.data.published_date }

///////////////////////////////////////////////////////////////////////////////
// Constructors:messages_InactiveChats
// messages_InactiveChats <--
// + TLmessages_inactiveChats
//
// Constructors:Type:messages_InactiveChats
type messages_InactiveChats struct {
	constructor int32
	data        *messages_InactiveChats_Data
}

// Constructors:Type:Data:messages_InactiveChats
type messages_InactiveChats_Data struct {
	dates []int32
	chats []*Chat
	users []*User
}

// Constructors:Predicate:messages_inactiveChats
type TLmessages_inactiveChats struct {
	data *messages_InactiveChats_Data
}

// Constructors:New:messages_inactiveChats
func NewTLmessages_inactiveChats() *TLmessages_inactiveChats {
	return &TLmessages_inactiveChats{data: &messages_InactiveChats_Data{}}
}
func (m *TLmessages_inactiveChats) Setdates(v []int32) { m.data.dates = v }
func (m *TLmessages_inactiveChats) Getdates() []int32  { return m.data.dates }
func (m *TLmessages_inactiveChats) Setchats(v []*Chat) { m.data.chats = v }
func (m *TLmessages_inactiveChats) Getchats() []*Chat  { return m.data.chats }
func (m *TLmessages_inactiveChats) Setusers(v []*User) { m.data.users = v }
func (m *TLmessages_inactiveChats) Getusers() []*User  { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:account_WebAuthorizations
// account_WebAuthorizations <--
// + TLaccount_webAuthorizations
//
// Constructors:Type:account_WebAuthorizations
type account_WebAuthorizations struct {
	constructor int32
	data        *account_WebAuthorizations_Data
}

// Constructors:Type:Data:account_WebAuthorizations
type account_WebAuthorizations_Data struct {
	authorizations []*WebAuthorization
	users          []*User
}

// Constructors:Predicate:account_webAuthorizations
type TLaccount_webAuthorizations struct {
	data *account_WebAuthorizations_Data
}

// Constructors:New:account_webAuthorizations
func NewTLaccount_webAuthorizations() *TLaccount_webAuthorizations {
	return &TLaccount_webAuthorizations{data: &account_WebAuthorizations_Data{}}
}
func (m *TLaccount_webAuthorizations) Setauthorizations(v []*WebAuthorization) {
	m.data.authorizations = v
}
func (m *TLaccount_webAuthorizations) Getauthorizations() []*WebAuthorization {
	return m.data.authorizations
}
func (m *TLaccount_webAuthorizations) Setusers(v []*User) { m.data.users = v }
func (m *TLaccount_webAuthorizations) Getusers() []*User  { return m.data.users }

///////////////////////////////////////////////////////////////////////////////
// Constructors:account_WallPapers
// account_WallPapers <--
// + TLaccount_wallPapersNotModified
// + TLaccount_wallPapers
//
// Constructors:Type:account_WallPapers
type account_WallPapers struct {
	constructor int32
	data        *account_WallPapers_Data
}

// Constructors:Type:Data:account_WallPapers
type account_WallPapers_Data struct {
	hash       int32
	wallpapers []*WallPaper
}

// Constructors:Predicate:account_wallPapersNotModified
type TLaccount_wallPapersNotModified struct {
	data *account_WallPapers_Data
}

// Constructors:New:account_wallPapersNotModified
func NewTLaccount_wallPapersNotModified() *TLaccount_wallPapersNotModified {
	return &TLaccount_wallPapersNotModified{data: &account_WallPapers_Data{}}
}

// Constructors:Predicate:account_wallPapers
type TLaccount_wallPapers struct {
	data *account_WallPapers_Data
}

// Constructors:New:account_wallPapers
func NewTLaccount_wallPapers() *TLaccount_wallPapers {
	return &TLaccount_wallPapers{data: &account_WallPapers_Data{}}
}
func (m *TLaccount_wallPapers) Sethash(v int32)              { m.data.hash = v }
func (m *TLaccount_wallPapers) Gethash() int32               { return m.data.hash }
func (m *TLaccount_wallPapers) Setwallpapers(v []*WallPaper) { m.data.wallpapers = v }
func (m *TLaccount_wallPapers) Getwallpapers() []*WallPaper  { return m.data.wallpapers }

///////////////////////////////////////////////////////////////////////////////
// Constructors:FolderPeer
// FolderPeer <--
// + TLfolderPeer
//
// Constructors:Type:FolderPeer
type FolderPeer struct {
	constructor int32
	data        *FolderPeer_Data
}

// Constructors:Type:Data:FolderPeer
type FolderPeer_Data struct {
	peer      *Peer
	folder_id int32
}

// Constructors:Predicate:folderPeer
type TLfolderPeer struct {
	data *FolderPeer_Data
}

// Constructors:New:folderPeer
func NewTLfolderPeer() *TLfolderPeer {
	return &TLfolderPeer{data: &FolderPeer_Data{}}
}
func (m *TLfolderPeer) Setpeer(v *Peer)      { m.data.peer = v }
func (m *TLfolderPeer) Getpeer() *Peer       { return m.data.peer }
func (m *TLfolderPeer) Setfolder_id(v int32) { m.data.folder_id = v }
func (m *TLfolderPeer) Getfolder_id() int32  { return m.data.folder_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_search
//
type TLcontacts_search struct {
	q     string
	limit int32
}

func (m *TLcontacts_search) Setq(v string)    { m.q = v }
func (m *TLcontacts_search) Getq() string     { return m.q }
func (m *TLcontacts_search) Setlimit(v int32) { m.limit = v }
func (m *TLcontacts_search) Getlimit() int32  { return m.limit }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getPassportConfig
//
type TLhelp_getPassportConfig struct {
	hash int32
}

func (m *TLhelp_getPassportConfig) Sethash(v int32) { m.hash = v }
func (m *TLhelp_getPassportConfig) Gethash() int32  { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getAttachedStickers
//
type TLmessages_getAttachedStickers struct {
	media *InputStickeredMedia
}

func (m *TLmessages_getAttachedStickers) Setmedia(v *InputStickeredMedia) { m.media = v }
func (m *TLmessages_getAttachedStickers) Getmedia() *InputStickeredMedia  { return m.media }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getNotifySettings
//
type TLaccount_getNotifySettings struct {
	peer *InputNotifyPeer
}

func (m *TLaccount_getNotifySettings) Setpeer(v *InputNotifyPeer) { m.peer = v }
func (m *TLaccount_getNotifySettings) Getpeer() *InputNotifyPeer  { return m.peer }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_exportMessageLink
//
type TLchannels_exportMessageLink struct {
	grouped bool
	thread  bool
	channel *InputChannel
	id      int32
}

func (m *TLchannels_exportMessageLink) Setgrouped(v bool)          { m.grouped = v }
func (m *TLchannels_exportMessageLink) Getgrouped() bool           { return m.grouped }
func (m *TLchannels_exportMessageLink) Setthread(v bool)           { m.thread = v }
func (m *TLchannels_exportMessageLink) Getthread() bool            { return m.thread }
func (m *TLchannels_exportMessageLink) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_exportMessageLink) Getchannel() *InputChannel  { return m.channel }
func (m *TLchannels_exportMessageLink) Setid(v int32)              { m.id = v }
func (m *TLchannels_exportMessageLink) Getid() int32               { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getAuthorizationForm
//
type TLaccount_getAuthorizationForm struct {
	bot_id     int32
	scope      string
	public_key string
}

func (m *TLaccount_getAuthorizationForm) Setbot_id(v int32)      { m.bot_id = v }
func (m *TLaccount_getAuthorizationForm) Getbot_id() int32       { return m.bot_id }
func (m *TLaccount_getAuthorizationForm) Setscope(v string)      { m.scope = v }
func (m *TLaccount_getAuthorizationForm) Getscope() string       { return m.scope }
func (m *TLaccount_getAuthorizationForm) Setpublic_key(v string) { m.public_key = v }
func (m *TLaccount_getAuthorizationForm) Getpublic_key() string  { return m.public_key }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getPassword
//
type TLaccount_getPassword struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getFullChat
//
type TLmessages_getFullChat struct {
	chat_id int32
}

func (m *TLmessages_getFullChat) Setchat_id(v int32) { m.chat_id = v }
func (m *TLmessages_getFullChat) Getchat_id() int32  { return m.chat_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getFullChannel
//
type TLchannels_getFullChannel struct {
	channel *InputChannel
}

func (m *TLchannels_getFullChannel) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_getFullChannel) Getchannel() *InputChannel  { return m.channel }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getCountriesList
//
type TLhelp_getCountriesList struct {
	lang_code string
	hash      int32
}

func (m *TLhelp_getCountriesList) Setlang_code(v string) { m.lang_code = v }
func (m *TLhelp_getCountriesList) Getlang_code() string  { return m.lang_code }
func (m *TLhelp_getCountriesList) Sethash(v int32)       { m.hash = v }
func (m *TLhelp_getCountriesList) Gethash() int32        { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getEmojiURL
//
type TLmessages_getEmojiURL struct {
	lang_code string
}

func (m *TLmessages_getEmojiURL) Setlang_code(v string) { m.lang_code = v }
func (m *TLmessages_getEmojiURL) Getlang_code() string  { return m.lang_code }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getAutoDownloadSettings
//
type TLaccount_getAutoDownloadSettings struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getSupportName
//
type TLhelp_getSupportName struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getPeerSettings
//
type TLmessages_getPeerSettings struct {
	peer *InputPeer
}

func (m *TLmessages_getPeerSettings) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_getPeerSettings) Getpeer() *InputPeer  { return m.peer }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:payments_validateRequestedInfo
//
type TLpayments_validateRequestedInfo struct {
	save   bool
	msg_id int32
	info   *PaymentRequestedInfo
}

func (m *TLpayments_validateRequestedInfo) Setsave(v bool)                  { m.save = v }
func (m *TLpayments_validateRequestedInfo) Getsave() bool                   { return m.save }
func (m *TLpayments_validateRequestedInfo) Setmsg_id(v int32)               { m.msg_id = v }
func (m *TLpayments_validateRequestedInfo) Getmsg_id() int32                { return m.msg_id }
func (m *TLpayments_validateRequestedInfo) Setinfo(v *PaymentRequestedInfo) { m.info = v }
func (m *TLpayments_validateRequestedInfo) Getinfo() *PaymentRequestedInfo  { return m.info }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_exportAuthorization
//
type TLauth_exportAuthorization struct {
	dc_id int32
}

func (m *TLauth_exportAuthorization) Setdc_id(v int32) { m.dc_id = v }
func (m *TLauth_exportAuthorization) Getdc_id() int32  { return m.dc_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getAppUpdate
//
type TLhelp_getAppUpdate struct {
	source string
}

func (m *TLhelp_getAppUpdate) Setsource(v string) { m.source = v }
func (m *TLhelp_getAppUpdate) Getsource() string  { return m.source }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getAuthorizations
//
type TLaccount_getAuthorizations struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_getTopPeers
//
type TLcontacts_getTopPeers struct {
	correspondents bool
	bots_pm        bool
	bots_inline    bool
	phone_calls    bool
	forward_users  bool
	forward_chats  bool
	groups         bool
	channels       bool
	offset         int32
	limit          int32
	hash           int32
}

func (m *TLcontacts_getTopPeers) Setcorrespondents(v bool) { m.correspondents = v }
func (m *TLcontacts_getTopPeers) Getcorrespondents() bool  { return m.correspondents }
func (m *TLcontacts_getTopPeers) Setbots_pm(v bool)        { m.bots_pm = v }
func (m *TLcontacts_getTopPeers) Getbots_pm() bool         { return m.bots_pm }
func (m *TLcontacts_getTopPeers) Setbots_inline(v bool)    { m.bots_inline = v }
func (m *TLcontacts_getTopPeers) Getbots_inline() bool     { return m.bots_inline }
func (m *TLcontacts_getTopPeers) Setphone_calls(v bool)    { m.phone_calls = v }
func (m *TLcontacts_getTopPeers) Getphone_calls() bool     { return m.phone_calls }
func (m *TLcontacts_getTopPeers) Setforward_users(v bool)  { m.forward_users = v }
func (m *TLcontacts_getTopPeers) Getforward_users() bool   { return m.forward_users }
func (m *TLcontacts_getTopPeers) Setforward_chats(v bool)  { m.forward_chats = v }
func (m *TLcontacts_getTopPeers) Getforward_chats() bool   { return m.forward_chats }
func (m *TLcontacts_getTopPeers) Setgroups(v bool)         { m.groups = v }
func (m *TLcontacts_getTopPeers) Getgroups() bool          { return m.groups }
func (m *TLcontacts_getTopPeers) Setchannels(v bool)       { m.channels = v }
func (m *TLcontacts_getTopPeers) Getchannels() bool        { return m.channels }
func (m *TLcontacts_getTopPeers) Setoffset(v int32)        { m.offset = v }
func (m *TLcontacts_getTopPeers) Getoffset() int32         { return m.offset }
func (m *TLcontacts_getTopPeers) Setlimit(v int32)         { m.limit = v }
func (m *TLcontacts_getTopPeers) Getlimit() int32          { return m.limit }
func (m *TLcontacts_getTopPeers) Sethash(v int32)          { m.hash = v }
func (m *TLcontacts_getTopPeers) Gethash() int32           { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:upload_getFile
//
type TLupload_getFile struct {
	precise       bool
	cdn_supported bool
	location      *InputFileLocation
	offset        int32
	limit         int32
}

func (m *TLupload_getFile) Setprecise(v bool)                { m.precise = v }
func (m *TLupload_getFile) Getprecise() bool                 { return m.precise }
func (m *TLupload_getFile) Setcdn_supported(v bool)          { m.cdn_supported = v }
func (m *TLupload_getFile) Getcdn_supported() bool           { return m.cdn_supported }
func (m *TLupload_getFile) Setlocation(v *InputFileLocation) { m.location = v }
func (m *TLupload_getFile) Getlocation() *InputFileLocation  { return m.location }
func (m *TLupload_getFile) Setoffset(v int32)                { m.offset = v }
func (m *TLupload_getFile) Getoffset() int32                 { return m.offset }
func (m *TLupload_getFile) Setlimit(v int32)                 { m.limit = v }
func (m *TLupload_getFile) Getlimit() int32                  { return m.limit }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:langpack_getLanguage
//
type TLlangpack_getLanguage struct {
	lang_pack string
	lang_code string
}

func (m *TLlangpack_getLanguage) Setlang_pack(v string) { m.lang_pack = v }
func (m *TLlangpack_getLanguage) Getlang_pack() string  { return m.lang_pack }
func (m *TLlangpack_getLanguage) Setlang_code(v string) { m.lang_code = v }
func (m *TLlangpack_getLanguage) Getlang_code() string  { return m.lang_code }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:langpack_getLanguages
//
type TLlangpack_getLanguages struct {
	lang_pack string
}

func (m *TLlangpack_getLanguages) Setlang_pack(v string) { m.lang_pack = v }
func (m *TLlangpack_getLanguages) Getlang_pack() string  { return m.lang_pack }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getDialogs
//
type TLmessages_getDialogs struct {
	exclude_pinned bool
	folder_id      int32
	offset_date    int32
	offset_id      int32
	offset_peer    *InputPeer
	limit          int32
	hash           int32
}

func (m *TLmessages_getDialogs) Setexclude_pinned(v bool)    { m.exclude_pinned = v }
func (m *TLmessages_getDialogs) Getexclude_pinned() bool     { return m.exclude_pinned }
func (m *TLmessages_getDialogs) Setfolder_id(v int32)        { m.folder_id = v }
func (m *TLmessages_getDialogs) Getfolder_id() int32         { return m.folder_id }
func (m *TLmessages_getDialogs) Setoffset_date(v int32)      { m.offset_date = v }
func (m *TLmessages_getDialogs) Getoffset_date() int32       { return m.offset_date }
func (m *TLmessages_getDialogs) Setoffset_id(v int32)        { m.offset_id = v }
func (m *TLmessages_getDialogs) Getoffset_id() int32         { return m.offset_id }
func (m *TLmessages_getDialogs) Setoffset_peer(v *InputPeer) { m.offset_peer = v }
func (m *TLmessages_getDialogs) Getoffset_peer() *InputPeer  { return m.offset_peer }
func (m *TLmessages_getDialogs) Setlimit(v int32)            { m.limit = v }
func (m *TLmessages_getDialogs) Getlimit() int32             { return m.limit }
func (m *TLmessages_getDialogs) Sethash(v int32)             { m.hash = v }
func (m *TLmessages_getDialogs) Gethash() int32              { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getAppConfig
//
type TLhelp_getAppConfig struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getPeerDialogs
//
type TLmessages_getPeerDialogs struct {
	peers []*InputDialogPeer
}

func (m *TLmessages_getPeerDialogs) Setpeers(v []*InputDialogPeer) { m.peers = v }
func (m *TLmessages_getPeerDialogs) Getpeers() []*InputDialogPeer  { return m.peers }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getPinnedDialogs
//
type TLmessages_getPinnedDialogs struct {
	folder_id int32
}

func (m *TLmessages_getPinnedDialogs) Setfolder_id(v int32) { m.folder_id = v }
func (m *TLmessages_getPinnedDialogs) Getfolder_id() int32  { return m.folder_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getInlineBotResults
//
type TLmessages_getInlineBotResults struct {
	bot       *InputUser
	peer      *InputPeer
	geo_point *InputGeoPoint
	query     string
	offset    string
}

func (m *TLmessages_getInlineBotResults) Setbot(v *InputUser)           { m.bot = v }
func (m *TLmessages_getInlineBotResults) Getbot() *InputUser            { return m.bot }
func (m *TLmessages_getInlineBotResults) Setpeer(v *InputPeer)          { m.peer = v }
func (m *TLmessages_getInlineBotResults) Getpeer() *InputPeer           { return m.peer }
func (m *TLmessages_getInlineBotResults) Setgeo_point(v *InputGeoPoint) { m.geo_point = v }
func (m *TLmessages_getInlineBotResults) Getgeo_point() *InputGeoPoint  { return m.geo_point }
func (m *TLmessages_getInlineBotResults) Setquery(v string)             { m.query = v }
func (m *TLmessages_getInlineBotResults) Getquery() string              { return m.query }
func (m *TLmessages_getInlineBotResults) Setoffset(v string)            { m.offset = v }
func (m *TLmessages_getInlineBotResults) Getoffset() string             { return m.offset }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:payments_getPaymentReceipt
//
type TLpayments_getPaymentReceipt struct {
	msg_id int32
}

func (m *TLpayments_getPaymentReceipt) Setmsg_id(v int32) { m.msg_id = v }
func (m *TLpayments_getPaymentReceipt) Getmsg_id() int32  { return m.msg_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:users_getUsers
//
type TLusers_getUsers struct {
	id []*InputUser
}

func (m *TLusers_getUsers) Setid(v []*InputUser) { m.id = v }
func (m *TLusers_getUsers) Getid() []*InputUser  { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_updateProfile
//
type TLaccount_updateProfile struct {
	first_name string
	last_name  string
	about      string
}

func (m *TLaccount_updateProfile) Setfirst_name(v string) { m.first_name = v }
func (m *TLaccount_updateProfile) Getfirst_name() string  { return m.first_name }
func (m *TLaccount_updateProfile) Setlast_name(v string)  { m.last_name = v }
func (m *TLaccount_updateProfile) Getlast_name() string   { return m.last_name }
func (m *TLaccount_updateProfile) Setabout(v string)      { m.about = v }
func (m *TLaccount_updateProfile) Getabout() string       { return m.about }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_updateUsername
//
type TLaccount_updateUsername struct {
	username string
}

func (m *TLaccount_updateUsername) Setusername(v string) { m.username = v }
func (m *TLaccount_updateUsername) Getusername() string  { return m.username }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_changePhone
//
type TLaccount_changePhone struct {
	phone_number    string
	phone_code_hash string
	phone_code      string
}

func (m *TLaccount_changePhone) Setphone_number(v string)    { m.phone_number = v }
func (m *TLaccount_changePhone) Getphone_number() string     { return m.phone_number }
func (m *TLaccount_changePhone) Setphone_code_hash(v string) { m.phone_code_hash = v }
func (m *TLaccount_changePhone) Getphone_code_hash() string  { return m.phone_code_hash }
func (m *TLaccount_changePhone) Setphone_code(v string)      { m.phone_code = v }
func (m *TLaccount_changePhone) Getphone_code() string       { return m.phone_code }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_initTakeoutSession
//
type TLaccount_initTakeoutSession struct {
	contacts           bool
	message_users      bool
	message_chats      bool
	message_megagroups bool
	message_channels   bool
	files              bool
	file_max_size      int32
}

func (m *TLaccount_initTakeoutSession) Setcontacts(v bool)           { m.contacts = v }
func (m *TLaccount_initTakeoutSession) Getcontacts() bool            { return m.contacts }
func (m *TLaccount_initTakeoutSession) Setmessage_users(v bool)      { m.message_users = v }
func (m *TLaccount_initTakeoutSession) Getmessage_users() bool       { return m.message_users }
func (m *TLaccount_initTakeoutSession) Setmessage_chats(v bool)      { m.message_chats = v }
func (m *TLaccount_initTakeoutSession) Getmessage_chats() bool       { return m.message_chats }
func (m *TLaccount_initTakeoutSession) Setmessage_megagroups(v bool) { m.message_megagroups = v }
func (m *TLaccount_initTakeoutSession) Getmessage_megagroups() bool  { return m.message_megagroups }
func (m *TLaccount_initTakeoutSession) Setmessage_channels(v bool)   { m.message_channels = v }
func (m *TLaccount_initTakeoutSession) Getmessage_channels() bool    { return m.message_channels }
func (m *TLaccount_initTakeoutSession) Setfiles(v bool)              { m.files = v }
func (m *TLaccount_initTakeoutSession) Getfiles() bool               { return m.files }
func (m *TLaccount_initTakeoutSession) Setfile_max_size(v int32)     { m.file_max_size = v }
func (m *TLaccount_initTakeoutSession) Getfile_max_size() int32      { return m.file_max_size }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stats_getMessageStats
//
type TLstats_getMessageStats struct {
	dark    bool
	channel *InputChannel
	msg_id  int32
}

func (m *TLstats_getMessageStats) Setdark(v bool)             { m.dark = v }
func (m *TLstats_getMessageStats) Getdark() bool              { return m.dark }
func (m *TLstats_getMessageStats) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLstats_getMessageStats) Getchannel() *InputChannel  { return m.channel }
func (m *TLstats_getMessageStats) Setmsg_id(v int32)          { m.msg_id = v }
func (m *TLstats_getMessageStats) Getmsg_id() int32           { return m.msg_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getInviteText
//
type TLhelp_getInviteText struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getStickers
//
type TLmessages_getStickers struct {
	emoticon string
	hash     int32
}

func (m *TLmessages_getStickers) Setemoticon(v string) { m.emoticon = v }
func (m *TLmessages_getStickers) Getemoticon() string  { return m.emoticon }
func (m *TLmessages_getStickers) Sethash(v int32)      { m.hash = v }
func (m *TLmessages_getStickers) Gethash() int32       { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:updates_getChannelDifference
//
type TLupdates_getChannelDifference struct {
	force   bool
	channel *InputChannel
	filter  *ChannelMessagesFilter
	pts     int32
	limit   int32
}

func (m *TLupdates_getChannelDifference) Setforce(v bool)                    { m.force = v }
func (m *TLupdates_getChannelDifference) Getforce() bool                     { return m.force }
func (m *TLupdates_getChannelDifference) Setchannel(v *InputChannel)         { m.channel = v }
func (m *TLupdates_getChannelDifference) Getchannel() *InputChannel          { return m.channel }
func (m *TLupdates_getChannelDifference) Setfilter(v *ChannelMessagesFilter) { m.filter = v }
func (m *TLupdates_getChannelDifference) Getfilter() *ChannelMessagesFilter  { return m.filter }
func (m *TLupdates_getChannelDifference) Setpts(v int32)                     { m.pts = v }
func (m *TLupdates_getChannelDifference) Getpts() int32                      { return m.pts }
func (m *TLupdates_getChannelDifference) Setlimit(v int32)                   { m.limit = v }
func (m *TLupdates_getChannelDifference) Getlimit() int32                    { return m.limit }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stats_loadAsyncGraph
//
type TLstats_loadAsyncGraph struct {
	token string
	x     int64
}

func (m *TLstats_loadAsyncGraph) Settoken(v string) { m.token = v }
func (m *TLstats_loadAsyncGraph) Gettoken() string  { return m.token }
func (m *TLstats_loadAsyncGraph) Setx(v int64)      { m.x = v }
func (m *TLstats_loadAsyncGraph) Getx() int64       { return m.x }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_logOut
//
type TLauth_logOut struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_resetAuthorizations
//
type TLauth_resetAuthorizations struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_bindTempAuthKey
//
type TLauth_bindTempAuthKey struct {
	perm_auth_key_id  int64
	nonce             int64
	expires_at        int32
	encrypted_message []byte
}

func (m *TLauth_bindTempAuthKey) Setperm_auth_key_id(v int64)   { m.perm_auth_key_id = v }
func (m *TLauth_bindTempAuthKey) Getperm_auth_key_id() int64    { return m.perm_auth_key_id }
func (m *TLauth_bindTempAuthKey) Setnonce(v int64)              { m.nonce = v }
func (m *TLauth_bindTempAuthKey) Getnonce() int64               { return m.nonce }
func (m *TLauth_bindTempAuthKey) Setexpires_at(v int32)         { m.expires_at = v }
func (m *TLauth_bindTempAuthKey) Getexpires_at() int32          { return m.expires_at }
func (m *TLauth_bindTempAuthKey) Setencrypted_message(v []byte) { m.encrypted_message = v }
func (m *TLauth_bindTempAuthKey) Getencrypted_message() []byte  { return m.encrypted_message }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_registerDevice
//
type TLaccount_registerDevice struct {
	no_muted    bool
	token_type  int32
	token       string
	app_sandbox *Bool
	secret      []byte
	other_uids  []int32
}

func (m *TLaccount_registerDevice) Setno_muted(v bool)      { m.no_muted = v }
func (m *TLaccount_registerDevice) Getno_muted() bool       { return m.no_muted }
func (m *TLaccount_registerDevice) Settoken_type(v int32)   { m.token_type = v }
func (m *TLaccount_registerDevice) Gettoken_type() int32    { return m.token_type }
func (m *TLaccount_registerDevice) Settoken(v string)       { m.token = v }
func (m *TLaccount_registerDevice) Gettoken() string        { return m.token }
func (m *TLaccount_registerDevice) Setapp_sandbox(v *Bool)  { m.app_sandbox = v }
func (m *TLaccount_registerDevice) Getapp_sandbox() *Bool   { return m.app_sandbox }
func (m *TLaccount_registerDevice) Setsecret(v []byte)      { m.secret = v }
func (m *TLaccount_registerDevice) Getsecret() []byte       { return m.secret }
func (m *TLaccount_registerDevice) Setother_uids(v []int32) { m.other_uids = v }
func (m *TLaccount_registerDevice) Getother_uids() []int32  { return m.other_uids }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_unregisterDevice
//
type TLaccount_unregisterDevice struct {
	token_type int32
	token      string
	other_uids []int32
}

func (m *TLaccount_unregisterDevice) Settoken_type(v int32)   { m.token_type = v }
func (m *TLaccount_unregisterDevice) Gettoken_type() int32    { return m.token_type }
func (m *TLaccount_unregisterDevice) Settoken(v string)       { m.token = v }
func (m *TLaccount_unregisterDevice) Gettoken() string        { return m.token }
func (m *TLaccount_unregisterDevice) Setother_uids(v []int32) { m.other_uids = v }
func (m *TLaccount_unregisterDevice) Getother_uids() []int32  { return m.other_uids }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_updateNotifySettings
//
type TLaccount_updateNotifySettings struct {
	peer     *InputNotifyPeer
	settings *InputPeerNotifySettings
}

func (m *TLaccount_updateNotifySettings) Setpeer(v *InputNotifyPeer)             { m.peer = v }
func (m *TLaccount_updateNotifySettings) Getpeer() *InputNotifyPeer              { return m.peer }
func (m *TLaccount_updateNotifySettings) Setsettings(v *InputPeerNotifySettings) { m.settings = v }
func (m *TLaccount_updateNotifySettings) Getsettings() *InputPeerNotifySettings  { return m.settings }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_resetNotifySettings
//
type TLaccount_resetNotifySettings struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_updateStatus
//
type TLaccount_updateStatus struct {
	offline *Bool
}

func (m *TLaccount_updateStatus) Setoffline(v *Bool) { m.offline = v }
func (m *TLaccount_updateStatus) Getoffline() *Bool  { return m.offline }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_reportPeer
//
type TLaccount_reportPeer struct {
	peer   *InputPeer
	reason *ReportReason
}

func (m *TLaccount_reportPeer) Setpeer(v *InputPeer)      { m.peer = v }
func (m *TLaccount_reportPeer) Getpeer() *InputPeer       { return m.peer }
func (m *TLaccount_reportPeer) Setreason(v *ReportReason) { m.reason = v }
func (m *TLaccount_reportPeer) Getreason() *ReportReason  { return m.reason }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_deleteByPhones
//
type TLcontacts_deleteByPhones struct {
	phones []string
}

func (m *TLcontacts_deleteByPhones) Setphones(v []string) { m.phones = v }
func (m *TLcontacts_deleteByPhones) Getphones() []string  { return m.phones }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_block
//
type TLcontacts_block struct {
	id *InputPeer
}

func (m *TLcontacts_block) Setid(v *InputPeer) { m.id = v }
func (m *TLcontacts_block) Getid() *InputPeer  { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_unblock
//
type TLcontacts_unblock struct {
	id *InputPeer
}

func (m *TLcontacts_unblock) Setid(v *InputPeer) { m.id = v }
func (m *TLcontacts_unblock) Getid() *InputPeer  { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_setTyping
//
type TLmessages_setTyping struct {
	peer       *InputPeer
	top_msg_id int32
	action     *SendMessageAction
}

func (m *TLmessages_setTyping) Setpeer(v *InputPeer)           { m.peer = v }
func (m *TLmessages_setTyping) Getpeer() *InputPeer            { return m.peer }
func (m *TLmessages_setTyping) Settop_msg_id(v int32)          { m.top_msg_id = v }
func (m *TLmessages_setTyping) Gettop_msg_id() int32           { return m.top_msg_id }
func (m *TLmessages_setTyping) Setaction(v *SendMessageAction) { m.action = v }
func (m *TLmessages_setTyping) Getaction() *SendMessageAction  { return m.action }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_reportSpam
//
type TLmessages_reportSpam struct {
	peer *InputPeer
}

func (m *TLmessages_reportSpam) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_reportSpam) Getpeer() *InputPeer  { return m.peer }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_report
//
type TLmessages_report struct {
	peer   *InputPeer
	id     []int32
	reason *ReportReason
}

func (m *TLmessages_report) Setpeer(v *InputPeer)      { m.peer = v }
func (m *TLmessages_report) Getpeer() *InputPeer       { return m.peer }
func (m *TLmessages_report) Setid(v []int32)           { m.id = v }
func (m *TLmessages_report) Getid() []int32            { return m.id }
func (m *TLmessages_report) Setreason(v *ReportReason) { m.reason = v }
func (m *TLmessages_report) Getreason() *ReportReason  { return m.reason }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:upload_saveFilePart
//
type TLupload_saveFilePart struct {
	file_id   int64
	file_part int32
	bytes     []byte
}

func (m *TLupload_saveFilePart) Setfile_id(v int64)   { m.file_id = v }
func (m *TLupload_saveFilePart) Getfile_id() int64    { return m.file_id }
func (m *TLupload_saveFilePart) Setfile_part(v int32) { m.file_part = v }
func (m *TLupload_saveFilePart) Getfile_part() int32  { return m.file_part }
func (m *TLupload_saveFilePart) Setbytes(v []byte)    { m.bytes = v }
func (m *TLupload_saveFilePart) Getbytes() []byte     { return m.bytes }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_discardEncryption
//
type TLmessages_discardEncryption struct {
	chat_id int32
}

func (m *TLmessages_discardEncryption) Setchat_id(v int32) { m.chat_id = v }
func (m *TLmessages_discardEncryption) Getchat_id() int32  { return m.chat_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_setEncryptedTyping
//
type TLmessages_setEncryptedTyping struct {
	peer   *InputEncryptedChat
	typing *Bool
}

func (m *TLmessages_setEncryptedTyping) Setpeer(v *InputEncryptedChat) { m.peer = v }
func (m *TLmessages_setEncryptedTyping) Getpeer() *InputEncryptedChat  { return m.peer }
func (m *TLmessages_setEncryptedTyping) Settyping(v *Bool)             { m.typing = v }
func (m *TLmessages_setEncryptedTyping) Gettyping() *Bool              { return m.typing }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_readEncryptedHistory
//
type TLmessages_readEncryptedHistory struct {
	peer     *InputEncryptedChat
	max_date int32
}

func (m *TLmessages_readEncryptedHistory) Setpeer(v *InputEncryptedChat) { m.peer = v }
func (m *TLmessages_readEncryptedHistory) Getpeer() *InputEncryptedChat  { return m.peer }
func (m *TLmessages_readEncryptedHistory) Setmax_date(v int32)           { m.max_date = v }
func (m *TLmessages_readEncryptedHistory) Getmax_date() int32            { return m.max_date }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_reportEncryptedSpam
//
type TLmessages_reportEncryptedSpam struct {
	peer *InputEncryptedChat
}

func (m *TLmessages_reportEncryptedSpam) Setpeer(v *InputEncryptedChat) { m.peer = v }
func (m *TLmessages_reportEncryptedSpam) Getpeer() *InputEncryptedChat  { return m.peer }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:upload_saveBigFilePart
//
type TLupload_saveBigFilePart struct {
	file_id          int64
	file_part        int32
	file_total_parts int32
	bytes            []byte
}

func (m *TLupload_saveBigFilePart) Setfile_id(v int64)          { m.file_id = v }
func (m *TLupload_saveBigFilePart) Getfile_id() int64           { return m.file_id }
func (m *TLupload_saveBigFilePart) Setfile_part(v int32)        { m.file_part = v }
func (m *TLupload_saveBigFilePart) Getfile_part() int32         { return m.file_part }
func (m *TLupload_saveBigFilePart) Setfile_total_parts(v int32) { m.file_total_parts = v }
func (m *TLupload_saveBigFilePart) Getfile_total_parts() int32  { return m.file_total_parts }
func (m *TLupload_saveBigFilePart) Setbytes(v []byte)           { m.bytes = v }
func (m *TLupload_saveBigFilePart) Getbytes() []byte            { return m.bytes }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_checkUsername
//
type TLaccount_checkUsername struct {
	username string
}

func (m *TLaccount_checkUsername) Setusername(v string) { m.username = v }
func (m *TLaccount_checkUsername) Getusername() string  { return m.username }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_deleteAccount
//
type TLaccount_deleteAccount struct {
	reason string
}

func (m *TLaccount_deleteAccount) Setreason(v string) { m.reason = v }
func (m *TLaccount_deleteAccount) Getreason() string  { return m.reason }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_setAccountTTL
//
type TLaccount_setAccountTTL struct {
	ttl *AccountDaysTTL
}

func (m *TLaccount_setAccountTTL) Setttl(v *AccountDaysTTL) { m.ttl = v }
func (m *TLaccount_setAccountTTL) Getttl() *AccountDaysTTL  { return m.ttl }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_updateDeviceLocked
//
type TLaccount_updateDeviceLocked struct {
	period int32
}

func (m *TLaccount_updateDeviceLocked) Setperiod(v int32) { m.period = v }
func (m *TLaccount_updateDeviceLocked) Getperiod() int32  { return m.period }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_resetAuthorization
//
type TLaccount_resetAuthorization struct {
	hash int64
}

func (m *TLaccount_resetAuthorization) Sethash(v int64) { m.hash = v }
func (m *TLaccount_resetAuthorization) Gethash() int64  { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_updatePasswordSettings
//
type TLaccount_updatePasswordSettings struct {
	password     *InputCheckPasswordSRP
	new_settings *account_PasswordInputSettings
}

func (m *TLaccount_updatePasswordSettings) Setpassword(v *InputCheckPasswordSRP) { m.password = v }
func (m *TLaccount_updatePasswordSettings) Getpassword() *InputCheckPasswordSRP  { return m.password }
func (m *TLaccount_updatePasswordSettings) Setnew_settings(v *account_PasswordInputSettings) {
	m.new_settings = v
}
func (m *TLaccount_updatePasswordSettings) Getnew_settings() *account_PasswordInputSettings {
	return m.new_settings
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_uninstallStickerSet
//
type TLmessages_uninstallStickerSet struct {
	stickerset *InputStickerSet
}

func (m *TLmessages_uninstallStickerSet) Setstickerset(v *InputStickerSet) { m.stickerset = v }
func (m *TLmessages_uninstallStickerSet) Getstickerset() *InputStickerSet  { return m.stickerset }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_readHistory
//
type TLchannels_readHistory struct {
	channel *InputChannel
	max_id  int32
}

func (m *TLchannels_readHistory) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_readHistory) Getchannel() *InputChannel  { return m.channel }
func (m *TLchannels_readHistory) Setmax_id(v int32)          { m.max_id = v }
func (m *TLchannels_readHistory) Getmax_id() int32           { return m.max_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_reportSpam
//
type TLchannels_reportSpam struct {
	channel *InputChannel
	user_id *InputUser
	id      []int32
}

func (m *TLchannels_reportSpam) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_reportSpam) Getchannel() *InputChannel  { return m.channel }
func (m *TLchannels_reportSpam) Setuser_id(v *InputUser)    { m.user_id = v }
func (m *TLchannels_reportSpam) Getuser_id() *InputUser     { return m.user_id }
func (m *TLchannels_reportSpam) Setid(v []int32)            { m.id = v }
func (m *TLchannels_reportSpam) Getid() []int32             { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_checkUsername
//
type TLchannels_checkUsername struct {
	channel  *InputChannel
	username string
}

func (m *TLchannels_checkUsername) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_checkUsername) Getchannel() *InputChannel  { return m.channel }
func (m *TLchannels_checkUsername) Setusername(v string)       { m.username = v }
func (m *TLchannels_checkUsername) Getusername() string        { return m.username }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_updateUsername
//
type TLchannels_updateUsername struct {
	channel  *InputChannel
	username string
}

func (m *TLchannels_updateUsername) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_updateUsername) Getchannel() *InputChannel  { return m.channel }
func (m *TLchannels_updateUsername) Setusername(v string)       { m.username = v }
func (m *TLchannels_updateUsername) Getusername() string        { return m.username }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_editChatAdmin
//
type TLmessages_editChatAdmin struct {
	chat_id  int32
	user_id  *InputUser
	is_admin *Bool
}

func (m *TLmessages_editChatAdmin) Setchat_id(v int32)      { m.chat_id = v }
func (m *TLmessages_editChatAdmin) Getchat_id() int32       { return m.chat_id }
func (m *TLmessages_editChatAdmin) Setuser_id(v *InputUser) { m.user_id = v }
func (m *TLmessages_editChatAdmin) Getuser_id() *InputUser  { return m.user_id }
func (m *TLmessages_editChatAdmin) Setis_admin(v *Bool)     { m.is_admin = v }
func (m *TLmessages_editChatAdmin) Getis_admin() *Bool      { return m.is_admin }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_reorderStickerSets
//
type TLmessages_reorderStickerSets struct {
	masks bool
	order []int64
}

func (m *TLmessages_reorderStickerSets) Setmasks(v bool)    { m.masks = v }
func (m *TLmessages_reorderStickerSets) Getmasks() bool     { return m.masks }
func (m *TLmessages_reorderStickerSets) Setorder(v []int64) { m.order = v }
func (m *TLmessages_reorderStickerSets) Getorder() []int64  { return m.order }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_saveGif
//
type TLmessages_saveGif struct {
	id     *InputDocument
	unsave *Bool
}

func (m *TLmessages_saveGif) Setid(v *InputDocument) { m.id = v }
func (m *TLmessages_saveGif) Getid() *InputDocument  { return m.id }
func (m *TLmessages_saveGif) Setunsave(v *Bool)      { m.unsave = v }
func (m *TLmessages_saveGif) Getunsave() *Bool       { return m.unsave }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_setInlineBotResults
//
type TLmessages_setInlineBotResults struct {
	gallery     bool
	private     bool
	query_id    int64
	results     []*InputBotInlineResult
	cache_time  int32
	next_offset string
	switch_pm   *InlineBotSwitchPM
}

func (m *TLmessages_setInlineBotResults) Setgallery(v bool)                    { m.gallery = v }
func (m *TLmessages_setInlineBotResults) Getgallery() bool                     { return m.gallery }
func (m *TLmessages_setInlineBotResults) Setprivate(v bool)                    { m.private = v }
func (m *TLmessages_setInlineBotResults) Getprivate() bool                     { return m.private }
func (m *TLmessages_setInlineBotResults) Setquery_id(v int64)                  { m.query_id = v }
func (m *TLmessages_setInlineBotResults) Getquery_id() int64                   { return m.query_id }
func (m *TLmessages_setInlineBotResults) Setresults(v []*InputBotInlineResult) { m.results = v }
func (m *TLmessages_setInlineBotResults) Getresults() []*InputBotInlineResult  { return m.results }
func (m *TLmessages_setInlineBotResults) Setcache_time(v int32)                { m.cache_time = v }
func (m *TLmessages_setInlineBotResults) Getcache_time() int32                 { return m.cache_time }
func (m *TLmessages_setInlineBotResults) Setnext_offset(v string)              { m.next_offset = v }
func (m *TLmessages_setInlineBotResults) Getnext_offset() string               { return m.next_offset }
func (m *TLmessages_setInlineBotResults) Setswitch_pm(v *InlineBotSwitchPM)    { m.switch_pm = v }
func (m *TLmessages_setInlineBotResults) Getswitch_pm() *InlineBotSwitchPM     { return m.switch_pm }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_cancelCode
//
type TLauth_cancelCode struct {
	phone_number    string
	phone_code_hash string
}

func (m *TLauth_cancelCode) Setphone_number(v string)    { m.phone_number = v }
func (m *TLauth_cancelCode) Getphone_number() string     { return m.phone_number }
func (m *TLauth_cancelCode) Setphone_code_hash(v string) { m.phone_code_hash = v }
func (m *TLauth_cancelCode) Getphone_code_hash() string  { return m.phone_code_hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_editInlineBotMessage
//
type TLmessages_editInlineBotMessage struct {
	no_webpage   bool
	id           *InputBotInlineMessageID
	message      string
	media        *InputMedia
	reply_markup *ReplyMarkup
	entities     []*MessageEntity
}

func (m *TLmessages_editInlineBotMessage) Setno_webpage(v bool)             { m.no_webpage = v }
func (m *TLmessages_editInlineBotMessage) Getno_webpage() bool              { return m.no_webpage }
func (m *TLmessages_editInlineBotMessage) Setid(v *InputBotInlineMessageID) { m.id = v }
func (m *TLmessages_editInlineBotMessage) Getid() *InputBotInlineMessageID  { return m.id }
func (m *TLmessages_editInlineBotMessage) Setmessage(v string)              { m.message = v }
func (m *TLmessages_editInlineBotMessage) Getmessage() string               { return m.message }
func (m *TLmessages_editInlineBotMessage) Setmedia(v *InputMedia)           { m.media = v }
func (m *TLmessages_editInlineBotMessage) Getmedia() *InputMedia            { return m.media }
func (m *TLmessages_editInlineBotMessage) Setreply_markup(v *ReplyMarkup)   { m.reply_markup = v }
func (m *TLmessages_editInlineBotMessage) Getreply_markup() *ReplyMarkup    { return m.reply_markup }
func (m *TLmessages_editInlineBotMessage) Setentities(v []*MessageEntity)   { m.entities = v }
func (m *TLmessages_editInlineBotMessage) Getentities() []*MessageEntity    { return m.entities }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_setBotCallbackAnswer
//
type TLmessages_setBotCallbackAnswer struct {
	alert      bool
	query_id   int64
	message    string
	url        string
	cache_time int32
}

func (m *TLmessages_setBotCallbackAnswer) Setalert(v bool)       { m.alert = v }
func (m *TLmessages_setBotCallbackAnswer) Getalert() bool        { return m.alert }
func (m *TLmessages_setBotCallbackAnswer) Setquery_id(v int64)   { m.query_id = v }
func (m *TLmessages_setBotCallbackAnswer) Getquery_id() int64    { return m.query_id }
func (m *TLmessages_setBotCallbackAnswer) Setmessage(v string)   { m.message = v }
func (m *TLmessages_setBotCallbackAnswer) Getmessage() string    { return m.message }
func (m *TLmessages_setBotCallbackAnswer) Seturl(v string)       { m.url = v }
func (m *TLmessages_setBotCallbackAnswer) Geturl() string        { return m.url }
func (m *TLmessages_setBotCallbackAnswer) Setcache_time(v int32) { m.cache_time = v }
func (m *TLmessages_setBotCallbackAnswer) Getcache_time() int32  { return m.cache_time }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_resetTopPeerRating
//
type TLcontacts_resetTopPeerRating struct {
	category *TopPeerCategory
	peer     *InputPeer
}

func (m *TLcontacts_resetTopPeerRating) Setcategory(v *TopPeerCategory) { m.category = v }
func (m *TLcontacts_resetTopPeerRating) Getcategory() *TopPeerCategory  { return m.category }
func (m *TLcontacts_resetTopPeerRating) Setpeer(v *InputPeer)           { m.peer = v }
func (m *TLcontacts_resetTopPeerRating) Getpeer() *InputPeer            { return m.peer }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_saveDraft
//
type TLmessages_saveDraft struct {
	no_webpage      bool
	reply_to_msg_id int32
	peer            *InputPeer
	message         string
	entities        []*MessageEntity
}

func (m *TLmessages_saveDraft) Setno_webpage(v bool)           { m.no_webpage = v }
func (m *TLmessages_saveDraft) Getno_webpage() bool            { return m.no_webpage }
func (m *TLmessages_saveDraft) Setreply_to_msg_id(v int32)     { m.reply_to_msg_id = v }
func (m *TLmessages_saveDraft) Getreply_to_msg_id() int32      { return m.reply_to_msg_id }
func (m *TLmessages_saveDraft) Setpeer(v *InputPeer)           { m.peer = v }
func (m *TLmessages_saveDraft) Getpeer() *InputPeer            { return m.peer }
func (m *TLmessages_saveDraft) Setmessage(v string)            { m.message = v }
func (m *TLmessages_saveDraft) Getmessage() string             { return m.message }
func (m *TLmessages_saveDraft) Setentities(v []*MessageEntity) { m.entities = v }
func (m *TLmessages_saveDraft) Getentities() []*MessageEntity  { return m.entities }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_readFeaturedStickers
//
type TLmessages_readFeaturedStickers struct {
	id []int64
}

func (m *TLmessages_readFeaturedStickers) Setid(v []int64) { m.id = v }
func (m *TLmessages_readFeaturedStickers) Getid() []int64  { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_saveRecentSticker
//
type TLmessages_saveRecentSticker struct {
	attached bool
	id       *InputDocument
	unsave   *Bool
}

func (m *TLmessages_saveRecentSticker) Setattached(v bool)     { m.attached = v }
func (m *TLmessages_saveRecentSticker) Getattached() bool      { return m.attached }
func (m *TLmessages_saveRecentSticker) Setid(v *InputDocument) { m.id = v }
func (m *TLmessages_saveRecentSticker) Getid() *InputDocument  { return m.id }
func (m *TLmessages_saveRecentSticker) Setunsave(v *Bool)      { m.unsave = v }
func (m *TLmessages_saveRecentSticker) Getunsave() *Bool       { return m.unsave }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_clearRecentStickers
//
type TLmessages_clearRecentStickers struct {
	attached bool
}

func (m *TLmessages_clearRecentStickers) Setattached(v bool) { m.attached = v }
func (m *TLmessages_clearRecentStickers) Getattached() bool  { return m.attached }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_confirmPhone
//
type TLaccount_confirmPhone struct {
	phone_code_hash string
	phone_code      string
}

func (m *TLaccount_confirmPhone) Setphone_code_hash(v string) { m.phone_code_hash = v }
func (m *TLaccount_confirmPhone) Getphone_code_hash() string  { return m.phone_code_hash }
func (m *TLaccount_confirmPhone) Setphone_code(v string)      { m.phone_code = v }
func (m *TLaccount_confirmPhone) Getphone_code() string       { return m.phone_code }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_dropTempAuthKeys
//
type TLauth_dropTempAuthKeys struct {
	except_auth_keys []int64
}

func (m *TLauth_dropTempAuthKeys) Setexcept_auth_keys(v []int64) { m.except_auth_keys = v }
func (m *TLauth_dropTempAuthKeys) Getexcept_auth_keys() []int64  { return m.except_auth_keys }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_setInlineGameScore
//
type TLmessages_setInlineGameScore struct {
	edit_message bool
	force        bool
	id           *InputBotInlineMessageID
	user_id      *InputUser
	score        int32
}

func (m *TLmessages_setInlineGameScore) Setedit_message(v bool)           { m.edit_message = v }
func (m *TLmessages_setInlineGameScore) Getedit_message() bool            { return m.edit_message }
func (m *TLmessages_setInlineGameScore) Setforce(v bool)                  { m.force = v }
func (m *TLmessages_setInlineGameScore) Getforce() bool                   { return m.force }
func (m *TLmessages_setInlineGameScore) Setid(v *InputBotInlineMessageID) { m.id = v }
func (m *TLmessages_setInlineGameScore) Getid() *InputBotInlineMessageID  { return m.id }
func (m *TLmessages_setInlineGameScore) Setuser_id(v *InputUser)          { m.user_id = v }
func (m *TLmessages_setInlineGameScore) Getuser_id() *InputUser           { return m.user_id }
func (m *TLmessages_setInlineGameScore) Setscore(v int32)                 { m.score = v }
func (m *TLmessages_setInlineGameScore) Getscore() int32                  { return m.score }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_setBotUpdatesStatus
//
type TLhelp_setBotUpdatesStatus struct {
	pending_updates_count int32
	message               string
}

func (m *TLhelp_setBotUpdatesStatus) Setpending_updates_count(v int32) { m.pending_updates_count = v }
func (m *TLhelp_setBotUpdatesStatus) Getpending_updates_count() int32  { return m.pending_updates_count }
func (m *TLhelp_setBotUpdatesStatus) Setmessage(v string)              { m.message = v }
func (m *TLhelp_setBotUpdatesStatus) Getmessage() string               { return m.message }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_toggleDialogPin
//
type TLmessages_toggleDialogPin struct {
	pinned bool
	peer   *InputDialogPeer
}

func (m *TLmessages_toggleDialogPin) Setpinned(v bool)           { m.pinned = v }
func (m *TLmessages_toggleDialogPin) Getpinned() bool            { return m.pinned }
func (m *TLmessages_toggleDialogPin) Setpeer(v *InputDialogPeer) { m.peer = v }
func (m *TLmessages_toggleDialogPin) Getpeer() *InputDialogPeer  { return m.peer }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_reorderPinnedDialogs
//
type TLmessages_reorderPinnedDialogs struct {
	force     bool
	folder_id int32
	order     []*InputDialogPeer
}

func (m *TLmessages_reorderPinnedDialogs) Setforce(v bool)               { m.force = v }
func (m *TLmessages_reorderPinnedDialogs) Getforce() bool                { return m.force }
func (m *TLmessages_reorderPinnedDialogs) Setfolder_id(v int32)          { m.folder_id = v }
func (m *TLmessages_reorderPinnedDialogs) Getfolder_id() int32           { return m.folder_id }
func (m *TLmessages_reorderPinnedDialogs) Setorder(v []*InputDialogPeer) { m.order = v }
func (m *TLmessages_reorderPinnedDialogs) Getorder() []*InputDialogPeer  { return m.order }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:bots_answerWebhookJSONQuery
//
type TLbots_answerWebhookJSONQuery struct {
	query_id int64
	data     *DataJSON
}

func (m *TLbots_answerWebhookJSONQuery) Setquery_id(v int64) { m.query_id = v }
func (m *TLbots_answerWebhookJSONQuery) Getquery_id() int64  { return m.query_id }
func (m *TLbots_answerWebhookJSONQuery) Setdata(v *DataJSON) { m.data = v }
func (m *TLbots_answerWebhookJSONQuery) Getdata() *DataJSON  { return m.data }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:payments_clearSavedInfo
//
type TLpayments_clearSavedInfo struct {
	credentials bool
	info        bool
}

func (m *TLpayments_clearSavedInfo) Setcredentials(v bool) { m.credentials = v }
func (m *TLpayments_clearSavedInfo) Getcredentials() bool  { return m.credentials }
func (m *TLpayments_clearSavedInfo) Setinfo(v bool)        { m.info = v }
func (m *TLpayments_clearSavedInfo) Getinfo() bool         { return m.info }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_setBotShippingResults
//
type TLmessages_setBotShippingResults struct {
	query_id         int64
	error            string
	shipping_options []*ShippingOption
}

func (m *TLmessages_setBotShippingResults) Setquery_id(v int64) { m.query_id = v }
func (m *TLmessages_setBotShippingResults) Getquery_id() int64  { return m.query_id }
func (m *TLmessages_setBotShippingResults) Seterror(v string)   { m.error = v }
func (m *TLmessages_setBotShippingResults) Geterror() string    { return m.error }
func (m *TLmessages_setBotShippingResults) Setshipping_options(v []*ShippingOption) {
	m.shipping_options = v
}
func (m *TLmessages_setBotShippingResults) Getshipping_options() []*ShippingOption {
	return m.shipping_options
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_setBotPrecheckoutResults
//
type TLmessages_setBotPrecheckoutResults struct {
	success  bool
	query_id int64
	error    string
}

func (m *TLmessages_setBotPrecheckoutResults) Setsuccess(v bool)   { m.success = v }
func (m *TLmessages_setBotPrecheckoutResults) Getsuccess() bool    { return m.success }
func (m *TLmessages_setBotPrecheckoutResults) Setquery_id(v int64) { m.query_id = v }
func (m *TLmessages_setBotPrecheckoutResults) Getquery_id() int64  { return m.query_id }
func (m *TLmessages_setBotPrecheckoutResults) Seterror(v string)   { m.error = v }
func (m *TLmessages_setBotPrecheckoutResults) Geterror() string    { return m.error }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:phone_receivedCall
//
type TLphone_receivedCall struct {
	peer *InputPhoneCall
}

func (m *TLphone_receivedCall) Setpeer(v *InputPhoneCall) { m.peer = v }
func (m *TLphone_receivedCall) Getpeer() *InputPhoneCall  { return m.peer }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:phone_saveCallDebug
//
type TLphone_saveCallDebug struct {
	peer  *InputPhoneCall
	debug *DataJSON
}

func (m *TLphone_saveCallDebug) Setpeer(v *InputPhoneCall) { m.peer = v }
func (m *TLphone_saveCallDebug) Getpeer() *InputPhoneCall  { return m.peer }
func (m *TLphone_saveCallDebug) Setdebug(v *DataJSON)      { m.debug = v }
func (m *TLphone_saveCallDebug) Getdebug() *DataJSON       { return m.debug }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_setStickers
//
type TLchannels_setStickers struct {
	channel    *InputChannel
	stickerset *InputStickerSet
}

func (m *TLchannels_setStickers) Setchannel(v *InputChannel)       { m.channel = v }
func (m *TLchannels_setStickers) Getchannel() *InputChannel        { return m.channel }
func (m *TLchannels_setStickers) Setstickerset(v *InputStickerSet) { m.stickerset = v }
func (m *TLchannels_setStickers) Getstickerset() *InputStickerSet  { return m.stickerset }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_faveSticker
//
type TLmessages_faveSticker struct {
	id     *InputDocument
	unfave *Bool
}

func (m *TLmessages_faveSticker) Setid(v *InputDocument) { m.id = v }
func (m *TLmessages_faveSticker) Getid() *InputDocument  { return m.id }
func (m *TLmessages_faveSticker) Setunfave(v *Bool)      { m.unfave = v }
func (m *TLmessages_faveSticker) Getunfave() *Bool       { return m.unfave }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_readMessageContents
//
type TLchannels_readMessageContents struct {
	channel *InputChannel
	id      []int32
}

func (m *TLchannels_readMessageContents) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_readMessageContents) Getchannel() *InputChannel  { return m.channel }
func (m *TLchannels_readMessageContents) Setid(v []int32)            { m.id = v }
func (m *TLchannels_readMessageContents) Getid() []int32             { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_resetSaved
//
type TLcontacts_resetSaved struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_deleteHistory
//
type TLchannels_deleteHistory struct {
	channel *InputChannel
	max_id  int32
}

func (m *TLchannels_deleteHistory) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_deleteHistory) Getchannel() *InputChannel  { return m.channel }
func (m *TLchannels_deleteHistory) Setmax_id(v int32)          { m.max_id = v }
func (m *TLchannels_deleteHistory) Getmax_id() int32           { return m.max_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_resetWebAuthorization
//
type TLaccount_resetWebAuthorization struct {
	hash int64
}

func (m *TLaccount_resetWebAuthorization) Sethash(v int64) { m.hash = v }
func (m *TLaccount_resetWebAuthorization) Gethash() int64  { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_resetWebAuthorizations
//
type TLaccount_resetWebAuthorizations struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_acceptTermsOfService
//
type TLhelp_acceptTermsOfService struct {
	id *DataJSON
}

func (m *TLhelp_acceptTermsOfService) Setid(v *DataJSON) { m.id = v }
func (m *TLhelp_acceptTermsOfService) Getid() *DataJSON  { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_deleteSecureValue
//
type TLaccount_deleteSecureValue struct {
	types []*SecureValueType
}

func (m *TLaccount_deleteSecureValue) Settypes(v []*SecureValueType) { m.types = v }
func (m *TLaccount_deleteSecureValue) Gettypes() []*SecureValueType  { return m.types }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:users_setSecureValueErrors
//
type TLusers_setSecureValueErrors struct {
	id     *InputUser
	errors []*SecureValueError
}

func (m *TLusers_setSecureValueErrors) Setid(v *InputUser)              { m.id = v }
func (m *TLusers_setSecureValueErrors) Getid() *InputUser               { return m.id }
func (m *TLusers_setSecureValueErrors) Seterrors(v []*SecureValueError) { m.errors = v }
func (m *TLusers_setSecureValueErrors) Geterrors() []*SecureValueError  { return m.errors }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_acceptAuthorization
//
type TLaccount_acceptAuthorization struct {
	bot_id       int32
	scope        string
	public_key   string
	value_hashes []*SecureValueHash
	credentials  *SecureCredentialsEncrypted
}

func (m *TLaccount_acceptAuthorization) Setbot_id(v int32)                    { m.bot_id = v }
func (m *TLaccount_acceptAuthorization) Getbot_id() int32                     { return m.bot_id }
func (m *TLaccount_acceptAuthorization) Setscope(v string)                    { m.scope = v }
func (m *TLaccount_acceptAuthorization) Getscope() string                     { return m.scope }
func (m *TLaccount_acceptAuthorization) Setpublic_key(v string)               { m.public_key = v }
func (m *TLaccount_acceptAuthorization) Getpublic_key() string                { return m.public_key }
func (m *TLaccount_acceptAuthorization) Setvalue_hashes(v []*SecureValueHash) { m.value_hashes = v }
func (m *TLaccount_acceptAuthorization) Getvalue_hashes() []*SecureValueHash  { return m.value_hashes }
func (m *TLaccount_acceptAuthorization) Setcredentials(v *SecureCredentialsEncrypted) {
	m.credentials = v
}
func (m *TLaccount_acceptAuthorization) Getcredentials() *SecureCredentialsEncrypted {
	return m.credentials
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_verifyPhone
//
type TLaccount_verifyPhone struct {
	phone_number    string
	phone_code_hash string
	phone_code      string
}

func (m *TLaccount_verifyPhone) Setphone_number(v string)    { m.phone_number = v }
func (m *TLaccount_verifyPhone) Getphone_number() string     { return m.phone_number }
func (m *TLaccount_verifyPhone) Setphone_code_hash(v string) { m.phone_code_hash = v }
func (m *TLaccount_verifyPhone) Getphone_code_hash() string  { return m.phone_code_hash }
func (m *TLaccount_verifyPhone) Setphone_code(v string)      { m.phone_code = v }
func (m *TLaccount_verifyPhone) Getphone_code() string       { return m.phone_code }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_verifyEmail
//
type TLaccount_verifyEmail struct {
	email string
	code  string
}

func (m *TLaccount_verifyEmail) Setemail(v string) { m.email = v }
func (m *TLaccount_verifyEmail) Getemail() string  { return m.email }
func (m *TLaccount_verifyEmail) Setcode(v string)  { m.code = v }
func (m *TLaccount_verifyEmail) Getcode() string   { return m.code }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_finishTakeoutSession
//
type TLaccount_finishTakeoutSession struct {
	success bool
}

func (m *TLaccount_finishTakeoutSession) Setsuccess(v bool) { m.success = v }
func (m *TLaccount_finishTakeoutSession) Getsuccess() bool  { return m.success }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_markDialogUnread
//
type TLmessages_markDialogUnread struct {
	unread bool
	peer   *InputDialogPeer
}

func (m *TLmessages_markDialogUnread) Setunread(v bool)           { m.unread = v }
func (m *TLmessages_markDialogUnread) Getunread() bool            { return m.unread }
func (m *TLmessages_markDialogUnread) Setpeer(v *InputDialogPeer) { m.peer = v }
func (m *TLmessages_markDialogUnread) Getpeer() *InputDialogPeer  { return m.peer }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_toggleTopPeers
//
type TLcontacts_toggleTopPeers struct {
	enabled *Bool
}

func (m *TLcontacts_toggleTopPeers) Setenabled(v *Bool) { m.enabled = v }
func (m *TLcontacts_toggleTopPeers) Getenabled() *Bool  { return m.enabled }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_clearAllDrafts
//
type TLmessages_clearAllDrafts struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_saveAppLog
//
type TLhelp_saveAppLog struct {
	events []*InputAppEvent
}

func (m *TLhelp_saveAppLog) Setevents(v []*InputAppEvent) { m.events = v }
func (m *TLhelp_saveAppLog) Getevents() []*InputAppEvent  { return m.events }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_confirmPasswordEmail
//
type TLaccount_confirmPasswordEmail struct {
	code string
}

func (m *TLaccount_confirmPasswordEmail) Setcode(v string) { m.code = v }
func (m *TLaccount_confirmPasswordEmail) Getcode() string  { return m.code }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_resendPasswordEmail
//
type TLaccount_resendPasswordEmail struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_cancelPasswordEmail
//
type TLaccount_cancelPasswordEmail struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getContactSignUpNotification
//
type TLaccount_getContactSignUpNotification struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_setContactSignUpNotification
//
type TLaccount_setContactSignUpNotification struct {
	silent *Bool
}

func (m *TLaccount_setContactSignUpNotification) Setsilent(v *Bool) { m.silent = v }
func (m *TLaccount_setContactSignUpNotification) Getsilent() *Bool  { return m.silent }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_editChatAbout
//
type TLmessages_editChatAbout struct {
	peer  *InputPeer
	about string
}

func (m *TLmessages_editChatAbout) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_editChatAbout) Getpeer() *InputPeer  { return m.peer }
func (m *TLmessages_editChatAbout) Setabout(v string)    { m.about = v }
func (m *TLmessages_editChatAbout) Getabout() string     { return m.about }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_saveWallPaper
//
type TLaccount_saveWallPaper struct {
	wallpaper *InputWallPaper
	unsave    *Bool
	settings  *WallPaperSettings
}

func (m *TLaccount_saveWallPaper) Setwallpaper(v *InputWallPaper)   { m.wallpaper = v }
func (m *TLaccount_saveWallPaper) Getwallpaper() *InputWallPaper    { return m.wallpaper }
func (m *TLaccount_saveWallPaper) Setunsave(v *Bool)                { m.unsave = v }
func (m *TLaccount_saveWallPaper) Getunsave() *Bool                 { return m.unsave }
func (m *TLaccount_saveWallPaper) Setsettings(v *WallPaperSettings) { m.settings = v }
func (m *TLaccount_saveWallPaper) Getsettings() *WallPaperSettings  { return m.settings }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_installWallPaper
//
type TLaccount_installWallPaper struct {
	wallpaper *InputWallPaper
	settings  *WallPaperSettings
}

func (m *TLaccount_installWallPaper) Setwallpaper(v *InputWallPaper)   { m.wallpaper = v }
func (m *TLaccount_installWallPaper) Getwallpaper() *InputWallPaper    { return m.wallpaper }
func (m *TLaccount_installWallPaper) Setsettings(v *WallPaperSettings) { m.settings = v }
func (m *TLaccount_installWallPaper) Getsettings() *WallPaperSettings  { return m.settings }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_resetWallPapers
//
type TLaccount_resetWallPapers struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_saveAutoDownloadSettings
//
type TLaccount_saveAutoDownloadSettings struct {
	low      bool
	high     bool
	settings *AutoDownloadSettings
}

func (m *TLaccount_saveAutoDownloadSettings) Setlow(v bool)                       { m.low = v }
func (m *TLaccount_saveAutoDownloadSettings) Getlow() bool                        { return m.low }
func (m *TLaccount_saveAutoDownloadSettings) Sethigh(v bool)                      { m.high = v }
func (m *TLaccount_saveAutoDownloadSettings) Gethigh() bool                       { return m.high }
func (m *TLaccount_saveAutoDownloadSettings) Setsettings(v *AutoDownloadSettings) { m.settings = v }
func (m *TLaccount_saveAutoDownloadSettings) Getsettings() *AutoDownloadSettings  { return m.settings }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_setDiscussionGroup
//
type TLchannels_setDiscussionGroup struct {
	broadcast *InputChannel
	group     *InputChannel
}

func (m *TLchannels_setDiscussionGroup) Setbroadcast(v *InputChannel) { m.broadcast = v }
func (m *TLchannels_setDiscussionGroup) Getbroadcast() *InputChannel  { return m.broadcast }
func (m *TLchannels_setDiscussionGroup) Setgroup(v *InputChannel)     { m.group = v }
func (m *TLchannels_setDiscussionGroup) Getgroup() *InputChannel      { return m.group }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_hidePeerSettingsBar
//
type TLmessages_hidePeerSettingsBar struct {
	peer *InputPeer
}

func (m *TLmessages_hidePeerSettingsBar) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_hidePeerSettingsBar) Getpeer() *InputPeer  { return m.peer }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_editLocation
//
type TLchannels_editLocation struct {
	channel   *InputChannel
	geo_point *InputGeoPoint
	address   string
}

func (m *TLchannels_editLocation) Setchannel(v *InputChannel)    { m.channel = v }
func (m *TLchannels_editLocation) Getchannel() *InputChannel     { return m.channel }
func (m *TLchannels_editLocation) Setgeo_point(v *InputGeoPoint) { m.geo_point = v }
func (m *TLchannels_editLocation) Getgeo_point() *InputGeoPoint  { return m.geo_point }
func (m *TLchannels_editLocation) Setaddress(v string)           { m.address = v }
func (m *TLchannels_editLocation) Getaddress() string            { return m.address }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_saveTheme
//
type TLaccount_saveTheme struct {
	theme  *InputTheme
	unsave *Bool
}

func (m *TLaccount_saveTheme) Settheme(v *InputTheme) { m.theme = v }
func (m *TLaccount_saveTheme) Gettheme() *InputTheme  { return m.theme }
func (m *TLaccount_saveTheme) Setunsave(v *Bool)      { m.unsave = v }
func (m *TLaccount_saveTheme) Getunsave() *Bool       { return m.unsave }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_installTheme
//
type TLaccount_installTheme struct {
	dark   bool
	format string
	theme  *InputTheme
}

func (m *TLaccount_installTheme) Setdark(v bool)         { m.dark = v }
func (m *TLaccount_installTheme) Getdark() bool          { return m.dark }
func (m *TLaccount_installTheme) Setformat(v string)     { m.format = v }
func (m *TLaccount_installTheme) Getformat() string      { return m.format }
func (m *TLaccount_installTheme) Settheme(v *InputTheme) { m.theme = v }
func (m *TLaccount_installTheme) Gettheme() *InputTheme  { return m.theme }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_setContentSettings
//
type TLaccount_setContentSettings struct {
	sensitive_enabled bool
}

func (m *TLaccount_setContentSettings) Setsensitive_enabled(v bool) { m.sensitive_enabled = v }
func (m *TLaccount_setContentSettings) Getsensitive_enabled() bool  { return m.sensitive_enabled }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_toggleStickerSets
//
type TLmessages_toggleStickerSets struct {
	uninstall   bool
	archive     bool
	unarchive   bool
	stickersets []*InputStickerSet
}

func (m *TLmessages_toggleStickerSets) Setuninstall(v bool)                 { m.uninstall = v }
func (m *TLmessages_toggleStickerSets) Getuninstall() bool                  { return m.uninstall }
func (m *TLmessages_toggleStickerSets) Setarchive(v bool)                   { m.archive = v }
func (m *TLmessages_toggleStickerSets) Getarchive() bool                    { return m.archive }
func (m *TLmessages_toggleStickerSets) Setunarchive(v bool)                 { m.unarchive = v }
func (m *TLmessages_toggleStickerSets) Getunarchive() bool                  { return m.unarchive }
func (m *TLmessages_toggleStickerSets) Setstickersets(v []*InputStickerSet) { m.stickersets = v }
func (m *TLmessages_toggleStickerSets) Getstickersets() []*InputStickerSet  { return m.stickersets }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_updateDialogFilter
//
type TLmessages_updateDialogFilter struct {
	id     int32
	filter *DialogFilter
}

func (m *TLmessages_updateDialogFilter) Setid(v int32)             { m.id = v }
func (m *TLmessages_updateDialogFilter) Getid() int32              { return m.id }
func (m *TLmessages_updateDialogFilter) Setfilter(v *DialogFilter) { m.filter = v }
func (m *TLmessages_updateDialogFilter) Getfilter() *DialogFilter  { return m.filter }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_updateDialogFiltersOrder
//
type TLmessages_updateDialogFiltersOrder struct {
	order []int32
}

func (m *TLmessages_updateDialogFiltersOrder) Setorder(v []int32) { m.order = v }
func (m *TLmessages_updateDialogFiltersOrder) Getorder() []int32  { return m.order }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:bots_setBotCommands
//
type TLbots_setBotCommands struct {
	commands []*BotCommand
}

func (m *TLbots_setBotCommands) Setcommands(v []*BotCommand) { m.commands = v }
func (m *TLbots_setBotCommands) Getcommands() []*BotCommand  { return m.commands }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_hidePromoData
//
type TLhelp_hidePromoData struct {
	peer *InputPeer
}

func (m *TLhelp_hidePromoData) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLhelp_hidePromoData) Getpeer() *InputPeer  { return m.peer }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:phone_sendSignalingData
//
type TLphone_sendSignalingData struct {
	peer *InputPhoneCall
	data []byte
}

func (m *TLphone_sendSignalingData) Setpeer(v *InputPhoneCall) { m.peer = v }
func (m *TLphone_sendSignalingData) Getpeer() *InputPhoneCall  { return m.peer }
func (m *TLphone_sendSignalingData) Setdata(v []byte)          { m.data = v }
func (m *TLphone_sendSignalingData) Getdata() []byte           { return m.data }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_dismissSuggestion
//
type TLhelp_dismissSuggestion struct {
	suggestion string
}

func (m *TLhelp_dismissSuggestion) Setsuggestion(v string) { m.suggestion = v }
func (m *TLhelp_dismissSuggestion) Getsuggestion() string  { return m.suggestion }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_readDiscussion
//
type TLmessages_readDiscussion struct {
	peer        *InputPeer
	msg_id      int32
	read_max_id int32
}

func (m *TLmessages_readDiscussion) Setpeer(v *InputPeer)   { m.peer = v }
func (m *TLmessages_readDiscussion) Getpeer() *InputPeer    { return m.peer }
func (m *TLmessages_readDiscussion) Setmsg_id(v int32)      { m.msg_id = v }
func (m *TLmessages_readDiscussion) Getmsg_id() int32       { return m.msg_id }
func (m *TLmessages_readDiscussion) Setread_max_id(v int32) { m.read_max_id = v }
func (m *TLmessages_readDiscussion) Getread_max_id() int32  { return m.read_max_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getContentSettings
//
type TLaccount_getContentSettings struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getRecentMeUrls
//
type TLhelp_getRecentMeUrls struct {
	referer string
}

func (m *TLhelp_getRecentMeUrls) Setreferer(v string) { m.referer = v }
func (m *TLhelp_getRecentMeUrls) Getreferer() string  { return m.referer }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:updates_getDifference
//
type TLupdates_getDifference struct {
	pts             int32
	pts_total_limit int32
	date            int32
	qts             int32
}

func (m *TLupdates_getDifference) Setpts(v int32)             { m.pts = v }
func (m *TLupdates_getDifference) Getpts() int32              { return m.pts }
func (m *TLupdates_getDifference) Setpts_total_limit(v int32) { m.pts_total_limit = v }
func (m *TLupdates_getDifference) Getpts_total_limit() int32  { return m.pts_total_limit }
func (m *TLupdates_getDifference) Setdate(v int32)            { m.date = v }
func (m *TLupdates_getDifference) Getdate() int32             { return m.date }
func (m *TLupdates_getDifference) Setqts(v int32)             { m.qts = v }
func (m *TLupdates_getDifference) Getqts() int32              { return m.qts }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_exportChatInvite
//
type TLmessages_exportChatInvite struct {
	peer *InputPeer
}

func (m *TLmessages_exportChatInvite) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_exportChatInvite) Getpeer() *InputPeer  { return m.peer }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getDialogFilters
//
type TLmessages_getDialogFilters struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getWebAuthorizations
//
type TLaccount_getWebAuthorizations struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getTermsOfServiceUpdate
//
type TLhelp_getTermsOfServiceUpdate struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_importContacts
//
type TLcontacts_importContacts struct {
	contacts []*InputContact
}

func (m *TLcontacts_importContacts) Setcontacts(v []*InputContact) { m.contacts = v }
func (m *TLcontacts_importContacts) Getcontacts() []*InputContact  { return m.contacts }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_sendVerifyEmailCode
//
type TLaccount_sendVerifyEmailCode struct {
	email string
}

func (m *TLaccount_sendVerifyEmailCode) Setemail(v string) { m.email = v }
func (m *TLaccount_sendVerifyEmailCode) Getemail() string  { return m.email }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getAdminLog
//
type TLchannels_getAdminLog struct {
	channel       *InputChannel
	q             string
	events_filter *ChannelAdminLogEventsFilter
	admins        []*InputUser
	max_id        int64
	min_id        int64
	limit         int32
}

func (m *TLchannels_getAdminLog) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_getAdminLog) Getchannel() *InputChannel  { return m.channel }
func (m *TLchannels_getAdminLog) Setq(v string)              { m.q = v }
func (m *TLchannels_getAdminLog) Getq() string               { return m.q }
func (m *TLchannels_getAdminLog) Setevents_filter(v *ChannelAdminLogEventsFilter) {
	m.events_filter = v
}
func (m *TLchannels_getAdminLog) Getevents_filter() *ChannelAdminLogEventsFilter {
	return m.events_filter
}
func (m *TLchannels_getAdminLog) Setadmins(v []*InputUser) { m.admins = v }
func (m *TLchannels_getAdminLog) Getadmins() []*InputUser  { return m.admins }
func (m *TLchannels_getAdminLog) Setmax_id(v int64)        { m.max_id = v }
func (m *TLchannels_getAdminLog) Getmax_id() int64         { return m.max_id }
func (m *TLchannels_getAdminLog) Setmin_id(v int64)        { m.min_id = v }
func (m *TLchannels_getAdminLog) Getmin_id() int64         { return m.min_id }
func (m *TLchannels_getAdminLog) Setlimit(v int32)         { m.limit = v }
func (m *TLchannels_getAdminLog) Getlimit() int32          { return m.limit }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_installStickerSet
//
type TLmessages_installStickerSet struct {
	stickerset *InputStickerSet
	archived   *Bool
}

func (m *TLmessages_installStickerSet) Setstickerset(v *InputStickerSet) { m.stickerset = v }
func (m *TLmessages_installStickerSet) Getstickerset() *InputStickerSet  { return m.stickerset }
func (m *TLmessages_installStickerSet) Setarchived(v *Bool)              { m.archived = v }
func (m *TLmessages_installStickerSet) Getarchived() *Bool               { return m.archived }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getWebPagePreview
//
type TLmessages_getWebPagePreview struct {
	message  string
	entities []*MessageEntity
}

func (m *TLmessages_getWebPagePreview) Setmessage(v string)            { m.message = v }
func (m *TLmessages_getWebPagePreview) Getmessage() string             { return m.message }
func (m *TLmessages_getWebPagePreview) Setentities(v []*MessageEntity) { m.entities = v }
func (m *TLmessages_getWebPagePreview) Getentities() []*MessageEntity  { return m.entities }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_uploadMedia
//
type TLmessages_uploadMedia struct {
	peer  *InputPeer
	media *InputMedia
}

func (m *TLmessages_uploadMedia) Setpeer(v *InputPeer)   { m.peer = v }
func (m *TLmessages_uploadMedia) Getpeer() *InputPeer    { return m.peer }
func (m *TLmessages_uploadMedia) Setmedia(v *InputMedia) { m.media = v }
func (m *TLmessages_uploadMedia) Getmedia() *InputMedia  { return m.media }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getMessageEditData
//
type TLmessages_getMessageEditData struct {
	peer *InputPeer
	id   int32
}

func (m *TLmessages_getMessageEditData) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_getMessageEditData) Getpeer() *InputPeer  { return m.peer }
func (m *TLmessages_getMessageEditData) Setid(v int32)        { m.id = v }
func (m *TLmessages_getMessageEditData) Getid() int32         { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getAllStickers
//
type TLmessages_getAllStickers struct {
	hash int32
}

func (m *TLmessages_getAllStickers) Sethash(v int32) { m.hash = v }
func (m *TLmessages_getAllStickers) Gethash() int32  { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getMaskStickers
//
type TLmessages_getMaskStickers struct {
	hash int32
}

func (m *TLmessages_getMaskStickers) Sethash(v int32) { m.hash = v }
func (m *TLmessages_getMaskStickers) Gethash() int32  { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getOnlines
//
type TLmessages_getOnlines struct {
	peer *InputPeer
}

func (m *TLmessages_getOnlines) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_getOnlines) Getpeer() *InputPeer  { return m.peer }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getGameHighScores
//
type TLmessages_getGameHighScores struct {
	peer    *InputPeer
	id      int32
	user_id *InputUser
}

func (m *TLmessages_getGameHighScores) Setpeer(v *InputPeer)    { m.peer = v }
func (m *TLmessages_getGameHighScores) Getpeer() *InputPeer     { return m.peer }
func (m *TLmessages_getGameHighScores) Setid(v int32)           { m.id = v }
func (m *TLmessages_getGameHighScores) Getid() int32            { return m.id }
func (m *TLmessages_getGameHighScores) Setuser_id(v *InputUser) { m.user_id = v }
func (m *TLmessages_getGameHighScores) Getuser_id() *InputUser  { return m.user_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getInlineGameHighScores
//
type TLmessages_getInlineGameHighScores struct {
	id      *InputBotInlineMessageID
	user_id *InputUser
}

func (m *TLmessages_getInlineGameHighScores) Setid(v *InputBotInlineMessageID) { m.id = v }
func (m *TLmessages_getInlineGameHighScores) Getid() *InputBotInlineMessageID  { return m.id }
func (m *TLmessages_getInlineGameHighScores) Setuser_id(v *InputUser)          { m.user_id = v }
func (m *TLmessages_getInlineGameHighScores) Getuser_id() *InputUser           { return m.user_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getThemes
//
type TLaccount_getThemes struct {
	format string
	hash   int32
}

func (m *TLaccount_getThemes) Setformat(v string) { m.format = v }
func (m *TLaccount_getThemes) Getformat() string  { return m.format }
func (m *TLaccount_getThemes) Sethash(v int32)    { m.hash = v }
func (m *TLaccount_getThemes) Gethash() int32     { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:updates_getState
//
type TLupdates_getState struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendEncrypted
//
type TLmessages_sendEncrypted struct {
	silent    bool
	peer      *InputEncryptedChat
	random_id int64
	data      []byte
}

func (m *TLmessages_sendEncrypted) Setsilent(v bool)              { m.silent = v }
func (m *TLmessages_sendEncrypted) Getsilent() bool               { return m.silent }
func (m *TLmessages_sendEncrypted) Setpeer(v *InputEncryptedChat) { m.peer = v }
func (m *TLmessages_sendEncrypted) Getpeer() *InputEncryptedChat  { return m.peer }
func (m *TLmessages_sendEncrypted) Setrandom_id(v int64)          { m.random_id = v }
func (m *TLmessages_sendEncrypted) Getrandom_id() int64           { return m.random_id }
func (m *TLmessages_sendEncrypted) Setdata(v []byte)              { m.data = v }
func (m *TLmessages_sendEncrypted) Getdata() []byte               { return m.data }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendEncryptedFile
//
type TLmessages_sendEncryptedFile struct {
	silent    bool
	peer      *InputEncryptedChat
	random_id int64
	data      []byte
	file      *InputEncryptedFile
}

func (m *TLmessages_sendEncryptedFile) Setsilent(v bool)              { m.silent = v }
func (m *TLmessages_sendEncryptedFile) Getsilent() bool               { return m.silent }
func (m *TLmessages_sendEncryptedFile) Setpeer(v *InputEncryptedChat) { m.peer = v }
func (m *TLmessages_sendEncryptedFile) Getpeer() *InputEncryptedChat  { return m.peer }
func (m *TLmessages_sendEncryptedFile) Setrandom_id(v int64)          { m.random_id = v }
func (m *TLmessages_sendEncryptedFile) Getrandom_id() int64           { return m.random_id }
func (m *TLmessages_sendEncryptedFile) Setdata(v []byte)              { m.data = v }
func (m *TLmessages_sendEncryptedFile) Getdata() []byte               { return m.data }
func (m *TLmessages_sendEncryptedFile) Setfile(v *InputEncryptedFile) { m.file = v }
func (m *TLmessages_sendEncryptedFile) Getfile() *InputEncryptedFile  { return m.file }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendEncryptedService
//
type TLmessages_sendEncryptedService struct {
	peer      *InputEncryptedChat
	random_id int64
	data      []byte
}

func (m *TLmessages_sendEncryptedService) Setpeer(v *InputEncryptedChat) { m.peer = v }
func (m *TLmessages_sendEncryptedService) Getpeer() *InputEncryptedChat  { return m.peer }
func (m *TLmessages_sendEncryptedService) Setrandom_id(v int64)          { m.random_id = v }
func (m *TLmessages_sendEncryptedService) Getrandom_id() int64           { return m.random_id }
func (m *TLmessages_sendEncryptedService) Setdata(v []byte)              { m.data = v }
func (m *TLmessages_sendEncryptedService) Getdata() []byte               { return m.data }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_checkChatInvite
//
type TLmessages_checkChatInvite struct {
	hash string
}

func (m *TLmessages_checkChatInvite) Sethash(v string) { m.hash = v }
func (m *TLmessages_checkChatInvite) Gethash() string  { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getWebPage
//
type TLmessages_getWebPage struct {
	url  string
	hash int32
}

func (m *TLmessages_getWebPage) Seturl(v string) { m.url = v }
func (m *TLmessages_getWebPage) Geturl() string  { return m.url }
func (m *TLmessages_getWebPage) Sethash(v int32) { m.hash = v }
func (m *TLmessages_getWebPage) Gethash() int32  { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getAllSecureValues
//
type TLaccount_getAllSecureValues struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getSecureValue
//
type TLaccount_getSecureValue struct {
	types []*SecureValueType
}

func (m *TLaccount_getSecureValue) Settypes(v []*SecureValueType) { m.types = v }
func (m *TLaccount_getSecureValue) Gettypes() []*SecureValueType  { return m.types }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_saveSecureValue
//
type TLaccount_saveSecureValue struct {
	value            *InputSecureValue
	secure_secret_id int64
}

func (m *TLaccount_saveSecureValue) Setvalue(v *InputSecureValue) { m.value = v }
func (m *TLaccount_saveSecureValue) Getvalue() *InputSecureValue  { return m.value }
func (m *TLaccount_saveSecureValue) Setsecure_secret_id(v int64)  { m.secure_secret_id = v }
func (m *TLaccount_saveSecureValue) Getsecure_secret_id() int64   { return m.secure_secret_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:langpack_getStrings
//
type TLlangpack_getStrings struct {
	lang_pack string
	lang_code string
	keys      []string
}

func (m *TLlangpack_getStrings) Setlang_pack(v string) { m.lang_pack = v }
func (m *TLlangpack_getStrings) Getlang_pack() string  { return m.lang_pack }
func (m *TLlangpack_getStrings) Setlang_code(v string) { m.lang_code = v }
func (m *TLlangpack_getStrings) Getlang_code() string  { return m.lang_code }
func (m *TLlangpack_getStrings) Setkeys(v []string)    { m.keys = v }
func (m *TLlangpack_getStrings) Getkeys() []string     { return m.keys }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getDeepLinkInfo
//
type TLhelp_getDeepLinkInfo struct {
	path string
}

func (m *TLhelp_getDeepLinkInfo) Setpath(v string) { m.path = v }
func (m *TLhelp_getDeepLinkInfo) Getpath() string  { return m.path }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getMultiWallPapers
//
type TLaccount_getMultiWallPapers struct {
	wallpapers []*InputWallPaper
}

func (m *TLaccount_getMultiWallPapers) Setwallpapers(v []*InputWallPaper) { m.wallpapers = v }
func (m *TLaccount_getMultiWallPapers) Getwallpapers() []*InputWallPaper  { return m.wallpapers }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getWallPaper
//
type TLaccount_getWallPaper struct {
	wallpaper *InputWallPaper
}

func (m *TLaccount_getWallPaper) Setwallpaper(v *InputWallPaper) { m.wallpaper = v }
func (m *TLaccount_getWallPaper) Getwallpaper() *InputWallPaper  { return m.wallpaper }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_uploadWallPaper
//
type TLaccount_uploadWallPaper struct {
	file      *InputFile
	mime_type string
	settings  *WallPaperSettings
}

func (m *TLaccount_uploadWallPaper) Setfile(v *InputFile)             { m.file = v }
func (m *TLaccount_uploadWallPaper) Getfile() *InputFile              { return m.file }
func (m *TLaccount_uploadWallPaper) Setmime_type(v string)            { m.mime_type = v }
func (m *TLaccount_uploadWallPaper) Getmime_type() string             { return m.mime_type }
func (m *TLaccount_uploadWallPaper) Setsettings(v *WallPaperSettings) { m.settings = v }
func (m *TLaccount_uploadWallPaper) Getsettings() *WallPaperSettings  { return m.settings }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getPollVotes
//
type TLmessages_getPollVotes struct {
	peer   *InputPeer
	id     int32
	option []byte
	offset string
	limit  int32
}

func (m *TLmessages_getPollVotes) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_getPollVotes) Getpeer() *InputPeer  { return m.peer }
func (m *TLmessages_getPollVotes) Setid(v int32)        { m.id = v }
func (m *TLmessages_getPollVotes) Getid() int32         { return m.id }
func (m *TLmessages_getPollVotes) Setoption(v []byte)   { m.option = v }
func (m *TLmessages_getPollVotes) Getoption() []byte    { return m.option }
func (m *TLmessages_getPollVotes) Setoffset(v string)   { m.offset = v }
func (m *TLmessages_getPollVotes) Getoffset() string    { return m.offset }
func (m *TLmessages_getPollVotes) Setlimit(v int32)     { m.limit = v }
func (m *TLmessages_getPollVotes) Getlimit() int32      { return m.limit }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getDiscussionMessage
//
type TLmessages_getDiscussionMessage struct {
	peer   *InputPeer
	msg_id int32
}

func (m *TLmessages_getDiscussionMessage) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_getDiscussionMessage) Getpeer() *InputPeer  { return m.peer }
func (m *TLmessages_getDiscussionMessage) Setmsg_id(v int32)    { m.msg_id = v }
func (m *TLmessages_getDiscussionMessage) Getmsg_id() int32     { return m.msg_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getWallPapers
//
type TLaccount_getWallPapers struct {
	hash int32
}

func (m *TLaccount_getWallPapers) Sethash(v int32) { m.hash = v }
func (m *TLaccount_getWallPapers) Gethash() int32  { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getRecentStickers
//
type TLmessages_getRecentStickers struct {
	attached bool
	hash     int32
}

func (m *TLmessages_getRecentStickers) Setattached(v bool) { m.attached = v }
func (m *TLmessages_getRecentStickers) Getattached() bool  { return m.attached }
func (m *TLmessages_getRecentStickers) Sethash(v int32)    { m.hash = v }
func (m *TLmessages_getRecentStickers) Gethash() int32     { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getParticipants
//
type TLchannels_getParticipants struct {
	channel *InputChannel
	filter  *ChannelParticipantsFilter
	offset  int32
	limit   int32
	hash    int32
}

func (m *TLchannels_getParticipants) Setchannel(v *InputChannel)             { m.channel = v }
func (m *TLchannels_getParticipants) Getchannel() *InputChannel              { return m.channel }
func (m *TLchannels_getParticipants) Setfilter(v *ChannelParticipantsFilter) { m.filter = v }
func (m *TLchannels_getParticipants) Getfilter() *ChannelParticipantsFilter  { return m.filter }
func (m *TLchannels_getParticipants) Setoffset(v int32)                      { m.offset = v }
func (m *TLchannels_getParticipants) Getoffset() int32                       { return m.offset }
func (m *TLchannels_getParticipants) Setlimit(v int32)                       { m.limit = v }
func (m *TLchannels_getParticipants) Getlimit() int32                        { return m.limit }
func (m *TLchannels_getParticipants) Sethash(v int32)                        { m.hash = v }
func (m *TLchannels_getParticipants) Gethash() int32                         { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_exportLoginToken
//
type TLauth_exportLoginToken struct {
	api_id     int32
	api_hash   string
	except_ids []int32
}

func (m *TLauth_exportLoginToken) Setapi_id(v int32)       { m.api_id = v }
func (m *TLauth_exportLoginToken) Getapi_id() int32        { return m.api_id }
func (m *TLauth_exportLoginToken) Setapi_hash(v string)    { m.api_hash = v }
func (m *TLauth_exportLoginToken) Getapi_hash() string     { return m.api_hash }
func (m *TLauth_exportLoginToken) Setexcept_ids(v []int32) { m.except_ids = v }
func (m *TLauth_exportLoginToken) Getexcept_ids() []int32  { return m.except_ids }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_importLoginToken
//
type TLauth_importLoginToken struct {
	token []byte
}

func (m *TLauth_importLoginToken) Settoken(v []byte) { m.token = v }
func (m *TLauth_importLoginToken) Gettoken() []byte  { return m.token }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getUserInfo
//
type TLhelp_getUserInfo struct {
	user_id *InputUser
}

func (m *TLhelp_getUserInfo) Setuser_id(v *InputUser) { m.user_id = v }
func (m *TLhelp_getUserInfo) Getuser_id() *InputUser  { return m.user_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_editUserInfo
//
type TLhelp_editUserInfo struct {
	user_id  *InputUser
	message  string
	entities []*MessageEntity
}

func (m *TLhelp_editUserInfo) Setuser_id(v *InputUser)        { m.user_id = v }
func (m *TLhelp_editUserInfo) Getuser_id() *InputUser         { return m.user_id }
func (m *TLhelp_editUserInfo) Setmessage(v string)            { m.message = v }
func (m *TLhelp_editUserInfo) Getmessage() string             { return m.message }
func (m *TLhelp_editUserInfo) Setentities(v []*MessageEntity) { m.entities = v }
func (m *TLhelp_editUserInfo) Getentities() []*MessageEntity  { return m.entities }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_getStatuses
//
type TLcontacts_getStatuses struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_receivedMessages
//
type TLmessages_receivedMessages struct {
	max_id int32
}

func (m *TLmessages_receivedMessages) Setmax_id(v int32) { m.max_id = v }
func (m *TLmessages_receivedMessages) Getmax_id() int32  { return m.max_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:upload_getCdnFile
//
type TLupload_getCdnFile struct {
	file_token []byte
	offset     int32
	limit      int32
}

func (m *TLupload_getCdnFile) Setfile_token(v []byte) { m.file_token = v }
func (m *TLupload_getCdnFile) Getfile_token() []byte  { return m.file_token }
func (m *TLupload_getCdnFile) Setoffset(v int32)      { m.offset = v }
func (m *TLupload_getCdnFile) Getoffset() int32       { return m.offset }
func (m *TLupload_getCdnFile) Setlimit(v int32)       { m.limit = v }
func (m *TLupload_getCdnFile) Getlimit() int32        { return m.limit }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_readHistory
//
type TLmessages_readHistory struct {
	peer   *InputPeer
	max_id int32
}

func (m *TLmessages_readHistory) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_readHistory) Getpeer() *InputPeer  { return m.peer }
func (m *TLmessages_readHistory) Setmax_id(v int32)    { m.max_id = v }
func (m *TLmessages_readHistory) Getmax_id() int32     { return m.max_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_deleteMessages
//
type TLmessages_deleteMessages struct {
	revoke bool
	id     []int32
}

func (m *TLmessages_deleteMessages) Setrevoke(v bool) { m.revoke = v }
func (m *TLmessages_deleteMessages) Getrevoke() bool  { return m.revoke }
func (m *TLmessages_deleteMessages) Setid(v []int32)  { m.id = v }
func (m *TLmessages_deleteMessages) Getid() []int32   { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_readMessageContents
//
type TLmessages_readMessageContents struct {
	id []int32
}

func (m *TLmessages_readMessageContents) Setid(v []int32) { m.id = v }
func (m *TLmessages_readMessageContents) Getid() []int32  { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_deleteMessages
//
type TLchannels_deleteMessages struct {
	channel *InputChannel
	id      []int32
}

func (m *TLchannels_deleteMessages) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_deleteMessages) Getchannel() *InputChannel  { return m.channel }
func (m *TLchannels_deleteMessages) Setid(v []int32)            { m.id = v }
func (m *TLchannels_deleteMessages) Getid() []int32             { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:langpack_getLangPack
//
type TLlangpack_getLangPack struct {
	lang_pack string
	lang_code string
}

func (m *TLlangpack_getLangPack) Setlang_pack(v string) { m.lang_pack = v }
func (m *TLlangpack_getLangPack) Getlang_pack() string  { return m.lang_pack }
func (m *TLlangpack_getLangPack) Setlang_code(v string) { m.lang_code = v }
func (m *TLlangpack_getLangPack) Getlang_code() string  { return m.lang_code }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:langpack_getDifference
//
type TLlangpack_getDifference struct {
	lang_pack    string
	lang_code    string
	from_version int32
}

func (m *TLlangpack_getDifference) Setlang_pack(v string)   { m.lang_pack = v }
func (m *TLlangpack_getDifference) Getlang_pack() string    { return m.lang_pack }
func (m *TLlangpack_getDifference) Setlang_code(v string)   { m.lang_code = v }
func (m *TLlangpack_getDifference) Getlang_code() string    { return m.lang_code }
func (m *TLlangpack_getDifference) Setfrom_version(v int32) { m.from_version = v }
func (m *TLlangpack_getDifference) Getfrom_version() int32  { return m.from_version }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:photos_updateProfilePhoto
//
type TLphotos_updateProfilePhoto struct {
	id *InputPhoto
}

func (m *TLphotos_updateProfilePhoto) Setid(v *InputPhoto) { m.id = v }
func (m *TLphotos_updateProfilePhoto) Getid() *InputPhoto  { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:photos_uploadProfilePhoto
//
type TLphotos_uploadProfilePhoto struct {
	file           *InputFile
	video          *InputFile
	video_start_ts float64
}

func (m *TLphotos_uploadProfilePhoto) Setfile(v *InputFile)        { m.file = v }
func (m *TLphotos_uploadProfilePhoto) Getfile() *InputFile         { return m.file }
func (m *TLphotos_uploadProfilePhoto) Setvideo(v *InputFile)       { m.video = v }
func (m *TLphotos_uploadProfilePhoto) Getvideo() *InputFile        { return m.video }
func (m *TLphotos_uploadProfilePhoto) Setvideo_start_ts(v float64) { m.video_start_ts = v }
func (m *TLphotos_uploadProfilePhoto) Getvideo_start_ts() float64  { return m.video_start_ts }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:payments_getPaymentForm
//
type TLpayments_getPaymentForm struct {
	msg_id int32
}

func (m *TLpayments_getPaymentForm) Setmsg_id(v int32) { m.msg_id = v }
func (m *TLpayments_getPaymentForm) Getmsg_id() int32  { return m.msg_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getStickerSet
//
type TLmessages_getStickerSet struct {
	stickerset *InputStickerSet
}

func (m *TLmessages_getStickerSet) Setstickerset(v *InputStickerSet) { m.stickerset = v }
func (m *TLmessages_getStickerSet) Getstickerset() *InputStickerSet  { return m.stickerset }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stickers_createStickerSet
//
type TLstickers_createStickerSet struct {
	masks      bool
	animated   bool
	user_id    *InputUser
	title      string
	short_name string
	thumb      *InputDocument
	stickers   []*InputStickerSetItem
}

func (m *TLstickers_createStickerSet) Setmasks(v bool)                      { m.masks = v }
func (m *TLstickers_createStickerSet) Getmasks() bool                       { return m.masks }
func (m *TLstickers_createStickerSet) Setanimated(v bool)                   { m.animated = v }
func (m *TLstickers_createStickerSet) Getanimated() bool                    { return m.animated }
func (m *TLstickers_createStickerSet) Setuser_id(v *InputUser)              { m.user_id = v }
func (m *TLstickers_createStickerSet) Getuser_id() *InputUser               { return m.user_id }
func (m *TLstickers_createStickerSet) Settitle(v string)                    { m.title = v }
func (m *TLstickers_createStickerSet) Gettitle() string                     { return m.title }
func (m *TLstickers_createStickerSet) Setshort_name(v string)               { m.short_name = v }
func (m *TLstickers_createStickerSet) Getshort_name() string                { return m.short_name }
func (m *TLstickers_createStickerSet) Setthumb(v *InputDocument)            { m.thumb = v }
func (m *TLstickers_createStickerSet) Getthumb() *InputDocument             { return m.thumb }
func (m *TLstickers_createStickerSet) Setstickers(v []*InputStickerSetItem) { m.stickers = v }
func (m *TLstickers_createStickerSet) Getstickers() []*InputStickerSetItem  { return m.stickers }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stickers_removeStickerFromSet
//
type TLstickers_removeStickerFromSet struct {
	sticker *InputDocument
}

func (m *TLstickers_removeStickerFromSet) Setsticker(v *InputDocument) { m.sticker = v }
func (m *TLstickers_removeStickerFromSet) Getsticker() *InputDocument  { return m.sticker }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stickers_changeStickerPosition
//
type TLstickers_changeStickerPosition struct {
	sticker  *InputDocument
	position int32
}

func (m *TLstickers_changeStickerPosition) Setsticker(v *InputDocument) { m.sticker = v }
func (m *TLstickers_changeStickerPosition) Getsticker() *InputDocument  { return m.sticker }
func (m *TLstickers_changeStickerPosition) Setposition(v int32)         { m.position = v }
func (m *TLstickers_changeStickerPosition) Getposition() int32          { return m.position }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stickers_addStickerToSet
//
type TLstickers_addStickerToSet struct {
	stickerset *InputStickerSet
	sticker    *InputStickerSetItem
}

func (m *TLstickers_addStickerToSet) Setstickerset(v *InputStickerSet)  { m.stickerset = v }
func (m *TLstickers_addStickerToSet) Getstickerset() *InputStickerSet   { return m.stickerset }
func (m *TLstickers_addStickerToSet) Setsticker(v *InputStickerSetItem) { m.sticker = v }
func (m *TLstickers_addStickerToSet) Getsticker() *InputStickerSetItem  { return m.sticker }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stickers_setStickerSetThumb
//
type TLstickers_setStickerSetThumb struct {
	stickerset *InputStickerSet
	thumb      *InputDocument
}

func (m *TLstickers_setStickerSetThumb) Setstickerset(v *InputStickerSet) { m.stickerset = v }
func (m *TLstickers_setStickerSetThumb) Getstickerset() *InputStickerSet  { return m.stickerset }
func (m *TLstickers_setStickerSetThumb) Setthumb(v *InputDocument)        { m.thumb = v }
func (m *TLstickers_setStickerSetThumb) Getthumb() *InputDocument         { return m.thumb }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getPrivacy
//
type TLaccount_getPrivacy struct {
	key *InputPrivacyKey
}

func (m *TLaccount_getPrivacy) Setkey(v *InputPrivacyKey) { m.key = v }
func (m *TLaccount_getPrivacy) Getkey() *InputPrivacyKey  { return m.key }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_setPrivacy
//
type TLaccount_setPrivacy struct {
	key   *InputPrivacyKey
	rules []*InputPrivacyRule
}

func (m *TLaccount_setPrivacy) Setkey(v *InputPrivacyKey)      { m.key = v }
func (m *TLaccount_setPrivacy) Getkey() *InputPrivacyKey       { return m.key }
func (m *TLaccount_setPrivacy) Setrules(v []*InputPrivacyRule) { m.rules = v }
func (m *TLaccount_setPrivacy) Getrules() []*InputPrivacyRule  { return m.rules }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getSearchCounters
//
type TLmessages_getSearchCounters struct {
	peer    *InputPeer
	filters []*MessagesFilter
}

func (m *TLmessages_getSearchCounters) Setpeer(v *InputPeer)           { m.peer = v }
func (m *TLmessages_getSearchCounters) Getpeer() *InputPeer            { return m.peer }
func (m *TLmessages_getSearchCounters) Setfilters(v []*MessagesFilter) { m.filters = v }
func (m *TLmessages_getSearchCounters) Getfilters() []*MessagesFilter  { return m.filters }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getFavedStickers
//
type TLmessages_getFavedStickers struct {
	hash int32
}

func (m *TLmessages_getFavedStickers) Sethash(v int32) { m.hash = v }
func (m *TLmessages_getFavedStickers) Gethash() int32  { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_requestPasswordRecovery
//
type TLauth_requestPasswordRecovery struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getSuggestedDialogFilters
//
type TLmessages_getSuggestedDialogFilters struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getDocumentByHash
//
type TLmessages_getDocumentByHash struct {
	sha256    []byte
	size      int32
	mime_type string
}

func (m *TLmessages_getDocumentByHash) Setsha256(v []byte)    { m.sha256 = v }
func (m *TLmessages_getDocumentByHash) Getsha256() []byte     { return m.sha256 }
func (m *TLmessages_getDocumentByHash) Setsize(v int32)       { m.size = v }
func (m *TLmessages_getDocumentByHash) Getsize() int32        { return m.size }
func (m *TLmessages_getDocumentByHash) Setmime_type(v string) { m.mime_type = v }
func (m *TLmessages_getDocumentByHash) Getmime_type() string  { return m.mime_type }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_uploadTheme
//
type TLaccount_uploadTheme struct {
	file      *InputFile
	thumb     *InputFile
	file_name string
	mime_type string
}

func (m *TLaccount_uploadTheme) Setfile(v *InputFile)  { m.file = v }
func (m *TLaccount_uploadTheme) Getfile() *InputFile   { return m.file }
func (m *TLaccount_uploadTheme) Setthumb(v *InputFile) { m.thumb = v }
func (m *TLaccount_uploadTheme) Getthumb() *InputFile  { return m.thumb }
func (m *TLaccount_uploadTheme) Setfile_name(v string) { m.file_name = v }
func (m *TLaccount_uploadTheme) Getfile_name() string  { return m.file_name }
func (m *TLaccount_uploadTheme) Setmime_type(v string) { m.mime_type = v }
func (m *TLaccount_uploadTheme) Getmime_type() string  { return m.mime_type }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getConfig
//
type TLhelp_getConfig struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:photos_deletePhotos
//
type TLphotos_deletePhotos struct {
	id []*InputPhoto
}

func (m *TLphotos_deletePhotos) Setid(v []*InputPhoto) { m.id = v }
func (m *TLphotos_deletePhotos) Getid() []*InputPhoto  { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_receivedQueue
//
type TLmessages_receivedQueue struct {
	max_qts int32
}

func (m *TLmessages_receivedQueue) Setmax_qts(v int32) { m.max_qts = v }
func (m *TLmessages_receivedQueue) Getmax_qts() int32  { return m.max_qts }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:upload_reuploadCdnFile
//
type TLupload_reuploadCdnFile struct {
	file_token    []byte
	request_token []byte
}

func (m *TLupload_reuploadCdnFile) Setfile_token(v []byte)    { m.file_token = v }
func (m *TLupload_reuploadCdnFile) Getfile_token() []byte     { return m.file_token }
func (m *TLupload_reuploadCdnFile) Setrequest_token(v []byte) { m.request_token = v }
func (m *TLupload_reuploadCdnFile) Getrequest_token() []byte  { return m.request_token }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:upload_getCdnFileHashes
//
type TLupload_getCdnFileHashes struct {
	file_token []byte
	offset     int32
}

func (m *TLupload_getCdnFileHashes) Setfile_token(v []byte) { m.file_token = v }
func (m *TLupload_getCdnFileHashes) Getfile_token() []byte  { return m.file_token }
func (m *TLupload_getCdnFileHashes) Setoffset(v int32)      { m.offset = v }
func (m *TLupload_getCdnFileHashes) Getoffset() int32       { return m.offset }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:upload_getFileHashes
//
type TLupload_getFileHashes struct {
	location *InputFileLocation
	offset   int32
}

func (m *TLupload_getFileHashes) Setlocation(v *InputFileLocation) { m.location = v }
func (m *TLupload_getFileHashes) Getlocation() *InputFileLocation  { return m.location }
func (m *TLupload_getFileHashes) Setoffset(v int32)                { m.offset = v }
func (m *TLupload_getFileHashes) Getoffset() int32                 { return m.offset }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getNearestDc
//
type TLhelp_getNearestDc struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getDialogUnreadMarks
//
type TLmessages_getDialogUnreadMarks struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getChats
//
type TLmessages_getChats struct {
	id []int32
}

func (m *TLmessages_getChats) Setid(v []int32) { m.id = v }
func (m *TLmessages_getChats) Getid() []int32  { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getChannels
//
type TLchannels_getChannels struct {
	id []*InputChannel
}

func (m *TLchannels_getChannels) Setid(v []*InputChannel) { m.id = v }
func (m *TLchannels_getChannels) Getid() []*InputChannel  { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getAdminedPublicChannels
//
type TLchannels_getAdminedPublicChannels struct {
	by_location bool
	check_limit bool
}

func (m *TLchannels_getAdminedPublicChannels) Setby_location(v bool) { m.by_location = v }
func (m *TLchannels_getAdminedPublicChannels) Getby_location() bool  { return m.by_location }
func (m *TLchannels_getAdminedPublicChannels) Setcheck_limit(v bool) { m.check_limit = v }
func (m *TLchannels_getAdminedPublicChannels) Getcheck_limit() bool  { return m.check_limit }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getCommonChats
//
type TLmessages_getCommonChats struct {
	user_id *InputUser
	max_id  int32
	limit   int32
}

func (m *TLmessages_getCommonChats) Setuser_id(v *InputUser) { m.user_id = v }
func (m *TLmessages_getCommonChats) Getuser_id() *InputUser  { return m.user_id }
func (m *TLmessages_getCommonChats) Setmax_id(v int32)       { m.max_id = v }
func (m *TLmessages_getCommonChats) Getmax_id() int32        { return m.max_id }
func (m *TLmessages_getCommonChats) Setlimit(v int32)        { m.limit = v }
func (m *TLmessages_getCommonChats) Getlimit() int32         { return m.limit }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getAllChats
//
type TLmessages_getAllChats struct {
	except_ids []int32
}

func (m *TLmessages_getAllChats) Setexcept_ids(v []int32) { m.except_ids = v }
func (m *TLmessages_getAllChats) Getexcept_ids() []int32  { return m.except_ids }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getLeftChannels
//
type TLchannels_getLeftChannels struct {
	offset int32
}

func (m *TLchannels_getLeftChannels) Setoffset(v int32) { m.offset = v }
func (m *TLchannels_getLeftChannels) Getoffset() int32  { return m.offset }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getGroupsForDiscussion
//
type TLchannels_getGroupsForDiscussion struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_requestUrlAuth
//
type TLmessages_requestUrlAuth struct {
	peer      *InputPeer
	msg_id    int32
	button_id int32
}

func (m *TLmessages_requestUrlAuth) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_requestUrlAuth) Getpeer() *InputPeer  { return m.peer }
func (m *TLmessages_requestUrlAuth) Setmsg_id(v int32)    { m.msg_id = v }
func (m *TLmessages_requestUrlAuth) Getmsg_id() int32     { return m.msg_id }
func (m *TLmessages_requestUrlAuth) Setbutton_id(v int32) { m.button_id = v }
func (m *TLmessages_requestUrlAuth) Getbutton_id() int32  { return m.button_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_acceptUrlAuth
//
type TLmessages_acceptUrlAuth struct {
	write_allowed bool
	peer          *InputPeer
	msg_id        int32
	button_id     int32
}

func (m *TLmessages_acceptUrlAuth) Setwrite_allowed(v bool) { m.write_allowed = v }
func (m *TLmessages_acceptUrlAuth) Getwrite_allowed() bool  { return m.write_allowed }
func (m *TLmessages_acceptUrlAuth) Setpeer(v *InputPeer)    { m.peer = v }
func (m *TLmessages_acceptUrlAuth) Getpeer() *InputPeer     { return m.peer }
func (m *TLmessages_acceptUrlAuth) Setmsg_id(v int32)       { m.msg_id = v }
func (m *TLmessages_acceptUrlAuth) Getmsg_id() int32        { return m.msg_id }
func (m *TLmessages_acceptUrlAuth) Setbutton_id(v int32)    { m.button_id = v }
func (m *TLmessages_acceptUrlAuth) Getbutton_id() int32     { return m.button_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getPasswordSettings
//
type TLaccount_getPasswordSettings struct {
	password *InputCheckPasswordSRP
}

func (m *TLaccount_getPasswordSettings) Setpassword(v *InputCheckPasswordSRP) { m.password = v }
func (m *TLaccount_getPasswordSettings) Getpassword() *InputCheckPasswordSRP  { return m.password }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stats_getMegagroupStats
//
type TLstats_getMegagroupStats struct {
	dark    bool
	channel *InputChannel
}

func (m *TLstats_getMegagroupStats) Setdark(v bool)             { m.dark = v }
func (m *TLstats_getMegagroupStats) Getdark() bool              { return m.dark }
func (m *TLstats_getMegagroupStats) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLstats_getMegagroupStats) Getchannel() *InputChannel  { return m.channel }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_resolveUsername
//
type TLcontacts_resolveUsername struct {
	username string
}

func (m *TLcontacts_resolveUsername) Setusername(v string) { m.username = v }
func (m *TLcontacts_resolveUsername) Getusername() string  { return m.username }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getFeaturedStickers
//
type TLmessages_getFeaturedStickers struct {
	hash int32
}

func (m *TLmessages_getFeaturedStickers) Sethash(v int32) { m.hash = v }
func (m *TLmessages_getFeaturedStickers) Gethash() int32  { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getOldFeaturedStickers
//
type TLmessages_getOldFeaturedStickers struct {
	offset int32
	limit  int32
	hash   int32
}

func (m *TLmessages_getOldFeaturedStickers) Setoffset(v int32) { m.offset = v }
func (m *TLmessages_getOldFeaturedStickers) Getoffset() int32  { return m.offset }
func (m *TLmessages_getOldFeaturedStickers) Setlimit(v int32)  { m.limit = v }
func (m *TLmessages_getOldFeaturedStickers) Getlimit() int32   { return m.limit }
func (m *TLmessages_getOldFeaturedStickers) Sethash(v int32)   { m.hash = v }
func (m *TLmessages_getOldFeaturedStickers) Gethash() int32    { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getArchivedStickers
//
type TLmessages_getArchivedStickers struct {
	masks     bool
	offset_id int64
	limit     int32
}

func (m *TLmessages_getArchivedStickers) Setmasks(v bool)      { m.masks = v }
func (m *TLmessages_getArchivedStickers) Getmasks() bool       { return m.masks }
func (m *TLmessages_getArchivedStickers) Setoffset_id(v int64) { m.offset_id = v }
func (m *TLmessages_getArchivedStickers) Getoffset_id() int64  { return m.offset_id }
func (m *TLmessages_getArchivedStickers) Setlimit(v int32)     { m.limit = v }
func (m *TLmessages_getArchivedStickers) Getlimit() int32      { return m.limit }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:bots_sendCustomRequest
//
type TLbots_sendCustomRequest struct {
	custom_method string
	params        *DataJSON
}

func (m *TLbots_sendCustomRequest) Setcustom_method(v string) { m.custom_method = v }
func (m *TLbots_sendCustomRequest) Getcustom_method() string  { return m.custom_method }
func (m *TLbots_sendCustomRequest) Setparams(v *DataJSON)     { m.params = v }
func (m *TLbots_sendCustomRequest) Getparams() *DataJSON      { return m.params }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:phone_getCallConfig
//
type TLphone_getCallConfig struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_uploadEncryptedFile
//
type TLmessages_uploadEncryptedFile struct {
	peer *InputEncryptedChat
	file *InputEncryptedFile
}

func (m *TLmessages_uploadEncryptedFile) Setpeer(v *InputEncryptedChat) { m.peer = v }
func (m *TLmessages_uploadEncryptedFile) Getpeer() *InputEncryptedChat  { return m.peer }
func (m *TLmessages_uploadEncryptedFile) Setfile(v *InputEncryptedFile) { m.file = v }
func (m *TLmessages_uploadEncryptedFile) Getfile() *InputEncryptedFile  { return m.file }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_requestEncryption
//
type TLmessages_requestEncryption struct {
	user_id   *InputUser
	random_id int32
	g_a       []byte
}

func (m *TLmessages_requestEncryption) Setuser_id(v *InputUser) { m.user_id = v }
func (m *TLmessages_requestEncryption) Getuser_id() *InputUser  { return m.user_id }
func (m *TLmessages_requestEncryption) Setrandom_id(v int32)    { m.random_id = v }
func (m *TLmessages_requestEncryption) Getrandom_id() int32     { return m.random_id }
func (m *TLmessages_requestEncryption) Setg_a(v []byte)         { m.g_a = v }
func (m *TLmessages_requestEncryption) Getg_a() []byte          { return m.g_a }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_acceptEncryption
//
type TLmessages_acceptEncryption struct {
	peer            *InputEncryptedChat
	g_b             []byte
	key_fingerprint int64
}

func (m *TLmessages_acceptEncryption) Setpeer(v *InputEncryptedChat) { m.peer = v }
func (m *TLmessages_acceptEncryption) Getpeer() *InputEncryptedChat  { return m.peer }
func (m *TLmessages_acceptEncryption) Setg_b(v []byte)               { m.g_b = v }
func (m *TLmessages_acceptEncryption) Getg_b() []byte                { return m.g_b }
func (m *TLmessages_acceptEncryption) Setkey_fingerprint(v int64)    { m.key_fingerprint = v }
func (m *TLmessages_acceptEncryption) Getkey_fingerprint() int64     { return m.key_fingerprint }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getEmojiKeywordsLanguages
//
type TLmessages_getEmojiKeywordsLanguages struct {
	lang_codes []string
}

func (m *TLmessages_getEmojiKeywordsLanguages) Setlang_codes(v []string) { m.lang_codes = v }
func (m *TLmessages_getEmojiKeywordsLanguages) Getlang_codes() []string  { return m.lang_codes }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getAccountTTL
//
type TLaccount_getAccountTTL struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getPromoData
//
type TLhelp_getPromoData struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_getContactIDs
//
type TLcontacts_getContactIDs struct {
	hash int32
}

func (m *TLcontacts_getContactIDs) Sethash(v int32) { m.hash = v }
func (m *TLcontacts_getContactIDs) Gethash() int32  { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getMessagesViews
//
type TLmessages_getMessagesViews struct {
	peer      *InputPeer
	id        []int32
	increment *Bool
}

func (m *TLmessages_getMessagesViews) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_getMessagesViews) Getpeer() *InputPeer  { return m.peer }
func (m *TLmessages_getMessagesViews) Setid(v []int32)      { m.id = v }
func (m *TLmessages_getMessagesViews) Getid() []int32       { return m.id }
func (m *TLmessages_getMessagesViews) Setincrement(v *Bool) { m.increment = v }
func (m *TLmessages_getMessagesViews) Getincrement() *Bool  { return m.increment }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getGlobalPrivacySettings
//
type TLaccount_getGlobalPrivacySettings struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_setGlobalPrivacySettings
//
type TLaccount_setGlobalPrivacySettings struct {
	settings *GlobalPrivacySettings
}

func (m *TLaccount_setGlobalPrivacySettings) Setsettings(v *GlobalPrivacySettings) { m.settings = v }
func (m *TLaccount_setGlobalPrivacySettings) Getsettings() *GlobalPrivacySettings  { return m.settings }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_getBlocked
//
type TLcontacts_getBlocked struct {
	offset int32
	limit  int32
}

func (m *TLcontacts_getBlocked) Setoffset(v int32) { m.offset = v }
func (m *TLcontacts_getBlocked) Getoffset() int32  { return m.offset }
func (m *TLcontacts_getBlocked) Setlimit(v int32)  { m.limit = v }
func (m *TLcontacts_getBlocked) Getlimit() int32   { return m.limit }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:photos_getUserPhotos
//
type TLphotos_getUserPhotos struct {
	user_id *InputUser
	offset  int32
	max_id  int64
	limit   int32
}

func (m *TLphotos_getUserPhotos) Setuser_id(v *InputUser) { m.user_id = v }
func (m *TLphotos_getUserPhotos) Getuser_id() *InputUser  { return m.user_id }
func (m *TLphotos_getUserPhotos) Setoffset(v int32)       { m.offset = v }
func (m *TLphotos_getUserPhotos) Getoffset() int32        { return m.offset }
func (m *TLphotos_getUserPhotos) Setmax_id(v int64)       { m.max_id = v }
func (m *TLphotos_getUserPhotos) Getmax_id() int64        { return m.max_id }
func (m *TLphotos_getUserPhotos) Setlimit(v int32)        { m.limit = v }
func (m *TLphotos_getUserPhotos) Getlimit() int32         { return m.limit }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:payments_sendPaymentForm
//
type TLpayments_sendPaymentForm struct {
	msg_id             int32
	requested_info_id  string
	shipping_option_id string
	credentials        *InputPaymentCredentials
}

func (m *TLpayments_sendPaymentForm) Setmsg_id(v int32)                         { m.msg_id = v }
func (m *TLpayments_sendPaymentForm) Getmsg_id() int32                          { return m.msg_id }
func (m *TLpayments_sendPaymentForm) Setrequested_info_id(v string)             { m.requested_info_id = v }
func (m *TLpayments_sendPaymentForm) Getrequested_info_id() string              { return m.requested_info_id }
func (m *TLpayments_sendPaymentForm) Setshipping_option_id(v string)            { m.shipping_option_id = v }
func (m *TLpayments_sendPaymentForm) Getshipping_option_id() string             { return m.shipping_option_id }
func (m *TLpayments_sendPaymentForm) Setcredentials(v *InputPaymentCredentials) { m.credentials = v }
func (m *TLpayments_sendPaymentForm) Getcredentials() *InputPaymentCredentials  { return m.credentials }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getParticipant
//
type TLchannels_getParticipant struct {
	channel *InputChannel
	user_id *InputUser
}

func (m *TLchannels_getParticipant) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_getParticipant) Getchannel() *InputChannel  { return m.channel }
func (m *TLchannels_getParticipant) Setuser_id(v *InputUser)    { m.user_id = v }
func (m *TLchannels_getParticipant) Getuser_id() *InputUser     { return m.user_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_searchStickerSets
//
type TLmessages_searchStickerSets struct {
	exclude_featured bool
	q                string
	hash             int32
}

func (m *TLmessages_searchStickerSets) Setexclude_featured(v bool) { m.exclude_featured = v }
func (m *TLmessages_searchStickerSets) Getexclude_featured() bool  { return m.exclude_featured }
func (m *TLmessages_searchStickerSets) Setq(v string)              { m.q = v }
func (m *TLmessages_searchStickerSets) Getq() string               { return m.q }
func (m *TLmessages_searchStickerSets) Sethash(v int32)            { m.hash = v }
func (m *TLmessages_searchStickerSets) Gethash() int32             { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getDhConfig
//
type TLmessages_getDhConfig struct {
	version       int32
	random_length int32
}

func (m *TLmessages_getDhConfig) Setversion(v int32)       { m.version = v }
func (m *TLmessages_getDhConfig) Getversion() int32        { return m.version }
func (m *TLmessages_getDhConfig) Setrandom_length(v int32) { m.random_length = v }
func (m *TLmessages_getDhConfig) Getrandom_length() int32  { return m.random_length }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:upload_getWebFile
//
type TLupload_getWebFile struct {
	location *InputWebFileLocation
	offset   int32
	limit    int32
}

func (m *TLupload_getWebFile) Setlocation(v *InputWebFileLocation) { m.location = v }
func (m *TLupload_getWebFile) Getlocation() *InputWebFileLocation  { return m.location }
func (m *TLupload_getWebFile) Setoffset(v int32)                   { m.offset = v }
func (m *TLupload_getWebFile) Getoffset() int32                    { return m.offset }
func (m *TLupload_getWebFile) Setlimit(v int32)                    { m.limit = v }
func (m *TLupload_getWebFile) Getlimit() int32                     { return m.limit }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_createTheme
//
type TLaccount_createTheme struct {
	slug     string
	title    string
	document *InputDocument
	settings *InputThemeSettings
}

func (m *TLaccount_createTheme) Setslug(v string)                  { m.slug = v }
func (m *TLaccount_createTheme) Getslug() string                   { return m.slug }
func (m *TLaccount_createTheme) Settitle(v string)                 { m.title = v }
func (m *TLaccount_createTheme) Gettitle() string                  { return m.title }
func (m *TLaccount_createTheme) Setdocument(v *InputDocument)      { m.document = v }
func (m *TLaccount_createTheme) Getdocument() *InputDocument       { return m.document }
func (m *TLaccount_createTheme) Setsettings(v *InputThemeSettings) { m.settings = v }
func (m *TLaccount_createTheme) Getsettings() *InputThemeSettings  { return m.settings }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_updateTheme
//
type TLaccount_updateTheme struct {
	format   string
	theme    *InputTheme
	slug     string
	title    string
	document *InputDocument
	settings *InputThemeSettings
}

func (m *TLaccount_updateTheme) Setformat(v string)                { m.format = v }
func (m *TLaccount_updateTheme) Getformat() string                 { return m.format }
func (m *TLaccount_updateTheme) Settheme(v *InputTheme)            { m.theme = v }
func (m *TLaccount_updateTheme) Gettheme() *InputTheme             { return m.theme }
func (m *TLaccount_updateTheme) Setslug(v string)                  { m.slug = v }
func (m *TLaccount_updateTheme) Getslug() string                   { return m.slug }
func (m *TLaccount_updateTheme) Settitle(v string)                 { m.title = v }
func (m *TLaccount_updateTheme) Gettitle() string                  { return m.title }
func (m *TLaccount_updateTheme) Setdocument(v *InputDocument)      { m.document = v }
func (m *TLaccount_updateTheme) Getdocument() *InputDocument       { return m.document }
func (m *TLaccount_updateTheme) Setsettings(v *InputThemeSettings) { m.settings = v }
func (m *TLaccount_updateTheme) Getsettings() *InputThemeSettings  { return m.settings }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getTheme
//
type TLaccount_getTheme struct {
	format      string
	theme       *InputTheme
	document_id int64
}

func (m *TLaccount_getTheme) Setformat(v string)     { m.format = v }
func (m *TLaccount_getTheme) Getformat() string      { return m.format }
func (m *TLaccount_getTheme) Settheme(v *InputTheme) { m.theme = v }
func (m *TLaccount_getTheme) Gettheme() *InputTheme  { return m.theme }
func (m *TLaccount_getTheme) Setdocument_id(v int64) { m.document_id = v }
func (m *TLaccount_getTheme) Getdocument_id() int64  { return m.document_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getEmojiKeywords
//
type TLmessages_getEmojiKeywords struct {
	lang_code string
}

func (m *TLmessages_getEmojiKeywords) Setlang_code(v string) { m.lang_code = v }
func (m *TLmessages_getEmojiKeywords) Getlang_code() string  { return m.lang_code }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getEmojiKeywordsDifference
//
type TLmessages_getEmojiKeywordsDifference struct {
	lang_code    string
	from_version int32
}

func (m *TLmessages_getEmojiKeywordsDifference) Setlang_code(v string)   { m.lang_code = v }
func (m *TLmessages_getEmojiKeywordsDifference) Getlang_code() string    { return m.lang_code }
func (m *TLmessages_getEmojiKeywordsDifference) Setfrom_version(v int32) { m.from_version = v }
func (m *TLmessages_getEmojiKeywordsDifference) Getfrom_version() int32  { return m.from_version }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getSplitRanges
//
type TLmessages_getSplitRanges struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getTmpPassword
//
type TLaccount_getTmpPassword struct {
	password *InputCheckPasswordSRP
	period   int32
}

func (m *TLaccount_getTmpPassword) Setpassword(v *InputCheckPasswordSRP) { m.password = v }
func (m *TLaccount_getTmpPassword) Getpassword() *InputCheckPasswordSRP  { return m.password }
func (m *TLaccount_getTmpPassword) Setperiod(v int32)                    { m.period = v }
func (m *TLaccount_getTmpPassword) Getperiod() int32                     { return m.period }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:invokeAfterMsg
//
type TLinvokeAfterMsg struct {
	msg_id int64
	query  []byte
}

func (m *TLinvokeAfterMsg) Setmsg_id(v int64) { m.msg_id = v }
func (m *TLinvokeAfterMsg) Getmsg_id() int64  { return m.msg_id }
func (m *TLinvokeAfterMsg) Setquery(v []byte) { m.query = v }
func (m *TLinvokeAfterMsg) Getquery() []byte  { return m.query }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:invokeAfterMsgs
//
type TLinvokeAfterMsgs struct {
	msg_ids []int64
	query   []byte
}

func (m *TLinvokeAfterMsgs) Setmsg_ids(v []int64) { m.msg_ids = v }
func (m *TLinvokeAfterMsgs) Getmsg_ids() []int64  { return m.msg_ids }
func (m *TLinvokeAfterMsgs) Setquery(v []byte)    { m.query = v }
func (m *TLinvokeAfterMsgs) Getquery() []byte     { return m.query }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:initConnection
//
type TLinitConnection struct {
	api_id           int32
	device_model     string
	system_version   string
	app_version      string
	system_lang_code string
	lang_pack        string
	lang_code        string
	proxy            *InputClientProxy
	params           *JSONValue
	query            []byte
}

func (m *TLinitConnection) Setapi_id(v int32)            { m.api_id = v }
func (m *TLinitConnection) Getapi_id() int32             { return m.api_id }
func (m *TLinitConnection) Setdevice_model(v string)     { m.device_model = v }
func (m *TLinitConnection) Getdevice_model() string      { return m.device_model }
func (m *TLinitConnection) Setsystem_version(v string)   { m.system_version = v }
func (m *TLinitConnection) Getsystem_version() string    { return m.system_version }
func (m *TLinitConnection) Setapp_version(v string)      { m.app_version = v }
func (m *TLinitConnection) Getapp_version() string       { return m.app_version }
func (m *TLinitConnection) Setsystem_lang_code(v string) { m.system_lang_code = v }
func (m *TLinitConnection) Getsystem_lang_code() string  { return m.system_lang_code }
func (m *TLinitConnection) Setlang_pack(v string)        { m.lang_pack = v }
func (m *TLinitConnection) Getlang_pack() string         { return m.lang_pack }
func (m *TLinitConnection) Setlang_code(v string)        { m.lang_code = v }
func (m *TLinitConnection) Getlang_code() string         { return m.lang_code }
func (m *TLinitConnection) Setproxy(v *InputClientProxy) { m.proxy = v }
func (m *TLinitConnection) Getproxy() *InputClientProxy  { return m.proxy }
func (m *TLinitConnection) Setparams(v *JSONValue)       { m.params = v }
func (m *TLinitConnection) Getparams() *JSONValue        { return m.params }
func (m *TLinitConnection) Setquery(v []byte)            { m.query = v }
func (m *TLinitConnection) Getquery() []byte             { return m.query }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:invokeWithLayer
//
type TLinvokeWithLayer struct {
	layer int32
	query []byte
}

func (m *TLinvokeWithLayer) Setlayer(v int32)  { m.layer = v }
func (m *TLinvokeWithLayer) Getlayer() int32   { return m.layer }
func (m *TLinvokeWithLayer) Setquery(v []byte) { m.query = v }
func (m *TLinvokeWithLayer) Getquery() []byte  { return m.query }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:invokeWithoutUpdates
//
type TLinvokeWithoutUpdates struct {
	query []byte
}

func (m *TLinvokeWithoutUpdates) Setquery(v []byte) { m.query = v }
func (m *TLinvokeWithoutUpdates) Getquery() []byte  { return m.query }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:invokeWithMessagesRange
//
type TLinvokeWithMessagesRange struct {
	range_key *MessageRange
	query     []byte
}

func (m *TLinvokeWithMessagesRange) Setrange_key(v *MessageRange) { m.range_key = v }
func (m *TLinvokeWithMessagesRange) Getrange_key() *MessageRange  { return m.range_key }
func (m *TLinvokeWithMessagesRange) Setquery(v []byte)            { m.query = v }
func (m *TLinvokeWithMessagesRange) Getquery() []byte             { return m.query }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:invokeWithTakeout
//
type TLinvokeWithTakeout struct {
	takeout_id int64
	query      []byte
}

func (m *TLinvokeWithTakeout) Settakeout_id(v int64) { m.takeout_id = v }
func (m *TLinvokeWithTakeout) Gettakeout_id() int64  { return m.takeout_id }
func (m *TLinvokeWithTakeout) Setquery(v []byte)     { m.query = v }
func (m *TLinvokeWithTakeout) Getquery() []byte      { return m.query }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getMessages
//
type TLmessages_getMessages struct {
	id []*InputMessage
}

func (m *TLmessages_getMessages) Setid(v []*InputMessage) { m.id = v }
func (m *TLmessages_getMessages) Getid() []*InputMessage  { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getHistory
//
type TLmessages_getHistory struct {
	peer        *InputPeer
	offset_id   int32
	offset_date int32
	add_offset  int32
	limit       int32
	max_id      int32
	min_id      int32
	hash        int32
}

func (m *TLmessages_getHistory) Setpeer(v *InputPeer)   { m.peer = v }
func (m *TLmessages_getHistory) Getpeer() *InputPeer    { return m.peer }
func (m *TLmessages_getHistory) Setoffset_id(v int32)   { m.offset_id = v }
func (m *TLmessages_getHistory) Getoffset_id() int32    { return m.offset_id }
func (m *TLmessages_getHistory) Setoffset_date(v int32) { m.offset_date = v }
func (m *TLmessages_getHistory) Getoffset_date() int32  { return m.offset_date }
func (m *TLmessages_getHistory) Setadd_offset(v int32)  { m.add_offset = v }
func (m *TLmessages_getHistory) Getadd_offset() int32   { return m.add_offset }
func (m *TLmessages_getHistory) Setlimit(v int32)       { m.limit = v }
func (m *TLmessages_getHistory) Getlimit() int32        { return m.limit }
func (m *TLmessages_getHistory) Setmax_id(v int32)      { m.max_id = v }
func (m *TLmessages_getHistory) Getmax_id() int32       { return m.max_id }
func (m *TLmessages_getHistory) Setmin_id(v int32)      { m.min_id = v }
func (m *TLmessages_getHistory) Getmin_id() int32       { return m.min_id }
func (m *TLmessages_getHistory) Sethash(v int32)        { m.hash = v }
func (m *TLmessages_getHistory) Gethash() int32         { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_search
//
type TLmessages_search struct {
	peer       *InputPeer
	q          string
	from_id    *InputPeer
	top_msg_id int32
	filter     *MessagesFilter
	min_date   int32
	max_date   int32
	offset_id  int32
	add_offset int32
	limit      int32
	max_id     int32
	min_id     int32
	hash       int32
}

func (m *TLmessages_search) Setpeer(v *InputPeer)        { m.peer = v }
func (m *TLmessages_search) Getpeer() *InputPeer         { return m.peer }
func (m *TLmessages_search) Setq(v string)               { m.q = v }
func (m *TLmessages_search) Getq() string                { return m.q }
func (m *TLmessages_search) Setfrom_id(v *InputPeer)     { m.from_id = v }
func (m *TLmessages_search) Getfrom_id() *InputPeer      { return m.from_id }
func (m *TLmessages_search) Settop_msg_id(v int32)       { m.top_msg_id = v }
func (m *TLmessages_search) Gettop_msg_id() int32        { return m.top_msg_id }
func (m *TLmessages_search) Setfilter(v *MessagesFilter) { m.filter = v }
func (m *TLmessages_search) Getfilter() *MessagesFilter  { return m.filter }
func (m *TLmessages_search) Setmin_date(v int32)         { m.min_date = v }
func (m *TLmessages_search) Getmin_date() int32          { return m.min_date }
func (m *TLmessages_search) Setmax_date(v int32)         { m.max_date = v }
func (m *TLmessages_search) Getmax_date() int32          { return m.max_date }
func (m *TLmessages_search) Setoffset_id(v int32)        { m.offset_id = v }
func (m *TLmessages_search) Getoffset_id() int32         { return m.offset_id }
func (m *TLmessages_search) Setadd_offset(v int32)       { m.add_offset = v }
func (m *TLmessages_search) Getadd_offset() int32        { return m.add_offset }
func (m *TLmessages_search) Setlimit(v int32)            { m.limit = v }
func (m *TLmessages_search) Getlimit() int32             { return m.limit }
func (m *TLmessages_search) Setmax_id(v int32)           { m.max_id = v }
func (m *TLmessages_search) Getmax_id() int32            { return m.max_id }
func (m *TLmessages_search) Setmin_id(v int32)           { m.min_id = v }
func (m *TLmessages_search) Getmin_id() int32            { return m.min_id }
func (m *TLmessages_search) Sethash(v int32)             { m.hash = v }
func (m *TLmessages_search) Gethash() int32              { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getMessages
//
type TLchannels_getMessages struct {
	channel *InputChannel
	id      []*InputMessage
}

func (m *TLchannels_getMessages) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_getMessages) Getchannel() *InputChannel  { return m.channel }
func (m *TLchannels_getMessages) Setid(v []*InputMessage)    { m.id = v }
func (m *TLchannels_getMessages) Getid() []*InputMessage     { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_searchGlobal
//
type TLmessages_searchGlobal struct {
	folder_id   int32
	q           string
	filter      *MessagesFilter
	min_date    int32
	max_date    int32
	offset_rate int32
	offset_peer *InputPeer
	offset_id   int32
	limit       int32
}

func (m *TLmessages_searchGlobal) Setfolder_id(v int32)        { m.folder_id = v }
func (m *TLmessages_searchGlobal) Getfolder_id() int32         { return m.folder_id }
func (m *TLmessages_searchGlobal) Setq(v string)               { m.q = v }
func (m *TLmessages_searchGlobal) Getq() string                { return m.q }
func (m *TLmessages_searchGlobal) Setfilter(v *MessagesFilter) { m.filter = v }
func (m *TLmessages_searchGlobal) Getfilter() *MessagesFilter  { return m.filter }
func (m *TLmessages_searchGlobal) Setmin_date(v int32)         { m.min_date = v }
func (m *TLmessages_searchGlobal) Getmin_date() int32          { return m.min_date }
func (m *TLmessages_searchGlobal) Setmax_date(v int32)         { m.max_date = v }
func (m *TLmessages_searchGlobal) Getmax_date() int32          { return m.max_date }
func (m *TLmessages_searchGlobal) Setoffset_rate(v int32)      { m.offset_rate = v }
func (m *TLmessages_searchGlobal) Getoffset_rate() int32       { return m.offset_rate }
func (m *TLmessages_searchGlobal) Setoffset_peer(v *InputPeer) { m.offset_peer = v }
func (m *TLmessages_searchGlobal) Getoffset_peer() *InputPeer  { return m.offset_peer }
func (m *TLmessages_searchGlobal) Setoffset_id(v int32)        { m.offset_id = v }
func (m *TLmessages_searchGlobal) Getoffset_id() int32         { return m.offset_id }
func (m *TLmessages_searchGlobal) Setlimit(v int32)            { m.limit = v }
func (m *TLmessages_searchGlobal) Getlimit() int32             { return m.limit }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getUnreadMentions
//
type TLmessages_getUnreadMentions struct {
	peer       *InputPeer
	offset_id  int32
	add_offset int32
	limit      int32
	max_id     int32
	min_id     int32
}

func (m *TLmessages_getUnreadMentions) Setpeer(v *InputPeer)  { m.peer = v }
func (m *TLmessages_getUnreadMentions) Getpeer() *InputPeer   { return m.peer }
func (m *TLmessages_getUnreadMentions) Setoffset_id(v int32)  { m.offset_id = v }
func (m *TLmessages_getUnreadMentions) Getoffset_id() int32   { return m.offset_id }
func (m *TLmessages_getUnreadMentions) Setadd_offset(v int32) { m.add_offset = v }
func (m *TLmessages_getUnreadMentions) Getadd_offset() int32  { return m.add_offset }
func (m *TLmessages_getUnreadMentions) Setlimit(v int32)      { m.limit = v }
func (m *TLmessages_getUnreadMentions) Getlimit() int32       { return m.limit }
func (m *TLmessages_getUnreadMentions) Setmax_id(v int32)     { m.max_id = v }
func (m *TLmessages_getUnreadMentions) Getmax_id() int32      { return m.max_id }
func (m *TLmessages_getUnreadMentions) Setmin_id(v int32)     { m.min_id = v }
func (m *TLmessages_getUnreadMentions) Getmin_id() int32      { return m.min_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getRecentLocations
//
type TLmessages_getRecentLocations struct {
	peer  *InputPeer
	limit int32
	hash  int32
}

func (m *TLmessages_getRecentLocations) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_getRecentLocations) Getpeer() *InputPeer  { return m.peer }
func (m *TLmessages_getRecentLocations) Setlimit(v int32)     { m.limit = v }
func (m *TLmessages_getRecentLocations) Getlimit() int32      { return m.limit }
func (m *TLmessages_getRecentLocations) Sethash(v int32)      { m.hash = v }
func (m *TLmessages_getRecentLocations) Gethash() int32       { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getScheduledHistory
//
type TLmessages_getScheduledHistory struct {
	peer *InputPeer
	hash int32
}

func (m *TLmessages_getScheduledHistory) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_getScheduledHistory) Getpeer() *InputPeer  { return m.peer }
func (m *TLmessages_getScheduledHistory) Sethash(v int32)      { m.hash = v }
func (m *TLmessages_getScheduledHistory) Gethash() int32       { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getScheduledMessages
//
type TLmessages_getScheduledMessages struct {
	peer *InputPeer
	id   []int32
}

func (m *TLmessages_getScheduledMessages) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_getScheduledMessages) Getpeer() *InputPeer  { return m.peer }
func (m *TLmessages_getScheduledMessages) Setid(v []int32)      { m.id = v }
func (m *TLmessages_getScheduledMessages) Getid() []int32       { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getReplies
//
type TLmessages_getReplies struct {
	peer        *InputPeer
	msg_id      int32
	offset_id   int32
	offset_date int32
	add_offset  int32
	limit       int32
	max_id      int32
	min_id      int32
	hash        int32
}

func (m *TLmessages_getReplies) Setpeer(v *InputPeer)   { m.peer = v }
func (m *TLmessages_getReplies) Getpeer() *InputPeer    { return m.peer }
func (m *TLmessages_getReplies) Setmsg_id(v int32)      { m.msg_id = v }
func (m *TLmessages_getReplies) Getmsg_id() int32       { return m.msg_id }
func (m *TLmessages_getReplies) Setoffset_id(v int32)   { m.offset_id = v }
func (m *TLmessages_getReplies) Getoffset_id() int32    { return m.offset_id }
func (m *TLmessages_getReplies) Setoffset_date(v int32) { m.offset_date = v }
func (m *TLmessages_getReplies) Getoffset_date() int32  { return m.offset_date }
func (m *TLmessages_getReplies) Setadd_offset(v int32)  { m.add_offset = v }
func (m *TLmessages_getReplies) Getadd_offset() int32   { return m.add_offset }
func (m *TLmessages_getReplies) Setlimit(v int32)       { m.limit = v }
func (m *TLmessages_getReplies) Getlimit() int32        { return m.limit }
func (m *TLmessages_getReplies) Setmax_id(v int32)      { m.max_id = v }
func (m *TLmessages_getReplies) Getmax_id() int32       { return m.max_id }
func (m *TLmessages_getReplies) Setmin_id(v int32)      { m.min_id = v }
func (m *TLmessages_getReplies) Getmin_id() int32       { return m.min_id }
func (m *TLmessages_getReplies) Sethash(v int32)        { m.hash = v }
func (m *TLmessages_getReplies) Gethash() int32         { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stats_getMessagePublicForwards
//
type TLstats_getMessagePublicForwards struct {
	channel     *InputChannel
	msg_id      int32
	offset_rate int32
	offset_peer *InputPeer
	offset_id   int32
	limit       int32
}

func (m *TLstats_getMessagePublicForwards) Setchannel(v *InputChannel)  { m.channel = v }
func (m *TLstats_getMessagePublicForwards) Getchannel() *InputChannel   { return m.channel }
func (m *TLstats_getMessagePublicForwards) Setmsg_id(v int32)           { m.msg_id = v }
func (m *TLstats_getMessagePublicForwards) Getmsg_id() int32            { return m.msg_id }
func (m *TLstats_getMessagePublicForwards) Setoffset_rate(v int32)      { m.offset_rate = v }
func (m *TLstats_getMessagePublicForwards) Getoffset_rate() int32       { return m.offset_rate }
func (m *TLstats_getMessagePublicForwards) Setoffset_peer(v *InputPeer) { m.offset_peer = v }
func (m *TLstats_getMessagePublicForwards) Getoffset_peer() *InputPeer  { return m.offset_peer }
func (m *TLstats_getMessagePublicForwards) Setoffset_id(v int32)        { m.offset_id = v }
func (m *TLstats_getMessagePublicForwards) Getoffset_id() int32         { return m.offset_id }
func (m *TLstats_getMessagePublicForwards) Setlimit(v int32)            { m.limit = v }
func (m *TLstats_getMessagePublicForwards) Getlimit() int32             { return m.limit }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_getContacts
//
type TLcontacts_getContacts struct {
	hash int32
}

func (m *TLcontacts_getContacts) Sethash(v int32) { m.hash = v }
func (m *TLcontacts_getContacts) Gethash() int32  { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getStatsURL
//
type TLmessages_getStatsURL struct {
	dark   bool
	peer   *InputPeer
	params string
}

func (m *TLmessages_getStatsURL) Setdark(v bool)       { m.dark = v }
func (m *TLmessages_getStatsURL) Getdark() bool        { return m.dark }
func (m *TLmessages_getStatsURL) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_getStatsURL) Getpeer() *InputPeer  { return m.peer }
func (m *TLmessages_getStatsURL) Setparams(v string)   { m.params = v }
func (m *TLmessages_getStatsURL) Getparams() string    { return m.params }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_acceptLoginToken
//
type TLauth_acceptLoginToken struct {
	token []byte
}

func (m *TLauth_acceptLoginToken) Settoken(v []byte) { m.token = v }
func (m *TLauth_acceptLoginToken) Gettoken() []byte  { return m.token }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_sendCode
//
type TLauth_sendCode struct {
	phone_number string
	api_id       int32
	api_hash     string
	settings     *CodeSettings
}

func (m *TLauth_sendCode) Setphone_number(v string)    { m.phone_number = v }
func (m *TLauth_sendCode) Getphone_number() string     { return m.phone_number }
func (m *TLauth_sendCode) Setapi_id(v int32)           { m.api_id = v }
func (m *TLauth_sendCode) Getapi_id() int32            { return m.api_id }
func (m *TLauth_sendCode) Setapi_hash(v string)        { m.api_hash = v }
func (m *TLauth_sendCode) Getapi_hash() string         { return m.api_hash }
func (m *TLauth_sendCode) Setsettings(v *CodeSettings) { m.settings = v }
func (m *TLauth_sendCode) Getsettings() *CodeSettings  { return m.settings }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_sendChangePhoneCode
//
type TLaccount_sendChangePhoneCode struct {
	phone_number string
	settings     *CodeSettings
}

func (m *TLaccount_sendChangePhoneCode) Setphone_number(v string)    { m.phone_number = v }
func (m *TLaccount_sendChangePhoneCode) Getphone_number() string     { return m.phone_number }
func (m *TLaccount_sendChangePhoneCode) Setsettings(v *CodeSettings) { m.settings = v }
func (m *TLaccount_sendChangePhoneCode) Getsettings() *CodeSettings  { return m.settings }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_resendCode
//
type TLauth_resendCode struct {
	phone_number    string
	phone_code_hash string
}

func (m *TLauth_resendCode) Setphone_number(v string)    { m.phone_number = v }
func (m *TLauth_resendCode) Getphone_number() string     { return m.phone_number }
func (m *TLauth_resendCode) Setphone_code_hash(v string) { m.phone_code_hash = v }
func (m *TLauth_resendCode) Getphone_code_hash() string  { return m.phone_code_hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_sendConfirmPhoneCode
//
type TLaccount_sendConfirmPhoneCode struct {
	hash     string
	settings *CodeSettings
}

func (m *TLaccount_sendConfirmPhoneCode) Sethash(v string)            { m.hash = v }
func (m *TLaccount_sendConfirmPhoneCode) Gethash() string             { return m.hash }
func (m *TLaccount_sendConfirmPhoneCode) Setsettings(v *CodeSettings) { m.settings = v }
func (m *TLaccount_sendConfirmPhoneCode) Getsettings() *CodeSettings  { return m.settings }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_sendVerifyPhoneCode
//
type TLaccount_sendVerifyPhoneCode struct {
	phone_number string
	settings     *CodeSettings
}

func (m *TLaccount_sendVerifyPhoneCode) Setphone_number(v string)    { m.phone_number = v }
func (m *TLaccount_sendVerifyPhoneCode) Getphone_number() string     { return m.phone_number }
func (m *TLaccount_sendVerifyPhoneCode) Setsettings(v *CodeSettings) { m.settings = v }
func (m *TLaccount_sendVerifyPhoneCode) Getsettings() *CodeSettings  { return m.settings }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:payments_getBankCardData
//
type TLpayments_getBankCardData struct {
	number string
}

func (m *TLpayments_getBankCardData) Setnumber(v string) { m.number = v }
func (m *TLpayments_getBankCardData) Getnumber() string  { return m.number }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:stats_getBroadcastStats
//
type TLstats_getBroadcastStats struct {
	dark    bool
	channel *InputChannel
}

func (m *TLstats_getBroadcastStats) Setdark(v bool)             { m.dark = v }
func (m *TLstats_getBroadcastStats) Getdark() bool              { return m.dark }
func (m *TLstats_getBroadcastStats) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLstats_getBroadcastStats) Getchannel() *InputChannel  { return m.channel }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getBotCallbackAnswer
//
type TLmessages_getBotCallbackAnswer struct {
	game     bool
	peer     *InputPeer
	msg_id   int32
	data     []byte
	password *InputCheckPasswordSRP
}

func (m *TLmessages_getBotCallbackAnswer) Setgame(v bool)                       { m.game = v }
func (m *TLmessages_getBotCallbackAnswer) Getgame() bool                        { return m.game }
func (m *TLmessages_getBotCallbackAnswer) Setpeer(v *InputPeer)                 { m.peer = v }
func (m *TLmessages_getBotCallbackAnswer) Getpeer() *InputPeer                  { return m.peer }
func (m *TLmessages_getBotCallbackAnswer) Setmsg_id(v int32)                    { m.msg_id = v }
func (m *TLmessages_getBotCallbackAnswer) Getmsg_id() int32                     { return m.msg_id }
func (m *TLmessages_getBotCallbackAnswer) Setdata(v []byte)                     { m.data = v }
func (m *TLmessages_getBotCallbackAnswer) Getdata() []byte                      { return m.data }
func (m *TLmessages_getBotCallbackAnswer) Setpassword(v *InputCheckPasswordSRP) { m.password = v }
func (m *TLmessages_getBotCallbackAnswer) Getpassword() *InputCheckPasswordSRP  { return m.password }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_getSaved
//
type TLcontacts_getSaved struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:phone_requestCall
//
type TLphone_requestCall struct {
	video     bool
	user_id   *InputUser
	random_id int32
	g_a_hash  []byte
	protocol  *PhoneCallProtocol
}

func (m *TLphone_requestCall) Setvideo(v bool)                  { m.video = v }
func (m *TLphone_requestCall) Getvideo() bool                   { return m.video }
func (m *TLphone_requestCall) Setuser_id(v *InputUser)          { m.user_id = v }
func (m *TLphone_requestCall) Getuser_id() *InputUser           { return m.user_id }
func (m *TLphone_requestCall) Setrandom_id(v int32)             { m.random_id = v }
func (m *TLphone_requestCall) Getrandom_id() int32              { return m.random_id }
func (m *TLphone_requestCall) Setg_a_hash(v []byte)             { m.g_a_hash = v }
func (m *TLphone_requestCall) Getg_a_hash() []byte              { return m.g_a_hash }
func (m *TLphone_requestCall) Setprotocol(v *PhoneCallProtocol) { m.protocol = v }
func (m *TLphone_requestCall) Getprotocol() *PhoneCallProtocol  { return m.protocol }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:phone_acceptCall
//
type TLphone_acceptCall struct {
	peer     *InputPhoneCall
	g_b      []byte
	protocol *PhoneCallProtocol
}

func (m *TLphone_acceptCall) Setpeer(v *InputPhoneCall)        { m.peer = v }
func (m *TLphone_acceptCall) Getpeer() *InputPhoneCall         { return m.peer }
func (m *TLphone_acceptCall) Setg_b(v []byte)                  { m.g_b = v }
func (m *TLphone_acceptCall) Getg_b() []byte                   { return m.g_b }
func (m *TLphone_acceptCall) Setprotocol(v *PhoneCallProtocol) { m.protocol = v }
func (m *TLphone_acceptCall) Getprotocol() *PhoneCallProtocol  { return m.protocol }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:phone_confirmCall
//
type TLphone_confirmCall struct {
	peer            *InputPhoneCall
	g_a             []byte
	key_fingerprint int64
	protocol        *PhoneCallProtocol
}

func (m *TLphone_confirmCall) Setpeer(v *InputPhoneCall)        { m.peer = v }
func (m *TLphone_confirmCall) Getpeer() *InputPhoneCall         { return m.peer }
func (m *TLphone_confirmCall) Setg_a(v []byte)                  { m.g_a = v }
func (m *TLphone_confirmCall) Getg_a() []byte                   { return m.g_a }
func (m *TLphone_confirmCall) Setkey_fingerprint(v int64)       { m.key_fingerprint = v }
func (m *TLphone_confirmCall) Getkey_fingerprint() int64        { return m.key_fingerprint }
func (m *TLphone_confirmCall) Setprotocol(v *PhoneCallProtocol) { m.protocol = v }
func (m *TLphone_confirmCall) Getprotocol() *PhoneCallProtocol  { return m.protocol }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_signUp
//
type TLauth_signUp struct {
	phone_number    string
	phone_code_hash string
	first_name      string
	last_name       string
}

func (m *TLauth_signUp) Setphone_number(v string)    { m.phone_number = v }
func (m *TLauth_signUp) Getphone_number() string     { return m.phone_number }
func (m *TLauth_signUp) Setphone_code_hash(v string) { m.phone_code_hash = v }
func (m *TLauth_signUp) Getphone_code_hash() string  { return m.phone_code_hash }
func (m *TLauth_signUp) Setfirst_name(v string)      { m.first_name = v }
func (m *TLauth_signUp) Getfirst_name() string       { return m.first_name }
func (m *TLauth_signUp) Setlast_name(v string)       { m.last_name = v }
func (m *TLauth_signUp) Getlast_name() string        { return m.last_name }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_signIn
//
type TLauth_signIn struct {
	phone_number    string
	phone_code_hash string
	phone_code      string
}

func (m *TLauth_signIn) Setphone_number(v string)    { m.phone_number = v }
func (m *TLauth_signIn) Getphone_number() string     { return m.phone_number }
func (m *TLauth_signIn) Setphone_code_hash(v string) { m.phone_code_hash = v }
func (m *TLauth_signIn) Getphone_code_hash() string  { return m.phone_code_hash }
func (m *TLauth_signIn) Setphone_code(v string)      { m.phone_code = v }
func (m *TLauth_signIn) Getphone_code() string       { return m.phone_code }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_importAuthorization
//
type TLauth_importAuthorization struct {
	id    int32
	bytes []byte
}

func (m *TLauth_importAuthorization) Setid(v int32)     { m.id = v }
func (m *TLauth_importAuthorization) Getid() int32      { return m.id }
func (m *TLauth_importAuthorization) Setbytes(v []byte) { m.bytes = v }
func (m *TLauth_importAuthorization) Getbytes() []byte  { return m.bytes }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_importBotAuthorization
//
type TLauth_importBotAuthorization struct {
	flags          int32
	api_id         int32
	api_hash       string
	bot_auth_token string
}

func (m *TLauth_importBotAuthorization) Setflags(v int32)           { m.flags = v }
func (m *TLauth_importBotAuthorization) Getflags() int32            { return m.flags }
func (m *TLauth_importBotAuthorization) Setapi_id(v int32)          { m.api_id = v }
func (m *TLauth_importBotAuthorization) Getapi_id() int32           { return m.api_id }
func (m *TLauth_importBotAuthorization) Setapi_hash(v string)       { m.api_hash = v }
func (m *TLauth_importBotAuthorization) Getapi_hash() string        { return m.api_hash }
func (m *TLauth_importBotAuthorization) Setbot_auth_token(v string) { m.bot_auth_token = v }
func (m *TLauth_importBotAuthorization) Getbot_auth_token() string  { return m.bot_auth_token }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_checkPassword
//
type TLauth_checkPassword struct {
	password *InputCheckPasswordSRP
}

func (m *TLauth_checkPassword) Setpassword(v *InputCheckPasswordSRP) { m.password = v }
func (m *TLauth_checkPassword) Getpassword() *InputCheckPasswordSRP  { return m.password }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:auth_recoverPassword
//
type TLauth_recoverPassword struct {
	code string
}

func (m *TLauth_recoverPassword) Setcode(v string) { m.code = v }
func (m *TLauth_recoverPassword) Getcode() string  { return m.code }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_deleteContacts
//
type TLcontacts_deleteContacts struct {
	id []*InputUser
}

func (m *TLcontacts_deleteContacts) Setid(v []*InputUser) { m.id = v }
func (m *TLcontacts_deleteContacts) Getid() []*InputUser  { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendMessage
//
type TLmessages_sendMessage struct {
	no_webpage      bool
	silent          bool
	background      bool
	clear_draft     bool
	peer            *InputPeer
	reply_to_msg_id int32
	message         string
	random_id       int64
	reply_markup    *ReplyMarkup
	entities        []*MessageEntity
	schedule_date   int32
}

func (m *TLmessages_sendMessage) Setno_webpage(v bool)           { m.no_webpage = v }
func (m *TLmessages_sendMessage) Getno_webpage() bool            { return m.no_webpage }
func (m *TLmessages_sendMessage) Setsilent(v bool)               { m.silent = v }
func (m *TLmessages_sendMessage) Getsilent() bool                { return m.silent }
func (m *TLmessages_sendMessage) Setbackground(v bool)           { m.background = v }
func (m *TLmessages_sendMessage) Getbackground() bool            { return m.background }
func (m *TLmessages_sendMessage) Setclear_draft(v bool)          { m.clear_draft = v }
func (m *TLmessages_sendMessage) Getclear_draft() bool           { return m.clear_draft }
func (m *TLmessages_sendMessage) Setpeer(v *InputPeer)           { m.peer = v }
func (m *TLmessages_sendMessage) Getpeer() *InputPeer            { return m.peer }
func (m *TLmessages_sendMessage) Setreply_to_msg_id(v int32)     { m.reply_to_msg_id = v }
func (m *TLmessages_sendMessage) Getreply_to_msg_id() int32      { return m.reply_to_msg_id }
func (m *TLmessages_sendMessage) Setmessage(v string)            { m.message = v }
func (m *TLmessages_sendMessage) Getmessage() string             { return m.message }
func (m *TLmessages_sendMessage) Setrandom_id(v int64)           { m.random_id = v }
func (m *TLmessages_sendMessage) Getrandom_id() int64            { return m.random_id }
func (m *TLmessages_sendMessage) Setreply_markup(v *ReplyMarkup) { m.reply_markup = v }
func (m *TLmessages_sendMessage) Getreply_markup() *ReplyMarkup  { return m.reply_markup }
func (m *TLmessages_sendMessage) Setentities(v []*MessageEntity) { m.entities = v }
func (m *TLmessages_sendMessage) Getentities() []*MessageEntity  { return m.entities }
func (m *TLmessages_sendMessage) Setschedule_date(v int32)       { m.schedule_date = v }
func (m *TLmessages_sendMessage) Getschedule_date() int32        { return m.schedule_date }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendMedia
//
type TLmessages_sendMedia struct {
	silent          bool
	background      bool
	clear_draft     bool
	peer            *InputPeer
	reply_to_msg_id int32
	media           *InputMedia
	message         string
	random_id       int64
	reply_markup    *ReplyMarkup
	entities        []*MessageEntity
	schedule_date   int32
}

func (m *TLmessages_sendMedia) Setsilent(v bool)               { m.silent = v }
func (m *TLmessages_sendMedia) Getsilent() bool                { return m.silent }
func (m *TLmessages_sendMedia) Setbackground(v bool)           { m.background = v }
func (m *TLmessages_sendMedia) Getbackground() bool            { return m.background }
func (m *TLmessages_sendMedia) Setclear_draft(v bool)          { m.clear_draft = v }
func (m *TLmessages_sendMedia) Getclear_draft() bool           { return m.clear_draft }
func (m *TLmessages_sendMedia) Setpeer(v *InputPeer)           { m.peer = v }
func (m *TLmessages_sendMedia) Getpeer() *InputPeer            { return m.peer }
func (m *TLmessages_sendMedia) Setreply_to_msg_id(v int32)     { m.reply_to_msg_id = v }
func (m *TLmessages_sendMedia) Getreply_to_msg_id() int32      { return m.reply_to_msg_id }
func (m *TLmessages_sendMedia) Setmedia(v *InputMedia)         { m.media = v }
func (m *TLmessages_sendMedia) Getmedia() *InputMedia          { return m.media }
func (m *TLmessages_sendMedia) Setmessage(v string)            { m.message = v }
func (m *TLmessages_sendMedia) Getmessage() string             { return m.message }
func (m *TLmessages_sendMedia) Setrandom_id(v int64)           { m.random_id = v }
func (m *TLmessages_sendMedia) Getrandom_id() int64            { return m.random_id }
func (m *TLmessages_sendMedia) Setreply_markup(v *ReplyMarkup) { m.reply_markup = v }
func (m *TLmessages_sendMedia) Getreply_markup() *ReplyMarkup  { return m.reply_markup }
func (m *TLmessages_sendMedia) Setentities(v []*MessageEntity) { m.entities = v }
func (m *TLmessages_sendMedia) Getentities() []*MessageEntity  { return m.entities }
func (m *TLmessages_sendMedia) Setschedule_date(v int32)       { m.schedule_date = v }
func (m *TLmessages_sendMedia) Getschedule_date() int32        { return m.schedule_date }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_forwardMessages
//
type TLmessages_forwardMessages struct {
	silent        bool
	background    bool
	with_my_score bool
	from_peer     *InputPeer
	id            []int32
	random_id     []int64
	to_peer       *InputPeer
	schedule_date int32
}

func (m *TLmessages_forwardMessages) Setsilent(v bool)          { m.silent = v }
func (m *TLmessages_forwardMessages) Getsilent() bool           { return m.silent }
func (m *TLmessages_forwardMessages) Setbackground(v bool)      { m.background = v }
func (m *TLmessages_forwardMessages) Getbackground() bool       { return m.background }
func (m *TLmessages_forwardMessages) Setwith_my_score(v bool)   { m.with_my_score = v }
func (m *TLmessages_forwardMessages) Getwith_my_score() bool    { return m.with_my_score }
func (m *TLmessages_forwardMessages) Setfrom_peer(v *InputPeer) { m.from_peer = v }
func (m *TLmessages_forwardMessages) Getfrom_peer() *InputPeer  { return m.from_peer }
func (m *TLmessages_forwardMessages) Setid(v []int32)           { m.id = v }
func (m *TLmessages_forwardMessages) Getid() []int32            { return m.id }
func (m *TLmessages_forwardMessages) Setrandom_id(v []int64)    { m.random_id = v }
func (m *TLmessages_forwardMessages) Getrandom_id() []int64     { return m.random_id }
func (m *TLmessages_forwardMessages) Setto_peer(v *InputPeer)   { m.to_peer = v }
func (m *TLmessages_forwardMessages) Getto_peer() *InputPeer    { return m.to_peer }
func (m *TLmessages_forwardMessages) Setschedule_date(v int32)  { m.schedule_date = v }
func (m *TLmessages_forwardMessages) Getschedule_date() int32   { return m.schedule_date }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_editChatTitle
//
type TLmessages_editChatTitle struct {
	chat_id int32
	title   string
}

func (m *TLmessages_editChatTitle) Setchat_id(v int32) { m.chat_id = v }
func (m *TLmessages_editChatTitle) Getchat_id() int32  { return m.chat_id }
func (m *TLmessages_editChatTitle) Settitle(v string)  { m.title = v }
func (m *TLmessages_editChatTitle) Gettitle() string   { return m.title }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_editChatPhoto
//
type TLmessages_editChatPhoto struct {
	chat_id int32
	photo   *InputChatPhoto
}

func (m *TLmessages_editChatPhoto) Setchat_id(v int32)         { m.chat_id = v }
func (m *TLmessages_editChatPhoto) Getchat_id() int32          { return m.chat_id }
func (m *TLmessages_editChatPhoto) Setphoto(v *InputChatPhoto) { m.photo = v }
func (m *TLmessages_editChatPhoto) Getphoto() *InputChatPhoto  { return m.photo }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_addChatUser
//
type TLmessages_addChatUser struct {
	chat_id   int32
	user_id   *InputUser
	fwd_limit int32
}

func (m *TLmessages_addChatUser) Setchat_id(v int32)      { m.chat_id = v }
func (m *TLmessages_addChatUser) Getchat_id() int32       { return m.chat_id }
func (m *TLmessages_addChatUser) Setuser_id(v *InputUser) { m.user_id = v }
func (m *TLmessages_addChatUser) Getuser_id() *InputUser  { return m.user_id }
func (m *TLmessages_addChatUser) Setfwd_limit(v int32)    { m.fwd_limit = v }
func (m *TLmessages_addChatUser) Getfwd_limit() int32     { return m.fwd_limit }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_deleteChatUser
//
type TLmessages_deleteChatUser struct {
	chat_id int32
	user_id *InputUser
}

func (m *TLmessages_deleteChatUser) Setchat_id(v int32)      { m.chat_id = v }
func (m *TLmessages_deleteChatUser) Getchat_id() int32       { return m.chat_id }
func (m *TLmessages_deleteChatUser) Setuser_id(v *InputUser) { m.user_id = v }
func (m *TLmessages_deleteChatUser) Getuser_id() *InputUser  { return m.user_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_createChat
//
type TLmessages_createChat struct {
	users []*InputUser
	title string
}

func (m *TLmessages_createChat) Setusers(v []*InputUser) { m.users = v }
func (m *TLmessages_createChat) Getusers() []*InputUser  { return m.users }
func (m *TLmessages_createChat) Settitle(v string)       { m.title = v }
func (m *TLmessages_createChat) Gettitle() string        { return m.title }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_importChatInvite
//
type TLmessages_importChatInvite struct {
	hash string
}

func (m *TLmessages_importChatInvite) Sethash(v string) { m.hash = v }
func (m *TLmessages_importChatInvite) Gethash() string  { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_startBot
//
type TLmessages_startBot struct {
	bot         *InputUser
	peer        *InputPeer
	random_id   int64
	start_param string
}

func (m *TLmessages_startBot) Setbot(v *InputUser)     { m.bot = v }
func (m *TLmessages_startBot) Getbot() *InputUser      { return m.bot }
func (m *TLmessages_startBot) Setpeer(v *InputPeer)    { m.peer = v }
func (m *TLmessages_startBot) Getpeer() *InputPeer     { return m.peer }
func (m *TLmessages_startBot) Setrandom_id(v int64)    { m.random_id = v }
func (m *TLmessages_startBot) Getrandom_id() int64     { return m.random_id }
func (m *TLmessages_startBot) Setstart_param(v string) { m.start_param = v }
func (m *TLmessages_startBot) Getstart_param() string  { return m.start_param }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getAppChangelog
//
type TLhelp_getAppChangelog struct {
	prev_app_version string
}

func (m *TLhelp_getAppChangelog) Setprev_app_version(v string) { m.prev_app_version = v }
func (m *TLhelp_getAppChangelog) Getprev_app_version() string  { return m.prev_app_version }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_createChannel
//
type TLchannels_createChannel struct {
	broadcast bool
	megagroup bool
	title     string
	about     string
	geo_point *InputGeoPoint
	address   string
}

func (m *TLchannels_createChannel) Setbroadcast(v bool)           { m.broadcast = v }
func (m *TLchannels_createChannel) Getbroadcast() bool            { return m.broadcast }
func (m *TLchannels_createChannel) Setmegagroup(v bool)           { m.megagroup = v }
func (m *TLchannels_createChannel) Getmegagroup() bool            { return m.megagroup }
func (m *TLchannels_createChannel) Settitle(v string)             { m.title = v }
func (m *TLchannels_createChannel) Gettitle() string              { return m.title }
func (m *TLchannels_createChannel) Setabout(v string)             { m.about = v }
func (m *TLchannels_createChannel) Getabout() string              { return m.about }
func (m *TLchannels_createChannel) Setgeo_point(v *InputGeoPoint) { m.geo_point = v }
func (m *TLchannels_createChannel) Getgeo_point() *InputGeoPoint  { return m.geo_point }
func (m *TLchannels_createChannel) Setaddress(v string)           { m.address = v }
func (m *TLchannels_createChannel) Getaddress() string            { return m.address }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_editAdmin
//
type TLchannels_editAdmin struct {
	channel      *InputChannel
	user_id      *InputUser
	admin_rights *ChatAdminRights
	rank         string
}

func (m *TLchannels_editAdmin) Setchannel(v *InputChannel)         { m.channel = v }
func (m *TLchannels_editAdmin) Getchannel() *InputChannel          { return m.channel }
func (m *TLchannels_editAdmin) Setuser_id(v *InputUser)            { m.user_id = v }
func (m *TLchannels_editAdmin) Getuser_id() *InputUser             { return m.user_id }
func (m *TLchannels_editAdmin) Setadmin_rights(v *ChatAdminRights) { m.admin_rights = v }
func (m *TLchannels_editAdmin) Getadmin_rights() *ChatAdminRights  { return m.admin_rights }
func (m *TLchannels_editAdmin) Setrank(v string)                   { m.rank = v }
func (m *TLchannels_editAdmin) Getrank() string                    { return m.rank }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_editTitle
//
type TLchannels_editTitle struct {
	channel *InputChannel
	title   string
}

func (m *TLchannels_editTitle) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_editTitle) Getchannel() *InputChannel  { return m.channel }
func (m *TLchannels_editTitle) Settitle(v string)          { m.title = v }
func (m *TLchannels_editTitle) Gettitle() string           { return m.title }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_editPhoto
//
type TLchannels_editPhoto struct {
	channel *InputChannel
	photo   *InputChatPhoto
}

func (m *TLchannels_editPhoto) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_editPhoto) Getchannel() *InputChannel  { return m.channel }
func (m *TLchannels_editPhoto) Setphoto(v *InputChatPhoto) { m.photo = v }
func (m *TLchannels_editPhoto) Getphoto() *InputChatPhoto  { return m.photo }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_joinChannel
//
type TLchannels_joinChannel struct {
	channel *InputChannel
}

func (m *TLchannels_joinChannel) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_joinChannel) Getchannel() *InputChannel  { return m.channel }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_leaveChannel
//
type TLchannels_leaveChannel struct {
	channel *InputChannel
}

func (m *TLchannels_leaveChannel) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_leaveChannel) Getchannel() *InputChannel  { return m.channel }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_inviteToChannel
//
type TLchannels_inviteToChannel struct {
	channel *InputChannel
	users   []*InputUser
}

func (m *TLchannels_inviteToChannel) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_inviteToChannel) Getchannel() *InputChannel  { return m.channel }
func (m *TLchannels_inviteToChannel) Setusers(v []*InputUser)    { m.users = v }
func (m *TLchannels_inviteToChannel) Getusers() []*InputUser     { return m.users }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_deleteChannel
//
type TLchannels_deleteChannel struct {
	channel *InputChannel
}

func (m *TLchannels_deleteChannel) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_deleteChannel) Getchannel() *InputChannel  { return m.channel }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_migrateChat
//
type TLmessages_migrateChat struct {
	chat_id int32
}

func (m *TLmessages_migrateChat) Setchat_id(v int32) { m.chat_id = v }
func (m *TLmessages_migrateChat) Getchat_id() int32  { return m.chat_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendInlineBotResult
//
type TLmessages_sendInlineBotResult struct {
	silent          bool
	background      bool
	clear_draft     bool
	hide_via        bool
	peer            *InputPeer
	reply_to_msg_id int32
	random_id       int64
	query_id        int64
	id              string
	schedule_date   int32
}

func (m *TLmessages_sendInlineBotResult) Setsilent(v bool)           { m.silent = v }
func (m *TLmessages_sendInlineBotResult) Getsilent() bool            { return m.silent }
func (m *TLmessages_sendInlineBotResult) Setbackground(v bool)       { m.background = v }
func (m *TLmessages_sendInlineBotResult) Getbackground() bool        { return m.background }
func (m *TLmessages_sendInlineBotResult) Setclear_draft(v bool)      { m.clear_draft = v }
func (m *TLmessages_sendInlineBotResult) Getclear_draft() bool       { return m.clear_draft }
func (m *TLmessages_sendInlineBotResult) Sethide_via(v bool)         { m.hide_via = v }
func (m *TLmessages_sendInlineBotResult) Gethide_via() bool          { return m.hide_via }
func (m *TLmessages_sendInlineBotResult) Setpeer(v *InputPeer)       { m.peer = v }
func (m *TLmessages_sendInlineBotResult) Getpeer() *InputPeer        { return m.peer }
func (m *TLmessages_sendInlineBotResult) Setreply_to_msg_id(v int32) { m.reply_to_msg_id = v }
func (m *TLmessages_sendInlineBotResult) Getreply_to_msg_id() int32  { return m.reply_to_msg_id }
func (m *TLmessages_sendInlineBotResult) Setrandom_id(v int64)       { m.random_id = v }
func (m *TLmessages_sendInlineBotResult) Getrandom_id() int64        { return m.random_id }
func (m *TLmessages_sendInlineBotResult) Setquery_id(v int64)        { m.query_id = v }
func (m *TLmessages_sendInlineBotResult) Getquery_id() int64         { return m.query_id }
func (m *TLmessages_sendInlineBotResult) Setid(v string)             { m.id = v }
func (m *TLmessages_sendInlineBotResult) Getid() string              { return m.id }
func (m *TLmessages_sendInlineBotResult) Setschedule_date(v int32)   { m.schedule_date = v }
func (m *TLmessages_sendInlineBotResult) Getschedule_date() int32    { return m.schedule_date }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_toggleSignatures
//
type TLchannels_toggleSignatures struct {
	channel *InputChannel
	enabled *Bool
}

func (m *TLchannels_toggleSignatures) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_toggleSignatures) Getchannel() *InputChannel  { return m.channel }
func (m *TLchannels_toggleSignatures) Setenabled(v *Bool)         { m.enabled = v }
func (m *TLchannels_toggleSignatures) Getenabled() *Bool          { return m.enabled }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_editMessage
//
type TLmessages_editMessage struct {
	no_webpage    bool
	peer          *InputPeer
	id            int32
	message       string
	media         *InputMedia
	reply_markup  *ReplyMarkup
	entities      []*MessageEntity
	schedule_date int32
}

func (m *TLmessages_editMessage) Setno_webpage(v bool)           { m.no_webpage = v }
func (m *TLmessages_editMessage) Getno_webpage() bool            { return m.no_webpage }
func (m *TLmessages_editMessage) Setpeer(v *InputPeer)           { m.peer = v }
func (m *TLmessages_editMessage) Getpeer() *InputPeer            { return m.peer }
func (m *TLmessages_editMessage) Setid(v int32)                  { m.id = v }
func (m *TLmessages_editMessage) Getid() int32                   { return m.id }
func (m *TLmessages_editMessage) Setmessage(v string)            { m.message = v }
func (m *TLmessages_editMessage) Getmessage() string             { return m.message }
func (m *TLmessages_editMessage) Setmedia(v *InputMedia)         { m.media = v }
func (m *TLmessages_editMessage) Getmedia() *InputMedia          { return m.media }
func (m *TLmessages_editMessage) Setreply_markup(v *ReplyMarkup) { m.reply_markup = v }
func (m *TLmessages_editMessage) Getreply_markup() *ReplyMarkup  { return m.reply_markup }
func (m *TLmessages_editMessage) Setentities(v []*MessageEntity) { m.entities = v }
func (m *TLmessages_editMessage) Getentities() []*MessageEntity  { return m.entities }
func (m *TLmessages_editMessage) Setschedule_date(v int32)       { m.schedule_date = v }
func (m *TLmessages_editMessage) Getschedule_date() int32        { return m.schedule_date }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getAllDrafts
//
type TLmessages_getAllDrafts struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_setGameScore
//
type TLmessages_setGameScore struct {
	edit_message bool
	force        bool
	peer         *InputPeer
	id           int32
	user_id      *InputUser
	score        int32
}

func (m *TLmessages_setGameScore) Setedit_message(v bool)  { m.edit_message = v }
func (m *TLmessages_setGameScore) Getedit_message() bool   { return m.edit_message }
func (m *TLmessages_setGameScore) Setforce(v bool)         { m.force = v }
func (m *TLmessages_setGameScore) Getforce() bool          { return m.force }
func (m *TLmessages_setGameScore) Setpeer(v *InputPeer)    { m.peer = v }
func (m *TLmessages_setGameScore) Getpeer() *InputPeer     { return m.peer }
func (m *TLmessages_setGameScore) Setid(v int32)           { m.id = v }
func (m *TLmessages_setGameScore) Getid() int32            { return m.id }
func (m *TLmessages_setGameScore) Setuser_id(v *InputUser) { m.user_id = v }
func (m *TLmessages_setGameScore) Getuser_id() *InputUser  { return m.user_id }
func (m *TLmessages_setGameScore) Setscore(v int32)        { m.score = v }
func (m *TLmessages_setGameScore) Getscore() int32         { return m.score }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:phone_discardCall
//
type TLphone_discardCall struct {
	video         bool
	peer          *InputPhoneCall
	duration      int32
	reason        *PhoneCallDiscardReason
	connection_id int64
}

func (m *TLphone_discardCall) Setvideo(v bool)                     { m.video = v }
func (m *TLphone_discardCall) Getvideo() bool                      { return m.video }
func (m *TLphone_discardCall) Setpeer(v *InputPhoneCall)           { m.peer = v }
func (m *TLphone_discardCall) Getpeer() *InputPhoneCall            { return m.peer }
func (m *TLphone_discardCall) Setduration(v int32)                 { m.duration = v }
func (m *TLphone_discardCall) Getduration() int32                  { return m.duration }
func (m *TLphone_discardCall) Setreason(v *PhoneCallDiscardReason) { m.reason = v }
func (m *TLphone_discardCall) Getreason() *PhoneCallDiscardReason  { return m.reason }
func (m *TLphone_discardCall) Setconnection_id(v int64)            { m.connection_id = v }
func (m *TLphone_discardCall) Getconnection_id() int64             { return m.connection_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:phone_setCallRating
//
type TLphone_setCallRating struct {
	user_initiative bool
	peer            *InputPhoneCall
	rating          int32
	comment         string
}

func (m *TLphone_setCallRating) Setuser_initiative(v bool) { m.user_initiative = v }
func (m *TLphone_setCallRating) Getuser_initiative() bool  { return m.user_initiative }
func (m *TLphone_setCallRating) Setpeer(v *InputPhoneCall) { m.peer = v }
func (m *TLphone_setCallRating) Getpeer() *InputPhoneCall  { return m.peer }
func (m *TLphone_setCallRating) Setrating(v int32)         { m.rating = v }
func (m *TLphone_setCallRating) Getrating() int32          { return m.rating }
func (m *TLphone_setCallRating) Setcomment(v string)       { m.comment = v }
func (m *TLphone_setCallRating) Getcomment() string        { return m.comment }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_editBanned
//
type TLchannels_editBanned struct {
	channel       *InputChannel
	user_id       *InputUser
	banned_rights *ChatBannedRights
}

func (m *TLchannels_editBanned) Setchannel(v *InputChannel)           { m.channel = v }
func (m *TLchannels_editBanned) Getchannel() *InputChannel            { return m.channel }
func (m *TLchannels_editBanned) Setuser_id(v *InputUser)              { m.user_id = v }
func (m *TLchannels_editBanned) Getuser_id() *InputUser               { return m.user_id }
func (m *TLchannels_editBanned) Setbanned_rights(v *ChatBannedRights) { m.banned_rights = v }
func (m *TLchannels_editBanned) Getbanned_rights() *ChatBannedRights  { return m.banned_rights }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendScreenshotNotification
//
type TLmessages_sendScreenshotNotification struct {
	peer            *InputPeer
	reply_to_msg_id int32
	random_id       int64
}

func (m *TLmessages_sendScreenshotNotification) Setpeer(v *InputPeer)       { m.peer = v }
func (m *TLmessages_sendScreenshotNotification) Getpeer() *InputPeer        { return m.peer }
func (m *TLmessages_sendScreenshotNotification) Setreply_to_msg_id(v int32) { m.reply_to_msg_id = v }
func (m *TLmessages_sendScreenshotNotification) Getreply_to_msg_id() int32  { return m.reply_to_msg_id }
func (m *TLmessages_sendScreenshotNotification) Setrandom_id(v int64)       { m.random_id = v }
func (m *TLmessages_sendScreenshotNotification) Getrandom_id() int64        { return m.random_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_togglePreHistoryHidden
//
type TLchannels_togglePreHistoryHidden struct {
	channel *InputChannel
	enabled *Bool
}

func (m *TLchannels_togglePreHistoryHidden) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_togglePreHistoryHidden) Getchannel() *InputChannel  { return m.channel }
func (m *TLchannels_togglePreHistoryHidden) Setenabled(v *Bool)         { m.enabled = v }
func (m *TLchannels_togglePreHistoryHidden) Getenabled() *Bool          { return m.enabled }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendMultiMedia
//
type TLmessages_sendMultiMedia struct {
	silent          bool
	background      bool
	clear_draft     bool
	peer            *InputPeer
	reply_to_msg_id int32
	multi_media     []*InputSingleMedia
	schedule_date   int32
}

func (m *TLmessages_sendMultiMedia) Setsilent(v bool)                     { m.silent = v }
func (m *TLmessages_sendMultiMedia) Getsilent() bool                      { return m.silent }
func (m *TLmessages_sendMultiMedia) Setbackground(v bool)                 { m.background = v }
func (m *TLmessages_sendMultiMedia) Getbackground() bool                  { return m.background }
func (m *TLmessages_sendMultiMedia) Setclear_draft(v bool)                { m.clear_draft = v }
func (m *TLmessages_sendMultiMedia) Getclear_draft() bool                 { return m.clear_draft }
func (m *TLmessages_sendMultiMedia) Setpeer(v *InputPeer)                 { m.peer = v }
func (m *TLmessages_sendMultiMedia) Getpeer() *InputPeer                  { return m.peer }
func (m *TLmessages_sendMultiMedia) Setreply_to_msg_id(v int32)           { m.reply_to_msg_id = v }
func (m *TLmessages_sendMultiMedia) Getreply_to_msg_id() int32            { return m.reply_to_msg_id }
func (m *TLmessages_sendMultiMedia) Setmulti_media(v []*InputSingleMedia) { m.multi_media = v }
func (m *TLmessages_sendMultiMedia) Getmulti_media() []*InputSingleMedia  { return m.multi_media }
func (m *TLmessages_sendMultiMedia) Setschedule_date(v int32)             { m.schedule_date = v }
func (m *TLmessages_sendMultiMedia) Getschedule_date() int32              { return m.schedule_date }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_updatePinnedMessage
//
type TLmessages_updatePinnedMessage struct {
	silent     bool
	unpin      bool
	pm_oneside bool
	peer       *InputPeer
	id         int32
}

func (m *TLmessages_updatePinnedMessage) Setsilent(v bool)     { m.silent = v }
func (m *TLmessages_updatePinnedMessage) Getsilent() bool      { return m.silent }
func (m *TLmessages_updatePinnedMessage) Setunpin(v bool)      { m.unpin = v }
func (m *TLmessages_updatePinnedMessage) Getunpin() bool       { return m.unpin }
func (m *TLmessages_updatePinnedMessage) Setpm_oneside(v bool) { m.pm_oneside = v }
func (m *TLmessages_updatePinnedMessage) Getpm_oneside() bool  { return m.pm_oneside }
func (m *TLmessages_updatePinnedMessage) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_updatePinnedMessage) Getpeer() *InputPeer  { return m.peer }
func (m *TLmessages_updatePinnedMessage) Setid(v int32)        { m.id = v }
func (m *TLmessages_updatePinnedMessage) Getid() int32         { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:account_getNotifyExceptions
//
type TLaccount_getNotifyExceptions struct {
	compare_sound bool
	peer          *InputNotifyPeer
}

func (m *TLaccount_getNotifyExceptions) Setcompare_sound(v bool)    { m.compare_sound = v }
func (m *TLaccount_getNotifyExceptions) Getcompare_sound() bool     { return m.compare_sound }
func (m *TLaccount_getNotifyExceptions) Setpeer(v *InputNotifyPeer) { m.peer = v }
func (m *TLaccount_getNotifyExceptions) Getpeer() *InputNotifyPeer  { return m.peer }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendVote
//
type TLmessages_sendVote struct {
	peer    *InputPeer
	msg_id  int32
	options [][]byte
}

func (m *TLmessages_sendVote) Setpeer(v *InputPeer)  { m.peer = v }
func (m *TLmessages_sendVote) Getpeer() *InputPeer   { return m.peer }
func (m *TLmessages_sendVote) Setmsg_id(v int32)     { m.msg_id = v }
func (m *TLmessages_sendVote) Getmsg_id() int32      { return m.msg_id }
func (m *TLmessages_sendVote) Setoptions(v [][]byte) { m.options = v }
func (m *TLmessages_sendVote) Getoptions() [][]byte  { return m.options }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getPollResults
//
type TLmessages_getPollResults struct {
	peer   *InputPeer
	msg_id int32
}

func (m *TLmessages_getPollResults) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_getPollResults) Getpeer() *InputPeer  { return m.peer }
func (m *TLmessages_getPollResults) Setmsg_id(v int32)    { m.msg_id = v }
func (m *TLmessages_getPollResults) Getmsg_id() int32     { return m.msg_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_editChatDefaultBannedRights
//
type TLmessages_editChatDefaultBannedRights struct {
	peer          *InputPeer
	banned_rights *ChatBannedRights
}

func (m *TLmessages_editChatDefaultBannedRights) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_editChatDefaultBannedRights) Getpeer() *InputPeer  { return m.peer }
func (m *TLmessages_editChatDefaultBannedRights) Setbanned_rights(v *ChatBannedRights) {
	m.banned_rights = v
}
func (m *TLmessages_editChatDefaultBannedRights) Getbanned_rights() *ChatBannedRights {
	return m.banned_rights
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:folders_editPeerFolders
//
type TLfolders_editPeerFolders struct {
	folder_peers []*InputFolderPeer
}

func (m *TLfolders_editPeerFolders) Setfolder_peers(v []*InputFolderPeer) { m.folder_peers = v }
func (m *TLfolders_editPeerFolders) Getfolder_peers() []*InputFolderPeer  { return m.folder_peers }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:folders_deleteFolder
//
type TLfolders_deleteFolder struct {
	folder_id int32
}

func (m *TLfolders_deleteFolder) Setfolder_id(v int32) { m.folder_id = v }
func (m *TLfolders_deleteFolder) Getfolder_id() int32  { return m.folder_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_addContact
//
type TLcontacts_addContact struct {
	add_phone_privacy_exception bool
	id                          *InputUser
	first_name                  string
	last_name                   string
	phone                       string
}

func (m *TLcontacts_addContact) Setadd_phone_privacy_exception(v bool) {
	m.add_phone_privacy_exception = v
}
func (m *TLcontacts_addContact) Getadd_phone_privacy_exception() bool {
	return m.add_phone_privacy_exception
}
func (m *TLcontacts_addContact) Setid(v *InputUser)     { m.id = v }
func (m *TLcontacts_addContact) Getid() *InputUser      { return m.id }
func (m *TLcontacts_addContact) Setfirst_name(v string) { m.first_name = v }
func (m *TLcontacts_addContact) Getfirst_name() string  { return m.first_name }
func (m *TLcontacts_addContact) Setlast_name(v string)  { m.last_name = v }
func (m *TLcontacts_addContact) Getlast_name() string   { return m.last_name }
func (m *TLcontacts_addContact) Setphone(v string)      { m.phone = v }
func (m *TLcontacts_addContact) Getphone() string       { return m.phone }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_acceptContact
//
type TLcontacts_acceptContact struct {
	id *InputUser
}

func (m *TLcontacts_acceptContact) Setid(v *InputUser) { m.id = v }
func (m *TLcontacts_acceptContact) Getid() *InputUser  { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_editCreator
//
type TLchannels_editCreator struct {
	channel  *InputChannel
	user_id  *InputUser
	password *InputCheckPasswordSRP
}

func (m *TLchannels_editCreator) Setchannel(v *InputChannel)           { m.channel = v }
func (m *TLchannels_editCreator) Getchannel() *InputChannel            { return m.channel }
func (m *TLchannels_editCreator) Setuser_id(v *InputUser)              { m.user_id = v }
func (m *TLchannels_editCreator) Getuser_id() *InputUser               { return m.user_id }
func (m *TLchannels_editCreator) Setpassword(v *InputCheckPasswordSRP) { m.password = v }
func (m *TLchannels_editCreator) Getpassword() *InputCheckPasswordSRP  { return m.password }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_getLocated
//
type TLcontacts_getLocated struct {
	background   bool
	geo_point    *InputGeoPoint
	self_expires int32
}

func (m *TLcontacts_getLocated) Setbackground(v bool)          { m.background = v }
func (m *TLcontacts_getLocated) Getbackground() bool           { return m.background }
func (m *TLcontacts_getLocated) Setgeo_point(v *InputGeoPoint) { m.geo_point = v }
func (m *TLcontacts_getLocated) Getgeo_point() *InputGeoPoint  { return m.geo_point }
func (m *TLcontacts_getLocated) Setself_expires(v int32)       { m.self_expires = v }
func (m *TLcontacts_getLocated) Getself_expires() int32        { return m.self_expires }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_toggleSlowMode
//
type TLchannels_toggleSlowMode struct {
	channel *InputChannel
	seconds int32
}

func (m *TLchannels_toggleSlowMode) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_toggleSlowMode) Getchannel() *InputChannel  { return m.channel }
func (m *TLchannels_toggleSlowMode) Setseconds(v int32)         { m.seconds = v }
func (m *TLchannels_toggleSlowMode) Getseconds() int32          { return m.seconds }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_sendScheduledMessages
//
type TLmessages_sendScheduledMessages struct {
	peer *InputPeer
	id   []int32
}

func (m *TLmessages_sendScheduledMessages) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_sendScheduledMessages) Getpeer() *InputPeer  { return m.peer }
func (m *TLmessages_sendScheduledMessages) Setid(v []int32)      { m.id = v }
func (m *TLmessages_sendScheduledMessages) Getid() []int32       { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_deleteScheduledMessages
//
type TLmessages_deleteScheduledMessages struct {
	peer *InputPeer
	id   []int32
}

func (m *TLmessages_deleteScheduledMessages) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_deleteScheduledMessages) Getpeer() *InputPeer  { return m.peer }
func (m *TLmessages_deleteScheduledMessages) Setid(v []int32)      { m.id = v }
func (m *TLmessages_deleteScheduledMessages) Getid() []int32       { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:contacts_blockFromReplies
//
type TLcontacts_blockFromReplies struct {
	delete_message bool
	delete_history bool
	report_spam    bool
	msg_id         int32
}

func (m *TLcontacts_blockFromReplies) Setdelete_message(v bool) { m.delete_message = v }
func (m *TLcontacts_blockFromReplies) Getdelete_message() bool  { return m.delete_message }
func (m *TLcontacts_blockFromReplies) Setdelete_history(v bool) { m.delete_history = v }
func (m *TLcontacts_blockFromReplies) Getdelete_history() bool  { return m.delete_history }
func (m *TLcontacts_blockFromReplies) Setreport_spam(v bool)    { m.report_spam = v }
func (m *TLcontacts_blockFromReplies) Getreport_spam() bool     { return m.report_spam }
func (m *TLcontacts_blockFromReplies) Setmsg_id(v int32)        { m.msg_id = v }
func (m *TLcontacts_blockFromReplies) Getmsg_id() int32         { return m.msg_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_deleteHistory
//
type TLmessages_deleteHistory struct {
	just_clear bool
	revoke     bool
	peer       *InputPeer
	max_id     int32
}

func (m *TLmessages_deleteHistory) Setjust_clear(v bool) { m.just_clear = v }
func (m *TLmessages_deleteHistory) Getjust_clear() bool  { return m.just_clear }
func (m *TLmessages_deleteHistory) Setrevoke(v bool)     { m.revoke = v }
func (m *TLmessages_deleteHistory) Getrevoke() bool      { return m.revoke }
func (m *TLmessages_deleteHistory) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_deleteHistory) Getpeer() *InputPeer  { return m.peer }
func (m *TLmessages_deleteHistory) Setmax_id(v int32)    { m.max_id = v }
func (m *TLmessages_deleteHistory) Getmax_id() int32     { return m.max_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_deleteUserHistory
//
type TLchannels_deleteUserHistory struct {
	channel *InputChannel
	user_id *InputUser
}

func (m *TLchannels_deleteUserHistory) Setchannel(v *InputChannel) { m.channel = v }
func (m *TLchannels_deleteUserHistory) Getchannel() *InputChannel  { return m.channel }
func (m *TLchannels_deleteUserHistory) Setuser_id(v *InputUser)    { m.user_id = v }
func (m *TLchannels_deleteUserHistory) Getuser_id() *InputUser     { return m.user_id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_readMentions
//
type TLmessages_readMentions struct {
	peer *InputPeer
}

func (m *TLmessages_readMentions) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_readMentions) Getpeer() *InputPeer  { return m.peer }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_unpinAllMessages
//
type TLmessages_unpinAllMessages struct {
	peer *InputPeer
}

func (m *TLmessages_unpinAllMessages) Setpeer(v *InputPeer) { m.peer = v }
func (m *TLmessages_unpinAllMessages) Getpeer() *InputPeer  { return m.peer }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:messages_getSavedGifs
//
type TLmessages_getSavedGifs struct {
	hash int32
}

func (m *TLmessages_getSavedGifs) Sethash(v int32) { m.hash = v }
func (m *TLmessages_getSavedGifs) Gethash() int32  { return m.hash }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:payments_getSavedInfo
//
type TLpayments_getSavedInfo struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getCdnConfig
//
type TLhelp_getCdnConfig struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:users_getFullUser
//
type TLusers_getFullUser struct {
	id *InputUser
}

func (m *TLusers_getFullUser) Setid(v *InputUser) { m.id = v }
func (m *TLusers_getFullUser) Getid() *InputUser  { return m.id }

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:help_getSupport
//
type TLhelp_getSupport struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:Params:channels_getInactiveChannels
//
type TLchannels_getInactiveChannels struct {
}

///////////////////////////////////////////////////////////////////////////////
// Methods:VectorType:WallPaper
//
type VWallPaper struct {
	data []*WallPaper
}

///////////////////////////////////////////////////////////////////////////////
// Methods:VectorType:DialogPeer
//
type VDialogPeer struct {
	data []*DialogPeer
}

///////////////////////////////////////////////////////////////////////////////
// Methods:VectorType:User
//
type VUser struct {
	data []*User
}

///////////////////////////////////////////////////////////////////////////////
// Methods:VectorType:messages_SearchCounter
//
type Vmessages_SearchCounter struct {
	data []*messages_SearchCounter
}

///////////////////////////////////////////////////////////////////////////////
// Methods:VectorType:DialogFilterSuggested
//
type VDialogFilterSuggested struct {
	data []*DialogFilterSuggested
}

///////////////////////////////////////////////////////////////////////////////
// Methods:VectorType:ContactStatus
//
type VContactStatus struct {
	data []*ContactStatus
}

///////////////////////////////////////////////////////////////////////////////
// Methods:VectorType:ReceivedNotifyMessage
//
type VReceivedNotifyMessage struct {
	data []*ReceivedNotifyMessage
}

///////////////////////////////////////////////////////////////////////////////
// Methods:VectorType:SecureValue
//
type VSecureValue struct {
	data []*SecureValue
}

///////////////////////////////////////////////////////////////////////////////
// Methods:VectorType:MessageRange
//
type VMessageRange struct {
	data []*MessageRange
}

///////////////////////////////////////////////////////////////////////////////
// Methods:VectorType:int32
//
type Vint32 struct {
	data []*int32
}

///////////////////////////////////////////////////////////////////////////////
// Methods:VectorType:StickerSetCovered
//
type VStickerSetCovered struct {
	data []*StickerSetCovered
}

///////////////////////////////////////////////////////////////////////////////
// Methods:VectorType:LangPackLanguage
//
type VLangPackLanguage struct {
	data []*LangPackLanguage
}

///////////////////////////////////////////////////////////////////////////////
// Methods:VectorType:SavedContact
//
type VSavedContact struct {
	data []*SavedContact
}

///////////////////////////////////////////////////////////////////////////////
// Methods:VectorType:LangPackString
//
type VLangPackString struct {
	data []*LangPackString
}

///////////////////////////////////////////////////////////////////////////////
// Methods:VectorType:EmojiLanguage
//
type VEmojiLanguage struct {
	data []*EmojiLanguage
}

///////////////////////////////////////////////////////////////////////////////
// Methods:VectorType:int64
//
type Vint64 struct {
	data []*int64
}

///////////////////////////////////////////////////////////////////////////////
// Methods:VectorType:FileHash
//
type VFileHash struct {
	data []*FileHash
}

///////////////////////////////////////////////////////////////////////////////
// Methods:VectorType:DialogFilter
//
type VDialogFilter struct {
	data []*DialogFilter
}

///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_search
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_getPassportConfig
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getAttachedStickers
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getNotifySettings
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_exportMessageLink
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getAuthorizationForm
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getPassword
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getFullChat
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_getFullChannel
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getEmojiURL
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getAutoDownloadSettings
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_getSupportName
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getPeerSettings
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:payments_validateRequestedInfo
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:auth_exportAuthorization
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_getCountriesList
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_getAppUpdate
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getAuthorizations
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_getTopPeers
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:upload_getFile
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:langpack_getLanguage
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:langpack_getLanguages
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getDialogs
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_getAppConfig
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getPeerDialogs
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getPinnedDialogs
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getInlineBotResults
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:payments_getPaymentReceipt
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:users_getUsers
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_updateProfile
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_updateUsername
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_changePhone
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_initTakeoutSession
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:stats_getMessageStats
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_getInviteText
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getStickers
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:updates_getChannelDifference
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:stats_loadAsyncGraph
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:auth_logOut
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:auth_resetAuthorizations
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:auth_bindTempAuthKey
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_registerDevice
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_unregisterDevice
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_updateNotifySettings
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_resetNotifySettings
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_updateStatus
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_reportPeer
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_deleteByPhones
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_block
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_unblock
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_setTyping
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_reportSpam
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_report
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:upload_saveFilePart
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_discardEncryption
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_setEncryptedTyping
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_readEncryptedHistory
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_reportEncryptedSpam
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:upload_saveBigFilePart
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_checkUsername
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_deleteAccount
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_setAccountTTL
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_updateDeviceLocked
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_resetAuthorization
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_updatePasswordSettings
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_uninstallStickerSet
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_readHistory
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_reportSpam
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_checkUsername
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_updateUsername
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_editChatAdmin
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_reorderStickerSets
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_saveGif
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_setInlineBotResults
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:auth_cancelCode
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_editInlineBotMessage
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_setBotCallbackAnswer
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_resetTopPeerRating
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_saveDraft
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_readFeaturedStickers
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_saveRecentSticker
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_clearRecentStickers
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_confirmPhone
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:auth_dropTempAuthKeys
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_setInlineGameScore
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_setBotUpdatesStatus
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_toggleDialogPin
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_reorderPinnedDialogs
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:bots_answerWebhookJSONQuery
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:payments_clearSavedInfo
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_setBotShippingResults
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_setBotPrecheckoutResults
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:phone_receivedCall
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:phone_saveCallDebug
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_setStickers
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_faveSticker
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_readMessageContents
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_resetSaved
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_deleteHistory
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_resetWebAuthorization
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_resetWebAuthorizations
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_acceptTermsOfService
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_deleteSecureValue
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:users_setSecureValueErrors
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_acceptAuthorization
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_verifyPhone
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_verifyEmail
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_finishTakeoutSession
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_markDialogUnread
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_toggleTopPeers
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_clearAllDrafts
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_saveAppLog
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_confirmPasswordEmail
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_resendPasswordEmail
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_cancelPasswordEmail
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getContactSignUpNotification
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_setContactSignUpNotification
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_editChatAbout
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_saveWallPaper
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_installWallPaper
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_resetWallPapers
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_saveAutoDownloadSettings
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_setDiscussionGroup
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_hidePeerSettingsBar
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_editLocation
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_saveTheme
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_installTheme
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_setContentSettings
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_toggleStickerSets
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_updateDialogFilter
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_updateDialogFiltersOrder
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:bots_setBotCommands
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_hidePromoData
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:phone_sendSignalingData
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_dismissSuggestion
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_readDiscussion
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getContentSettings
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_getRecentMeUrls
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:updates_getDifference
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_exportChatInvite
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getDialogFilters
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getWebAuthorizations
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_getTermsOfServiceUpdate
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_importContacts
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_sendVerifyEmailCode
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_getAdminLog
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_installStickerSet
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getMessageEditData
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getAllStickers
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getMaskStickers
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getOnlines
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getGameHighScores
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getInlineGameHighScores
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getThemes
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:updates_getState
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getWebPagePreview
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_uploadMedia
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_checkChatInvite
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getWebPage
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getAllSecureValues
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getSecureValue
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_saveSecureValue
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:langpack_getStrings
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_getDeepLinkInfo
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_sendEncrypted
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_sendEncryptedFile
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_sendEncryptedService
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getMultiWallPapers
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getWallPaper
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_uploadWallPaper
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getPollVotes
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getDiscussionMessage
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getWallPapers
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getRecentStickers
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_getParticipants
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_getUserInfo
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_editUserInfo
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_getStatuses
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_receivedMessages
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:upload_getCdnFile
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_readHistory
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_deleteMessages
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_readMessageContents
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_deleteMessages
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:auth_exportLoginToken
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:auth_importLoginToken
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:langpack_getLangPack
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:langpack_getDifference
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:photos_updateProfilePhoto
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:photos_uploadProfilePhoto
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:payments_getPaymentForm
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getStickerSet
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:stickers_createStickerSet
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:stickers_removeStickerFromSet
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:stickers_changeStickerPosition
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:stickers_addStickerToSet
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:stickers_setStickerSetThumb
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getPrivacy
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_setPrivacy
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getSearchCounters
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getFavedStickers
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:auth_requestPasswordRecovery
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getSuggestedDialogFilters
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getDocumentByHash
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_uploadTheme
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_getConfig
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:photos_deletePhotos
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_receivedQueue
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:upload_reuploadCdnFile
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:upload_getCdnFileHashes
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:upload_getFileHashes
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_getNearestDc
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getDialogUnreadMarks
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getChats
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_getChannels
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_getAdminedPublicChannels
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getCommonChats
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getAllChats
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_getLeftChannels
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_getGroupsForDiscussion
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_requestUrlAuth
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_acceptUrlAuth
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getPasswordSettings
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:stats_getMegagroupStats
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_resolveUsername
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getFeaturedStickers
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getOldFeaturedStickers
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getArchivedStickers
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:bots_sendCustomRequest
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:phone_getCallConfig
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_requestEncryption
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_acceptEncryption
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getEmojiKeywordsLanguages
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getAccountTTL
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_getPromoData
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_getContactIDs
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getMessagesViews
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getGlobalPrivacySettings
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_setGlobalPrivacySettings
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_uploadEncryptedFile
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_getBlocked
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:photos_getUserPhotos
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:payments_sendPaymentForm
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_getParticipant
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getDhConfig
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:upload_getWebFile
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_createTheme
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_updateTheme
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getTheme
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getEmojiKeywords
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getEmojiKeywordsDifference
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getSplitRanges
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getTmpPassword
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:invokeAfterMsg
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:invokeAfterMsgs
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:initConnection
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:invokeWithLayer
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:invokeWithoutUpdates
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:invokeWithMessagesRange
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:invokeWithTakeout
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_searchStickerSets
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getMessages
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getHistory
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_search
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_getMessages
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_searchGlobal
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getUnreadMentions
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getRecentLocations
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getScheduledHistory
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getScheduledMessages
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getReplies
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:stats_getMessagePublicForwards
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_getContacts
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getStatsURL
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:auth_acceptLoginToken
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:auth_sendCode
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_sendChangePhoneCode
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:auth_resendCode
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_sendConfirmPhoneCode
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_sendVerifyPhoneCode
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:payments_getBankCardData
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:stats_getBroadcastStats
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getBotCallbackAnswer
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_getSaved
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:phone_requestCall
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:phone_acceptCall
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:phone_confirmCall
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:auth_signUp
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:auth_signIn
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:auth_importAuthorization
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:auth_importBotAuthorization
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:auth_checkPassword
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:auth_recoverPassword
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_deleteHistory
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_deleteUserHistory
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_readMentions
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_unpinAllMessages
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getSavedGifs
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:payments_getSavedInfo
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_getCdnConfig
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:users_getFullUser
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_getSupport
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_getInactiveChannels
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_deleteContacts
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_sendMessage
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_sendMedia
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_forwardMessages
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_editChatTitle
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_editChatPhoto
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_addChatUser
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_deleteChatUser
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_createChat
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_importChatInvite
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_startBot
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:help_getAppChangelog
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_createChannel
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_editAdmin
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_editTitle
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_editPhoto
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_joinChannel
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_leaveChannel
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_inviteToChannel
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_deleteChannel
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_migrateChat
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_sendInlineBotResult
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_toggleSignatures
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_editMessage
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getAllDrafts
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_setGameScore
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:phone_discardCall
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:phone_setCallRating
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_editBanned
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_sendScreenshotNotification
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_togglePreHistoryHidden
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_sendMultiMedia
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_updatePinnedMessage
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:account_getNotifyExceptions
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_sendVote
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_getPollResults
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_editChatDefaultBannedRights
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:folders_editPeerFolders
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:folders_deleteFolder
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_addContact
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_acceptContact
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_editCreator
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_getLocated
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:channels_toggleSlowMode
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_sendScheduledMessages
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:messages_deleteScheduledMessages
//
///////////////////////////////////////////////////////////////////////////////
// MethodCodec:New:contacts_blockFromReplies
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:receivedNotifyMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageCaption
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:poll
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_termsOfServiceUpdateEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_termsOfServiceUpdate
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputEncryptedChat
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:payments_bankCardData
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_messages
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_messagesSlice
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_channelMessages
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_messagesNotModified
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_termsOfService
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessageID
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessageReplyTo
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessagePinned
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessageCallbackQuery
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:recentMeUrlUnknown
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:recentMeUrlUser
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:recentMeUrlChat
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:recentMeUrlChatInvite
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:recentMeUrlStickerSet
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPrivacyValueAllowContacts
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPrivacyValueAllowAll
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPrivacyValueAllowUsers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPrivacyValueDisallowContacts
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPrivacyValueDisallowAll
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPrivacyValueDisallowUsers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPrivacyValueAllowChatParticipants
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPrivacyValueDisallowChatParticipants
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageListItemText
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageListItemBlocks
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:webPageAttributeTheme
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:urlAuthResultRequest
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:urlAuthResultAccepted
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:urlAuthResultDefault
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:chatParticipant
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:chatParticipantCreator
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:chatParticipantAdmin
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelMessagesFilterEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelMessagesFilter
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_countryCode
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:auth_codeTypeSms
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:auth_codeTypeCall
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:auth_codeTypeFlashCall
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:account_webAuthorizations
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_savedGifsNotModified
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_savedGifs
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:statsGraphAsync
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:statsGraphError
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:statsGraph
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageTableCell
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:baseThemeClassic
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:baseThemeDay
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:baseThemeNight
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:baseThemeTinted
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:baseThemeArctic
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updates_state
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_highScores
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:dialog
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:dialogFolder
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueHash
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:textEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:textPlain
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:textBold
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:textItalic
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:textUnderline
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:textStrike
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:textFixed
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:textUrl
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:textEmail
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:textConcat
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:textSubscript
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:textSuperscript
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:textMarked
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:textPhone
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:textImage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:textAnchor
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:chatEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:chat
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:chatForbidden
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channel
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelForbidden
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:langPackString
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:langPackStringPluralized
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:langPackStringDeleted
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:dialogFilter
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:emojiLanguage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:account_themesNotModified
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:account_themes
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:peerLocated
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:peerSelfLocated
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:account_sentEmailCode
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputTheme
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputThemeSlug
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:draftMessageEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:draftMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:payments_paymentResult
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:payments_paymentVerificationNeeded
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_foundStickerSetsNotModified
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_foundStickerSets
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:game
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:webPageEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:webPagePending
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:webPage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:webPageNotModified
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputStickeredMediaPhoto
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputStickeredMediaDocument
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channels_adminLogResults
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_votesList
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:securePasswordKdfAlgoUnknown
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:securePasswordKdfAlgoPBKDF2HMACSHA512iter100000
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:securePasswordKdfAlgoSHA512
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:payments_savedInfo
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessagesFilterEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessagesFilterPhotos
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessagesFilterVideo
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessagesFilterPhotoVideo
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessagesFilterDocument
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessagesFilterUrl
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessagesFilterGif
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessagesFilterVoice
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessagesFilterMusic
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessagesFilterChatPhotos
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessagesFilterPhoneCalls
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessagesFilterRoundVoice
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessagesFilterRoundVideo
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessagesFilterMyMentions
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessagesFilterGeo
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessagesFilterContacts
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessagesFilterPinned
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:shippingOption
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:contacts_found
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:savedPhoneContact
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:codeSettings
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:jsonNull
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:jsonBool
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:jsonNumber
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:jsonString
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:jsonArray
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:jsonObject
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:emojiKeyword
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:emojiKeywordDeleted
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:userStatusEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:userStatusOnline
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:userStatusOffline
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:userStatusRecently
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:userStatusLastWeek
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:userStatusLastMonth
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:phoneCallDiscardReasonMissed
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:phoneCallDiscardReasonDisconnect
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:phoneCallDiscardReasonHangup
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:phoneCallDiscardReasonBusy
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:botCommand
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:accountDaysTTL
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_appUpdate
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_noAppUpdate
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueErrorData
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueErrorFrontSide
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueErrorReverseSide
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueErrorSelfie
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueErrorFile
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueErrorFiles
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueError
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueErrorTranslationFile
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueErrorTranslationFiles
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:authorization
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:account_privacyRules
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionChangeTitle
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionChangeAbout
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionChangeUsername
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionChangePhoto
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionToggleInvites
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionToggleSignatures
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionUpdatePinned
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionEditMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionDeleteMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionParticipantJoin
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionParticipantLeave
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionParticipantInvite
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionParticipantToggleBan
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionParticipantToggleAdmin
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionChangeStickerSet
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionTogglePreHistoryHidden
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionDefaultBannedRights
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionStopPoll
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionChangeLinkedChat
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionChangeLocation
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventActionToggleSlowMode
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:webAuthorization
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channels_channelParticipants
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channels_channelParticipantsNotModified
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:maskCoords
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:peerNotifySettings
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockUnsupported
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockTitle
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockSubtitle
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockAuthorDate
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockHeader
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockSubheader
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockParagraph
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockPreformatted
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockFooter
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockDivider
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockAnchor
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockList
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockBlockquote
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockPullquote
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockPhoto
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockVideo
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockCover
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockEmbed
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockEmbedPost
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockCollage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockSlideshow
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockChannel
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockAudio
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockKicker
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockTable
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockOrderedList
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockDetails
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockRelatedArticles
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageBlockMap
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:webDocument
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:webDocumentNoProxy
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPhoneContact
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_featuredStickersNotModified
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_featuredStickers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pollAnswerVoters
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_passportConfigNotModified
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_passportConfig
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:keyboardButtonRow
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:botInlineMessageMediaAuto
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:botInlineMessageText
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:botInlineMessageMediaGeo
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:botInlineMessageMediaVenue
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:botInlineMessageMediaContact
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:popularContact
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelParticipant
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelParticipantSelf
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelParticipantCreator
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelParticipantAdmin
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelParticipantBanned
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelParticipantLeft
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_countriesListNotModified
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_countriesList
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:auth_authorization
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:auth_authorizationSignUpRequired
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPhotoEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPhoto
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputCheckPasswordEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputCheckPasswordSRP
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:contacts_topPeersNotModified
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:contacts_topPeers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:contacts_topPeersDisabled
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageReplyHeader
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_country
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:folder
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputFileLocation
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputEncryptedFileLocation
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputDocumentFileLocation
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputSecureFileLocation
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputTakeoutFileLocation
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPhotoFileLocation
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPhotoLegacyFileLocation
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPeerPhotoFileLocation
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputStickerSetThumb
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:contacts_contactsNotModified
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:contacts_contacts
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_favedStickersNotModified
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_favedStickers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channels_channelParticipant
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_allStickersNotModified
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_allStickers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:page
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_messageEditData
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:statsAbsValueAndPrev
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_inviteText
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:error
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_chats
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_chatsSlice
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageRelatedArticle
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:geoPointEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:geoPoint
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:chatPhotoEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:chatPhoto
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:message
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageService
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:importedContact
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:storage_fileUnknown
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:storage_filePartial
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:storage_fileJpeg
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:storage_fileGif
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:storage_filePng
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:storage_filePdf
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:storage_fileMp3
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:storage_fileMov
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:storage_fileMp4
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:storage_fileWebp
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_deepLinkInfoEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_deepLinkInfo
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageTableRow
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:fileHash
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:contactStatus
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:account_contentSettings
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputBotInlineResult
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputBotInlineResultPhoto
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputBotInlineResultDocument
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputBotInlineResultGame
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelLocationEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelLocation
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputBotInlineMessageMediaAuto
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputBotInlineMessageText
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputBotInlineMessageMediaGeo
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputBotInlineMessageMediaVenue
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputBotInlineMessageMediaContact
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputBotInlineMessageGame
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:contact
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:botInlineResult
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:botInlineMediaResult
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEvent
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updatesTooLong
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateShortMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateShortChatMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateShort
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updatesCombined
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updates
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateShortSentMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:documentAttributeImageSize
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:documentAttributeAnimated
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:documentAttributeSticker
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:documentAttributeVideo
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:documentAttributeAudio
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:documentAttributeFilename
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:documentAttributeHasStickers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:photoEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:photo
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:topPeerCategoryPeers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputSingleMedia
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_recentMeUrls
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:langPackLanguage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionChatCreate
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionChatEditTitle
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionChatEditPhoto
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionChatDeletePhoto
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionChatAddUser
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionChatDeleteUser
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionChatJoinedByLink
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionChannelCreate
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionChatMigrateTo
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionChannelMigrateFrom
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionPinMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionHistoryClear
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionGameScore
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionPaymentSentMe
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionPaymentSent
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionPhoneCall
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionScreenshotTaken
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionCustomAction
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionBotAllowed
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionSecureValuesSentMe
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionSecureValuesSent
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionContactSignUp
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageActionGeoProximityReached
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:notifyPeer
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:notifyUsers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:notifyChats
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:notifyBroadcasts
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMediaEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMediaUploadedPhoto
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMediaPhoto
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMediaGeoPoint
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMediaContact
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMediaUploadedDocument
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMediaDocument
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMediaVenue
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMediaPhotoExternal
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMediaDocumentExternal
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMediaGame
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMediaInvoice
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMediaGeoLive
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMediaPoll
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMediaDice
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:auth_sentCodeTypeApp
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:auth_sentCodeTypeSms
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:auth_sentCodeTypeCall
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:auth_sentCodeTypeFlashCall
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:payments_paymentForm
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:passwordKdfAlgoUnknown
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:statsGroupTopPoster
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:dcOption
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:account_tmpPassword
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_archivedStickers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPeerNotifySettings
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputBotInlineMessageID
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:dialogPeer
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:dialogPeerFolder
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:cdnPublicKey
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inlineBotSwitchPM
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:account_passwordInputSettings
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_botResults
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:exportedMessageLink
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPeerEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPeerSelf
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPeerChat
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPeerUser
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPeerChannel
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPeerUserFromMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPeerChannelFromMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureSecretSettings
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageUserVote
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageUserVoteInputOption
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageUserVoteMultiple
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:highScore
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_affectedHistory
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:stats_megagroupStats
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:themeSettings
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_dialogs
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_dialogsSlice
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_dialogsNotModified
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageRange
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:upload_webFile
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageEntityUnknown
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageEntityMention
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageEntityHashtag
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageEntityBotCommand
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageEntityUrl
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageEntityEmail
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageEntityBold
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageEntityItalic
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageEntityCode
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageEntityPre
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageEntityTextUrl
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageEntityMentionName
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputMessageEntityMentionName
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageEntityPhone
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageEntityCashtag
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageEntityUnderline
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageEntityStrike
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageEntityBlockquote
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageEntityBankCard
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:stats_messageStats
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:sendMessageTypingAction
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:sendMessageCancelAction
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:sendMessageRecordVideoAction
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:sendMessageUploadVideoAction
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:sendMessageRecordAudioAction
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:sendMessageUploadAudioAction
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:sendMessageUploadPhotoAction
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:sendMessageUploadDocumentAction
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:sendMessageGeoLocationAction
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:sendMessageChooseContactAction
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:sendMessageGamePlayAction
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:sendMessageRecordRoundAction
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:sendMessageUploadRoundAction
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputWebDocument
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:folderPeer
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:dialogFilterSuggested
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:account_passwordSettings
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:userFull
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:stats_broadcastStats
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:auth_exportedAuthorization
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:stickerSet
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureRequiredType
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureRequiredTypeOneOf
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputThemeSettings
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:documentEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:document
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:account_wallPapersNotModified
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:account_wallPapers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_botCallbackAnswer
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputDialogPeer
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputDialogPeerFolder
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:globalPrivacySettings
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:contacts_blocked
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:contacts_blockedSlice
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:paymentCharge
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageMediaEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageMediaPhoto
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageMediaGeo
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageMediaContact
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageMediaUnsupported
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageMediaDocument
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageMediaWebPage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageMediaVenue
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageMediaGame
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageMediaInvoice
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageMediaGeoLive
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageMediaPoll
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageMediaDice
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:labeledPrice
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:cdnConfig
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputClientProxy
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputChannelEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputChannel
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputChannelFromMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureCredentialsEncrypted
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:auth_passwordRecovery
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_recentStickersNotModified
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_recentStickers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:account_password
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:config
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:jsonObjectValue
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:phoneCallEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:phoneCallWaiting
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:phoneCallRequested
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:phoneCallAccepted
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:phoneCall
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:phoneCallDiscarded
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPaymentCredentialsSaved
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPaymentCredentials
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPaymentCredentialsApplePay
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPaymentCredentialsAndroidPay
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_affectedMessages
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:account_autoDownloadSettings
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:chatParticipantsForbidden
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:chatParticipants
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:chatBannedRights
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:wallPaperSettings
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:paymentRequestedInfo
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:account_authorizations
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_discussionMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_inactiveChats
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValue
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:userEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:user
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputGeoPointEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputGeoPoint
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:postAddress
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:boolFalse
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:boolTrue
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPrivacyKeyStatusTimestamp
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPrivacyKeyChatInvite
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPrivacyKeyPhoneCall
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPrivacyKeyPhoneP2P
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPrivacyKeyForwards
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPrivacyKeyProfilePhoto
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPrivacyKeyPhoneNumber
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPrivacyKeyAddedByPhone
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputDocumentEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputDocument
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:statsDateRangeDays
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:chatFull
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelFull
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:invoice
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:true
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:auth_sentCode
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pollAnswer
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:emojiKeywordsDifference
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:statsGroupTopInviter
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputSecureFileUploaded
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputSecureFile
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureFileEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureFile
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:peerUser
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:peerChat
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:peerChannel
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelAdminLogEventsFilter
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_promoDataEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_promoData
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:keyboardButton
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:keyboardButtonUrl
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:keyboardButtonCallback
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:keyboardButtonRequestPhone
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:keyboardButtonRequestGeoLocation
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:keyboardButtonSwitchInline
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:keyboardButtonGame
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:keyboardButtonBuy
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:keyboardButtonUrlAuth
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputKeyboardButtonUrlAuth
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:keyboardButtonRequestPoll
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:auth_loginToken
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:auth_loginTokenMigrateTo
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:auth_loginTokenSuccess
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_stickersNotModified
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_stickers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:statsURL
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputWebFileLocation
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputWebFileGeoPointLocation
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_peerDialogs
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:contacts_resolvedPeer
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:theme
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:stickerPack
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:paymentSavedCredentialsCard
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:photos_photos
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:photos_photosSlice
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageInteractionCounters
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:nearestDc
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:chatInviteEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:chatInviteExported
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_chatFull
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:peerSettings
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:null
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:botInfo
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelParticipantsRecent
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelParticipantsAdmins
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelParticipantsKicked
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelParticipantsBots
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelParticipantsBanned
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelParticipantsSearch
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelParticipantsContacts
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:channelParticipantsMentions
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_messageViews
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:chatInviteAlready
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:chatInvite
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:chatInvitePeek
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:chatOnlines
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updates_differenceEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updates_difference
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updates_differenceSlice
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updates_differenceTooLong
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:topPeerCategoryBotsPM
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:topPeerCategoryBotsInline
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:topPeerCategoryCorrespondents
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:topPeerCategoryGroups
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:topPeerCategoryChannels
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:topPeerCategoryPhoneCalls
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:topPeerCategoryForwardUsers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:topPeerCategoryForwardChats
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:replyKeyboardHide
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:replyKeyboardForceReply
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:replyKeyboardMarkup
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:replyInlineMarkup
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputFolderPeer
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:statsGroupTopAdmin
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:wallPaper
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:wallPaperNoFile
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_searchCounter
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updates_channelDifferenceEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updates_channelDifferenceTooLong
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updates_channelDifference
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputGameID
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputGameShortName
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:privacyValueAllowContacts
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:privacyValueAllowAll
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:privacyValueAllowUsers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:privacyValueDisallowContacts
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:privacyValueDisallowAll
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:privacyValueDisallowUsers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:privacyValueAllowChatParticipants
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:privacyValueDisallowChatParticipants
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputNotifyPeer
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputNotifyUsers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputNotifyChats
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputNotifyBroadcasts
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageReplies
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:privacyKeyStatusTimestamp
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:privacyKeyChatInvite
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:privacyKeyPhoneCall
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:privacyKeyPhoneP2P
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:privacyKeyForwards
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:privacyKeyProfilePhoto
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:privacyKeyPhoneNumber
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:privacyKeyAddedByPhone
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_support
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:topPeer
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_supportName
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:photoSizeEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:photoSize
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:photoCachedSize
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:photoStrippedSize
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:photoSizeProgressive
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:photoPathSize
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputSecureValue
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:langPackDifference
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:fileLocationToBeDeprecated
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:phoneConnection
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:phoneConnectionWebrtc
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputUserEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputUserSelf
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputUser
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputUserFromMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputFile
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputFileBig
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:videoSize
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:account_takeout
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:upload_file
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:upload_fileCdnRedirect
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:peerBlocked
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:upload_cdnFileReuploadNeeded
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:upload_cdnFile
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:phone_phoneCall
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:securePlainPhone
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:securePlainEmail
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateNewMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateMessageID
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateDeleteMessages
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateUserTyping
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateChatUserTyping
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateChatParticipants
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateUserStatus
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateUserName
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateUserPhoto
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateNewEncryptedMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateEncryptedChatTyping
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateEncryption
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateEncryptedMessagesRead
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateChatParticipantAdd
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateChatParticipantDelete
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateDcOptions
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateNotifySettings
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateServiceNotification
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updatePrivacy
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateUserPhone
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateReadHistoryInbox
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateReadHistoryOutbox
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateWebPage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateReadMessagesContents
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateChannelTooLong
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateChannel
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateNewChannelMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateReadChannelInbox
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateDeleteChannelMessages
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateChannelMessageViews
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateChatParticipantAdmin
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateNewStickerSet
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateStickerSetsOrder
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateStickerSets
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateSavedGifs
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateBotInlineQuery
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateBotInlineSend
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateEditChannelMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateBotCallbackQuery
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateEditMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateInlineBotCallbackQuery
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateReadChannelOutbox
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateDraftMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateReadFeaturedStickers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateRecentStickers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateConfig
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updatePtsChanged
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateChannelWebPage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateDialogPinned
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updatePinnedDialogs
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateBotWebhookJSON
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateBotWebhookJSONQuery
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateBotShippingQuery
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateBotPrecheckoutQuery
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updatePhoneCall
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateLangPackTooLong
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateLangPack
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateFavedStickers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateChannelReadMessagesContents
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateContactsReset
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateChannelAvailableMessages
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateDialogUnreadMark
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateMessagePoll
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateChatDefaultBannedRights
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateFolderPeers
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updatePeerSettings
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updatePeerLocated
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateNewScheduledMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateDeleteScheduledMessages
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateTheme
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateGeoLiveViewed
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateLoginToken
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateMessagePollVote
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateDialogFilter
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateDialogFilterOrder
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateDialogFilters
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updatePhoneCallSignalingData
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateChannelParticipant
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateChannelMessageForwards
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateReadChannelDiscussionInbox
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateReadChannelDiscussionOutbox
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updatePeerBlocked
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updateChannelUserTyping
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updatePinnedMessages
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:updatePinnedChannelMessages
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:contacts_importedContacts
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:bankCardOpenUrl
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputAppEvent
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputEncryptedFileEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputEncryptedFileUploaded
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputEncryptedFile
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputEncryptedFileBigUploaded
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:encryptedChatEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:encryptedChatWaiting
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:encryptedChatRequested
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:encryptedChat
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:encryptedChatDiscarded
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputStickerSetItem
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputChatPhotoEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputChatUploadedPhoto
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputChatPhoto
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueTypePersonalDetails
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueTypePassport
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueTypeDriverLicense
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueTypeIdentityCard
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueTypeInternalPassport
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueTypeAddress
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueTypeUtilityBill
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueTypeBankStatement
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueTypeRentalAgreement
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueTypePassportRegistration
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueTypeTemporaryRegistration
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueTypePhone
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureValueTypeEmail
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:dataJSON
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:restrictionReason
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_dhConfigNotModified
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_dhConfig
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageFwdHeader
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputPhoneCall
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:photos_photo
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputReportReasonSpam
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputReportReasonViolence
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputReportReasonPornography
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputReportReasonChildAbuse
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputReportReasonOther
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputReportReasonCopyright
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputReportReasonGeoIrrelevant
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:autoDownloadSettings
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messageViews
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_stickerSet
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_stickerSetInstallResultSuccess
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_stickerSetInstallResultArchive
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:chatAdminRights
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:phoneCallProtocol
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:emojiURL
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_sentEncryptedMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:messages_sentEncryptedFile
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:encryptedFileEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:encryptedFile
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputWallPaper
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputWallPaperSlug
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputWallPaperNoFile
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:payments_validatedRequestedInfo
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:userProfilePhotoEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:userProfilePhoto
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputStickerSetEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputStickerSetID
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputStickerSetShortName
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputStickerSetAnimatedEmoji
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:inputStickerSetDice
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:account_authorizationForm
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:encryptedMessage
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:encryptedMessageService
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:payments_paymentReceipt
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageListOrderedItemText
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pageListOrderedItemBlocks
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:stickerSetCovered
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:stickerSetMultiCovered
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:statsPercentValue
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:pollResults
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:secureData
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_userInfoEmpty
//
///////////////////////////////////////////////////////////////////////////////
// ConstructorsCodec:New:help_userInfo
//
